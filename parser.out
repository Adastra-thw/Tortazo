Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> top_statement_list
Rule 2     top_statement_list -> top_statement_list top_statement
Rule 3     top_statement_list -> empty
Rule 4     top_statement -> statement
Rule 5     top_statement -> function_declaration_statement
Rule 6     top_statement -> class_declaration_statement
Rule 7     top_statement -> HALT_COMPILER LPAREN RPAREN SEMI
Rule 8     top_statement -> NAMESPACE namespace_name SEMI
Rule 9     top_statement -> NAMESPACE LBRACE top_statement_list RBRACE
Rule 10    top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE
Rule 11    top_statement -> CONST constant_declarations SEMI
Rule 12    top_statement -> USE use_declarations SEMI
Rule 13    use_declarations -> use_declarations COMMA use_declaration
Rule 14    use_declarations -> use_declaration
Rule 15    use_declaration -> namespace_name
Rule 16    use_declaration -> NS_SEPARATOR namespace_name
Rule 17    use_declaration -> namespace_name AS STRING
Rule 18    use_declaration -> NS_SEPARATOR namespace_name AS STRING
Rule 19    constant_declarations -> constant_declarations COMMA constant_declaration
Rule 20    constant_declarations -> constant_declaration
Rule 21    constant_declaration -> STRING EQUALS static_scalar
Rule 22    inner_statement_list -> inner_statement_list inner_statement
Rule 23    inner_statement_list -> empty
Rule 24    inner_statement -> statement
Rule 25    inner_statement -> function_declaration_statement
Rule 26    inner_statement -> class_declaration_statement
Rule 27    inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI
Rule 28    statement -> LBRACE inner_statement_list RBRACE
Rule 29    statement -> IF LPAREN expr RPAREN statement elseif_list else_single
Rule 30    statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
Rule 31    statement -> WHILE LPAREN expr RPAREN while_statement
Rule 32    statement -> DO statement WHILE LPAREN expr RPAREN SEMI
Rule 33    statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
Rule 34    statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
Rule 35    statement -> SWITCH LPAREN expr RPAREN switch_case_list
Rule 36    statement -> BREAK SEMI
Rule 37    statement -> BREAK expr SEMI
Rule 38    statement -> CONTINUE SEMI
Rule 39    statement -> CONTINUE expr SEMI
Rule 40    statement -> RETURN SEMI
Rule 41    statement -> RETURN expr SEMI
Rule 42    statement -> GLOBAL global_var_list SEMI
Rule 43    statement -> STATIC static_var_list SEMI
Rule 44    statement -> ECHO echo_expr_list SEMI
Rule 45    statement -> INLINE_HTML
Rule 46    statement -> expr SEMI
Rule 47    statement -> UNSET LPAREN unset_variables RPAREN SEMI
Rule 48    statement -> SEMI
Rule 49    statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches
Rule 50    additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE
Rule 51    additional_catches -> empty
Rule 52    statement -> THROW expr SEMI
Rule 53    statement -> DECLARE LPAREN declare_list RPAREN declare_statement
Rule 54    declare_list -> STRING EQUALS static_scalar
Rule 55    declare_list -> declare_list COMMA STRING EQUALS static_scalar
Rule 56    declare_statement -> statement
Rule 57    declare_statement -> COLON inner_statement_list ENDDECLARE SEMI
Rule 58    elseif_list -> empty
Rule 59    elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement
Rule 60    else_single -> empty
Rule 61    else_single -> ELSE statement
Rule 62    new_elseif_list -> empty
Rule 63    new_elseif_list -> new_elseif_list ELSEIF LPAREN expr RPAREN COLON inner_statement_list
Rule 64    new_else_single -> empty
Rule 65    new_else_single -> ELSE COLON inner_statement_list
Rule 66    while_statement -> statement
Rule 67    while_statement -> COLON inner_statement_list ENDWHILE SEMI
Rule 68    for_expr -> empty
Rule 69    for_expr -> non_empty_for_expr
Rule 70    non_empty_for_expr -> non_empty_for_expr COMMA expr
Rule 71    non_empty_for_expr -> expr
Rule 72    for_statement -> statement
Rule 73    for_statement -> COLON inner_statement_list ENDFOR SEMI
Rule 74    foreach_variable -> VARIABLE
Rule 75    foreach_variable -> AND VARIABLE
Rule 76    foreach_optional_arg -> empty
Rule 77    foreach_optional_arg -> DOUBLE_ARROW foreach_variable
Rule 78    foreach_statement -> statement
Rule 79    foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI
Rule 80    switch_case_list -> LBRACE case_list RBRACE
Rule 81    switch_case_list -> LBRACE SEMI case_list RBRACE
Rule 82    switch_case_list -> COLON case_list ENDSWITCH SEMI
Rule 83    switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI
Rule 84    case_list -> empty
Rule 85    case_list -> case_list CASE expr case_separator inner_statement_list
Rule 86    case_list -> case_list DEFAULT case_separator inner_statement_list
Rule 87    case_separator -> COLON
Rule 88    case_separator -> SEMI
Rule 89    global_var_list -> global_var_list COMMA global_var
Rule 90    global_var_list -> global_var
Rule 91    global_var -> VARIABLE
Rule 92    global_var -> DOLLAR variable
Rule 93    global_var -> DOLLAR LBRACE expr RBRACE
Rule 94    static_var_list -> static_var_list COMMA static_var
Rule 95    static_var_list -> static_var
Rule 96    static_var -> VARIABLE EQUALS static_scalar
Rule 97    static_var -> VARIABLE
Rule 98    echo_expr_list -> echo_expr_list COMMA expr
Rule 99    echo_expr_list -> expr
Rule 100   unset_variables -> unset_variables COMMA unset_variable
Rule 101   unset_variables -> unset_variable
Rule 102   unset_variable -> variable
Rule 103   function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
Rule 104   class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE
Rule 105   class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE
Rule 106   class_entry_type -> CLASS
Rule 107   class_entry_type -> ABSTRACT CLASS
Rule 108   class_entry_type -> FINAL CLASS
Rule 109   extends_from -> empty
Rule 110   extends_from -> EXTENDS fully_qualified_class_name
Rule 111   fully_qualified_class_name -> namespace_name
Rule 112   fully_qualified_class_name -> NS_SEPARATOR namespace_name
Rule 113   fully_qualified_class_name -> NAMESPACE NS_SEPARATOR namespace_name
Rule 114   implements_list -> IMPLEMENTS interface_list
Rule 115   implements_list -> empty
Rule 116   class_statement_list -> class_statement_list class_statement
Rule 117   class_statement_list -> empty
Rule 118   class_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body
Rule 119   class_statement -> variable_modifiers class_variable_declaration SEMI
Rule 120   class_statement -> class_constant_declaration SEMI
Rule 121   class_variable_declaration -> class_variable_declaration COMMA VARIABLE EQUALS static_scalar
Rule 122   class_variable_declaration -> VARIABLE EQUALS static_scalar
Rule 123   class_variable_declaration -> class_variable_declaration COMMA VARIABLE
Rule 124   class_variable_declaration -> VARIABLE
Rule 125   class_constant_declaration -> class_constant_declaration COMMA STRING EQUALS static_scalar
Rule 126   class_constant_declaration -> CONST STRING EQUALS static_scalar
Rule 127   interface_list -> interface_list COMMA fully_qualified_class_name
Rule 128   interface_list -> fully_qualified_class_name
Rule 129   interface_extends_list -> EXTENDS interface_list
Rule 130   interface_extends_list -> empty
Rule 131   variable_modifiers -> non_empty_member_modifiers
Rule 132   variable_modifiers -> VAR
Rule 133   method_modifiers -> non_empty_member_modifiers
Rule 134   method_modifiers -> empty
Rule 135   method_body -> LBRACE inner_statement_list RBRACE
Rule 136   method_body -> SEMI
Rule 137   non_empty_member_modifiers -> non_empty_member_modifiers member_modifier
Rule 138   non_empty_member_modifiers -> member_modifier
Rule 139   member_modifier -> PUBLIC
Rule 140   member_modifier -> PROTECTED
Rule 141   member_modifier -> PRIVATE
Rule 142   member_modifier -> STATIC
Rule 143   member_modifier -> ABSTRACT
Rule 144   member_modifier -> FINAL
Rule 145   is_reference -> AND
Rule 146   is_reference -> empty
Rule 147   parameter_list -> parameter_list COMMA parameter
Rule 148   parameter_list -> parameter
Rule 149   parameter_list -> empty
Rule 150   parameter -> VARIABLE
Rule 151   parameter -> class_name VARIABLE
Rule 152   parameter -> AND VARIABLE
Rule 153   parameter -> class_name AND VARIABLE
Rule 154   parameter -> VARIABLE EQUALS static_scalar
Rule 155   parameter -> class_name VARIABLE EQUALS static_scalar
Rule 156   parameter -> AND VARIABLE EQUALS static_scalar
Rule 157   parameter -> class_name AND VARIABLE EQUALS static_scalar
Rule 158   expr -> variable
Rule 159   expr -> variable EQUALS expr
Rule 160   expr -> variable EQUALS AND expr
Rule 161   expr -> NEW class_name_reference ctor_arguments
Rule 162   class_name_reference -> class_name
Rule 163   class_name_reference -> dynamic_class_name_reference
Rule 164   class_name -> namespace_name
Rule 165   class_name -> NS_SEPARATOR namespace_name
Rule 166   class_name -> NAMESPACE NS_SEPARATOR namespace_name
Rule 167   class_name -> STATIC
Rule 168   dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties
Rule 169   dynamic_class_name_reference -> base_variable
Rule 170   dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property
Rule 171   dynamic_class_name_variable_properties -> empty
Rule 172   dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property
Rule 173   ctor_arguments -> LPAREN function_call_parameter_list RPAREN
Rule 174   ctor_arguments -> empty
Rule 175   expr -> CLONE expr
Rule 176   expr -> LIST LPAREN assignment_list RPAREN EQUALS expr
Rule 177   assignment_list -> assignment_list COMMA assignment_list_element
Rule 178   assignment_list -> assignment_list_element
Rule 179   assignment_list_element -> variable
Rule 180   assignment_list_element -> empty
Rule 181   assignment_list_element -> LIST LPAREN assignment_list RPAREN
Rule 182   variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
Rule 183   variable -> base_variable_with_function_calls
Rule 184   base_variable_with_function_calls -> base_variable
Rule 185   base_variable_with_function_calls -> function_call
Rule 186   function_call -> namespace_name LPAREN function_call_parameter_list RPAREN
Rule 187   function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
Rule 188   function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
Rule 189   function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
Rule 190   function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
Rule 191   function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
Rule 192   function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
Rule 193   function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN
Rule 194   method_or_not -> LPAREN function_call_parameter_list RPAREN
Rule 195   method_or_not -> empty
Rule 196   variable_properties -> variable_properties variable_property
Rule 197   variable_properties -> empty
Rule 198   variable_property -> OBJECT_OPERATOR object_property method_or_not
Rule 199   base_variable -> simple_indirect_reference
Rule 200   base_variable -> static_member
Rule 201   simple_indirect_reference -> DOLLAR simple_indirect_reference
Rule 202   simple_indirect_reference -> reference_variable
Rule 203   static_member -> class_name DOUBLE_COLON variable_without_objects
Rule 204   static_member -> variable_class_name DOUBLE_COLON variable_without_objects
Rule 205   variable_class_name -> reference_variable
Rule 206   reference_variable -> reference_variable LBRACKET dim_offset RBRACKET
Rule 207   reference_variable -> reference_variable LBRACE expr RBRACE
Rule 208   reference_variable -> compound_variable
Rule 209   compound_variable -> VARIABLE
Rule 210   compound_variable -> DOLLAR LBRACE expr RBRACE
Rule 211   dim_offset -> expr
Rule 212   dim_offset -> empty
Rule 213   object_property -> variable_name object_dim_list
Rule 214   object_property -> variable_without_objects
Rule 215   object_dim_list -> empty
Rule 216   object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET
Rule 217   object_dim_list -> object_dim_list LBRACE expr RBRACE
Rule 218   variable_name -> STRING
Rule 219   variable_name -> LBRACE expr RBRACE
Rule 220   variable_without_objects -> simple_indirect_reference
Rule 221   expr -> scalar
Rule 222   expr -> ARRAY LPAREN array_pair_list RPAREN
Rule 223   array_pair_list -> empty
Rule 224   array_pair_list -> non_empty_array_pair_list possible_comma
Rule 225   non_empty_array_pair_list -> non_empty_array_pair_list COMMA AND variable
Rule 226   non_empty_array_pair_list -> non_empty_array_pair_list COMMA expr
Rule 227   non_empty_array_pair_list -> AND variable
Rule 228   non_empty_array_pair_list -> expr
Rule 229   non_empty_array_pair_list -> non_empty_array_pair_list COMMA expr DOUBLE_ARROW AND variable
Rule 230   non_empty_array_pair_list -> non_empty_array_pair_list COMMA expr DOUBLE_ARROW expr
Rule 231   non_empty_array_pair_list -> expr DOUBLE_ARROW AND variable
Rule 232   non_empty_array_pair_list -> expr DOUBLE_ARROW expr
Rule 233   possible_comma -> empty
Rule 234   possible_comma -> COMMA
Rule 235   function_call_parameter_list -> function_call_parameter_list COMMA function_call_parameter
Rule 236   function_call_parameter_list -> function_call_parameter
Rule 237   function_call_parameter_list -> empty
Rule 238   function_call_parameter -> expr
Rule 239   function_call_parameter -> AND variable
Rule 240   expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
Rule 241   lexical_vars -> USE LPAREN lexical_var_list RPAREN
Rule 242   lexical_vars -> empty
Rule 243   lexical_var_list -> lexical_var_list COMMA AND VARIABLE
Rule 244   lexical_var_list -> lexical_var_list COMMA VARIABLE
Rule 245   lexical_var_list -> AND VARIABLE
Rule 246   lexical_var_list -> VARIABLE
Rule 247   expr -> variable PLUS_EQUAL expr
Rule 248   expr -> variable MINUS_EQUAL expr
Rule 249   expr -> variable MUL_EQUAL expr
Rule 250   expr -> variable DIV_EQUAL expr
Rule 251   expr -> variable CONCAT_EQUAL expr
Rule 252   expr -> variable MOD_EQUAL expr
Rule 253   expr -> variable AND_EQUAL expr
Rule 254   expr -> variable OR_EQUAL expr
Rule 255   expr -> variable XOR_EQUAL expr
Rule 256   expr -> variable SL_EQUAL expr
Rule 257   expr -> variable SR_EQUAL expr
Rule 258   expr -> expr BOOLEAN_AND expr
Rule 259   expr -> expr BOOLEAN_OR expr
Rule 260   expr -> expr LOGICAL_AND expr
Rule 261   expr -> expr LOGICAL_OR expr
Rule 262   expr -> expr LOGICAL_XOR expr
Rule 263   expr -> expr AND expr
Rule 264   expr -> expr OR expr
Rule 265   expr -> expr XOR expr
Rule 266   expr -> expr CONCAT expr
Rule 267   expr -> expr PLUS expr
Rule 268   expr -> expr MINUS expr
Rule 269   expr -> expr MUL expr
Rule 270   expr -> expr DIV expr
Rule 271   expr -> expr SL expr
Rule 272   expr -> expr SR expr
Rule 273   expr -> expr MOD expr
Rule 274   expr -> expr IS_IDENTICAL expr
Rule 275   expr -> expr IS_NOT_IDENTICAL expr
Rule 276   expr -> expr IS_EQUAL expr
Rule 277   expr -> expr IS_NOT_EQUAL expr
Rule 278   expr -> expr IS_SMALLER expr
Rule 279   expr -> expr IS_SMALLER_OR_EQUAL expr
Rule 280   expr -> expr IS_GREATER expr
Rule 281   expr -> expr IS_GREATER_OR_EQUAL expr
Rule 282   expr -> expr INSTANCEOF expr
Rule 283   expr -> PLUS expr
Rule 284   expr -> MINUS expr
Rule 285   expr -> NOT expr
Rule 286   expr -> BOOLEAN_NOT expr
Rule 287   expr -> expr QUESTION expr COLON expr
Rule 288   expr -> INC variable
Rule 289   expr -> DEC variable
Rule 290   expr -> variable INC
Rule 291   expr -> variable DEC
Rule 292   expr -> INT_CAST expr
Rule 293   expr -> DOUBLE_CAST expr
Rule 294   expr -> STRING_CAST expr
Rule 295   expr -> ARRAY_CAST expr
Rule 296   expr -> OBJECT_CAST expr
Rule 297   expr -> BOOL_CAST expr
Rule 298   expr -> UNSET_CAST expr
Rule 299   expr -> ISSET LPAREN isset_variables RPAREN
Rule 300   isset_variables -> isset_variables COMMA variable
Rule 301   isset_variables -> variable
Rule 302   expr -> EMPTY LPAREN expr RPAREN
Rule 303   expr -> EVAL LPAREN expr RPAREN
Rule 304   expr -> INCLUDE expr
Rule 305   expr -> INCLUDE_ONCE expr
Rule 306   expr -> REQUIRE expr
Rule 307   expr -> REQUIRE_ONCE expr
Rule 308   expr -> EXIT
Rule 309   expr -> EXIT LPAREN RPAREN
Rule 310   expr -> EXIT LPAREN expr RPAREN
Rule 311   expr -> PRINT expr
Rule 312   expr -> AT expr
Rule 313   expr -> LPAREN expr RPAREN
Rule 314   scalar -> class_constant
Rule 315   scalar -> common_scalar
Rule 316   scalar -> QUOTE encaps_list QUOTE
Rule 317   scalar -> START_HEREDOC encaps_list END_HEREDOC
Rule 318   scalar -> STRING_VARNAME
Rule 319   scalar -> namespace_name
Rule 320   scalar -> NS_SEPARATOR namespace_name
Rule 321   scalar -> NAMESPACE NS_SEPARATOR namespace_name
Rule 322   class_constant -> class_name DOUBLE_COLON STRING
Rule 323   class_constant -> variable_class_name DOUBLE_COLON STRING
Rule 324   common_scalar -> LNUMBER
Rule 325   common_scalar -> DNUMBER
Rule 326   common_scalar -> CONSTANT_ENCAPSED_STRING
Rule 327   common_scalar -> LINE
Rule 328   common_scalar -> FILE
Rule 329   common_scalar -> DIR
Rule 330   common_scalar -> CLASS_C
Rule 331   common_scalar -> METHOD_C
Rule 332   common_scalar -> FUNC_C
Rule 333   common_scalar -> NS_C
Rule 334   static_scalar -> common_scalar
Rule 335   static_scalar -> QUOTE QUOTE
Rule 336   static_scalar -> QUOTE ENCAPSED_AND_WHITESPACE QUOTE
Rule 337   static_scalar -> namespace_name
Rule 338   static_scalar -> NS_SEPARATOR namespace_name
Rule 339   static_scalar -> NAMESPACE NS_SEPARATOR namespace_name
Rule 340   static_scalar -> PLUS static_scalar
Rule 341   static_scalar -> MINUS static_scalar
Rule 342   static_scalar -> ARRAY LPAREN static_array_pair_list RPAREN
Rule 343   static_array_pair_list -> empty
Rule 344   static_array_pair_list -> static_non_empty_array_pair_list possible_comma
Rule 345   static_non_empty_array_pair_list -> static_non_empty_array_pair_list COMMA static_scalar
Rule 346   static_non_empty_array_pair_list -> static_scalar
Rule 347   static_non_empty_array_pair_list -> static_non_empty_array_pair_list COMMA static_scalar DOUBLE_ARROW static_scalar
Rule 348   static_non_empty_array_pair_list -> static_scalar DOUBLE_ARROW static_scalar
Rule 349   namespace_name -> namespace_name NS_SEPARATOR STRING
Rule 350   namespace_name -> STRING
Rule 351   encaps_list -> encaps_list encaps_var
Rule 352   encaps_list -> empty
Rule 353   encaps_list -> encaps_list ENCAPSED_AND_WHITESPACE
Rule 354   encaps_var -> VARIABLE
Rule 355   encaps_var -> VARIABLE LBRACKET encaps_var_offset RBRACKET
Rule 356   encaps_var -> VARIABLE OBJECT_OPERATOR STRING
Rule 357   encaps_var -> DOLLAR_OPEN_CURLY_BRACES expr RBRACE
Rule 358   encaps_var -> DOLLAR_OPEN_CURLY_BRACES STRING_VARNAME LBRACKET expr RBRACKET RBRACE
Rule 359   encaps_var -> CURLY_OPEN variable RBRACE
Rule 360   encaps_var_offset -> STRING
Rule 361   encaps_var_offset -> NUM_STRING
Rule 362   encaps_var_offset -> VARIABLE
Rule 363   empty -> <empty>

Terminals, with rules where they appear

ABSTRACT             : 107 143
AND                  : 75 145 152 153 156 157 160 225 227 229 231 239 243 245 263
AND_EQUAL            : 253
ARRAY                : 222 342
ARRAY_CAST           : 295
AS                   : 17 18 34
AT                   : 312
BOOLEAN_AND          : 258
BOOLEAN_NOT          : 286
BOOLEAN_OR           : 259
BOOL_CAST            : 297
BREAK                : 36 37
CASE                 : 85
CATCH                : 49 50
CLASS                : 106 107 108
CLASS_C              : 330
CLONE                : 175
COLON                : 30 57 63 65 67 73 79 82 83 87 287
COMMA                : 13 19 55 70 89 94 98 100 121 123 125 127 147 177 225 226 229 230 234 235 243 244 300 345 347
CONCAT               : 266
CONCAT_EQUAL         : 251
CONST                : 11 126
CONSTANT_ENCAPSED_STRING : 326
CONTINUE             : 38 39
CURLY_OPEN           : 359
DEC                  : 289 291
DECLARE              : 53
DEFAULT              : 86
DIR                  : 329
DIV                  : 270
DIV_EQUAL            : 250
DNUMBER              : 325
DO                   : 32
DOLLAR               : 92 93 201 210
DOLLAR_OPEN_CURLY_BRACES : 357 358
DOUBLE_ARROW         : 77 229 230 231 232 347 348
DOUBLE_CAST          : 293
DOUBLE_COLON         : 189 190 191 192 203 204 322 323
ECHO                 : 44
ELSE                 : 61 65
ELSEIF               : 59 63
EMPTY                : 302
ENCAPSED_AND_WHITESPACE : 336 353
ENDDECLARE           : 57
ENDFOR               : 73
ENDFOREACH           : 79
ENDIF                : 30
ENDSWITCH            : 82 83
ENDWHILE             : 67
END_HEREDOC          : 317
EQUALS               : 21 54 55 96 121 122 125 126 154 155 156 157 159 160 176
EVAL                 : 303
EXIT                 : 308 309 310
EXTENDS              : 110 129
FILE                 : 328
FINAL                : 108 144
FOR                  : 33
FOREACH              : 34
FUNCTION             : 103 118 240
FUNC_C               : 332
GLOBAL               : 42
HALT_COMPILER        : 7 27
IF                   : 29 30
IMPLEMENTS           : 114
INC                  : 288 290
INCLUDE              : 304
INCLUDE_ONCE         : 305
INLINE_HTML          : 45
INSTANCEOF           : 282
INTERFACE            : 105
INT_CAST             : 292
ISSET                : 299
IS_EQUAL             : 276
IS_GREATER           : 280
IS_GREATER_OR_EQUAL  : 281
IS_IDENTICAL         : 274
IS_NOT_EQUAL         : 277
IS_NOT_IDENTICAL     : 275
IS_SMALLER           : 278
IS_SMALLER_OR_EQUAL  : 279
LBRACE               : 9 10 28 49 49 50 80 81 93 103 104 105 135 207 210 217 219 240
LBRACKET             : 206 216 355 358
LINE                 : 327
LIST                 : 176 181
LNUMBER              : 324
LOGICAL_AND          : 260
LOGICAL_OR           : 261
LOGICAL_XOR          : 262
LPAREN               : 7 27 29 30 31 32 33 34 35 47 49 50 53 59 63 103 118 173 176 181 186 187 188 189 190 191 192 193 194 222 240 241 299 302 303 309 310 313 342
METHOD_C             : 331
MINUS                : 268 284 341
MINUS_EQUAL          : 248
MOD                  : 273
MOD_EQUAL            : 252
MUL                  : 269
MUL_EQUAL            : 249
NAMESPACE            : 8 9 10 113 166 188 321 339
NEW                  : 161
NOT                  : 285
NS_C                 : 333
NS_SEPARATOR         : 16 18 112 113 165 166 187 188 320 321 338 339 349
NUM_STRING           : 361
OBJECT_CAST          : 296
OBJECT_OPERATOR      : 168 172 182 198 356
OR                   : 264
OR_EQUAL             : 254
PLUS                 : 267 283 340
PLUS_EQUAL           : 247
PRINT                : 311
PRIVATE              : 141
PROTECTED            : 140
PUBLIC               : 139
QUESTION             : 287
QUOTE                : 316 316 335 335 336 336
RBRACE               : 9 10 28 49 49 50 80 81 93 103 104 105 135 207 210 217 219 240 357 358 359
RBRACKET             : 206 216 355 358
REQUIRE              : 306
REQUIRE_ONCE         : 307
RETURN               : 40 41
RPAREN               : 7 27 29 30 31 32 33 34 35 47 49 50 53 59 63 103 118 173 176 181 186 187 188 189 190 191 192 193 194 222 240 241 299 302 303 309 310 313 342
SEMI                 : 7 8 11 12 27 30 32 33 33 36 37 38 39 40 41 42 43 44 46 47 48 52 57 67 73 79 81 82 83 83 88 119 120 136
SL                   : 271
SL_EQUAL             : 256
SR                   : 272
SR_EQUAL             : 257
START_HEREDOC        : 317
STATIC               : 43 142 167
STRING               : 17 18 21 54 55 103 104 105 118 125 126 189 191 218 322 323 349 350 356 360
STRING_CAST          : 294
STRING_VARNAME       : 318 358
SWITCH               : 35
THROW                : 52
TRY                  : 49
UNSET                : 47
UNSET_CAST           : 298
USE                  : 12 241
VAR                  : 132
VARIABLE             : 49 50 74 75 91 96 97 121 122 123 124 150 151 152 153 154 155 156 157 209 243 244 245 246 354 355 356 362
WHILE                : 31 32
XOR                  : 265
XOR_EQUAL            : 255
error                : 

Nonterminals, with rules where they appear

additional_catches   : 49 50
array_pair_list      : 222
assignment_list      : 176 177 181
assignment_list_element : 177 178
base_variable        : 168 169 184
base_variable_with_function_calls : 182 183
case_list            : 80 81 82 83 85 86
case_separator       : 85 86
class_constant       : 314
class_constant_declaration : 120 125
class_declaration_statement : 6 26
class_entry_type     : 104
class_name           : 151 153 155 157 162 189 190 203 322
class_name_reference : 161
class_statement      : 116
class_statement_list : 104 105 116
class_variable_declaration : 119 121 123
common_scalar        : 315 334
compound_variable    : 208
constant_declaration : 19 20
constant_declarations : 11 19
ctor_arguments       : 161
declare_list         : 53 55
declare_statement    : 53
dim_offset           : 206 216
dynamic_class_name_reference : 163
dynamic_class_name_variable_properties : 168 170
dynamic_class_name_variable_property : 170
echo_expr_list       : 44 98
else_single          : 29
elseif_list          : 29 59
empty                : 3 23 51 58 60 62 64 68 76 84 109 115 117 130 134 146 149 171 174 180 195 197 212 215 223 233 237 242 343 352
encaps_list          : 316 317 351 353
encaps_var           : 351
encaps_var_offset    : 355
expr                 : 29 30 31 32 34 35 37 39 41 46 52 59 63 70 71 85 93 98 99 159 160 175 176 207 210 211 217 219 226 228 229 230 230 231 232 232 238 247 248 249 250 251 252 253 254 255 256 257 258 258 259 259 260 260 261 261 262 262 263 263 264 264 265 265 266 266 267 267 268 268 269 269 270 270 271 271 272 272 273 273 274 274 275 275 276 276 277 277 278 278 279 279 280 280 281 281 282 282 283 284 285 286 287 287 287 292 293 294 295 296 297 298 302 303 304 305 306 307 310 311 312 313 357 358
extends_from         : 104
for_expr             : 33 33 33
for_statement        : 33
foreach_optional_arg : 34
foreach_statement    : 34
foreach_variable     : 34 77
fully_qualified_class_name : 49 50 110 127 128
function_call        : 185
function_call_parameter : 235 236
function_call_parameter_list : 173 186 187 188 189 190 191 192 193 194 235
function_declaration_statement : 5 25
global_var           : 89 90
global_var_list      : 42 89
implements_list      : 104
inner_statement      : 22
inner_statement_list : 22 28 30 49 49 50 57 63 65 67 73 79 85 86 103 135 240
interface_extends_list : 105
interface_list       : 114 127 129
is_reference         : 103 118 240
isset_variables      : 299 300
lexical_var_list     : 241 243 244
lexical_vars         : 240
member_modifier      : 137 138
method_body          : 118
method_modifiers     : 118
method_or_not        : 182 198
namespace_name       : 8 10 15 16 17 18 111 112 113 164 165 166 186 187 188 319 320 321 337 338 339 349
new_else_single      : 30
new_elseif_list      : 30 63
non_empty_array_pair_list : 224 225 226 229 230
non_empty_for_expr   : 69 70
non_empty_member_modifiers : 131 133 137
object_dim_list      : 213 216 217
object_property      : 168 172 182 198
parameter            : 147 148
parameter_list       : 103 118 147 240
possible_comma       : 224 344
reference_variable   : 202 205 206 207
scalar               : 221
simple_indirect_reference : 199 201 220
start                : 0
statement            : 4 24 29 32 56 59 61 66 72 78
static_array_pair_list : 342
static_member        : 200
static_non_empty_array_pair_list : 344 345 347
static_scalar        : 21 54 55 96 121 122 125 126 154 155 156 157 340 341 345 346 347 347 348 348
static_var           : 94 95
static_var_list      : 43 94
switch_case_list     : 35
top_statement        : 2
top_statement_list   : 1 2 9 10
unset_variable       : 100 101
unset_variables      : 47 100
use_declaration      : 13 14
use_declarations     : 12 13
variable             : 92 102 158 159 160 179 225 227 229 231 239 247 248 249 250 251 252 253 254 255 256 257 288 289 290 291 300 301 359
variable_class_name  : 191 192 204 323
variable_modifiers   : 119
variable_name        : 213
variable_properties  : 182 196
variable_property    : 196
variable_without_objects : 190 192 193 203 204 214
while_statement      : 31

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . top_statement_list
    (2) top_statement_list -> . top_statement_list top_statement
    (3) top_statement_list -> . empty
    (363) empty -> .

    HALT_COMPILER   reduce using rule 363 (empty -> .)
    NAMESPACE       reduce using rule 363 (empty -> .)
    CONST           reduce using rule 363 (empty -> .)
    USE             reduce using rule 363 (empty -> .)
    LBRACE          reduce using rule 363 (empty -> .)
    IF              reduce using rule 363 (empty -> .)
    WHILE           reduce using rule 363 (empty -> .)
    DO              reduce using rule 363 (empty -> .)
    FOR             reduce using rule 363 (empty -> .)
    FOREACH         reduce using rule 363 (empty -> .)
    SWITCH          reduce using rule 363 (empty -> .)
    BREAK           reduce using rule 363 (empty -> .)
    CONTINUE        reduce using rule 363 (empty -> .)
    RETURN          reduce using rule 363 (empty -> .)
    GLOBAL          reduce using rule 363 (empty -> .)
    STATIC          reduce using rule 363 (empty -> .)
    ECHO            reduce using rule 363 (empty -> .)
    INLINE_HTML     reduce using rule 363 (empty -> .)
    UNSET           reduce using rule 363 (empty -> .)
    SEMI            reduce using rule 363 (empty -> .)
    TRY             reduce using rule 363 (empty -> .)
    THROW           reduce using rule 363 (empty -> .)
    DECLARE         reduce using rule 363 (empty -> .)
    FUNCTION        reduce using rule 363 (empty -> .)
    INTERFACE       reduce using rule 363 (empty -> .)
    NEW             reduce using rule 363 (empty -> .)
    CLONE           reduce using rule 363 (empty -> .)
    LIST            reduce using rule 363 (empty -> .)
    ARRAY           reduce using rule 363 (empty -> .)
    PLUS            reduce using rule 363 (empty -> .)
    MINUS           reduce using rule 363 (empty -> .)
    NOT             reduce using rule 363 (empty -> .)
    BOOLEAN_NOT     reduce using rule 363 (empty -> .)
    INC             reduce using rule 363 (empty -> .)
    DEC             reduce using rule 363 (empty -> .)
    INT_CAST        reduce using rule 363 (empty -> .)
    DOUBLE_CAST     reduce using rule 363 (empty -> .)
    STRING_CAST     reduce using rule 363 (empty -> .)
    ARRAY_CAST      reduce using rule 363 (empty -> .)
    OBJECT_CAST     reduce using rule 363 (empty -> .)
    BOOL_CAST       reduce using rule 363 (empty -> .)
    UNSET_CAST      reduce using rule 363 (empty -> .)
    ISSET           reduce using rule 363 (empty -> .)
    EMPTY           reduce using rule 363 (empty -> .)
    EVAL            reduce using rule 363 (empty -> .)
    INCLUDE         reduce using rule 363 (empty -> .)
    INCLUDE_ONCE    reduce using rule 363 (empty -> .)
    REQUIRE         reduce using rule 363 (empty -> .)
    REQUIRE_ONCE    reduce using rule 363 (empty -> .)
    EXIT            reduce using rule 363 (empty -> .)
    PRINT           reduce using rule 363 (empty -> .)
    AT              reduce using rule 363 (empty -> .)
    LPAREN          reduce using rule 363 (empty -> .)
    CLASS           reduce using rule 363 (empty -> .)
    ABSTRACT        reduce using rule 363 (empty -> .)
    FINAL           reduce using rule 363 (empty -> .)
    QUOTE           reduce using rule 363 (empty -> .)
    START_HEREDOC   reduce using rule 363 (empty -> .)
    STRING_VARNAME  reduce using rule 363 (empty -> .)
    NS_SEPARATOR    reduce using rule 363 (empty -> .)
    LNUMBER         reduce using rule 363 (empty -> .)
    DNUMBER         reduce using rule 363 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 363 (empty -> .)
    LINE            reduce using rule 363 (empty -> .)
    FILE            reduce using rule 363 (empty -> .)
    DIR             reduce using rule 363 (empty -> .)
    CLASS_C         reduce using rule 363 (empty -> .)
    METHOD_C        reduce using rule 363 (empty -> .)
    FUNC_C          reduce using rule 363 (empty -> .)
    NS_C            reduce using rule 363 (empty -> .)
    STRING          reduce using rule 363 (empty -> .)
    DOLLAR          reduce using rule 363 (empty -> .)
    VARIABLE        reduce using rule 363 (empty -> .)
    $end            reduce using rule 363 (empty -> .)

    top_statement_list             shift and go to state 1
    start                          shift and go to state 2
    empty                          shift and go to state 3

state 1

    (1) start -> top_statement_list .
    (2) top_statement_list -> top_statement_list . top_statement
    (4) top_statement -> . statement
    (5) top_statement -> . function_declaration_statement
    (6) top_statement -> . class_declaration_statement
    (7) top_statement -> . HALT_COMPILER LPAREN RPAREN SEMI
    (8) top_statement -> . NAMESPACE namespace_name SEMI
    (9) top_statement -> . NAMESPACE LBRACE top_statement_list RBRACE
    (10) top_statement -> . NAMESPACE namespace_name LBRACE top_statement_list RBRACE
    (11) top_statement -> . CONST constant_declarations SEMI
    (12) top_statement -> . USE use_declarations SEMI
    (28) statement -> . LBRACE inner_statement_list RBRACE
    (29) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (30) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (31) statement -> . WHILE LPAREN expr RPAREN while_statement
    (32) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (33) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (34) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (35) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (36) statement -> . BREAK SEMI
    (37) statement -> . BREAK expr SEMI
    (38) statement -> . CONTINUE SEMI
    (39) statement -> . CONTINUE expr SEMI
    (40) statement -> . RETURN SEMI
    (41) statement -> . RETURN expr SEMI
    (42) statement -> . GLOBAL global_var_list SEMI
    (43) statement -> . STATIC static_var_list SEMI
    (44) statement -> . ECHO echo_expr_list SEMI
    (45) statement -> . INLINE_HTML
    (46) statement -> . expr SEMI
    (47) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (48) statement -> . SEMI
    (49) statement -> . TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches
    (52) statement -> . THROW expr SEMI
    (53) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (103) function_declaration_statement -> . FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (104) class_declaration_statement -> . class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE
    (105) class_declaration_statement -> . INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (106) class_entry_type -> . CLASS
    (107) class_entry_type -> . ABSTRACT CLASS
    (108) class_entry_type -> . FINAL CLASS
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    $end            reduce using rule 1 (start -> top_statement_list .)
    HALT_COMPILER   shift and go to state 22
    NAMESPACE       shift and go to state 12
    CONST           shift and go to state 78
    USE             shift and go to state 77
    LBRACE          shift and go to state 47
    IF              shift and go to state 93
    WHILE           shift and go to state 57
    DO              shift and go to state 76
    FOR             shift and go to state 36
    FOREACH         shift and go to state 13
    SWITCH          shift and go to state 61
    BREAK           shift and go to state 74
    CONTINUE        shift and go to state 48
    RETURN          shift and go to state 23
    GLOBAL          shift and go to state 55
    STATIC          shift and go to state 29
    ECHO            shift and go to state 42
    INLINE_HTML     shift and go to state 88
    UNSET           shift and go to state 83
    SEMI            shift and go to state 85
    TRY             shift and go to state 43
    THROW           shift and go to state 96
    DECLARE         shift and go to state 16
    FUNCTION        shift and go to state 40
    INTERFACE       shift and go to state 21
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    CLASS           shift and go to state 20
    ABSTRACT        shift and go to state 80
    FINAL           shift and go to state 32
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_entry_type               shift and go to state 53
    class_name                     shift and go to state 54
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    function_call                  shift and go to state 27
    variable_without_objects       shift and go to state 84
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    function_declaration_statement shift and go to state 62
    statement                      shift and go to state 63
    class_constant                 shift and go to state 24
    variable_class_name            shift and go to state 41
    base_variable                  shift and go to state 44
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    class_declaration_statement    shift and go to state 67
    compound_variable              shift and go to state 72
    expr                           shift and go to state 71
    top_statement                  shift and go to state 52

state 2

    (0) S' -> start .



state 3

    (3) top_statement_list -> empty .

    HALT_COMPILER   reduce using rule 3 (top_statement_list -> empty .)
    NAMESPACE       reduce using rule 3 (top_statement_list -> empty .)
    CONST           reduce using rule 3 (top_statement_list -> empty .)
    USE             reduce using rule 3 (top_statement_list -> empty .)
    LBRACE          reduce using rule 3 (top_statement_list -> empty .)
    IF              reduce using rule 3 (top_statement_list -> empty .)
    WHILE           reduce using rule 3 (top_statement_list -> empty .)
    DO              reduce using rule 3 (top_statement_list -> empty .)
    FOR             reduce using rule 3 (top_statement_list -> empty .)
    FOREACH         reduce using rule 3 (top_statement_list -> empty .)
    SWITCH          reduce using rule 3 (top_statement_list -> empty .)
    BREAK           reduce using rule 3 (top_statement_list -> empty .)
    CONTINUE        reduce using rule 3 (top_statement_list -> empty .)
    RETURN          reduce using rule 3 (top_statement_list -> empty .)
    GLOBAL          reduce using rule 3 (top_statement_list -> empty .)
    STATIC          reduce using rule 3 (top_statement_list -> empty .)
    ECHO            reduce using rule 3 (top_statement_list -> empty .)
    INLINE_HTML     reduce using rule 3 (top_statement_list -> empty .)
    UNSET           reduce using rule 3 (top_statement_list -> empty .)
    SEMI            reduce using rule 3 (top_statement_list -> empty .)
    TRY             reduce using rule 3 (top_statement_list -> empty .)
    THROW           reduce using rule 3 (top_statement_list -> empty .)
    DECLARE         reduce using rule 3 (top_statement_list -> empty .)
    FUNCTION        reduce using rule 3 (top_statement_list -> empty .)
    INTERFACE       reduce using rule 3 (top_statement_list -> empty .)
    NEW             reduce using rule 3 (top_statement_list -> empty .)
    CLONE           reduce using rule 3 (top_statement_list -> empty .)
    LIST            reduce using rule 3 (top_statement_list -> empty .)
    ARRAY           reduce using rule 3 (top_statement_list -> empty .)
    PLUS            reduce using rule 3 (top_statement_list -> empty .)
    MINUS           reduce using rule 3 (top_statement_list -> empty .)
    NOT             reduce using rule 3 (top_statement_list -> empty .)
    BOOLEAN_NOT     reduce using rule 3 (top_statement_list -> empty .)
    INC             reduce using rule 3 (top_statement_list -> empty .)
    DEC             reduce using rule 3 (top_statement_list -> empty .)
    INT_CAST        reduce using rule 3 (top_statement_list -> empty .)
    DOUBLE_CAST     reduce using rule 3 (top_statement_list -> empty .)
    STRING_CAST     reduce using rule 3 (top_statement_list -> empty .)
    ARRAY_CAST      reduce using rule 3 (top_statement_list -> empty .)
    OBJECT_CAST     reduce using rule 3 (top_statement_list -> empty .)
    BOOL_CAST       reduce using rule 3 (top_statement_list -> empty .)
    UNSET_CAST      reduce using rule 3 (top_statement_list -> empty .)
    ISSET           reduce using rule 3 (top_statement_list -> empty .)
    EMPTY           reduce using rule 3 (top_statement_list -> empty .)
    EVAL            reduce using rule 3 (top_statement_list -> empty .)
    INCLUDE         reduce using rule 3 (top_statement_list -> empty .)
    INCLUDE_ONCE    reduce using rule 3 (top_statement_list -> empty .)
    REQUIRE         reduce using rule 3 (top_statement_list -> empty .)
    REQUIRE_ONCE    reduce using rule 3 (top_statement_list -> empty .)
    EXIT            reduce using rule 3 (top_statement_list -> empty .)
    PRINT           reduce using rule 3 (top_statement_list -> empty .)
    AT              reduce using rule 3 (top_statement_list -> empty .)
    LPAREN          reduce using rule 3 (top_statement_list -> empty .)
    CLASS           reduce using rule 3 (top_statement_list -> empty .)
    ABSTRACT        reduce using rule 3 (top_statement_list -> empty .)
    FINAL           reduce using rule 3 (top_statement_list -> empty .)
    QUOTE           reduce using rule 3 (top_statement_list -> empty .)
    START_HEREDOC   reduce using rule 3 (top_statement_list -> empty .)
    STRING_VARNAME  reduce using rule 3 (top_statement_list -> empty .)
    NS_SEPARATOR    reduce using rule 3 (top_statement_list -> empty .)
    LNUMBER         reduce using rule 3 (top_statement_list -> empty .)
    DNUMBER         reduce using rule 3 (top_statement_list -> empty .)
    CONSTANT_ENCAPSED_STRING reduce using rule 3 (top_statement_list -> empty .)
    LINE            reduce using rule 3 (top_statement_list -> empty .)
    FILE            reduce using rule 3 (top_statement_list -> empty .)
    DIR             reduce using rule 3 (top_statement_list -> empty .)
    CLASS_C         reduce using rule 3 (top_statement_list -> empty .)
    METHOD_C        reduce using rule 3 (top_statement_list -> empty .)
    FUNC_C          reduce using rule 3 (top_statement_list -> empty .)
    NS_C            reduce using rule 3 (top_statement_list -> empty .)
    STRING          reduce using rule 3 (top_statement_list -> empty .)
    DOLLAR          reduce using rule 3 (top_statement_list -> empty .)
    VARIABLE        reduce using rule 3 (top_statement_list -> empty .)
    $end            reduce using rule 3 (top_statement_list -> empty .)
    RBRACE          reduce using rule 3 (top_statement_list -> empty .)


state 4

    (293) expr -> DOUBLE_CAST . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 99

state 5

    (221) expr -> scalar .

    AS              reduce using rule 221 (expr -> scalar .)
    BOOLEAN_AND     reduce using rule 221 (expr -> scalar .)
    BOOLEAN_OR      reduce using rule 221 (expr -> scalar .)
    LOGICAL_AND     reduce using rule 221 (expr -> scalar .)
    LOGICAL_OR      reduce using rule 221 (expr -> scalar .)
    LOGICAL_XOR     reduce using rule 221 (expr -> scalar .)
    AND             reduce using rule 221 (expr -> scalar .)
    OR              reduce using rule 221 (expr -> scalar .)
    XOR             reduce using rule 221 (expr -> scalar .)
    CONCAT          reduce using rule 221 (expr -> scalar .)
    PLUS            reduce using rule 221 (expr -> scalar .)
    MINUS           reduce using rule 221 (expr -> scalar .)
    MUL             reduce using rule 221 (expr -> scalar .)
    DIV             reduce using rule 221 (expr -> scalar .)
    SL              reduce using rule 221 (expr -> scalar .)
    SR              reduce using rule 221 (expr -> scalar .)
    MOD             reduce using rule 221 (expr -> scalar .)
    IS_IDENTICAL    reduce using rule 221 (expr -> scalar .)
    IS_NOT_IDENTICAL reduce using rule 221 (expr -> scalar .)
    IS_EQUAL        reduce using rule 221 (expr -> scalar .)
    IS_NOT_EQUAL    reduce using rule 221 (expr -> scalar .)
    IS_SMALLER      reduce using rule 221 (expr -> scalar .)
    IS_SMALLER_OR_EQUAL reduce using rule 221 (expr -> scalar .)
    IS_GREATER      reduce using rule 221 (expr -> scalar .)
    IS_GREATER_OR_EQUAL reduce using rule 221 (expr -> scalar .)
    INSTANCEOF      reduce using rule 221 (expr -> scalar .)
    QUESTION        reduce using rule 221 (expr -> scalar .)
    SEMI            reduce using rule 221 (expr -> scalar .)
    COMMA           reduce using rule 221 (expr -> scalar .)
    RPAREN          reduce using rule 221 (expr -> scalar .)
    RBRACE          reduce using rule 221 (expr -> scalar .)
    RBRACKET        reduce using rule 221 (expr -> scalar .)
    DOUBLE_ARROW    reduce using rule 221 (expr -> scalar .)
    COLON           reduce using rule 221 (expr -> scalar .)


state 6

    (328) common_scalar -> FILE .

    SEMI            reduce using rule 328 (common_scalar -> FILE .)
    BOOLEAN_AND     reduce using rule 328 (common_scalar -> FILE .)
    BOOLEAN_OR      reduce using rule 328 (common_scalar -> FILE .)
    LOGICAL_AND     reduce using rule 328 (common_scalar -> FILE .)
    LOGICAL_OR      reduce using rule 328 (common_scalar -> FILE .)
    LOGICAL_XOR     reduce using rule 328 (common_scalar -> FILE .)
    AND             reduce using rule 328 (common_scalar -> FILE .)
    OR              reduce using rule 328 (common_scalar -> FILE .)
    XOR             reduce using rule 328 (common_scalar -> FILE .)
    CONCAT          reduce using rule 328 (common_scalar -> FILE .)
    PLUS            reduce using rule 328 (common_scalar -> FILE .)
    MINUS           reduce using rule 328 (common_scalar -> FILE .)
    MUL             reduce using rule 328 (common_scalar -> FILE .)
    DIV             reduce using rule 328 (common_scalar -> FILE .)
    SL              reduce using rule 328 (common_scalar -> FILE .)
    SR              reduce using rule 328 (common_scalar -> FILE .)
    MOD             reduce using rule 328 (common_scalar -> FILE .)
    IS_IDENTICAL    reduce using rule 328 (common_scalar -> FILE .)
    IS_NOT_IDENTICAL reduce using rule 328 (common_scalar -> FILE .)
    IS_EQUAL        reduce using rule 328 (common_scalar -> FILE .)
    IS_NOT_EQUAL    reduce using rule 328 (common_scalar -> FILE .)
    IS_SMALLER      reduce using rule 328 (common_scalar -> FILE .)
    IS_SMALLER_OR_EQUAL reduce using rule 328 (common_scalar -> FILE .)
    IS_GREATER      reduce using rule 328 (common_scalar -> FILE .)
    IS_GREATER_OR_EQUAL reduce using rule 328 (common_scalar -> FILE .)
    INSTANCEOF      reduce using rule 328 (common_scalar -> FILE .)
    QUESTION        reduce using rule 328 (common_scalar -> FILE .)
    DOUBLE_ARROW    reduce using rule 328 (common_scalar -> FILE .)
    COMMA           reduce using rule 328 (common_scalar -> FILE .)
    RPAREN          reduce using rule 328 (common_scalar -> FILE .)
    AS              reduce using rule 328 (common_scalar -> FILE .)
    RBRACE          reduce using rule 328 (common_scalar -> FILE .)
    RBRACKET        reduce using rule 328 (common_scalar -> FILE .)
    COLON           reduce using rule 328 (common_scalar -> FILE .)


state 7

    (327) common_scalar -> LINE .

    SEMI            reduce using rule 327 (common_scalar -> LINE .)
    BOOLEAN_AND     reduce using rule 327 (common_scalar -> LINE .)
    BOOLEAN_OR      reduce using rule 327 (common_scalar -> LINE .)
    LOGICAL_AND     reduce using rule 327 (common_scalar -> LINE .)
    LOGICAL_OR      reduce using rule 327 (common_scalar -> LINE .)
    LOGICAL_XOR     reduce using rule 327 (common_scalar -> LINE .)
    AND             reduce using rule 327 (common_scalar -> LINE .)
    OR              reduce using rule 327 (common_scalar -> LINE .)
    XOR             reduce using rule 327 (common_scalar -> LINE .)
    CONCAT          reduce using rule 327 (common_scalar -> LINE .)
    PLUS            reduce using rule 327 (common_scalar -> LINE .)
    MINUS           reduce using rule 327 (common_scalar -> LINE .)
    MUL             reduce using rule 327 (common_scalar -> LINE .)
    DIV             reduce using rule 327 (common_scalar -> LINE .)
    SL              reduce using rule 327 (common_scalar -> LINE .)
    SR              reduce using rule 327 (common_scalar -> LINE .)
    MOD             reduce using rule 327 (common_scalar -> LINE .)
    IS_IDENTICAL    reduce using rule 327 (common_scalar -> LINE .)
    IS_NOT_IDENTICAL reduce using rule 327 (common_scalar -> LINE .)
    IS_EQUAL        reduce using rule 327 (common_scalar -> LINE .)
    IS_NOT_EQUAL    reduce using rule 327 (common_scalar -> LINE .)
    IS_SMALLER      reduce using rule 327 (common_scalar -> LINE .)
    IS_SMALLER_OR_EQUAL reduce using rule 327 (common_scalar -> LINE .)
    IS_GREATER      reduce using rule 327 (common_scalar -> LINE .)
    IS_GREATER_OR_EQUAL reduce using rule 327 (common_scalar -> LINE .)
    INSTANCEOF      reduce using rule 327 (common_scalar -> LINE .)
    QUESTION        reduce using rule 327 (common_scalar -> LINE .)
    DOUBLE_ARROW    reduce using rule 327 (common_scalar -> LINE .)
    COMMA           reduce using rule 327 (common_scalar -> LINE .)
    RPAREN          reduce using rule 327 (common_scalar -> LINE .)
    AS              reduce using rule 327 (common_scalar -> LINE .)
    RBRACE          reduce using rule 327 (common_scalar -> LINE .)
    RBRACKET        reduce using rule 327 (common_scalar -> LINE .)
    COLON           reduce using rule 327 (common_scalar -> LINE .)


state 8

    (284) expr -> MINUS . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 102

state 9

    (298) expr -> UNSET_CAST . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 103

state 10

    (283) expr -> PLUS . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 104

state 11

    (325) common_scalar -> DNUMBER .

    SEMI            reduce using rule 325 (common_scalar -> DNUMBER .)
    BOOLEAN_AND     reduce using rule 325 (common_scalar -> DNUMBER .)
    BOOLEAN_OR      reduce using rule 325 (common_scalar -> DNUMBER .)
    LOGICAL_AND     reduce using rule 325 (common_scalar -> DNUMBER .)
    LOGICAL_OR      reduce using rule 325 (common_scalar -> DNUMBER .)
    LOGICAL_XOR     reduce using rule 325 (common_scalar -> DNUMBER .)
    AND             reduce using rule 325 (common_scalar -> DNUMBER .)
    OR              reduce using rule 325 (common_scalar -> DNUMBER .)
    XOR             reduce using rule 325 (common_scalar -> DNUMBER .)
    CONCAT          reduce using rule 325 (common_scalar -> DNUMBER .)
    PLUS            reduce using rule 325 (common_scalar -> DNUMBER .)
    MINUS           reduce using rule 325 (common_scalar -> DNUMBER .)
    MUL             reduce using rule 325 (common_scalar -> DNUMBER .)
    DIV             reduce using rule 325 (common_scalar -> DNUMBER .)
    SL              reduce using rule 325 (common_scalar -> DNUMBER .)
    SR              reduce using rule 325 (common_scalar -> DNUMBER .)
    MOD             reduce using rule 325 (common_scalar -> DNUMBER .)
    IS_IDENTICAL    reduce using rule 325 (common_scalar -> DNUMBER .)
    IS_NOT_IDENTICAL reduce using rule 325 (common_scalar -> DNUMBER .)
    IS_EQUAL        reduce using rule 325 (common_scalar -> DNUMBER .)
    IS_NOT_EQUAL    reduce using rule 325 (common_scalar -> DNUMBER .)
    IS_SMALLER      reduce using rule 325 (common_scalar -> DNUMBER .)
    IS_SMALLER_OR_EQUAL reduce using rule 325 (common_scalar -> DNUMBER .)
    IS_GREATER      reduce using rule 325 (common_scalar -> DNUMBER .)
    IS_GREATER_OR_EQUAL reduce using rule 325 (common_scalar -> DNUMBER .)
    INSTANCEOF      reduce using rule 325 (common_scalar -> DNUMBER .)
    QUESTION        reduce using rule 325 (common_scalar -> DNUMBER .)
    DOUBLE_ARROW    reduce using rule 325 (common_scalar -> DNUMBER .)
    COMMA           reduce using rule 325 (common_scalar -> DNUMBER .)
    RPAREN          reduce using rule 325 (common_scalar -> DNUMBER .)
    AS              reduce using rule 325 (common_scalar -> DNUMBER .)
    RBRACE          reduce using rule 325 (common_scalar -> DNUMBER .)
    RBRACKET        reduce using rule 325 (common_scalar -> DNUMBER .)
    COLON           reduce using rule 325 (common_scalar -> DNUMBER .)


state 12

    (8) top_statement -> NAMESPACE . namespace_name SEMI
    (9) top_statement -> NAMESPACE . LBRACE top_statement_list RBRACE
    (10) top_statement -> NAMESPACE . namespace_name LBRACE top_statement_list RBRACE
    (321) scalar -> NAMESPACE . NS_SEPARATOR namespace_name
    (188) function_call -> NAMESPACE . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (166) class_name -> NAMESPACE . NS_SEPARATOR namespace_name
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    LBRACE          shift and go to state 105
    NS_SEPARATOR    shift and go to state 106
    STRING          shift and go to state 89

    namespace_name                 shift and go to state 107

state 13

    (34) statement -> FOREACH . LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement

    LPAREN          shift and go to state 108


state 14

    (303) expr -> EVAL . LPAREN expr RPAREN

    LPAREN          shift and go to state 109


state 15

    (333) common_scalar -> NS_C .

    SEMI            reduce using rule 333 (common_scalar -> NS_C .)
    BOOLEAN_AND     reduce using rule 333 (common_scalar -> NS_C .)
    BOOLEAN_OR      reduce using rule 333 (common_scalar -> NS_C .)
    LOGICAL_AND     reduce using rule 333 (common_scalar -> NS_C .)
    LOGICAL_OR      reduce using rule 333 (common_scalar -> NS_C .)
    LOGICAL_XOR     reduce using rule 333 (common_scalar -> NS_C .)
    AND             reduce using rule 333 (common_scalar -> NS_C .)
    OR              reduce using rule 333 (common_scalar -> NS_C .)
    XOR             reduce using rule 333 (common_scalar -> NS_C .)
    CONCAT          reduce using rule 333 (common_scalar -> NS_C .)
    PLUS            reduce using rule 333 (common_scalar -> NS_C .)
    MINUS           reduce using rule 333 (common_scalar -> NS_C .)
    MUL             reduce using rule 333 (common_scalar -> NS_C .)
    DIV             reduce using rule 333 (common_scalar -> NS_C .)
    SL              reduce using rule 333 (common_scalar -> NS_C .)
    SR              reduce using rule 333 (common_scalar -> NS_C .)
    MOD             reduce using rule 333 (common_scalar -> NS_C .)
    IS_IDENTICAL    reduce using rule 333 (common_scalar -> NS_C .)
    IS_NOT_IDENTICAL reduce using rule 333 (common_scalar -> NS_C .)
    IS_EQUAL        reduce using rule 333 (common_scalar -> NS_C .)
    IS_NOT_EQUAL    reduce using rule 333 (common_scalar -> NS_C .)
    IS_SMALLER      reduce using rule 333 (common_scalar -> NS_C .)
    IS_SMALLER_OR_EQUAL reduce using rule 333 (common_scalar -> NS_C .)
    IS_GREATER      reduce using rule 333 (common_scalar -> NS_C .)
    IS_GREATER_OR_EQUAL reduce using rule 333 (common_scalar -> NS_C .)
    INSTANCEOF      reduce using rule 333 (common_scalar -> NS_C .)
    QUESTION        reduce using rule 333 (common_scalar -> NS_C .)
    DOUBLE_ARROW    reduce using rule 333 (common_scalar -> NS_C .)
    COMMA           reduce using rule 333 (common_scalar -> NS_C .)
    RPAREN          reduce using rule 333 (common_scalar -> NS_C .)
    AS              reduce using rule 333 (common_scalar -> NS_C .)
    RBRACE          reduce using rule 333 (common_scalar -> NS_C .)
    RBRACKET        reduce using rule 333 (common_scalar -> NS_C .)
    COLON           reduce using rule 333 (common_scalar -> NS_C .)


state 16

    (53) statement -> DECLARE . LPAREN declare_list RPAREN declare_statement

    LPAREN          shift and go to state 110


state 17

    (330) common_scalar -> CLASS_C .

    SEMI            reduce using rule 330 (common_scalar -> CLASS_C .)
    BOOLEAN_AND     reduce using rule 330 (common_scalar -> CLASS_C .)
    BOOLEAN_OR      reduce using rule 330 (common_scalar -> CLASS_C .)
    LOGICAL_AND     reduce using rule 330 (common_scalar -> CLASS_C .)
    LOGICAL_OR      reduce using rule 330 (common_scalar -> CLASS_C .)
    LOGICAL_XOR     reduce using rule 330 (common_scalar -> CLASS_C .)
    AND             reduce using rule 330 (common_scalar -> CLASS_C .)
    OR              reduce using rule 330 (common_scalar -> CLASS_C .)
    XOR             reduce using rule 330 (common_scalar -> CLASS_C .)
    CONCAT          reduce using rule 330 (common_scalar -> CLASS_C .)
    PLUS            reduce using rule 330 (common_scalar -> CLASS_C .)
    MINUS           reduce using rule 330 (common_scalar -> CLASS_C .)
    MUL             reduce using rule 330 (common_scalar -> CLASS_C .)
    DIV             reduce using rule 330 (common_scalar -> CLASS_C .)
    SL              reduce using rule 330 (common_scalar -> CLASS_C .)
    SR              reduce using rule 330 (common_scalar -> CLASS_C .)
    MOD             reduce using rule 330 (common_scalar -> CLASS_C .)
    IS_IDENTICAL    reduce using rule 330 (common_scalar -> CLASS_C .)
    IS_NOT_IDENTICAL reduce using rule 330 (common_scalar -> CLASS_C .)
    IS_EQUAL        reduce using rule 330 (common_scalar -> CLASS_C .)
    IS_NOT_EQUAL    reduce using rule 330 (common_scalar -> CLASS_C .)
    IS_SMALLER      reduce using rule 330 (common_scalar -> CLASS_C .)
    IS_SMALLER_OR_EQUAL reduce using rule 330 (common_scalar -> CLASS_C .)
    IS_GREATER      reduce using rule 330 (common_scalar -> CLASS_C .)
    IS_GREATER_OR_EQUAL reduce using rule 330 (common_scalar -> CLASS_C .)
    INSTANCEOF      reduce using rule 330 (common_scalar -> CLASS_C .)
    QUESTION        reduce using rule 330 (common_scalar -> CLASS_C .)
    DOUBLE_ARROW    reduce using rule 330 (common_scalar -> CLASS_C .)
    COMMA           reduce using rule 330 (common_scalar -> CLASS_C .)
    RPAREN          reduce using rule 330 (common_scalar -> CLASS_C .)
    AS              reduce using rule 330 (common_scalar -> CLASS_C .)
    RBRACE          reduce using rule 330 (common_scalar -> CLASS_C .)
    RBRACKET        reduce using rule 330 (common_scalar -> CLASS_C .)
    COLON           reduce using rule 330 (common_scalar -> CLASS_C .)


state 18

    (305) expr -> INCLUDE_ONCE . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 111

state 19

    (175) expr -> CLONE . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 112

state 20

    (106) class_entry_type -> CLASS .

    STRING          reduce using rule 106 (class_entry_type -> CLASS .)


state 21

    (105) class_declaration_statement -> INTERFACE . STRING interface_extends_list LBRACE class_statement_list RBRACE

    STRING          shift and go to state 113


state 22

    (7) top_statement -> HALT_COMPILER . LPAREN RPAREN SEMI

    LPAREN          shift and go to state 114


state 23

    (40) statement -> RETURN . SEMI
    (41) statement -> RETURN . expr SEMI
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    SEMI            shift and go to state 116
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 115

state 24

    (314) scalar -> class_constant .

    BOOLEAN_AND     reduce using rule 314 (scalar -> class_constant .)
    BOOLEAN_OR      reduce using rule 314 (scalar -> class_constant .)
    LOGICAL_AND     reduce using rule 314 (scalar -> class_constant .)
    LOGICAL_OR      reduce using rule 314 (scalar -> class_constant .)
    LOGICAL_XOR     reduce using rule 314 (scalar -> class_constant .)
    AND             reduce using rule 314 (scalar -> class_constant .)
    OR              reduce using rule 314 (scalar -> class_constant .)
    XOR             reduce using rule 314 (scalar -> class_constant .)
    CONCAT          reduce using rule 314 (scalar -> class_constant .)
    PLUS            reduce using rule 314 (scalar -> class_constant .)
    MINUS           reduce using rule 314 (scalar -> class_constant .)
    MUL             reduce using rule 314 (scalar -> class_constant .)
    DIV             reduce using rule 314 (scalar -> class_constant .)
    SL              reduce using rule 314 (scalar -> class_constant .)
    SR              reduce using rule 314 (scalar -> class_constant .)
    MOD             reduce using rule 314 (scalar -> class_constant .)
    IS_IDENTICAL    reduce using rule 314 (scalar -> class_constant .)
    IS_NOT_IDENTICAL reduce using rule 314 (scalar -> class_constant .)
    IS_EQUAL        reduce using rule 314 (scalar -> class_constant .)
    IS_NOT_EQUAL    reduce using rule 314 (scalar -> class_constant .)
    IS_SMALLER      reduce using rule 314 (scalar -> class_constant .)
    IS_SMALLER_OR_EQUAL reduce using rule 314 (scalar -> class_constant .)
    IS_GREATER      reduce using rule 314 (scalar -> class_constant .)
    IS_GREATER_OR_EQUAL reduce using rule 314 (scalar -> class_constant .)
    INSTANCEOF      reduce using rule 314 (scalar -> class_constant .)
    QUESTION        reduce using rule 314 (scalar -> class_constant .)
    RPAREN          reduce using rule 314 (scalar -> class_constant .)
    COMMA           reduce using rule 314 (scalar -> class_constant .)
    SEMI            reduce using rule 314 (scalar -> class_constant .)
    AS              reduce using rule 314 (scalar -> class_constant .)
    RBRACE          reduce using rule 314 (scalar -> class_constant .)
    RBRACKET        reduce using rule 314 (scalar -> class_constant .)
    DOUBLE_ARROW    reduce using rule 314 (scalar -> class_constant .)
    COLON           reduce using rule 314 (scalar -> class_constant .)


state 25

    (306) expr -> REQUIRE . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 117

state 26

    (297) expr -> BOOL_CAST . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 118

state 27

    (185) base_variable_with_function_calls -> function_call .

    OBJECT_OPERATOR reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    EQUALS          reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    PLUS_EQUAL      reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    MINUS_EQUAL     reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    MUL_EQUAL       reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    DIV_EQUAL       reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    CONCAT_EQUAL    reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    MOD_EQUAL       reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    AND_EQUAL       reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    OR_EQUAL        reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    XOR_EQUAL       reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    SL_EQUAL        reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    SR_EQUAL        reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    INC             reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    DEC             reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    SEMI            reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    BOOLEAN_AND     reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    BOOLEAN_OR      reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    LOGICAL_AND     reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    LOGICAL_OR      reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    LOGICAL_XOR     reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    AND             reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    OR              reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    XOR             reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    CONCAT          reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    PLUS            reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    MINUS           reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    MUL             reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    DIV             reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    SL              reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    SR              reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    MOD             reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    IS_IDENTICAL    reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    IS_NOT_IDENTICAL reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    IS_EQUAL        reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    IS_NOT_EQUAL    reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    IS_SMALLER      reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    IS_SMALLER_OR_EQUAL reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    IS_GREATER      reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    IS_GREATER_OR_EQUAL reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    INSTANCEOF      reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    QUESTION        reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    COMMA           reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    RPAREN          reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    AS              reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    RBRACE          reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    RBRACKET        reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    DOUBLE_ARROW    reduce using rule 185 (base_variable_with_function_calls -> function_call .)
    COLON           reduce using rule 185 (base_variable_with_function_calls -> function_call .)


state 28

    (286) expr -> BOOLEAN_NOT . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 119

state 29

    (43) statement -> STATIC . static_var_list SEMI
    (167) class_name -> STATIC .
    (94) static_var_list -> . static_var_list COMMA static_var
    (95) static_var_list -> . static_var
    (96) static_var -> . VARIABLE EQUALS static_scalar
    (97) static_var -> . VARIABLE

    DOUBLE_COLON    reduce using rule 167 (class_name -> STATIC .)
    VARIABLE        shift and go to state 122

    static_var                     shift and go to state 120
    static_var_list                shift and go to state 121

state 30

    (311) expr -> PRINT . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 123

state 31

    (289) expr -> DEC . variable
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NS_SEPARATOR    shift and go to state 129
    NAMESPACE       shift and go to state 128
    DOLLAR          shift and go to state 90
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    VARIABLE        shift and go to state 56

    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    compound_variable              shift and go to state 72
    class_name                     shift and go to state 124
    variable_class_name            shift and go to state 127
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 126
    static_member                  shift and go to state 86
    variable                       shift and go to state 125
    namespace_name                 shift and go to state 130

state 32

    (108) class_entry_type -> FINAL . CLASS

    CLASS           shift and go to state 131


state 33

    (302) expr -> EMPTY . LPAREN expr RPAREN

    LPAREN          shift and go to state 132


state 34

    (294) expr -> STRING_CAST . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 133

state 35

    (326) common_scalar -> CONSTANT_ENCAPSED_STRING .

    SEMI            reduce using rule 326 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    BOOLEAN_AND     reduce using rule 326 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    BOOLEAN_OR      reduce using rule 326 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    LOGICAL_AND     reduce using rule 326 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    LOGICAL_OR      reduce using rule 326 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    LOGICAL_XOR     reduce using rule 326 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    AND             reduce using rule 326 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    OR              reduce using rule 326 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    XOR             reduce using rule 326 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    CONCAT          reduce using rule 326 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    PLUS            reduce using rule 326 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    MINUS           reduce using rule 326 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    MUL             reduce using rule 326 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    DIV             reduce using rule 326 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    SL              reduce using rule 326 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    SR              reduce using rule 326 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    MOD             reduce using rule 326 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    IS_IDENTICAL    reduce using rule 326 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    IS_NOT_IDENTICAL reduce using rule 326 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    IS_EQUAL        reduce using rule 326 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    IS_NOT_EQUAL    reduce using rule 326 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    IS_SMALLER      reduce using rule 326 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    IS_SMALLER_OR_EQUAL reduce using rule 326 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    IS_GREATER      reduce using rule 326 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    IS_GREATER_OR_EQUAL reduce using rule 326 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    INSTANCEOF      reduce using rule 326 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    QUESTION        reduce using rule 326 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    DOUBLE_ARROW    reduce using rule 326 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    COMMA           reduce using rule 326 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    RPAREN          reduce using rule 326 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    AS              reduce using rule 326 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    RBRACE          reduce using rule 326 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    RBRACKET        reduce using rule 326 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    COLON           reduce using rule 326 (common_scalar -> CONSTANT_ENCAPSED_STRING .)


state 36

    (33) statement -> FOR . LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement

    LPAREN          shift and go to state 134


state 37

    (296) expr -> OBJECT_CAST . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 135

state 38

    (182) variable -> base_variable_with_function_calls . OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> base_variable_with_function_calls .

    OBJECT_OPERATOR shift and go to state 136
    EQUALS          reduce using rule 183 (variable -> base_variable_with_function_calls .)
    PLUS_EQUAL      reduce using rule 183 (variable -> base_variable_with_function_calls .)
    MINUS_EQUAL     reduce using rule 183 (variable -> base_variable_with_function_calls .)
    MUL_EQUAL       reduce using rule 183 (variable -> base_variable_with_function_calls .)
    DIV_EQUAL       reduce using rule 183 (variable -> base_variable_with_function_calls .)
    CONCAT_EQUAL    reduce using rule 183 (variable -> base_variable_with_function_calls .)
    MOD_EQUAL       reduce using rule 183 (variable -> base_variable_with_function_calls .)
    AND_EQUAL       reduce using rule 183 (variable -> base_variable_with_function_calls .)
    OR_EQUAL        reduce using rule 183 (variable -> base_variable_with_function_calls .)
    XOR_EQUAL       reduce using rule 183 (variable -> base_variable_with_function_calls .)
    SL_EQUAL        reduce using rule 183 (variable -> base_variable_with_function_calls .)
    SR_EQUAL        reduce using rule 183 (variable -> base_variable_with_function_calls .)
    INC             reduce using rule 183 (variable -> base_variable_with_function_calls .)
    DEC             reduce using rule 183 (variable -> base_variable_with_function_calls .)
    AS              reduce using rule 183 (variable -> base_variable_with_function_calls .)
    BOOLEAN_AND     reduce using rule 183 (variable -> base_variable_with_function_calls .)
    BOOLEAN_OR      reduce using rule 183 (variable -> base_variable_with_function_calls .)
    LOGICAL_AND     reduce using rule 183 (variable -> base_variable_with_function_calls .)
    LOGICAL_OR      reduce using rule 183 (variable -> base_variable_with_function_calls .)
    LOGICAL_XOR     reduce using rule 183 (variable -> base_variable_with_function_calls .)
    AND             reduce using rule 183 (variable -> base_variable_with_function_calls .)
    OR              reduce using rule 183 (variable -> base_variable_with_function_calls .)
    XOR             reduce using rule 183 (variable -> base_variable_with_function_calls .)
    CONCAT          reduce using rule 183 (variable -> base_variable_with_function_calls .)
    PLUS            reduce using rule 183 (variable -> base_variable_with_function_calls .)
    MINUS           reduce using rule 183 (variable -> base_variable_with_function_calls .)
    MUL             reduce using rule 183 (variable -> base_variable_with_function_calls .)
    DIV             reduce using rule 183 (variable -> base_variable_with_function_calls .)
    SL              reduce using rule 183 (variable -> base_variable_with_function_calls .)
    SR              reduce using rule 183 (variable -> base_variable_with_function_calls .)
    MOD             reduce using rule 183 (variable -> base_variable_with_function_calls .)
    IS_IDENTICAL    reduce using rule 183 (variable -> base_variable_with_function_calls .)
    IS_NOT_IDENTICAL reduce using rule 183 (variable -> base_variable_with_function_calls .)
    IS_EQUAL        reduce using rule 183 (variable -> base_variable_with_function_calls .)
    IS_NOT_EQUAL    reduce using rule 183 (variable -> base_variable_with_function_calls .)
    IS_SMALLER      reduce using rule 183 (variable -> base_variable_with_function_calls .)
    IS_SMALLER_OR_EQUAL reduce using rule 183 (variable -> base_variable_with_function_calls .)
    IS_GREATER      reduce using rule 183 (variable -> base_variable_with_function_calls .)
    IS_GREATER_OR_EQUAL reduce using rule 183 (variable -> base_variable_with_function_calls .)
    INSTANCEOF      reduce using rule 183 (variable -> base_variable_with_function_calls .)
    QUESTION        reduce using rule 183 (variable -> base_variable_with_function_calls .)
    SEMI            reduce using rule 183 (variable -> base_variable_with_function_calls .)
    COMMA           reduce using rule 183 (variable -> base_variable_with_function_calls .)
    RPAREN          reduce using rule 183 (variable -> base_variable_with_function_calls .)
    RBRACE          reduce using rule 183 (variable -> base_variable_with_function_calls .)
    RBRACKET        reduce using rule 183 (variable -> base_variable_with_function_calls .)
    DOUBLE_ARROW    reduce using rule 183 (variable -> base_variable_with_function_calls .)
    COLON           reduce using rule 183 (variable -> base_variable_with_function_calls .)


state 39

    (312) expr -> AT . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 137

state 40

    (103) function_declaration_statement -> FUNCTION . is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (240) expr -> FUNCTION . is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (145) is_reference -> . AND
    (146) is_reference -> . empty
    (363) empty -> .

    AND             shift and go to state 138
    STRING          reduce using rule 363 (empty -> .)
    LPAREN          reduce using rule 363 (empty -> .)

    is_reference                   shift and go to state 139
    empty                          shift and go to state 140

state 41

    (323) class_constant -> variable_class_name . DOUBLE_COLON STRING
    (191) function_call -> variable_class_name . DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> variable_class_name . DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (204) static_member -> variable_class_name . DOUBLE_COLON variable_without_objects

    DOUBLE_COLON    shift and go to state 141


state 42

    (44) statement -> ECHO . echo_expr_list SEMI
    (98) echo_expr_list -> . echo_expr_list COMMA expr
    (99) echo_expr_list -> . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    echo_expr_list                 shift and go to state 143
    expr                           shift and go to state 142

state 43

    (49) statement -> TRY . LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches

    LBRACE          shift and go to state 144


state 44

    (184) base_variable_with_function_calls -> base_variable .

    OBJECT_OPERATOR reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    EQUALS          reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    PLUS_EQUAL      reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    MINUS_EQUAL     reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    MUL_EQUAL       reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    DIV_EQUAL       reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    CONCAT_EQUAL    reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    MOD_EQUAL       reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    AND_EQUAL       reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    OR_EQUAL        reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    XOR_EQUAL       reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    SL_EQUAL        reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    SR_EQUAL        reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    INC             reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    DEC             reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    SEMI            reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    BOOLEAN_AND     reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    BOOLEAN_OR      reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    LOGICAL_AND     reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    LOGICAL_OR      reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    LOGICAL_XOR     reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    AND             reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    OR              reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    XOR             reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    CONCAT          reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    PLUS            reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    MINUS           reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    MUL             reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    DIV             reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    SL              reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    SR              reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    MOD             reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    IS_IDENTICAL    reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    IS_NOT_IDENTICAL reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    IS_EQUAL        reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    IS_NOT_EQUAL    reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    IS_SMALLER      reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    IS_GREATER      reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    IS_GREATER_OR_EQUAL reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    INSTANCEOF      reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    QUESTION        reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    COMMA           reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    RPAREN          reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    AS              reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    RBRACE          reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    RBRACKET        reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    DOUBLE_ARROW    reduce using rule 184 (base_variable_with_function_calls -> base_variable .)
    COLON           reduce using rule 184 (base_variable_with_function_calls -> base_variable .)


state 45

    (304) expr -> INCLUDE . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 145

state 46

    (307) expr -> REQUIRE_ONCE . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 146

state 47

    (28) statement -> LBRACE . inner_statement_list RBRACE
    (22) inner_statement_list -> . inner_statement_list inner_statement
    (23) inner_statement_list -> . empty
    (363) empty -> .

    RBRACE          reduce using rule 363 (empty -> .)
    HALT_COMPILER   reduce using rule 363 (empty -> .)
    LBRACE          reduce using rule 363 (empty -> .)
    IF              reduce using rule 363 (empty -> .)
    WHILE           reduce using rule 363 (empty -> .)
    DO              reduce using rule 363 (empty -> .)
    FOR             reduce using rule 363 (empty -> .)
    FOREACH         reduce using rule 363 (empty -> .)
    SWITCH          reduce using rule 363 (empty -> .)
    BREAK           reduce using rule 363 (empty -> .)
    CONTINUE        reduce using rule 363 (empty -> .)
    RETURN          reduce using rule 363 (empty -> .)
    GLOBAL          reduce using rule 363 (empty -> .)
    STATIC          reduce using rule 363 (empty -> .)
    ECHO            reduce using rule 363 (empty -> .)
    INLINE_HTML     reduce using rule 363 (empty -> .)
    UNSET           reduce using rule 363 (empty -> .)
    SEMI            reduce using rule 363 (empty -> .)
    TRY             reduce using rule 363 (empty -> .)
    THROW           reduce using rule 363 (empty -> .)
    DECLARE         reduce using rule 363 (empty -> .)
    FUNCTION        reduce using rule 363 (empty -> .)
    INTERFACE       reduce using rule 363 (empty -> .)
    NEW             reduce using rule 363 (empty -> .)
    CLONE           reduce using rule 363 (empty -> .)
    LIST            reduce using rule 363 (empty -> .)
    ARRAY           reduce using rule 363 (empty -> .)
    PLUS            reduce using rule 363 (empty -> .)
    MINUS           reduce using rule 363 (empty -> .)
    NOT             reduce using rule 363 (empty -> .)
    BOOLEAN_NOT     reduce using rule 363 (empty -> .)
    INC             reduce using rule 363 (empty -> .)
    DEC             reduce using rule 363 (empty -> .)
    INT_CAST        reduce using rule 363 (empty -> .)
    DOUBLE_CAST     reduce using rule 363 (empty -> .)
    STRING_CAST     reduce using rule 363 (empty -> .)
    ARRAY_CAST      reduce using rule 363 (empty -> .)
    OBJECT_CAST     reduce using rule 363 (empty -> .)
    BOOL_CAST       reduce using rule 363 (empty -> .)
    UNSET_CAST      reduce using rule 363 (empty -> .)
    ISSET           reduce using rule 363 (empty -> .)
    EMPTY           reduce using rule 363 (empty -> .)
    EVAL            reduce using rule 363 (empty -> .)
    INCLUDE         reduce using rule 363 (empty -> .)
    INCLUDE_ONCE    reduce using rule 363 (empty -> .)
    REQUIRE         reduce using rule 363 (empty -> .)
    REQUIRE_ONCE    reduce using rule 363 (empty -> .)
    EXIT            reduce using rule 363 (empty -> .)
    PRINT           reduce using rule 363 (empty -> .)
    AT              reduce using rule 363 (empty -> .)
    LPAREN          reduce using rule 363 (empty -> .)
    CLASS           reduce using rule 363 (empty -> .)
    ABSTRACT        reduce using rule 363 (empty -> .)
    FINAL           reduce using rule 363 (empty -> .)
    QUOTE           reduce using rule 363 (empty -> .)
    START_HEREDOC   reduce using rule 363 (empty -> .)
    STRING_VARNAME  reduce using rule 363 (empty -> .)
    NS_SEPARATOR    reduce using rule 363 (empty -> .)
    NAMESPACE       reduce using rule 363 (empty -> .)
    LNUMBER         reduce using rule 363 (empty -> .)
    DNUMBER         reduce using rule 363 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 363 (empty -> .)
    LINE            reduce using rule 363 (empty -> .)
    FILE            reduce using rule 363 (empty -> .)
    DIR             reduce using rule 363 (empty -> .)
    CLASS_C         reduce using rule 363 (empty -> .)
    METHOD_C        reduce using rule 363 (empty -> .)
    FUNC_C          reduce using rule 363 (empty -> .)
    NS_C            reduce using rule 363 (empty -> .)
    STRING          reduce using rule 363 (empty -> .)
    DOLLAR          reduce using rule 363 (empty -> .)
    VARIABLE        reduce using rule 363 (empty -> .)

    inner_statement_list           shift and go to state 147
    empty                          shift and go to state 148

state 48

    (38) statement -> CONTINUE . SEMI
    (39) statement -> CONTINUE . expr SEMI
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    SEMI            shift and go to state 150
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 149

state 49

    (329) common_scalar -> DIR .

    SEMI            reduce using rule 329 (common_scalar -> DIR .)
    BOOLEAN_AND     reduce using rule 329 (common_scalar -> DIR .)
    BOOLEAN_OR      reduce using rule 329 (common_scalar -> DIR .)
    LOGICAL_AND     reduce using rule 329 (common_scalar -> DIR .)
    LOGICAL_OR      reduce using rule 329 (common_scalar -> DIR .)
    LOGICAL_XOR     reduce using rule 329 (common_scalar -> DIR .)
    AND             reduce using rule 329 (common_scalar -> DIR .)
    OR              reduce using rule 329 (common_scalar -> DIR .)
    XOR             reduce using rule 329 (common_scalar -> DIR .)
    CONCAT          reduce using rule 329 (common_scalar -> DIR .)
    PLUS            reduce using rule 329 (common_scalar -> DIR .)
    MINUS           reduce using rule 329 (common_scalar -> DIR .)
    MUL             reduce using rule 329 (common_scalar -> DIR .)
    DIV             reduce using rule 329 (common_scalar -> DIR .)
    SL              reduce using rule 329 (common_scalar -> DIR .)
    SR              reduce using rule 329 (common_scalar -> DIR .)
    MOD             reduce using rule 329 (common_scalar -> DIR .)
    IS_IDENTICAL    reduce using rule 329 (common_scalar -> DIR .)
    IS_NOT_IDENTICAL reduce using rule 329 (common_scalar -> DIR .)
    IS_EQUAL        reduce using rule 329 (common_scalar -> DIR .)
    IS_NOT_EQUAL    reduce using rule 329 (common_scalar -> DIR .)
    IS_SMALLER      reduce using rule 329 (common_scalar -> DIR .)
    IS_SMALLER_OR_EQUAL reduce using rule 329 (common_scalar -> DIR .)
    IS_GREATER      reduce using rule 329 (common_scalar -> DIR .)
    IS_GREATER_OR_EQUAL reduce using rule 329 (common_scalar -> DIR .)
    INSTANCEOF      reduce using rule 329 (common_scalar -> DIR .)
    QUESTION        reduce using rule 329 (common_scalar -> DIR .)
    DOUBLE_ARROW    reduce using rule 329 (common_scalar -> DIR .)
    COMMA           reduce using rule 329 (common_scalar -> DIR .)
    RPAREN          reduce using rule 329 (common_scalar -> DIR .)
    AS              reduce using rule 329 (common_scalar -> DIR .)
    RBRACE          reduce using rule 329 (common_scalar -> DIR .)
    RBRACKET        reduce using rule 329 (common_scalar -> DIR .)
    COLON           reduce using rule 329 (common_scalar -> DIR .)


state 50

    (316) scalar -> QUOTE . encaps_list QUOTE
    (351) encaps_list -> . encaps_list encaps_var
    (352) encaps_list -> . empty
    (353) encaps_list -> . encaps_list ENCAPSED_AND_WHITESPACE
    (363) empty -> .

    QUOTE           reduce using rule 363 (empty -> .)
    ENCAPSED_AND_WHITESPACE reduce using rule 363 (empty -> .)
    VARIABLE        reduce using rule 363 (empty -> .)
    DOLLAR_OPEN_CURLY_BRACES reduce using rule 363 (empty -> .)
    CURLY_OPEN      reduce using rule 363 (empty -> .)

    encaps_list                    shift and go to state 151
    empty                          shift and go to state 152

state 51

    (285) expr -> NOT . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 153

state 52

    (2) top_statement_list -> top_statement_list top_statement .

    HALT_COMPILER   reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    NAMESPACE       reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    CONST           reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    USE             reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    LBRACE          reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    IF              reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    WHILE           reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    DO              reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    FOR             reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    FOREACH         reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    SWITCH          reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    BREAK           reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    CONTINUE        reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    RETURN          reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    GLOBAL          reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    STATIC          reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    ECHO            reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    INLINE_HTML     reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    UNSET           reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    SEMI            reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    TRY             reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    THROW           reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    DECLARE         reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    FUNCTION        reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    INTERFACE       reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    NEW             reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    CLONE           reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    LIST            reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    ARRAY           reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    PLUS            reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    MINUS           reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    NOT             reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    BOOLEAN_NOT     reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    INC             reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    DEC             reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    INT_CAST        reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    DOUBLE_CAST     reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    STRING_CAST     reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    ARRAY_CAST      reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    OBJECT_CAST     reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    BOOL_CAST       reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    UNSET_CAST      reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    ISSET           reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    EMPTY           reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    EVAL            reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    INCLUDE         reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    INCLUDE_ONCE    reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    REQUIRE         reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    REQUIRE_ONCE    reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    EXIT            reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    PRINT           reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    AT              reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    LPAREN          reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    CLASS           reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    ABSTRACT        reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    FINAL           reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    QUOTE           reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    START_HEREDOC   reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    STRING_VARNAME  reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    NS_SEPARATOR    reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    LNUMBER         reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    DNUMBER         reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    LINE            reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    FILE            reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    DIR             reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    CLASS_C         reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    METHOD_C        reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    FUNC_C          reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    NS_C            reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    STRING          reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    DOLLAR          reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    VARIABLE        reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    $end            reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    RBRACE          reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)


state 53

    (104) class_declaration_statement -> class_entry_type . STRING extends_from implements_list LBRACE class_statement_list RBRACE

    STRING          shift and go to state 154


state 54

    (322) class_constant -> class_name . DOUBLE_COLON STRING
    (189) function_call -> class_name . DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> class_name . DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (203) static_member -> class_name . DOUBLE_COLON variable_without_objects

    DOUBLE_COLON    shift and go to state 155


state 55

    (42) statement -> GLOBAL . global_var_list SEMI
    (89) global_var_list -> . global_var_list COMMA global_var
    (90) global_var_list -> . global_var
    (91) global_var -> . VARIABLE
    (92) global_var -> . DOLLAR variable
    (93) global_var -> . DOLLAR LBRACE expr RBRACE

    VARIABLE        shift and go to state 159
    DOLLAR          shift and go to state 157

    global_var                     shift and go to state 156
    global_var_list                shift and go to state 158

state 56

    (209) compound_variable -> VARIABLE .

    LBRACKET        reduce using rule 209 (compound_variable -> VARIABLE .)
    LBRACE          reduce using rule 209 (compound_variable -> VARIABLE .)
    DOUBLE_COLON    reduce using rule 209 (compound_variable -> VARIABLE .)
    OBJECT_OPERATOR reduce using rule 209 (compound_variable -> VARIABLE .)
    EQUALS          reduce using rule 209 (compound_variable -> VARIABLE .)
    PLUS_EQUAL      reduce using rule 209 (compound_variable -> VARIABLE .)
    MINUS_EQUAL     reduce using rule 209 (compound_variable -> VARIABLE .)
    MUL_EQUAL       reduce using rule 209 (compound_variable -> VARIABLE .)
    DIV_EQUAL       reduce using rule 209 (compound_variable -> VARIABLE .)
    CONCAT_EQUAL    reduce using rule 209 (compound_variable -> VARIABLE .)
    MOD_EQUAL       reduce using rule 209 (compound_variable -> VARIABLE .)
    AND_EQUAL       reduce using rule 209 (compound_variable -> VARIABLE .)
    OR_EQUAL        reduce using rule 209 (compound_variable -> VARIABLE .)
    XOR_EQUAL       reduce using rule 209 (compound_variable -> VARIABLE .)
    SL_EQUAL        reduce using rule 209 (compound_variable -> VARIABLE .)
    SR_EQUAL        reduce using rule 209 (compound_variable -> VARIABLE .)
    INC             reduce using rule 209 (compound_variable -> VARIABLE .)
    DEC             reduce using rule 209 (compound_variable -> VARIABLE .)
    BOOLEAN_AND     reduce using rule 209 (compound_variable -> VARIABLE .)
    BOOLEAN_OR      reduce using rule 209 (compound_variable -> VARIABLE .)
    LOGICAL_AND     reduce using rule 209 (compound_variable -> VARIABLE .)
    LOGICAL_OR      reduce using rule 209 (compound_variable -> VARIABLE .)
    LOGICAL_XOR     reduce using rule 209 (compound_variable -> VARIABLE .)
    AND             reduce using rule 209 (compound_variable -> VARIABLE .)
    OR              reduce using rule 209 (compound_variable -> VARIABLE .)
    XOR             reduce using rule 209 (compound_variable -> VARIABLE .)
    CONCAT          reduce using rule 209 (compound_variable -> VARIABLE .)
    PLUS            reduce using rule 209 (compound_variable -> VARIABLE .)
    MINUS           reduce using rule 209 (compound_variable -> VARIABLE .)
    MUL             reduce using rule 209 (compound_variable -> VARIABLE .)
    DIV             reduce using rule 209 (compound_variable -> VARIABLE .)
    SL              reduce using rule 209 (compound_variable -> VARIABLE .)
    SR              reduce using rule 209 (compound_variable -> VARIABLE .)
    MOD             reduce using rule 209 (compound_variable -> VARIABLE .)
    IS_IDENTICAL    reduce using rule 209 (compound_variable -> VARIABLE .)
    IS_NOT_IDENTICAL reduce using rule 209 (compound_variable -> VARIABLE .)
    IS_EQUAL        reduce using rule 209 (compound_variable -> VARIABLE .)
    IS_NOT_EQUAL    reduce using rule 209 (compound_variable -> VARIABLE .)
    IS_SMALLER      reduce using rule 209 (compound_variable -> VARIABLE .)
    IS_SMALLER_OR_EQUAL reduce using rule 209 (compound_variable -> VARIABLE .)
    IS_GREATER      reduce using rule 209 (compound_variable -> VARIABLE .)
    IS_GREATER_OR_EQUAL reduce using rule 209 (compound_variable -> VARIABLE .)
    INSTANCEOF      reduce using rule 209 (compound_variable -> VARIABLE .)
    QUESTION        reduce using rule 209 (compound_variable -> VARIABLE .)
    SEMI            reduce using rule 209 (compound_variable -> VARIABLE .)
    COMMA           reduce using rule 209 (compound_variable -> VARIABLE .)
    RPAREN          reduce using rule 209 (compound_variable -> VARIABLE .)
    AS              reduce using rule 209 (compound_variable -> VARIABLE .)
    RBRACE          reduce using rule 209 (compound_variable -> VARIABLE .)
    RBRACKET        reduce using rule 209 (compound_variable -> VARIABLE .)
    DOUBLE_ARROW    reduce using rule 209 (compound_variable -> VARIABLE .)
    COLON           reduce using rule 209 (compound_variable -> VARIABLE .)
    LPAREN          reduce using rule 209 (compound_variable -> VARIABLE .)


state 57

    (31) statement -> WHILE . LPAREN expr RPAREN while_statement

    LPAREN          shift and go to state 160


state 58

    (161) expr -> NEW . class_name_reference ctor_arguments
    (162) class_name_reference -> . class_name
    (163) class_name_reference -> . dynamic_class_name_reference
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (168) dynamic_class_name_reference -> . base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties
    (169) dynamic_class_name_reference -> . base_variable
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (205) variable_class_name -> . reference_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NS_SEPARATOR    shift and go to state 167
    NAMESPACE       shift and go to state 165
    STATIC          shift and go to state 101
    STRING          shift and go to state 89
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    base_variable                  shift and go to state 162
    class_name_reference           shift and go to state 163
    compound_variable              shift and go to state 72
    class_name                     shift and go to state 161
    variable_class_name            shift and go to state 166
    dynamic_class_name_reference   shift and go to state 170
    reference_variable             shift and go to state 164
    static_member                  shift and go to state 86
    simple_indirect_reference      shift and go to state 168
    namespace_name                 shift and go to state 169

state 59

    (317) scalar -> START_HEREDOC . encaps_list END_HEREDOC
    (351) encaps_list -> . encaps_list encaps_var
    (352) encaps_list -> . empty
    (353) encaps_list -> . encaps_list ENCAPSED_AND_WHITESPACE
    (363) empty -> .

    END_HEREDOC     reduce using rule 363 (empty -> .)
    ENCAPSED_AND_WHITESPACE reduce using rule 363 (empty -> .)
    VARIABLE        reduce using rule 363 (empty -> .)
    DOLLAR_OPEN_CURLY_BRACES reduce using rule 363 (empty -> .)
    CURLY_OPEN      reduce using rule 363 (empty -> .)

    encaps_list                    shift and go to state 171
    empty                          shift and go to state 152

state 60

    (288) expr -> INC . variable
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NS_SEPARATOR    shift and go to state 129
    NAMESPACE       shift and go to state 128
    DOLLAR          shift and go to state 90
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    VARIABLE        shift and go to state 56

    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    compound_variable              shift and go to state 72
    class_name                     shift and go to state 124
    variable_class_name            shift and go to state 127
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 126
    static_member                  shift and go to state 86
    variable                       shift and go to state 172
    namespace_name                 shift and go to state 130

state 61

    (35) statement -> SWITCH . LPAREN expr RPAREN switch_case_list

    LPAREN          shift and go to state 173


state 62

    (5) top_statement -> function_declaration_statement .

    RBRACE          reduce using rule 5 (top_statement -> function_declaration_statement .)
    HALT_COMPILER   reduce using rule 5 (top_statement -> function_declaration_statement .)
    NAMESPACE       reduce using rule 5 (top_statement -> function_declaration_statement .)
    CONST           reduce using rule 5 (top_statement -> function_declaration_statement .)
    USE             reduce using rule 5 (top_statement -> function_declaration_statement .)
    LBRACE          reduce using rule 5 (top_statement -> function_declaration_statement .)
    IF              reduce using rule 5 (top_statement -> function_declaration_statement .)
    WHILE           reduce using rule 5 (top_statement -> function_declaration_statement .)
    DO              reduce using rule 5 (top_statement -> function_declaration_statement .)
    FOR             reduce using rule 5 (top_statement -> function_declaration_statement .)
    FOREACH         reduce using rule 5 (top_statement -> function_declaration_statement .)
    SWITCH          reduce using rule 5 (top_statement -> function_declaration_statement .)
    BREAK           reduce using rule 5 (top_statement -> function_declaration_statement .)
    CONTINUE        reduce using rule 5 (top_statement -> function_declaration_statement .)
    RETURN          reduce using rule 5 (top_statement -> function_declaration_statement .)
    GLOBAL          reduce using rule 5 (top_statement -> function_declaration_statement .)
    STATIC          reduce using rule 5 (top_statement -> function_declaration_statement .)
    ECHO            reduce using rule 5 (top_statement -> function_declaration_statement .)
    INLINE_HTML     reduce using rule 5 (top_statement -> function_declaration_statement .)
    UNSET           reduce using rule 5 (top_statement -> function_declaration_statement .)
    SEMI            reduce using rule 5 (top_statement -> function_declaration_statement .)
    TRY             reduce using rule 5 (top_statement -> function_declaration_statement .)
    THROW           reduce using rule 5 (top_statement -> function_declaration_statement .)
    DECLARE         reduce using rule 5 (top_statement -> function_declaration_statement .)
    FUNCTION        reduce using rule 5 (top_statement -> function_declaration_statement .)
    INTERFACE       reduce using rule 5 (top_statement -> function_declaration_statement .)
    NEW             reduce using rule 5 (top_statement -> function_declaration_statement .)
    CLONE           reduce using rule 5 (top_statement -> function_declaration_statement .)
    LIST            reduce using rule 5 (top_statement -> function_declaration_statement .)
    ARRAY           reduce using rule 5 (top_statement -> function_declaration_statement .)
    PLUS            reduce using rule 5 (top_statement -> function_declaration_statement .)
    MINUS           reduce using rule 5 (top_statement -> function_declaration_statement .)
    NOT             reduce using rule 5 (top_statement -> function_declaration_statement .)
    BOOLEAN_NOT     reduce using rule 5 (top_statement -> function_declaration_statement .)
    INC             reduce using rule 5 (top_statement -> function_declaration_statement .)
    DEC             reduce using rule 5 (top_statement -> function_declaration_statement .)
    INT_CAST        reduce using rule 5 (top_statement -> function_declaration_statement .)
    DOUBLE_CAST     reduce using rule 5 (top_statement -> function_declaration_statement .)
    STRING_CAST     reduce using rule 5 (top_statement -> function_declaration_statement .)
    ARRAY_CAST      reduce using rule 5 (top_statement -> function_declaration_statement .)
    OBJECT_CAST     reduce using rule 5 (top_statement -> function_declaration_statement .)
    BOOL_CAST       reduce using rule 5 (top_statement -> function_declaration_statement .)
    UNSET_CAST      reduce using rule 5 (top_statement -> function_declaration_statement .)
    ISSET           reduce using rule 5 (top_statement -> function_declaration_statement .)
    EMPTY           reduce using rule 5 (top_statement -> function_declaration_statement .)
    EVAL            reduce using rule 5 (top_statement -> function_declaration_statement .)
    INCLUDE         reduce using rule 5 (top_statement -> function_declaration_statement .)
    INCLUDE_ONCE    reduce using rule 5 (top_statement -> function_declaration_statement .)
    REQUIRE         reduce using rule 5 (top_statement -> function_declaration_statement .)
    REQUIRE_ONCE    reduce using rule 5 (top_statement -> function_declaration_statement .)
    EXIT            reduce using rule 5 (top_statement -> function_declaration_statement .)
    PRINT           reduce using rule 5 (top_statement -> function_declaration_statement .)
    AT              reduce using rule 5 (top_statement -> function_declaration_statement .)
    LPAREN          reduce using rule 5 (top_statement -> function_declaration_statement .)
    CLASS           reduce using rule 5 (top_statement -> function_declaration_statement .)
    ABSTRACT        reduce using rule 5 (top_statement -> function_declaration_statement .)
    FINAL           reduce using rule 5 (top_statement -> function_declaration_statement .)
    QUOTE           reduce using rule 5 (top_statement -> function_declaration_statement .)
    START_HEREDOC   reduce using rule 5 (top_statement -> function_declaration_statement .)
    STRING_VARNAME  reduce using rule 5 (top_statement -> function_declaration_statement .)
    NS_SEPARATOR    reduce using rule 5 (top_statement -> function_declaration_statement .)
    LNUMBER         reduce using rule 5 (top_statement -> function_declaration_statement .)
    DNUMBER         reduce using rule 5 (top_statement -> function_declaration_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 5 (top_statement -> function_declaration_statement .)
    LINE            reduce using rule 5 (top_statement -> function_declaration_statement .)
    FILE            reduce using rule 5 (top_statement -> function_declaration_statement .)
    DIR             reduce using rule 5 (top_statement -> function_declaration_statement .)
    CLASS_C         reduce using rule 5 (top_statement -> function_declaration_statement .)
    METHOD_C        reduce using rule 5 (top_statement -> function_declaration_statement .)
    FUNC_C          reduce using rule 5 (top_statement -> function_declaration_statement .)
    NS_C            reduce using rule 5 (top_statement -> function_declaration_statement .)
    STRING          reduce using rule 5 (top_statement -> function_declaration_statement .)
    DOLLAR          reduce using rule 5 (top_statement -> function_declaration_statement .)
    VARIABLE        reduce using rule 5 (top_statement -> function_declaration_statement .)
    $end            reduce using rule 5 (top_statement -> function_declaration_statement .)


state 63

    (4) top_statement -> statement .

    RBRACE          reduce using rule 4 (top_statement -> statement .)
    HALT_COMPILER   reduce using rule 4 (top_statement -> statement .)
    NAMESPACE       reduce using rule 4 (top_statement -> statement .)
    CONST           reduce using rule 4 (top_statement -> statement .)
    USE             reduce using rule 4 (top_statement -> statement .)
    LBRACE          reduce using rule 4 (top_statement -> statement .)
    IF              reduce using rule 4 (top_statement -> statement .)
    WHILE           reduce using rule 4 (top_statement -> statement .)
    DO              reduce using rule 4 (top_statement -> statement .)
    FOR             reduce using rule 4 (top_statement -> statement .)
    FOREACH         reduce using rule 4 (top_statement -> statement .)
    SWITCH          reduce using rule 4 (top_statement -> statement .)
    BREAK           reduce using rule 4 (top_statement -> statement .)
    CONTINUE        reduce using rule 4 (top_statement -> statement .)
    RETURN          reduce using rule 4 (top_statement -> statement .)
    GLOBAL          reduce using rule 4 (top_statement -> statement .)
    STATIC          reduce using rule 4 (top_statement -> statement .)
    ECHO            reduce using rule 4 (top_statement -> statement .)
    INLINE_HTML     reduce using rule 4 (top_statement -> statement .)
    UNSET           reduce using rule 4 (top_statement -> statement .)
    SEMI            reduce using rule 4 (top_statement -> statement .)
    TRY             reduce using rule 4 (top_statement -> statement .)
    THROW           reduce using rule 4 (top_statement -> statement .)
    DECLARE         reduce using rule 4 (top_statement -> statement .)
    FUNCTION        reduce using rule 4 (top_statement -> statement .)
    INTERFACE       reduce using rule 4 (top_statement -> statement .)
    NEW             reduce using rule 4 (top_statement -> statement .)
    CLONE           reduce using rule 4 (top_statement -> statement .)
    LIST            reduce using rule 4 (top_statement -> statement .)
    ARRAY           reduce using rule 4 (top_statement -> statement .)
    PLUS            reduce using rule 4 (top_statement -> statement .)
    MINUS           reduce using rule 4 (top_statement -> statement .)
    NOT             reduce using rule 4 (top_statement -> statement .)
    BOOLEAN_NOT     reduce using rule 4 (top_statement -> statement .)
    INC             reduce using rule 4 (top_statement -> statement .)
    DEC             reduce using rule 4 (top_statement -> statement .)
    INT_CAST        reduce using rule 4 (top_statement -> statement .)
    DOUBLE_CAST     reduce using rule 4 (top_statement -> statement .)
    STRING_CAST     reduce using rule 4 (top_statement -> statement .)
    ARRAY_CAST      reduce using rule 4 (top_statement -> statement .)
    OBJECT_CAST     reduce using rule 4 (top_statement -> statement .)
    BOOL_CAST       reduce using rule 4 (top_statement -> statement .)
    UNSET_CAST      reduce using rule 4 (top_statement -> statement .)
    ISSET           reduce using rule 4 (top_statement -> statement .)
    EMPTY           reduce using rule 4 (top_statement -> statement .)
    EVAL            reduce using rule 4 (top_statement -> statement .)
    INCLUDE         reduce using rule 4 (top_statement -> statement .)
    INCLUDE_ONCE    reduce using rule 4 (top_statement -> statement .)
    REQUIRE         reduce using rule 4 (top_statement -> statement .)
    REQUIRE_ONCE    reduce using rule 4 (top_statement -> statement .)
    EXIT            reduce using rule 4 (top_statement -> statement .)
    PRINT           reduce using rule 4 (top_statement -> statement .)
    AT              reduce using rule 4 (top_statement -> statement .)
    LPAREN          reduce using rule 4 (top_statement -> statement .)
    CLASS           reduce using rule 4 (top_statement -> statement .)
    ABSTRACT        reduce using rule 4 (top_statement -> statement .)
    FINAL           reduce using rule 4 (top_statement -> statement .)
    QUOTE           reduce using rule 4 (top_statement -> statement .)
    START_HEREDOC   reduce using rule 4 (top_statement -> statement .)
    STRING_VARNAME  reduce using rule 4 (top_statement -> statement .)
    NS_SEPARATOR    reduce using rule 4 (top_statement -> statement .)
    LNUMBER         reduce using rule 4 (top_statement -> statement .)
    DNUMBER         reduce using rule 4 (top_statement -> statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 4 (top_statement -> statement .)
    LINE            reduce using rule 4 (top_statement -> statement .)
    FILE            reduce using rule 4 (top_statement -> statement .)
    DIR             reduce using rule 4 (top_statement -> statement .)
    CLASS_C         reduce using rule 4 (top_statement -> statement .)
    METHOD_C        reduce using rule 4 (top_statement -> statement .)
    FUNC_C          reduce using rule 4 (top_statement -> statement .)
    NS_C            reduce using rule 4 (top_statement -> statement .)
    STRING          reduce using rule 4 (top_statement -> statement .)
    DOLLAR          reduce using rule 4 (top_statement -> statement .)
    VARIABLE        reduce using rule 4 (top_statement -> statement .)
    $end            reduce using rule 4 (top_statement -> statement .)


state 64

    (205) variable_class_name -> reference_variable .
    (202) simple_indirect_reference -> reference_variable .
    (206) reference_variable -> reference_variable . LBRACKET dim_offset RBRACKET
    (207) reference_variable -> reference_variable . LBRACE expr RBRACE

    DOUBLE_COLON    reduce using rule 205 (variable_class_name -> reference_variable .)
    OBJECT_OPERATOR reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    EQUALS          reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    PLUS_EQUAL      reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    MINUS_EQUAL     reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    MUL_EQUAL       reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    DIV_EQUAL       reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    CONCAT_EQUAL    reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    MOD_EQUAL       reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    AND_EQUAL       reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    OR_EQUAL        reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    XOR_EQUAL       reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    SL_EQUAL        reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    SR_EQUAL        reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    INC             reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    DEC             reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    AS              reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    BOOLEAN_AND     reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    BOOLEAN_OR      reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    LOGICAL_AND     reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    LOGICAL_OR      reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    LOGICAL_XOR     reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    AND             reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    OR              reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    XOR             reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    CONCAT          reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    PLUS            reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    MINUS           reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    MUL             reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    DIV             reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    SL              reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    SR              reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    MOD             reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    IS_IDENTICAL    reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    IS_NOT_IDENTICAL reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    IS_EQUAL        reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    IS_NOT_EQUAL    reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    IS_SMALLER      reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    IS_GREATER      reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    IS_GREATER_OR_EQUAL reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    INSTANCEOF      reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    QUESTION        reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    LPAREN          reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    RPAREN          reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    DOUBLE_ARROW    reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    COMMA           reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    RBRACE          reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    SEMI            reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    RBRACKET        reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    COLON           reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    LBRACKET        shift and go to state 175
    LBRACE          shift and go to state 174


state 65

    (222) expr -> ARRAY . LPAREN array_pair_list RPAREN

    LPAREN          shift and go to state 176


state 66

    (318) scalar -> STRING_VARNAME .

    BOOLEAN_AND     reduce using rule 318 (scalar -> STRING_VARNAME .)
    BOOLEAN_OR      reduce using rule 318 (scalar -> STRING_VARNAME .)
    LOGICAL_AND     reduce using rule 318 (scalar -> STRING_VARNAME .)
    LOGICAL_OR      reduce using rule 318 (scalar -> STRING_VARNAME .)
    LOGICAL_XOR     reduce using rule 318 (scalar -> STRING_VARNAME .)
    AND             reduce using rule 318 (scalar -> STRING_VARNAME .)
    OR              reduce using rule 318 (scalar -> STRING_VARNAME .)
    XOR             reduce using rule 318 (scalar -> STRING_VARNAME .)
    CONCAT          reduce using rule 318 (scalar -> STRING_VARNAME .)
    PLUS            reduce using rule 318 (scalar -> STRING_VARNAME .)
    MINUS           reduce using rule 318 (scalar -> STRING_VARNAME .)
    MUL             reduce using rule 318 (scalar -> STRING_VARNAME .)
    DIV             reduce using rule 318 (scalar -> STRING_VARNAME .)
    SL              reduce using rule 318 (scalar -> STRING_VARNAME .)
    SR              reduce using rule 318 (scalar -> STRING_VARNAME .)
    MOD             reduce using rule 318 (scalar -> STRING_VARNAME .)
    IS_IDENTICAL    reduce using rule 318 (scalar -> STRING_VARNAME .)
    IS_NOT_IDENTICAL reduce using rule 318 (scalar -> STRING_VARNAME .)
    IS_EQUAL        reduce using rule 318 (scalar -> STRING_VARNAME .)
    IS_NOT_EQUAL    reduce using rule 318 (scalar -> STRING_VARNAME .)
    IS_SMALLER      reduce using rule 318 (scalar -> STRING_VARNAME .)
    IS_SMALLER_OR_EQUAL reduce using rule 318 (scalar -> STRING_VARNAME .)
    IS_GREATER      reduce using rule 318 (scalar -> STRING_VARNAME .)
    IS_GREATER_OR_EQUAL reduce using rule 318 (scalar -> STRING_VARNAME .)
    INSTANCEOF      reduce using rule 318 (scalar -> STRING_VARNAME .)
    QUESTION        reduce using rule 318 (scalar -> STRING_VARNAME .)
    RPAREN          reduce using rule 318 (scalar -> STRING_VARNAME .)
    COMMA           reduce using rule 318 (scalar -> STRING_VARNAME .)
    SEMI            reduce using rule 318 (scalar -> STRING_VARNAME .)
    AS              reduce using rule 318 (scalar -> STRING_VARNAME .)
    RBRACE          reduce using rule 318 (scalar -> STRING_VARNAME .)
    RBRACKET        reduce using rule 318 (scalar -> STRING_VARNAME .)
    DOUBLE_ARROW    reduce using rule 318 (scalar -> STRING_VARNAME .)
    COLON           reduce using rule 318 (scalar -> STRING_VARNAME .)


state 67

    (6) top_statement -> class_declaration_statement .

    RBRACE          reduce using rule 6 (top_statement -> class_declaration_statement .)
    HALT_COMPILER   reduce using rule 6 (top_statement -> class_declaration_statement .)
    NAMESPACE       reduce using rule 6 (top_statement -> class_declaration_statement .)
    CONST           reduce using rule 6 (top_statement -> class_declaration_statement .)
    USE             reduce using rule 6 (top_statement -> class_declaration_statement .)
    LBRACE          reduce using rule 6 (top_statement -> class_declaration_statement .)
    IF              reduce using rule 6 (top_statement -> class_declaration_statement .)
    WHILE           reduce using rule 6 (top_statement -> class_declaration_statement .)
    DO              reduce using rule 6 (top_statement -> class_declaration_statement .)
    FOR             reduce using rule 6 (top_statement -> class_declaration_statement .)
    FOREACH         reduce using rule 6 (top_statement -> class_declaration_statement .)
    SWITCH          reduce using rule 6 (top_statement -> class_declaration_statement .)
    BREAK           reduce using rule 6 (top_statement -> class_declaration_statement .)
    CONTINUE        reduce using rule 6 (top_statement -> class_declaration_statement .)
    RETURN          reduce using rule 6 (top_statement -> class_declaration_statement .)
    GLOBAL          reduce using rule 6 (top_statement -> class_declaration_statement .)
    STATIC          reduce using rule 6 (top_statement -> class_declaration_statement .)
    ECHO            reduce using rule 6 (top_statement -> class_declaration_statement .)
    INLINE_HTML     reduce using rule 6 (top_statement -> class_declaration_statement .)
    UNSET           reduce using rule 6 (top_statement -> class_declaration_statement .)
    SEMI            reduce using rule 6 (top_statement -> class_declaration_statement .)
    TRY             reduce using rule 6 (top_statement -> class_declaration_statement .)
    THROW           reduce using rule 6 (top_statement -> class_declaration_statement .)
    DECLARE         reduce using rule 6 (top_statement -> class_declaration_statement .)
    FUNCTION        reduce using rule 6 (top_statement -> class_declaration_statement .)
    INTERFACE       reduce using rule 6 (top_statement -> class_declaration_statement .)
    NEW             reduce using rule 6 (top_statement -> class_declaration_statement .)
    CLONE           reduce using rule 6 (top_statement -> class_declaration_statement .)
    LIST            reduce using rule 6 (top_statement -> class_declaration_statement .)
    ARRAY           reduce using rule 6 (top_statement -> class_declaration_statement .)
    PLUS            reduce using rule 6 (top_statement -> class_declaration_statement .)
    MINUS           reduce using rule 6 (top_statement -> class_declaration_statement .)
    NOT             reduce using rule 6 (top_statement -> class_declaration_statement .)
    BOOLEAN_NOT     reduce using rule 6 (top_statement -> class_declaration_statement .)
    INC             reduce using rule 6 (top_statement -> class_declaration_statement .)
    DEC             reduce using rule 6 (top_statement -> class_declaration_statement .)
    INT_CAST        reduce using rule 6 (top_statement -> class_declaration_statement .)
    DOUBLE_CAST     reduce using rule 6 (top_statement -> class_declaration_statement .)
    STRING_CAST     reduce using rule 6 (top_statement -> class_declaration_statement .)
    ARRAY_CAST      reduce using rule 6 (top_statement -> class_declaration_statement .)
    OBJECT_CAST     reduce using rule 6 (top_statement -> class_declaration_statement .)
    BOOL_CAST       reduce using rule 6 (top_statement -> class_declaration_statement .)
    UNSET_CAST      reduce using rule 6 (top_statement -> class_declaration_statement .)
    ISSET           reduce using rule 6 (top_statement -> class_declaration_statement .)
    EMPTY           reduce using rule 6 (top_statement -> class_declaration_statement .)
    EVAL            reduce using rule 6 (top_statement -> class_declaration_statement .)
    INCLUDE         reduce using rule 6 (top_statement -> class_declaration_statement .)
    INCLUDE_ONCE    reduce using rule 6 (top_statement -> class_declaration_statement .)
    REQUIRE         reduce using rule 6 (top_statement -> class_declaration_statement .)
    REQUIRE_ONCE    reduce using rule 6 (top_statement -> class_declaration_statement .)
    EXIT            reduce using rule 6 (top_statement -> class_declaration_statement .)
    PRINT           reduce using rule 6 (top_statement -> class_declaration_statement .)
    AT              reduce using rule 6 (top_statement -> class_declaration_statement .)
    LPAREN          reduce using rule 6 (top_statement -> class_declaration_statement .)
    CLASS           reduce using rule 6 (top_statement -> class_declaration_statement .)
    ABSTRACT        reduce using rule 6 (top_statement -> class_declaration_statement .)
    FINAL           reduce using rule 6 (top_statement -> class_declaration_statement .)
    QUOTE           reduce using rule 6 (top_statement -> class_declaration_statement .)
    START_HEREDOC   reduce using rule 6 (top_statement -> class_declaration_statement .)
    STRING_VARNAME  reduce using rule 6 (top_statement -> class_declaration_statement .)
    NS_SEPARATOR    reduce using rule 6 (top_statement -> class_declaration_statement .)
    LNUMBER         reduce using rule 6 (top_statement -> class_declaration_statement .)
    DNUMBER         reduce using rule 6 (top_statement -> class_declaration_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 6 (top_statement -> class_declaration_statement .)
    LINE            reduce using rule 6 (top_statement -> class_declaration_statement .)
    FILE            reduce using rule 6 (top_statement -> class_declaration_statement .)
    DIR             reduce using rule 6 (top_statement -> class_declaration_statement .)
    CLASS_C         reduce using rule 6 (top_statement -> class_declaration_statement .)
    METHOD_C        reduce using rule 6 (top_statement -> class_declaration_statement .)
    FUNC_C          reduce using rule 6 (top_statement -> class_declaration_statement .)
    NS_C            reduce using rule 6 (top_statement -> class_declaration_statement .)
    STRING          reduce using rule 6 (top_statement -> class_declaration_statement .)
    DOLLAR          reduce using rule 6 (top_statement -> class_declaration_statement .)
    VARIABLE        reduce using rule 6 (top_statement -> class_declaration_statement .)
    $end            reduce using rule 6 (top_statement -> class_declaration_statement .)


state 68

    (320) scalar -> NS_SEPARATOR . namespace_name
    (187) function_call -> NS_SEPARATOR . namespace_name LPAREN function_call_parameter_list RPAREN
    (165) class_name -> NS_SEPARATOR . namespace_name
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    STRING          shift and go to state 89

    namespace_name                 shift and go to state 177

state 69

    (199) base_variable -> simple_indirect_reference .
    (220) variable_without_objects -> simple_indirect_reference .

    OBJECT_OPERATOR reduce using rule 199 (base_variable -> simple_indirect_reference .)
    EQUALS          reduce using rule 199 (base_variable -> simple_indirect_reference .)
    PLUS_EQUAL      reduce using rule 199 (base_variable -> simple_indirect_reference .)
    MINUS_EQUAL     reduce using rule 199 (base_variable -> simple_indirect_reference .)
    MUL_EQUAL       reduce using rule 199 (base_variable -> simple_indirect_reference .)
    DIV_EQUAL       reduce using rule 199 (base_variable -> simple_indirect_reference .)
    CONCAT_EQUAL    reduce using rule 199 (base_variable -> simple_indirect_reference .)
    MOD_EQUAL       reduce using rule 199 (base_variable -> simple_indirect_reference .)
    AND_EQUAL       reduce using rule 199 (base_variable -> simple_indirect_reference .)
    OR_EQUAL        reduce using rule 199 (base_variable -> simple_indirect_reference .)
    XOR_EQUAL       reduce using rule 199 (base_variable -> simple_indirect_reference .)
    SL_EQUAL        reduce using rule 199 (base_variable -> simple_indirect_reference .)
    SR_EQUAL        reduce using rule 199 (base_variable -> simple_indirect_reference .)
    INC             reduce using rule 199 (base_variable -> simple_indirect_reference .)
    DEC             reduce using rule 199 (base_variable -> simple_indirect_reference .)
    SEMI            reduce using rule 199 (base_variable -> simple_indirect_reference .)
    BOOLEAN_AND     reduce using rule 199 (base_variable -> simple_indirect_reference .)
    BOOLEAN_OR      reduce using rule 199 (base_variable -> simple_indirect_reference .)
    LOGICAL_AND     reduce using rule 199 (base_variable -> simple_indirect_reference .)
    LOGICAL_OR      reduce using rule 199 (base_variable -> simple_indirect_reference .)
    LOGICAL_XOR     reduce using rule 199 (base_variable -> simple_indirect_reference .)
    AND             reduce using rule 199 (base_variable -> simple_indirect_reference .)
    OR              reduce using rule 199 (base_variable -> simple_indirect_reference .)
    XOR             reduce using rule 199 (base_variable -> simple_indirect_reference .)
    CONCAT          reduce using rule 199 (base_variable -> simple_indirect_reference .)
    PLUS            reduce using rule 199 (base_variable -> simple_indirect_reference .)
    MINUS           reduce using rule 199 (base_variable -> simple_indirect_reference .)
    MUL             reduce using rule 199 (base_variable -> simple_indirect_reference .)
    DIV             reduce using rule 199 (base_variable -> simple_indirect_reference .)
    SL              reduce using rule 199 (base_variable -> simple_indirect_reference .)
    SR              reduce using rule 199 (base_variable -> simple_indirect_reference .)
    MOD             reduce using rule 199 (base_variable -> simple_indirect_reference .)
    IS_IDENTICAL    reduce using rule 199 (base_variable -> simple_indirect_reference .)
    IS_NOT_IDENTICAL reduce using rule 199 (base_variable -> simple_indirect_reference .)
    IS_EQUAL        reduce using rule 199 (base_variable -> simple_indirect_reference .)
    IS_NOT_EQUAL    reduce using rule 199 (base_variable -> simple_indirect_reference .)
    IS_SMALLER      reduce using rule 199 (base_variable -> simple_indirect_reference .)
    IS_SMALLER_OR_EQUAL reduce using rule 199 (base_variable -> simple_indirect_reference .)
    IS_GREATER      reduce using rule 199 (base_variable -> simple_indirect_reference .)
    IS_GREATER_OR_EQUAL reduce using rule 199 (base_variable -> simple_indirect_reference .)
    INSTANCEOF      reduce using rule 199 (base_variable -> simple_indirect_reference .)
    QUESTION        reduce using rule 199 (base_variable -> simple_indirect_reference .)
    RPAREN          reduce using rule 199 (base_variable -> simple_indirect_reference .)
    COMMA           reduce using rule 199 (base_variable -> simple_indirect_reference .)
    AS              reduce using rule 199 (base_variable -> simple_indirect_reference .)
    RBRACE          reduce using rule 199 (base_variable -> simple_indirect_reference .)
    RBRACKET        reduce using rule 199 (base_variable -> simple_indirect_reference .)
    DOUBLE_ARROW    reduce using rule 199 (base_variable -> simple_indirect_reference .)
    COLON           reduce using rule 199 (base_variable -> simple_indirect_reference .)
    LPAREN          reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)


state 70

    (319) scalar -> namespace_name .
    (349) namespace_name -> namespace_name . NS_SEPARATOR STRING
    (186) function_call -> namespace_name . LPAREN function_call_parameter_list RPAREN
    (164) class_name -> namespace_name .

    BOOLEAN_AND     reduce using rule 319 (scalar -> namespace_name .)
    BOOLEAN_OR      reduce using rule 319 (scalar -> namespace_name .)
    LOGICAL_AND     reduce using rule 319 (scalar -> namespace_name .)
    LOGICAL_OR      reduce using rule 319 (scalar -> namespace_name .)
    LOGICAL_XOR     reduce using rule 319 (scalar -> namespace_name .)
    AND             reduce using rule 319 (scalar -> namespace_name .)
    OR              reduce using rule 319 (scalar -> namespace_name .)
    XOR             reduce using rule 319 (scalar -> namespace_name .)
    CONCAT          reduce using rule 319 (scalar -> namespace_name .)
    PLUS            reduce using rule 319 (scalar -> namespace_name .)
    MINUS           reduce using rule 319 (scalar -> namespace_name .)
    MUL             reduce using rule 319 (scalar -> namespace_name .)
    DIV             reduce using rule 319 (scalar -> namespace_name .)
    SL              reduce using rule 319 (scalar -> namespace_name .)
    SR              reduce using rule 319 (scalar -> namespace_name .)
    MOD             reduce using rule 319 (scalar -> namespace_name .)
    IS_IDENTICAL    reduce using rule 319 (scalar -> namespace_name .)
    IS_NOT_IDENTICAL reduce using rule 319 (scalar -> namespace_name .)
    IS_EQUAL        reduce using rule 319 (scalar -> namespace_name .)
    IS_NOT_EQUAL    reduce using rule 319 (scalar -> namespace_name .)
    IS_SMALLER      reduce using rule 319 (scalar -> namespace_name .)
    IS_SMALLER_OR_EQUAL reduce using rule 319 (scalar -> namespace_name .)
    IS_GREATER      reduce using rule 319 (scalar -> namespace_name .)
    IS_GREATER_OR_EQUAL reduce using rule 319 (scalar -> namespace_name .)
    INSTANCEOF      reduce using rule 319 (scalar -> namespace_name .)
    QUESTION        reduce using rule 319 (scalar -> namespace_name .)
    RPAREN          reduce using rule 319 (scalar -> namespace_name .)
    COMMA           reduce using rule 319 (scalar -> namespace_name .)
    SEMI            reduce using rule 319 (scalar -> namespace_name .)
    AS              reduce using rule 319 (scalar -> namespace_name .)
    RBRACE          reduce using rule 319 (scalar -> namespace_name .)
    RBRACKET        reduce using rule 319 (scalar -> namespace_name .)
    DOUBLE_ARROW    reduce using rule 319 (scalar -> namespace_name .)
    COLON           reduce using rule 319 (scalar -> namespace_name .)
    NS_SEPARATOR    shift and go to state 178
    LPAREN          shift and go to state 179
    DOUBLE_COLON    reduce using rule 164 (class_name -> namespace_name .)


state 71

    (46) statement -> expr . SEMI
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    SEMI            shift and go to state 187
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    LOGICAL_AND     shift and go to state 181
    LOGICAL_OR      shift and go to state 202
    LOGICAL_XOR     shift and go to state 200
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188


state 72

    (208) reference_variable -> compound_variable .

    LBRACKET        reduce using rule 208 (reference_variable -> compound_variable .)
    LBRACE          reduce using rule 208 (reference_variable -> compound_variable .)
    DOUBLE_COLON    reduce using rule 208 (reference_variable -> compound_variable .)
    OBJECT_OPERATOR reduce using rule 208 (reference_variable -> compound_variable .)
    EQUALS          reduce using rule 208 (reference_variable -> compound_variable .)
    PLUS_EQUAL      reduce using rule 208 (reference_variable -> compound_variable .)
    MINUS_EQUAL     reduce using rule 208 (reference_variable -> compound_variable .)
    MUL_EQUAL       reduce using rule 208 (reference_variable -> compound_variable .)
    DIV_EQUAL       reduce using rule 208 (reference_variable -> compound_variable .)
    CONCAT_EQUAL    reduce using rule 208 (reference_variable -> compound_variable .)
    MOD_EQUAL       reduce using rule 208 (reference_variable -> compound_variable .)
    AND_EQUAL       reduce using rule 208 (reference_variable -> compound_variable .)
    OR_EQUAL        reduce using rule 208 (reference_variable -> compound_variable .)
    XOR_EQUAL       reduce using rule 208 (reference_variable -> compound_variable .)
    SL_EQUAL        reduce using rule 208 (reference_variable -> compound_variable .)
    SR_EQUAL        reduce using rule 208 (reference_variable -> compound_variable .)
    INC             reduce using rule 208 (reference_variable -> compound_variable .)
    DEC             reduce using rule 208 (reference_variable -> compound_variable .)
    RPAREN          reduce using rule 208 (reference_variable -> compound_variable .)
    BOOLEAN_AND     reduce using rule 208 (reference_variable -> compound_variable .)
    BOOLEAN_OR      reduce using rule 208 (reference_variable -> compound_variable .)
    LOGICAL_AND     reduce using rule 208 (reference_variable -> compound_variable .)
    LOGICAL_OR      reduce using rule 208 (reference_variable -> compound_variable .)
    LOGICAL_XOR     reduce using rule 208 (reference_variable -> compound_variable .)
    AND             reduce using rule 208 (reference_variable -> compound_variable .)
    OR              reduce using rule 208 (reference_variable -> compound_variable .)
    XOR             reduce using rule 208 (reference_variable -> compound_variable .)
    CONCAT          reduce using rule 208 (reference_variable -> compound_variable .)
    PLUS            reduce using rule 208 (reference_variable -> compound_variable .)
    MINUS           reduce using rule 208 (reference_variable -> compound_variable .)
    MUL             reduce using rule 208 (reference_variable -> compound_variable .)
    DIV             reduce using rule 208 (reference_variable -> compound_variable .)
    SL              reduce using rule 208 (reference_variable -> compound_variable .)
    SR              reduce using rule 208 (reference_variable -> compound_variable .)
    MOD             reduce using rule 208 (reference_variable -> compound_variable .)
    IS_IDENTICAL    reduce using rule 208 (reference_variable -> compound_variable .)
    IS_NOT_IDENTICAL reduce using rule 208 (reference_variable -> compound_variable .)
    IS_EQUAL        reduce using rule 208 (reference_variable -> compound_variable .)
    IS_NOT_EQUAL    reduce using rule 208 (reference_variable -> compound_variable .)
    IS_SMALLER      reduce using rule 208 (reference_variable -> compound_variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 208 (reference_variable -> compound_variable .)
    IS_GREATER      reduce using rule 208 (reference_variable -> compound_variable .)
    IS_GREATER_OR_EQUAL reduce using rule 208 (reference_variable -> compound_variable .)
    INSTANCEOF      reduce using rule 208 (reference_variable -> compound_variable .)
    QUESTION        reduce using rule 208 (reference_variable -> compound_variable .)
    LPAREN          reduce using rule 208 (reference_variable -> compound_variable .)
    SEMI            reduce using rule 208 (reference_variable -> compound_variable .)
    COMMA           reduce using rule 208 (reference_variable -> compound_variable .)
    AS              reduce using rule 208 (reference_variable -> compound_variable .)
    RBRACE          reduce using rule 208 (reference_variable -> compound_variable .)
    RBRACKET        reduce using rule 208 (reference_variable -> compound_variable .)
    DOUBLE_ARROW    reduce using rule 208 (reference_variable -> compound_variable .)
    COLON           reduce using rule 208 (reference_variable -> compound_variable .)


state 73

    (176) expr -> LIST . LPAREN assignment_list RPAREN EQUALS expr

    LPAREN          shift and go to state 207


state 74

    (36) statement -> BREAK . SEMI
    (37) statement -> BREAK . expr SEMI
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    SEMI            shift and go to state 209
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 208

state 75

    (308) expr -> EXIT .
    (309) expr -> EXIT . LPAREN RPAREN
    (310) expr -> EXIT . LPAREN expr RPAREN

    AS              reduce using rule 308 (expr -> EXIT .)
    BOOLEAN_AND     reduce using rule 308 (expr -> EXIT .)
    BOOLEAN_OR      reduce using rule 308 (expr -> EXIT .)
    LOGICAL_AND     reduce using rule 308 (expr -> EXIT .)
    LOGICAL_OR      reduce using rule 308 (expr -> EXIT .)
    LOGICAL_XOR     reduce using rule 308 (expr -> EXIT .)
    AND             reduce using rule 308 (expr -> EXIT .)
    OR              reduce using rule 308 (expr -> EXIT .)
    XOR             reduce using rule 308 (expr -> EXIT .)
    CONCAT          reduce using rule 308 (expr -> EXIT .)
    PLUS            reduce using rule 308 (expr -> EXIT .)
    MINUS           reduce using rule 308 (expr -> EXIT .)
    MUL             reduce using rule 308 (expr -> EXIT .)
    DIV             reduce using rule 308 (expr -> EXIT .)
    SL              reduce using rule 308 (expr -> EXIT .)
    SR              reduce using rule 308 (expr -> EXIT .)
    MOD             reduce using rule 308 (expr -> EXIT .)
    IS_IDENTICAL    reduce using rule 308 (expr -> EXIT .)
    IS_NOT_IDENTICAL reduce using rule 308 (expr -> EXIT .)
    IS_EQUAL        reduce using rule 308 (expr -> EXIT .)
    IS_NOT_EQUAL    reduce using rule 308 (expr -> EXIT .)
    IS_SMALLER      reduce using rule 308 (expr -> EXIT .)
    IS_SMALLER_OR_EQUAL reduce using rule 308 (expr -> EXIT .)
    IS_GREATER      reduce using rule 308 (expr -> EXIT .)
    IS_GREATER_OR_EQUAL reduce using rule 308 (expr -> EXIT .)
    INSTANCEOF      reduce using rule 308 (expr -> EXIT .)
    QUESTION        reduce using rule 308 (expr -> EXIT .)
    SEMI            reduce using rule 308 (expr -> EXIT .)
    COMMA           reduce using rule 308 (expr -> EXIT .)
    RPAREN          reduce using rule 308 (expr -> EXIT .)
    RBRACE          reduce using rule 308 (expr -> EXIT .)
    RBRACKET        reduce using rule 308 (expr -> EXIT .)
    DOUBLE_ARROW    reduce using rule 308 (expr -> EXIT .)
    COLON           reduce using rule 308 (expr -> EXIT .)
    LPAREN          shift and go to state 210


state 76

    (32) statement -> DO . statement WHILE LPAREN expr RPAREN SEMI
    (28) statement -> . LBRACE inner_statement_list RBRACE
    (29) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (30) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (31) statement -> . WHILE LPAREN expr RPAREN while_statement
    (32) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (33) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (34) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (35) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (36) statement -> . BREAK SEMI
    (37) statement -> . BREAK expr SEMI
    (38) statement -> . CONTINUE SEMI
    (39) statement -> . CONTINUE expr SEMI
    (40) statement -> . RETURN SEMI
    (41) statement -> . RETURN expr SEMI
    (42) statement -> . GLOBAL global_var_list SEMI
    (43) statement -> . STATIC static_var_list SEMI
    (44) statement -> . ECHO echo_expr_list SEMI
    (45) statement -> . INLINE_HTML
    (46) statement -> . expr SEMI
    (47) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (48) statement -> . SEMI
    (49) statement -> . TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches
    (52) statement -> . THROW expr SEMI
    (53) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LBRACE          shift and go to state 47
    IF              shift and go to state 93
    WHILE           shift and go to state 57
    DO              shift and go to state 76
    FOR             shift and go to state 36
    FOREACH         shift and go to state 13
    SWITCH          shift and go to state 61
    BREAK           shift and go to state 74
    CONTINUE        shift and go to state 48
    RETURN          shift and go to state 23
    GLOBAL          shift and go to state 55
    STATIC          shift and go to state 29
    ECHO            shift and go to state 42
    INLINE_HTML     shift and go to state 88
    UNSET           shift and go to state 83
    SEMI            shift and go to state 85
    TRY             shift and go to state 43
    THROW           shift and go to state 96
    DECLARE         shift and go to state 16
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    class_constant                 shift and go to state 24
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    statement                      shift and go to state 211
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 71

state 77

    (12) top_statement -> USE . use_declarations SEMI
    (13) use_declarations -> . use_declarations COMMA use_declaration
    (14) use_declarations -> . use_declaration
    (15) use_declaration -> . namespace_name
    (16) use_declaration -> . NS_SEPARATOR namespace_name
    (17) use_declaration -> . namespace_name AS STRING
    (18) use_declaration -> . NS_SEPARATOR namespace_name AS STRING
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    NS_SEPARATOR    shift and go to state 213
    STRING          shift and go to state 89

    namespace_name                 shift and go to state 215
    use_declarations               shift and go to state 212
    use_declaration                shift and go to state 214

state 78

    (11) top_statement -> CONST . constant_declarations SEMI
    (19) constant_declarations -> . constant_declarations COMMA constant_declaration
    (20) constant_declarations -> . constant_declaration
    (21) constant_declaration -> . STRING EQUALS static_scalar

    STRING          shift and go to state 217

    constant_declarations          shift and go to state 216
    constant_declaration           shift and go to state 218

state 79

    (331) common_scalar -> METHOD_C .

    SEMI            reduce using rule 331 (common_scalar -> METHOD_C .)
    BOOLEAN_AND     reduce using rule 331 (common_scalar -> METHOD_C .)
    BOOLEAN_OR      reduce using rule 331 (common_scalar -> METHOD_C .)
    LOGICAL_AND     reduce using rule 331 (common_scalar -> METHOD_C .)
    LOGICAL_OR      reduce using rule 331 (common_scalar -> METHOD_C .)
    LOGICAL_XOR     reduce using rule 331 (common_scalar -> METHOD_C .)
    AND             reduce using rule 331 (common_scalar -> METHOD_C .)
    OR              reduce using rule 331 (common_scalar -> METHOD_C .)
    XOR             reduce using rule 331 (common_scalar -> METHOD_C .)
    CONCAT          reduce using rule 331 (common_scalar -> METHOD_C .)
    PLUS            reduce using rule 331 (common_scalar -> METHOD_C .)
    MINUS           reduce using rule 331 (common_scalar -> METHOD_C .)
    MUL             reduce using rule 331 (common_scalar -> METHOD_C .)
    DIV             reduce using rule 331 (common_scalar -> METHOD_C .)
    SL              reduce using rule 331 (common_scalar -> METHOD_C .)
    SR              reduce using rule 331 (common_scalar -> METHOD_C .)
    MOD             reduce using rule 331 (common_scalar -> METHOD_C .)
    IS_IDENTICAL    reduce using rule 331 (common_scalar -> METHOD_C .)
    IS_NOT_IDENTICAL reduce using rule 331 (common_scalar -> METHOD_C .)
    IS_EQUAL        reduce using rule 331 (common_scalar -> METHOD_C .)
    IS_NOT_EQUAL    reduce using rule 331 (common_scalar -> METHOD_C .)
    IS_SMALLER      reduce using rule 331 (common_scalar -> METHOD_C .)
    IS_SMALLER_OR_EQUAL reduce using rule 331 (common_scalar -> METHOD_C .)
    IS_GREATER      reduce using rule 331 (common_scalar -> METHOD_C .)
    IS_GREATER_OR_EQUAL reduce using rule 331 (common_scalar -> METHOD_C .)
    INSTANCEOF      reduce using rule 331 (common_scalar -> METHOD_C .)
    QUESTION        reduce using rule 331 (common_scalar -> METHOD_C .)
    DOUBLE_ARROW    reduce using rule 331 (common_scalar -> METHOD_C .)
    COMMA           reduce using rule 331 (common_scalar -> METHOD_C .)
    RPAREN          reduce using rule 331 (common_scalar -> METHOD_C .)
    AS              reduce using rule 331 (common_scalar -> METHOD_C .)
    RBRACE          reduce using rule 331 (common_scalar -> METHOD_C .)
    RBRACKET        reduce using rule 331 (common_scalar -> METHOD_C .)
    COLON           reduce using rule 331 (common_scalar -> METHOD_C .)


state 80

    (107) class_entry_type -> ABSTRACT . CLASS

    CLASS           shift and go to state 219


state 81

    (332) common_scalar -> FUNC_C .

    SEMI            reduce using rule 332 (common_scalar -> FUNC_C .)
    BOOLEAN_AND     reduce using rule 332 (common_scalar -> FUNC_C .)
    BOOLEAN_OR      reduce using rule 332 (common_scalar -> FUNC_C .)
    LOGICAL_AND     reduce using rule 332 (common_scalar -> FUNC_C .)
    LOGICAL_OR      reduce using rule 332 (common_scalar -> FUNC_C .)
    LOGICAL_XOR     reduce using rule 332 (common_scalar -> FUNC_C .)
    AND             reduce using rule 332 (common_scalar -> FUNC_C .)
    OR              reduce using rule 332 (common_scalar -> FUNC_C .)
    XOR             reduce using rule 332 (common_scalar -> FUNC_C .)
    CONCAT          reduce using rule 332 (common_scalar -> FUNC_C .)
    PLUS            reduce using rule 332 (common_scalar -> FUNC_C .)
    MINUS           reduce using rule 332 (common_scalar -> FUNC_C .)
    MUL             reduce using rule 332 (common_scalar -> FUNC_C .)
    DIV             reduce using rule 332 (common_scalar -> FUNC_C .)
    SL              reduce using rule 332 (common_scalar -> FUNC_C .)
    SR              reduce using rule 332 (common_scalar -> FUNC_C .)
    MOD             reduce using rule 332 (common_scalar -> FUNC_C .)
    IS_IDENTICAL    reduce using rule 332 (common_scalar -> FUNC_C .)
    IS_NOT_IDENTICAL reduce using rule 332 (common_scalar -> FUNC_C .)
    IS_EQUAL        reduce using rule 332 (common_scalar -> FUNC_C .)
    IS_NOT_EQUAL    reduce using rule 332 (common_scalar -> FUNC_C .)
    IS_SMALLER      reduce using rule 332 (common_scalar -> FUNC_C .)
    IS_SMALLER_OR_EQUAL reduce using rule 332 (common_scalar -> FUNC_C .)
    IS_GREATER      reduce using rule 332 (common_scalar -> FUNC_C .)
    IS_GREATER_OR_EQUAL reduce using rule 332 (common_scalar -> FUNC_C .)
    INSTANCEOF      reduce using rule 332 (common_scalar -> FUNC_C .)
    QUESTION        reduce using rule 332 (common_scalar -> FUNC_C .)
    DOUBLE_ARROW    reduce using rule 332 (common_scalar -> FUNC_C .)
    COMMA           reduce using rule 332 (common_scalar -> FUNC_C .)
    RPAREN          reduce using rule 332 (common_scalar -> FUNC_C .)
    AS              reduce using rule 332 (common_scalar -> FUNC_C .)
    RBRACE          reduce using rule 332 (common_scalar -> FUNC_C .)
    RBRACKET        reduce using rule 332 (common_scalar -> FUNC_C .)
    COLON           reduce using rule 332 (common_scalar -> FUNC_C .)


state 82

    (315) scalar -> common_scalar .

    BOOLEAN_AND     reduce using rule 315 (scalar -> common_scalar .)
    BOOLEAN_OR      reduce using rule 315 (scalar -> common_scalar .)
    LOGICAL_AND     reduce using rule 315 (scalar -> common_scalar .)
    LOGICAL_OR      reduce using rule 315 (scalar -> common_scalar .)
    LOGICAL_XOR     reduce using rule 315 (scalar -> common_scalar .)
    AND             reduce using rule 315 (scalar -> common_scalar .)
    OR              reduce using rule 315 (scalar -> common_scalar .)
    XOR             reduce using rule 315 (scalar -> common_scalar .)
    CONCAT          reduce using rule 315 (scalar -> common_scalar .)
    PLUS            reduce using rule 315 (scalar -> common_scalar .)
    MINUS           reduce using rule 315 (scalar -> common_scalar .)
    MUL             reduce using rule 315 (scalar -> common_scalar .)
    DIV             reduce using rule 315 (scalar -> common_scalar .)
    SL              reduce using rule 315 (scalar -> common_scalar .)
    SR              reduce using rule 315 (scalar -> common_scalar .)
    MOD             reduce using rule 315 (scalar -> common_scalar .)
    IS_IDENTICAL    reduce using rule 315 (scalar -> common_scalar .)
    IS_NOT_IDENTICAL reduce using rule 315 (scalar -> common_scalar .)
    IS_EQUAL        reduce using rule 315 (scalar -> common_scalar .)
    IS_NOT_EQUAL    reduce using rule 315 (scalar -> common_scalar .)
    IS_SMALLER      reduce using rule 315 (scalar -> common_scalar .)
    IS_SMALLER_OR_EQUAL reduce using rule 315 (scalar -> common_scalar .)
    IS_GREATER      reduce using rule 315 (scalar -> common_scalar .)
    IS_GREATER_OR_EQUAL reduce using rule 315 (scalar -> common_scalar .)
    INSTANCEOF      reduce using rule 315 (scalar -> common_scalar .)
    QUESTION        reduce using rule 315 (scalar -> common_scalar .)
    RPAREN          reduce using rule 315 (scalar -> common_scalar .)
    COMMA           reduce using rule 315 (scalar -> common_scalar .)
    SEMI            reduce using rule 315 (scalar -> common_scalar .)
    AS              reduce using rule 315 (scalar -> common_scalar .)
    RBRACE          reduce using rule 315 (scalar -> common_scalar .)
    RBRACKET        reduce using rule 315 (scalar -> common_scalar .)
    DOUBLE_ARROW    reduce using rule 315 (scalar -> common_scalar .)
    COLON           reduce using rule 315 (scalar -> common_scalar .)


state 83

    (47) statement -> UNSET . LPAREN unset_variables RPAREN SEMI

    LPAREN          shift and go to state 220


state 84

    (193) function_call -> variable_without_objects . LPAREN function_call_parameter_list RPAREN

    LPAREN          shift and go to state 221


state 85

    (48) statement -> SEMI .

    HALT_COMPILER   reduce using rule 48 (statement -> SEMI .)
    NAMESPACE       reduce using rule 48 (statement -> SEMI .)
    CONST           reduce using rule 48 (statement -> SEMI .)
    USE             reduce using rule 48 (statement -> SEMI .)
    LBRACE          reduce using rule 48 (statement -> SEMI .)
    IF              reduce using rule 48 (statement -> SEMI .)
    WHILE           reduce using rule 48 (statement -> SEMI .)
    DO              reduce using rule 48 (statement -> SEMI .)
    FOR             reduce using rule 48 (statement -> SEMI .)
    FOREACH         reduce using rule 48 (statement -> SEMI .)
    SWITCH          reduce using rule 48 (statement -> SEMI .)
    BREAK           reduce using rule 48 (statement -> SEMI .)
    CONTINUE        reduce using rule 48 (statement -> SEMI .)
    RETURN          reduce using rule 48 (statement -> SEMI .)
    GLOBAL          reduce using rule 48 (statement -> SEMI .)
    STATIC          reduce using rule 48 (statement -> SEMI .)
    ECHO            reduce using rule 48 (statement -> SEMI .)
    INLINE_HTML     reduce using rule 48 (statement -> SEMI .)
    UNSET           reduce using rule 48 (statement -> SEMI .)
    SEMI            reduce using rule 48 (statement -> SEMI .)
    TRY             reduce using rule 48 (statement -> SEMI .)
    THROW           reduce using rule 48 (statement -> SEMI .)
    DECLARE         reduce using rule 48 (statement -> SEMI .)
    FUNCTION        reduce using rule 48 (statement -> SEMI .)
    INTERFACE       reduce using rule 48 (statement -> SEMI .)
    NEW             reduce using rule 48 (statement -> SEMI .)
    CLONE           reduce using rule 48 (statement -> SEMI .)
    LIST            reduce using rule 48 (statement -> SEMI .)
    ARRAY           reduce using rule 48 (statement -> SEMI .)
    PLUS            reduce using rule 48 (statement -> SEMI .)
    MINUS           reduce using rule 48 (statement -> SEMI .)
    NOT             reduce using rule 48 (statement -> SEMI .)
    BOOLEAN_NOT     reduce using rule 48 (statement -> SEMI .)
    INC             reduce using rule 48 (statement -> SEMI .)
    DEC             reduce using rule 48 (statement -> SEMI .)
    INT_CAST        reduce using rule 48 (statement -> SEMI .)
    DOUBLE_CAST     reduce using rule 48 (statement -> SEMI .)
    STRING_CAST     reduce using rule 48 (statement -> SEMI .)
    ARRAY_CAST      reduce using rule 48 (statement -> SEMI .)
    OBJECT_CAST     reduce using rule 48 (statement -> SEMI .)
    BOOL_CAST       reduce using rule 48 (statement -> SEMI .)
    UNSET_CAST      reduce using rule 48 (statement -> SEMI .)
    ISSET           reduce using rule 48 (statement -> SEMI .)
    EMPTY           reduce using rule 48 (statement -> SEMI .)
    EVAL            reduce using rule 48 (statement -> SEMI .)
    INCLUDE         reduce using rule 48 (statement -> SEMI .)
    INCLUDE_ONCE    reduce using rule 48 (statement -> SEMI .)
    REQUIRE         reduce using rule 48 (statement -> SEMI .)
    REQUIRE_ONCE    reduce using rule 48 (statement -> SEMI .)
    EXIT            reduce using rule 48 (statement -> SEMI .)
    PRINT           reduce using rule 48 (statement -> SEMI .)
    AT              reduce using rule 48 (statement -> SEMI .)
    LPAREN          reduce using rule 48 (statement -> SEMI .)
    CLASS           reduce using rule 48 (statement -> SEMI .)
    ABSTRACT        reduce using rule 48 (statement -> SEMI .)
    FINAL           reduce using rule 48 (statement -> SEMI .)
    QUOTE           reduce using rule 48 (statement -> SEMI .)
    START_HEREDOC   reduce using rule 48 (statement -> SEMI .)
    STRING_VARNAME  reduce using rule 48 (statement -> SEMI .)
    NS_SEPARATOR    reduce using rule 48 (statement -> SEMI .)
    LNUMBER         reduce using rule 48 (statement -> SEMI .)
    DNUMBER         reduce using rule 48 (statement -> SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 48 (statement -> SEMI .)
    LINE            reduce using rule 48 (statement -> SEMI .)
    FILE            reduce using rule 48 (statement -> SEMI .)
    DIR             reduce using rule 48 (statement -> SEMI .)
    CLASS_C         reduce using rule 48 (statement -> SEMI .)
    METHOD_C        reduce using rule 48 (statement -> SEMI .)
    FUNC_C          reduce using rule 48 (statement -> SEMI .)
    NS_C            reduce using rule 48 (statement -> SEMI .)
    STRING          reduce using rule 48 (statement -> SEMI .)
    DOLLAR          reduce using rule 48 (statement -> SEMI .)
    VARIABLE        reduce using rule 48 (statement -> SEMI .)
    $end            reduce using rule 48 (statement -> SEMI .)
    RBRACE          reduce using rule 48 (statement -> SEMI .)
    ELSEIF          reduce using rule 48 (statement -> SEMI .)
    ELSE            reduce using rule 48 (statement -> SEMI .)
    ENDDECLARE      reduce using rule 48 (statement -> SEMI .)
    ENDWHILE        reduce using rule 48 (statement -> SEMI .)
    ENDIF           reduce using rule 48 (statement -> SEMI .)
    ENDFOREACH      reduce using rule 48 (statement -> SEMI .)
    CASE            reduce using rule 48 (statement -> SEMI .)
    DEFAULT         reduce using rule 48 (statement -> SEMI .)
    ENDSWITCH       reduce using rule 48 (statement -> SEMI .)
    ENDFOR          reduce using rule 48 (statement -> SEMI .)


state 86

    (200) base_variable -> static_member .

    OBJECT_OPERATOR reduce using rule 200 (base_variable -> static_member .)
    EQUALS          reduce using rule 200 (base_variable -> static_member .)
    PLUS_EQUAL      reduce using rule 200 (base_variable -> static_member .)
    MINUS_EQUAL     reduce using rule 200 (base_variable -> static_member .)
    MUL_EQUAL       reduce using rule 200 (base_variable -> static_member .)
    DIV_EQUAL       reduce using rule 200 (base_variable -> static_member .)
    CONCAT_EQUAL    reduce using rule 200 (base_variable -> static_member .)
    MOD_EQUAL       reduce using rule 200 (base_variable -> static_member .)
    AND_EQUAL       reduce using rule 200 (base_variable -> static_member .)
    OR_EQUAL        reduce using rule 200 (base_variable -> static_member .)
    XOR_EQUAL       reduce using rule 200 (base_variable -> static_member .)
    SL_EQUAL        reduce using rule 200 (base_variable -> static_member .)
    SR_EQUAL        reduce using rule 200 (base_variable -> static_member .)
    INC             reduce using rule 200 (base_variable -> static_member .)
    DEC             reduce using rule 200 (base_variable -> static_member .)
    SEMI            reduce using rule 200 (base_variable -> static_member .)
    BOOLEAN_AND     reduce using rule 200 (base_variable -> static_member .)
    BOOLEAN_OR      reduce using rule 200 (base_variable -> static_member .)
    LOGICAL_AND     reduce using rule 200 (base_variable -> static_member .)
    LOGICAL_OR      reduce using rule 200 (base_variable -> static_member .)
    LOGICAL_XOR     reduce using rule 200 (base_variable -> static_member .)
    AND             reduce using rule 200 (base_variable -> static_member .)
    OR              reduce using rule 200 (base_variable -> static_member .)
    XOR             reduce using rule 200 (base_variable -> static_member .)
    CONCAT          reduce using rule 200 (base_variable -> static_member .)
    PLUS            reduce using rule 200 (base_variable -> static_member .)
    MINUS           reduce using rule 200 (base_variable -> static_member .)
    MUL             reduce using rule 200 (base_variable -> static_member .)
    DIV             reduce using rule 200 (base_variable -> static_member .)
    SL              reduce using rule 200 (base_variable -> static_member .)
    SR              reduce using rule 200 (base_variable -> static_member .)
    MOD             reduce using rule 200 (base_variable -> static_member .)
    IS_IDENTICAL    reduce using rule 200 (base_variable -> static_member .)
    IS_NOT_IDENTICAL reduce using rule 200 (base_variable -> static_member .)
    IS_EQUAL        reduce using rule 200 (base_variable -> static_member .)
    IS_NOT_EQUAL    reduce using rule 200 (base_variable -> static_member .)
    IS_SMALLER      reduce using rule 200 (base_variable -> static_member .)
    IS_SMALLER_OR_EQUAL reduce using rule 200 (base_variable -> static_member .)
    IS_GREATER      reduce using rule 200 (base_variable -> static_member .)
    IS_GREATER_OR_EQUAL reduce using rule 200 (base_variable -> static_member .)
    INSTANCEOF      reduce using rule 200 (base_variable -> static_member .)
    QUESTION        reduce using rule 200 (base_variable -> static_member .)
    RPAREN          reduce using rule 200 (base_variable -> static_member .)
    COMMA           reduce using rule 200 (base_variable -> static_member .)
    AS              reduce using rule 200 (base_variable -> static_member .)
    RBRACE          reduce using rule 200 (base_variable -> static_member .)
    RBRACKET        reduce using rule 200 (base_variable -> static_member .)
    DOUBLE_ARROW    reduce using rule 200 (base_variable -> static_member .)
    COLON           reduce using rule 200 (base_variable -> static_member .)
    LPAREN          reduce using rule 200 (base_variable -> static_member .)


state 87

    (299) expr -> ISSET . LPAREN isset_variables RPAREN

    LPAREN          shift and go to state 222


state 88

    (45) statement -> INLINE_HTML .

    HALT_COMPILER   reduce using rule 45 (statement -> INLINE_HTML .)
    NAMESPACE       reduce using rule 45 (statement -> INLINE_HTML .)
    CONST           reduce using rule 45 (statement -> INLINE_HTML .)
    USE             reduce using rule 45 (statement -> INLINE_HTML .)
    LBRACE          reduce using rule 45 (statement -> INLINE_HTML .)
    IF              reduce using rule 45 (statement -> INLINE_HTML .)
    WHILE           reduce using rule 45 (statement -> INLINE_HTML .)
    DO              reduce using rule 45 (statement -> INLINE_HTML .)
    FOR             reduce using rule 45 (statement -> INLINE_HTML .)
    FOREACH         reduce using rule 45 (statement -> INLINE_HTML .)
    SWITCH          reduce using rule 45 (statement -> INLINE_HTML .)
    BREAK           reduce using rule 45 (statement -> INLINE_HTML .)
    CONTINUE        reduce using rule 45 (statement -> INLINE_HTML .)
    RETURN          reduce using rule 45 (statement -> INLINE_HTML .)
    GLOBAL          reduce using rule 45 (statement -> INLINE_HTML .)
    STATIC          reduce using rule 45 (statement -> INLINE_HTML .)
    ECHO            reduce using rule 45 (statement -> INLINE_HTML .)
    INLINE_HTML     reduce using rule 45 (statement -> INLINE_HTML .)
    UNSET           reduce using rule 45 (statement -> INLINE_HTML .)
    SEMI            reduce using rule 45 (statement -> INLINE_HTML .)
    TRY             reduce using rule 45 (statement -> INLINE_HTML .)
    THROW           reduce using rule 45 (statement -> INLINE_HTML .)
    DECLARE         reduce using rule 45 (statement -> INLINE_HTML .)
    FUNCTION        reduce using rule 45 (statement -> INLINE_HTML .)
    INTERFACE       reduce using rule 45 (statement -> INLINE_HTML .)
    NEW             reduce using rule 45 (statement -> INLINE_HTML .)
    CLONE           reduce using rule 45 (statement -> INLINE_HTML .)
    LIST            reduce using rule 45 (statement -> INLINE_HTML .)
    ARRAY           reduce using rule 45 (statement -> INLINE_HTML .)
    PLUS            reduce using rule 45 (statement -> INLINE_HTML .)
    MINUS           reduce using rule 45 (statement -> INLINE_HTML .)
    NOT             reduce using rule 45 (statement -> INLINE_HTML .)
    BOOLEAN_NOT     reduce using rule 45 (statement -> INLINE_HTML .)
    INC             reduce using rule 45 (statement -> INLINE_HTML .)
    DEC             reduce using rule 45 (statement -> INLINE_HTML .)
    INT_CAST        reduce using rule 45 (statement -> INLINE_HTML .)
    DOUBLE_CAST     reduce using rule 45 (statement -> INLINE_HTML .)
    STRING_CAST     reduce using rule 45 (statement -> INLINE_HTML .)
    ARRAY_CAST      reduce using rule 45 (statement -> INLINE_HTML .)
    OBJECT_CAST     reduce using rule 45 (statement -> INLINE_HTML .)
    BOOL_CAST       reduce using rule 45 (statement -> INLINE_HTML .)
    UNSET_CAST      reduce using rule 45 (statement -> INLINE_HTML .)
    ISSET           reduce using rule 45 (statement -> INLINE_HTML .)
    EMPTY           reduce using rule 45 (statement -> INLINE_HTML .)
    EVAL            reduce using rule 45 (statement -> INLINE_HTML .)
    INCLUDE         reduce using rule 45 (statement -> INLINE_HTML .)
    INCLUDE_ONCE    reduce using rule 45 (statement -> INLINE_HTML .)
    REQUIRE         reduce using rule 45 (statement -> INLINE_HTML .)
    REQUIRE_ONCE    reduce using rule 45 (statement -> INLINE_HTML .)
    EXIT            reduce using rule 45 (statement -> INLINE_HTML .)
    PRINT           reduce using rule 45 (statement -> INLINE_HTML .)
    AT              reduce using rule 45 (statement -> INLINE_HTML .)
    LPAREN          reduce using rule 45 (statement -> INLINE_HTML .)
    CLASS           reduce using rule 45 (statement -> INLINE_HTML .)
    ABSTRACT        reduce using rule 45 (statement -> INLINE_HTML .)
    FINAL           reduce using rule 45 (statement -> INLINE_HTML .)
    QUOTE           reduce using rule 45 (statement -> INLINE_HTML .)
    START_HEREDOC   reduce using rule 45 (statement -> INLINE_HTML .)
    STRING_VARNAME  reduce using rule 45 (statement -> INLINE_HTML .)
    NS_SEPARATOR    reduce using rule 45 (statement -> INLINE_HTML .)
    LNUMBER         reduce using rule 45 (statement -> INLINE_HTML .)
    DNUMBER         reduce using rule 45 (statement -> INLINE_HTML .)
    CONSTANT_ENCAPSED_STRING reduce using rule 45 (statement -> INLINE_HTML .)
    LINE            reduce using rule 45 (statement -> INLINE_HTML .)
    FILE            reduce using rule 45 (statement -> INLINE_HTML .)
    DIR             reduce using rule 45 (statement -> INLINE_HTML .)
    CLASS_C         reduce using rule 45 (statement -> INLINE_HTML .)
    METHOD_C        reduce using rule 45 (statement -> INLINE_HTML .)
    FUNC_C          reduce using rule 45 (statement -> INLINE_HTML .)
    NS_C            reduce using rule 45 (statement -> INLINE_HTML .)
    STRING          reduce using rule 45 (statement -> INLINE_HTML .)
    DOLLAR          reduce using rule 45 (statement -> INLINE_HTML .)
    VARIABLE        reduce using rule 45 (statement -> INLINE_HTML .)
    $end            reduce using rule 45 (statement -> INLINE_HTML .)
    RBRACE          reduce using rule 45 (statement -> INLINE_HTML .)
    ELSEIF          reduce using rule 45 (statement -> INLINE_HTML .)
    ELSE            reduce using rule 45 (statement -> INLINE_HTML .)
    ENDDECLARE      reduce using rule 45 (statement -> INLINE_HTML .)
    ENDWHILE        reduce using rule 45 (statement -> INLINE_HTML .)
    ENDIF           reduce using rule 45 (statement -> INLINE_HTML .)
    ENDFOREACH      reduce using rule 45 (statement -> INLINE_HTML .)
    CASE            reduce using rule 45 (statement -> INLINE_HTML .)
    DEFAULT         reduce using rule 45 (statement -> INLINE_HTML .)
    ENDSWITCH       reduce using rule 45 (statement -> INLINE_HTML .)
    ENDFOR          reduce using rule 45 (statement -> INLINE_HTML .)


state 89

    (350) namespace_name -> STRING .

    NS_SEPARATOR    reduce using rule 350 (namespace_name -> STRING .)
    LPAREN          reduce using rule 350 (namespace_name -> STRING .)
    SEMI            reduce using rule 350 (namespace_name -> STRING .)
    BOOLEAN_AND     reduce using rule 350 (namespace_name -> STRING .)
    BOOLEAN_OR      reduce using rule 350 (namespace_name -> STRING .)
    LOGICAL_AND     reduce using rule 350 (namespace_name -> STRING .)
    LOGICAL_OR      reduce using rule 350 (namespace_name -> STRING .)
    LOGICAL_XOR     reduce using rule 350 (namespace_name -> STRING .)
    AND             reduce using rule 350 (namespace_name -> STRING .)
    OR              reduce using rule 350 (namespace_name -> STRING .)
    XOR             reduce using rule 350 (namespace_name -> STRING .)
    CONCAT          reduce using rule 350 (namespace_name -> STRING .)
    PLUS            reduce using rule 350 (namespace_name -> STRING .)
    MINUS           reduce using rule 350 (namespace_name -> STRING .)
    MUL             reduce using rule 350 (namespace_name -> STRING .)
    DIV             reduce using rule 350 (namespace_name -> STRING .)
    SL              reduce using rule 350 (namespace_name -> STRING .)
    SR              reduce using rule 350 (namespace_name -> STRING .)
    MOD             reduce using rule 350 (namespace_name -> STRING .)
    IS_IDENTICAL    reduce using rule 350 (namespace_name -> STRING .)
    IS_NOT_IDENTICAL reduce using rule 350 (namespace_name -> STRING .)
    IS_EQUAL        reduce using rule 350 (namespace_name -> STRING .)
    IS_NOT_EQUAL    reduce using rule 350 (namespace_name -> STRING .)
    IS_SMALLER      reduce using rule 350 (namespace_name -> STRING .)
    IS_SMALLER_OR_EQUAL reduce using rule 350 (namespace_name -> STRING .)
    IS_GREATER      reduce using rule 350 (namespace_name -> STRING .)
    IS_GREATER_OR_EQUAL reduce using rule 350 (namespace_name -> STRING .)
    INSTANCEOF      reduce using rule 350 (namespace_name -> STRING .)
    QUESTION        reduce using rule 350 (namespace_name -> STRING .)
    DOUBLE_COLON    reduce using rule 350 (namespace_name -> STRING .)
    COMMA           reduce using rule 350 (namespace_name -> STRING .)
    LBRACE          reduce using rule 350 (namespace_name -> STRING .)
    RPAREN          reduce using rule 350 (namespace_name -> STRING .)
    AS              reduce using rule 350 (namespace_name -> STRING .)
    RBRACE          reduce using rule 350 (namespace_name -> STRING .)
    RBRACKET        reduce using rule 350 (namespace_name -> STRING .)
    DOUBLE_ARROW    reduce using rule 350 (namespace_name -> STRING .)
    COLON           reduce using rule 350 (namespace_name -> STRING .)
    VARIABLE        reduce using rule 350 (namespace_name -> STRING .)
    IMPLEMENTS      reduce using rule 350 (namespace_name -> STRING .)


state 90

    (201) simple_indirect_reference -> DOLLAR . simple_indirect_reference
    (210) compound_variable -> DOLLAR . LBRACE expr RBRACE
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LBRACE          shift and go to state 223
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    simple_indirect_reference      shift and go to state 225
    reference_variable             shift and go to state 224
    compound_variable              shift and go to state 72

state 91

    (313) expr -> LPAREN . expr RPAREN
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 226

state 92

    (158) expr -> variable .
    (159) expr -> variable . EQUALS expr
    (160) expr -> variable . EQUALS AND expr
    (247) expr -> variable . PLUS_EQUAL expr
    (248) expr -> variable . MINUS_EQUAL expr
    (249) expr -> variable . MUL_EQUAL expr
    (250) expr -> variable . DIV_EQUAL expr
    (251) expr -> variable . CONCAT_EQUAL expr
    (252) expr -> variable . MOD_EQUAL expr
    (253) expr -> variable . AND_EQUAL expr
    (254) expr -> variable . OR_EQUAL expr
    (255) expr -> variable . XOR_EQUAL expr
    (256) expr -> variable . SL_EQUAL expr
    (257) expr -> variable . SR_EQUAL expr
    (290) expr -> variable . INC
    (291) expr -> variable . DEC

    AS              reduce using rule 158 (expr -> variable .)
    BOOLEAN_AND     reduce using rule 158 (expr -> variable .)
    BOOLEAN_OR      reduce using rule 158 (expr -> variable .)
    LOGICAL_AND     reduce using rule 158 (expr -> variable .)
    LOGICAL_OR      reduce using rule 158 (expr -> variable .)
    LOGICAL_XOR     reduce using rule 158 (expr -> variable .)
    AND             reduce using rule 158 (expr -> variable .)
    OR              reduce using rule 158 (expr -> variable .)
    XOR             reduce using rule 158 (expr -> variable .)
    CONCAT          reduce using rule 158 (expr -> variable .)
    PLUS            reduce using rule 158 (expr -> variable .)
    MINUS           reduce using rule 158 (expr -> variable .)
    MUL             reduce using rule 158 (expr -> variable .)
    DIV             reduce using rule 158 (expr -> variable .)
    SL              reduce using rule 158 (expr -> variable .)
    SR              reduce using rule 158 (expr -> variable .)
    MOD             reduce using rule 158 (expr -> variable .)
    IS_IDENTICAL    reduce using rule 158 (expr -> variable .)
    IS_NOT_IDENTICAL reduce using rule 158 (expr -> variable .)
    IS_EQUAL        reduce using rule 158 (expr -> variable .)
    IS_NOT_EQUAL    reduce using rule 158 (expr -> variable .)
    IS_SMALLER      reduce using rule 158 (expr -> variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 158 (expr -> variable .)
    IS_GREATER      reduce using rule 158 (expr -> variable .)
    IS_GREATER_OR_EQUAL reduce using rule 158 (expr -> variable .)
    INSTANCEOF      reduce using rule 158 (expr -> variable .)
    QUESTION        reduce using rule 158 (expr -> variable .)
    SEMI            reduce using rule 158 (expr -> variable .)
    COMMA           reduce using rule 158 (expr -> variable .)
    RPAREN          reduce using rule 158 (expr -> variable .)
    RBRACE          reduce using rule 158 (expr -> variable .)
    RBRACKET        reduce using rule 158 (expr -> variable .)
    DOUBLE_ARROW    reduce using rule 158 (expr -> variable .)
    COLON           reduce using rule 158 (expr -> variable .)
    EQUALS          shift and go to state 232
    PLUS_EQUAL      shift and go to state 230
    MINUS_EQUAL     shift and go to state 239
    MUL_EQUAL       shift and go to state 231
    DIV_EQUAL       shift and go to state 236
    CONCAT_EQUAL    shift and go to state 237
    MOD_EQUAL       shift and go to state 234
    AND_EQUAL       shift and go to state 238
    OR_EQUAL        shift and go to state 229
    XOR_EQUAL       shift and go to state 240
    SL_EQUAL        shift and go to state 227
    SR_EQUAL        shift and go to state 235
    INC             shift and go to state 233
    DEC             shift and go to state 228


state 93

    (29) statement -> IF . LPAREN expr RPAREN statement elseif_list else_single
    (30) statement -> IF . LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI

    LPAREN          shift and go to state 241


state 94

    (292) expr -> INT_CAST . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 242

state 95

    (324) common_scalar -> LNUMBER .

    SEMI            reduce using rule 324 (common_scalar -> LNUMBER .)
    BOOLEAN_AND     reduce using rule 324 (common_scalar -> LNUMBER .)
    BOOLEAN_OR      reduce using rule 324 (common_scalar -> LNUMBER .)
    LOGICAL_AND     reduce using rule 324 (common_scalar -> LNUMBER .)
    LOGICAL_OR      reduce using rule 324 (common_scalar -> LNUMBER .)
    LOGICAL_XOR     reduce using rule 324 (common_scalar -> LNUMBER .)
    AND             reduce using rule 324 (common_scalar -> LNUMBER .)
    OR              reduce using rule 324 (common_scalar -> LNUMBER .)
    XOR             reduce using rule 324 (common_scalar -> LNUMBER .)
    CONCAT          reduce using rule 324 (common_scalar -> LNUMBER .)
    PLUS            reduce using rule 324 (common_scalar -> LNUMBER .)
    MINUS           reduce using rule 324 (common_scalar -> LNUMBER .)
    MUL             reduce using rule 324 (common_scalar -> LNUMBER .)
    DIV             reduce using rule 324 (common_scalar -> LNUMBER .)
    SL              reduce using rule 324 (common_scalar -> LNUMBER .)
    SR              reduce using rule 324 (common_scalar -> LNUMBER .)
    MOD             reduce using rule 324 (common_scalar -> LNUMBER .)
    IS_IDENTICAL    reduce using rule 324 (common_scalar -> LNUMBER .)
    IS_NOT_IDENTICAL reduce using rule 324 (common_scalar -> LNUMBER .)
    IS_EQUAL        reduce using rule 324 (common_scalar -> LNUMBER .)
    IS_NOT_EQUAL    reduce using rule 324 (common_scalar -> LNUMBER .)
    IS_SMALLER      reduce using rule 324 (common_scalar -> LNUMBER .)
    IS_SMALLER_OR_EQUAL reduce using rule 324 (common_scalar -> LNUMBER .)
    IS_GREATER      reduce using rule 324 (common_scalar -> LNUMBER .)
    IS_GREATER_OR_EQUAL reduce using rule 324 (common_scalar -> LNUMBER .)
    INSTANCEOF      reduce using rule 324 (common_scalar -> LNUMBER .)
    QUESTION        reduce using rule 324 (common_scalar -> LNUMBER .)
    DOUBLE_ARROW    reduce using rule 324 (common_scalar -> LNUMBER .)
    COMMA           reduce using rule 324 (common_scalar -> LNUMBER .)
    RPAREN          reduce using rule 324 (common_scalar -> LNUMBER .)
    AS              reduce using rule 324 (common_scalar -> LNUMBER .)
    RBRACE          reduce using rule 324 (common_scalar -> LNUMBER .)
    RBRACKET        reduce using rule 324 (common_scalar -> LNUMBER .)
    COLON           reduce using rule 324 (common_scalar -> LNUMBER .)


state 96

    (52) statement -> THROW . expr SEMI
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 243

state 97

    (295) expr -> ARRAY_CAST . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 244

state 98

    (321) scalar -> NAMESPACE . NS_SEPARATOR namespace_name
    (188) function_call -> NAMESPACE . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (166) class_name -> NAMESPACE . NS_SEPARATOR namespace_name

    NS_SEPARATOR    shift and go to state 106


state 99

    (293) expr -> DOUBLE_CAST expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 293 (expr -> DOUBLE_CAST expr .)
    BOOLEAN_AND     reduce using rule 293 (expr -> DOUBLE_CAST expr .)
    BOOLEAN_OR      reduce using rule 293 (expr -> DOUBLE_CAST expr .)
    LOGICAL_AND     reduce using rule 293 (expr -> DOUBLE_CAST expr .)
    LOGICAL_OR      reduce using rule 293 (expr -> DOUBLE_CAST expr .)
    LOGICAL_XOR     reduce using rule 293 (expr -> DOUBLE_CAST expr .)
    AND             reduce using rule 293 (expr -> DOUBLE_CAST expr .)
    OR              reduce using rule 293 (expr -> DOUBLE_CAST expr .)
    XOR             reduce using rule 293 (expr -> DOUBLE_CAST expr .)
    CONCAT          reduce using rule 293 (expr -> DOUBLE_CAST expr .)
    PLUS            reduce using rule 293 (expr -> DOUBLE_CAST expr .)
    MINUS           reduce using rule 293 (expr -> DOUBLE_CAST expr .)
    MUL             reduce using rule 293 (expr -> DOUBLE_CAST expr .)
    DIV             reduce using rule 293 (expr -> DOUBLE_CAST expr .)
    SL              reduce using rule 293 (expr -> DOUBLE_CAST expr .)
    SR              reduce using rule 293 (expr -> DOUBLE_CAST expr .)
    MOD             reduce using rule 293 (expr -> DOUBLE_CAST expr .)
    IS_IDENTICAL    reduce using rule 293 (expr -> DOUBLE_CAST expr .)
    IS_NOT_IDENTICAL reduce using rule 293 (expr -> DOUBLE_CAST expr .)
    IS_EQUAL        reduce using rule 293 (expr -> DOUBLE_CAST expr .)
    IS_NOT_EQUAL    reduce using rule 293 (expr -> DOUBLE_CAST expr .)
    IS_SMALLER      reduce using rule 293 (expr -> DOUBLE_CAST expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 293 (expr -> DOUBLE_CAST expr .)
    IS_GREATER      reduce using rule 293 (expr -> DOUBLE_CAST expr .)
    IS_GREATER_OR_EQUAL reduce using rule 293 (expr -> DOUBLE_CAST expr .)
    INSTANCEOF      reduce using rule 293 (expr -> DOUBLE_CAST expr .)
    QUESTION        reduce using rule 293 (expr -> DOUBLE_CAST expr .)
    SEMI            reduce using rule 293 (expr -> DOUBLE_CAST expr .)
    COMMA           reduce using rule 293 (expr -> DOUBLE_CAST expr .)
    RPAREN          reduce using rule 293 (expr -> DOUBLE_CAST expr .)
    RBRACE          reduce using rule 293 (expr -> DOUBLE_CAST expr .)
    RBRACKET        reduce using rule 293 (expr -> DOUBLE_CAST expr .)
    DOUBLE_ARROW    reduce using rule 293 (expr -> DOUBLE_CAST expr .)
    COLON           reduce using rule 293 (expr -> DOUBLE_CAST expr .)

  ! BOOLEAN_AND     [ shift and go to state 196 ]
  ! BOOLEAN_OR      [ shift and go to state 194 ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]
  ! AND             [ shift and go to state 191 ]
  ! OR              [ shift and go to state 205 ]
  ! XOR             [ shift and go to state 193 ]
  ! CONCAT          [ shift and go to state 186 ]
  ! PLUS            [ shift and go to state 190 ]
  ! MINUS           [ shift and go to state 185 ]
  ! MUL             [ shift and go to state 183 ]
  ! DIV             [ shift and go to state 184 ]
  ! SL              [ shift and go to state 203 ]
  ! SR              [ shift and go to state 199 ]
  ! MOD             [ shift and go to state 206 ]
  ! IS_IDENTICAL    [ shift and go to state 201 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 198 ]
  ! IS_EQUAL        [ shift and go to state 189 ]
  ! IS_NOT_EQUAL    [ shift and go to state 195 ]
  ! IS_SMALLER      [ shift and go to state 192 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 197 ]
  ! IS_GREATER      [ shift and go to state 182 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 180 ]
  ! INSTANCEOF      [ shift and go to state 204 ]
  ! QUESTION        [ shift and go to state 188 ]


state 100

    (240) expr -> FUNCTION . is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (145) is_reference -> . AND
    (146) is_reference -> . empty
    (363) empty -> .

    AND             shift and go to state 138
    LPAREN          reduce using rule 363 (empty -> .)

    is_reference                   shift and go to state 245
    empty                          shift and go to state 140

state 101

    (167) class_name -> STATIC .

    DOUBLE_COLON    reduce using rule 167 (class_name -> STATIC .)
    VARIABLE        reduce using rule 167 (class_name -> STATIC .)
    AND             reduce using rule 167 (class_name -> STATIC .)
    LPAREN          reduce using rule 167 (class_name -> STATIC .)
    SEMI            reduce using rule 167 (class_name -> STATIC .)
    BOOLEAN_AND     reduce using rule 167 (class_name -> STATIC .)
    BOOLEAN_OR      reduce using rule 167 (class_name -> STATIC .)
    LOGICAL_AND     reduce using rule 167 (class_name -> STATIC .)
    LOGICAL_OR      reduce using rule 167 (class_name -> STATIC .)
    LOGICAL_XOR     reduce using rule 167 (class_name -> STATIC .)
    OR              reduce using rule 167 (class_name -> STATIC .)
    XOR             reduce using rule 167 (class_name -> STATIC .)
    CONCAT          reduce using rule 167 (class_name -> STATIC .)
    PLUS            reduce using rule 167 (class_name -> STATIC .)
    MINUS           reduce using rule 167 (class_name -> STATIC .)
    MUL             reduce using rule 167 (class_name -> STATIC .)
    DIV             reduce using rule 167 (class_name -> STATIC .)
    SL              reduce using rule 167 (class_name -> STATIC .)
    SR              reduce using rule 167 (class_name -> STATIC .)
    MOD             reduce using rule 167 (class_name -> STATIC .)
    IS_IDENTICAL    reduce using rule 167 (class_name -> STATIC .)
    IS_NOT_IDENTICAL reduce using rule 167 (class_name -> STATIC .)
    IS_EQUAL        reduce using rule 167 (class_name -> STATIC .)
    IS_NOT_EQUAL    reduce using rule 167 (class_name -> STATIC .)
    IS_SMALLER      reduce using rule 167 (class_name -> STATIC .)
    IS_SMALLER_OR_EQUAL reduce using rule 167 (class_name -> STATIC .)
    IS_GREATER      reduce using rule 167 (class_name -> STATIC .)
    IS_GREATER_OR_EQUAL reduce using rule 167 (class_name -> STATIC .)
    INSTANCEOF      reduce using rule 167 (class_name -> STATIC .)
    QUESTION        reduce using rule 167 (class_name -> STATIC .)
    COMMA           reduce using rule 167 (class_name -> STATIC .)
    RPAREN          reduce using rule 167 (class_name -> STATIC .)
    AS              reduce using rule 167 (class_name -> STATIC .)
    RBRACE          reduce using rule 167 (class_name -> STATIC .)
    RBRACKET        reduce using rule 167 (class_name -> STATIC .)
    DOUBLE_ARROW    reduce using rule 167 (class_name -> STATIC .)
    COLON           reduce using rule 167 (class_name -> STATIC .)


state 102

    (284) expr -> MINUS expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 284 (expr -> MINUS expr .)
    BOOLEAN_AND     reduce using rule 284 (expr -> MINUS expr .)
    BOOLEAN_OR      reduce using rule 284 (expr -> MINUS expr .)
    LOGICAL_AND     reduce using rule 284 (expr -> MINUS expr .)
    LOGICAL_OR      reduce using rule 284 (expr -> MINUS expr .)
    LOGICAL_XOR     reduce using rule 284 (expr -> MINUS expr .)
    AND             reduce using rule 284 (expr -> MINUS expr .)
    OR              reduce using rule 284 (expr -> MINUS expr .)
    XOR             reduce using rule 284 (expr -> MINUS expr .)
    CONCAT          reduce using rule 284 (expr -> MINUS expr .)
    PLUS            reduce using rule 284 (expr -> MINUS expr .)
    MINUS           reduce using rule 284 (expr -> MINUS expr .)
    SL              reduce using rule 284 (expr -> MINUS expr .)
    SR              reduce using rule 284 (expr -> MINUS expr .)
    IS_IDENTICAL    reduce using rule 284 (expr -> MINUS expr .)
    IS_NOT_IDENTICAL reduce using rule 284 (expr -> MINUS expr .)
    IS_EQUAL        reduce using rule 284 (expr -> MINUS expr .)
    IS_NOT_EQUAL    reduce using rule 284 (expr -> MINUS expr .)
    IS_SMALLER      reduce using rule 284 (expr -> MINUS expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 284 (expr -> MINUS expr .)
    IS_GREATER      reduce using rule 284 (expr -> MINUS expr .)
    IS_GREATER_OR_EQUAL reduce using rule 284 (expr -> MINUS expr .)
    QUESTION        reduce using rule 284 (expr -> MINUS expr .)
    SEMI            reduce using rule 284 (expr -> MINUS expr .)
    COMMA           reduce using rule 284 (expr -> MINUS expr .)
    RPAREN          reduce using rule 284 (expr -> MINUS expr .)
    RBRACE          reduce using rule 284 (expr -> MINUS expr .)
    RBRACKET        reduce using rule 284 (expr -> MINUS expr .)
    DOUBLE_ARROW    reduce using rule 284 (expr -> MINUS expr .)
    COLON           reduce using rule 284 (expr -> MINUS expr .)
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    MOD             shift and go to state 206
    INSTANCEOF      shift and go to state 204

  ! MUL             [ reduce using rule 284 (expr -> MINUS expr .) ]
  ! DIV             [ reduce using rule 284 (expr -> MINUS expr .) ]
  ! MOD             [ reduce using rule 284 (expr -> MINUS expr .) ]
  ! INSTANCEOF      [ reduce using rule 284 (expr -> MINUS expr .) ]
  ! BOOLEAN_AND     [ shift and go to state 196 ]
  ! BOOLEAN_OR      [ shift and go to state 194 ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]
  ! AND             [ shift and go to state 191 ]
  ! OR              [ shift and go to state 205 ]
  ! XOR             [ shift and go to state 193 ]
  ! CONCAT          [ shift and go to state 186 ]
  ! PLUS            [ shift and go to state 190 ]
  ! MINUS           [ shift and go to state 185 ]
  ! SL              [ shift and go to state 203 ]
  ! SR              [ shift and go to state 199 ]
  ! IS_IDENTICAL    [ shift and go to state 201 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 198 ]
  ! IS_EQUAL        [ shift and go to state 189 ]
  ! IS_NOT_EQUAL    [ shift and go to state 195 ]
  ! IS_SMALLER      [ shift and go to state 192 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 197 ]
  ! IS_GREATER      [ shift and go to state 182 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 180 ]
  ! QUESTION        [ shift and go to state 188 ]


state 103

    (298) expr -> UNSET_CAST expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 298 (expr -> UNSET_CAST expr .)
    BOOLEAN_AND     reduce using rule 298 (expr -> UNSET_CAST expr .)
    BOOLEAN_OR      reduce using rule 298 (expr -> UNSET_CAST expr .)
    LOGICAL_AND     reduce using rule 298 (expr -> UNSET_CAST expr .)
    LOGICAL_OR      reduce using rule 298 (expr -> UNSET_CAST expr .)
    LOGICAL_XOR     reduce using rule 298 (expr -> UNSET_CAST expr .)
    AND             reduce using rule 298 (expr -> UNSET_CAST expr .)
    OR              reduce using rule 298 (expr -> UNSET_CAST expr .)
    XOR             reduce using rule 298 (expr -> UNSET_CAST expr .)
    CONCAT          reduce using rule 298 (expr -> UNSET_CAST expr .)
    PLUS            reduce using rule 298 (expr -> UNSET_CAST expr .)
    MINUS           reduce using rule 298 (expr -> UNSET_CAST expr .)
    MUL             reduce using rule 298 (expr -> UNSET_CAST expr .)
    DIV             reduce using rule 298 (expr -> UNSET_CAST expr .)
    SL              reduce using rule 298 (expr -> UNSET_CAST expr .)
    SR              reduce using rule 298 (expr -> UNSET_CAST expr .)
    MOD             reduce using rule 298 (expr -> UNSET_CAST expr .)
    IS_IDENTICAL    reduce using rule 298 (expr -> UNSET_CAST expr .)
    IS_NOT_IDENTICAL reduce using rule 298 (expr -> UNSET_CAST expr .)
    IS_EQUAL        reduce using rule 298 (expr -> UNSET_CAST expr .)
    IS_NOT_EQUAL    reduce using rule 298 (expr -> UNSET_CAST expr .)
    IS_SMALLER      reduce using rule 298 (expr -> UNSET_CAST expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 298 (expr -> UNSET_CAST expr .)
    IS_GREATER      reduce using rule 298 (expr -> UNSET_CAST expr .)
    IS_GREATER_OR_EQUAL reduce using rule 298 (expr -> UNSET_CAST expr .)
    INSTANCEOF      reduce using rule 298 (expr -> UNSET_CAST expr .)
    QUESTION        reduce using rule 298 (expr -> UNSET_CAST expr .)
    SEMI            reduce using rule 298 (expr -> UNSET_CAST expr .)
    COMMA           reduce using rule 298 (expr -> UNSET_CAST expr .)
    RPAREN          reduce using rule 298 (expr -> UNSET_CAST expr .)
    RBRACE          reduce using rule 298 (expr -> UNSET_CAST expr .)
    RBRACKET        reduce using rule 298 (expr -> UNSET_CAST expr .)
    DOUBLE_ARROW    reduce using rule 298 (expr -> UNSET_CAST expr .)
    COLON           reduce using rule 298 (expr -> UNSET_CAST expr .)

  ! BOOLEAN_AND     [ shift and go to state 196 ]
  ! BOOLEAN_OR      [ shift and go to state 194 ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]
  ! AND             [ shift and go to state 191 ]
  ! OR              [ shift and go to state 205 ]
  ! XOR             [ shift and go to state 193 ]
  ! CONCAT          [ shift and go to state 186 ]
  ! PLUS            [ shift and go to state 190 ]
  ! MINUS           [ shift and go to state 185 ]
  ! MUL             [ shift and go to state 183 ]
  ! DIV             [ shift and go to state 184 ]
  ! SL              [ shift and go to state 203 ]
  ! SR              [ shift and go to state 199 ]
  ! MOD             [ shift and go to state 206 ]
  ! IS_IDENTICAL    [ shift and go to state 201 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 198 ]
  ! IS_EQUAL        [ shift and go to state 189 ]
  ! IS_NOT_EQUAL    [ shift and go to state 195 ]
  ! IS_SMALLER      [ shift and go to state 192 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 197 ]
  ! IS_GREATER      [ shift and go to state 182 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 180 ]
  ! INSTANCEOF      [ shift and go to state 204 ]
  ! QUESTION        [ shift and go to state 188 ]


state 104

    (283) expr -> PLUS expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 283 (expr -> PLUS expr .)
    BOOLEAN_AND     reduce using rule 283 (expr -> PLUS expr .)
    BOOLEAN_OR      reduce using rule 283 (expr -> PLUS expr .)
    LOGICAL_AND     reduce using rule 283 (expr -> PLUS expr .)
    LOGICAL_OR      reduce using rule 283 (expr -> PLUS expr .)
    LOGICAL_XOR     reduce using rule 283 (expr -> PLUS expr .)
    AND             reduce using rule 283 (expr -> PLUS expr .)
    OR              reduce using rule 283 (expr -> PLUS expr .)
    XOR             reduce using rule 283 (expr -> PLUS expr .)
    CONCAT          reduce using rule 283 (expr -> PLUS expr .)
    PLUS            reduce using rule 283 (expr -> PLUS expr .)
    MINUS           reduce using rule 283 (expr -> PLUS expr .)
    SL              reduce using rule 283 (expr -> PLUS expr .)
    SR              reduce using rule 283 (expr -> PLUS expr .)
    IS_IDENTICAL    reduce using rule 283 (expr -> PLUS expr .)
    IS_NOT_IDENTICAL reduce using rule 283 (expr -> PLUS expr .)
    IS_EQUAL        reduce using rule 283 (expr -> PLUS expr .)
    IS_NOT_EQUAL    reduce using rule 283 (expr -> PLUS expr .)
    IS_SMALLER      reduce using rule 283 (expr -> PLUS expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 283 (expr -> PLUS expr .)
    IS_GREATER      reduce using rule 283 (expr -> PLUS expr .)
    IS_GREATER_OR_EQUAL reduce using rule 283 (expr -> PLUS expr .)
    QUESTION        reduce using rule 283 (expr -> PLUS expr .)
    SEMI            reduce using rule 283 (expr -> PLUS expr .)
    COMMA           reduce using rule 283 (expr -> PLUS expr .)
    RPAREN          reduce using rule 283 (expr -> PLUS expr .)
    RBRACE          reduce using rule 283 (expr -> PLUS expr .)
    RBRACKET        reduce using rule 283 (expr -> PLUS expr .)
    DOUBLE_ARROW    reduce using rule 283 (expr -> PLUS expr .)
    COLON           reduce using rule 283 (expr -> PLUS expr .)
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    MOD             shift and go to state 206
    INSTANCEOF      shift and go to state 204

  ! MUL             [ reduce using rule 283 (expr -> PLUS expr .) ]
  ! DIV             [ reduce using rule 283 (expr -> PLUS expr .) ]
  ! MOD             [ reduce using rule 283 (expr -> PLUS expr .) ]
  ! INSTANCEOF      [ reduce using rule 283 (expr -> PLUS expr .) ]
  ! BOOLEAN_AND     [ shift and go to state 196 ]
  ! BOOLEAN_OR      [ shift and go to state 194 ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]
  ! AND             [ shift and go to state 191 ]
  ! OR              [ shift and go to state 205 ]
  ! XOR             [ shift and go to state 193 ]
  ! CONCAT          [ shift and go to state 186 ]
  ! PLUS            [ shift and go to state 190 ]
  ! MINUS           [ shift and go to state 185 ]
  ! SL              [ shift and go to state 203 ]
  ! SR              [ shift and go to state 199 ]
  ! IS_IDENTICAL    [ shift and go to state 201 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 198 ]
  ! IS_EQUAL        [ shift and go to state 189 ]
  ! IS_NOT_EQUAL    [ shift and go to state 195 ]
  ! IS_SMALLER      [ shift and go to state 192 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 197 ]
  ! IS_GREATER      [ shift and go to state 182 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 180 ]
  ! QUESTION        [ shift and go to state 188 ]


state 105

    (9) top_statement -> NAMESPACE LBRACE . top_statement_list RBRACE
    (2) top_statement_list -> . top_statement_list top_statement
    (3) top_statement_list -> . empty
    (363) empty -> .

    RBRACE          reduce using rule 363 (empty -> .)
    HALT_COMPILER   reduce using rule 363 (empty -> .)
    NAMESPACE       reduce using rule 363 (empty -> .)
    CONST           reduce using rule 363 (empty -> .)
    USE             reduce using rule 363 (empty -> .)
    LBRACE          reduce using rule 363 (empty -> .)
    IF              reduce using rule 363 (empty -> .)
    WHILE           reduce using rule 363 (empty -> .)
    DO              reduce using rule 363 (empty -> .)
    FOR             reduce using rule 363 (empty -> .)
    FOREACH         reduce using rule 363 (empty -> .)
    SWITCH          reduce using rule 363 (empty -> .)
    BREAK           reduce using rule 363 (empty -> .)
    CONTINUE        reduce using rule 363 (empty -> .)
    RETURN          reduce using rule 363 (empty -> .)
    GLOBAL          reduce using rule 363 (empty -> .)
    STATIC          reduce using rule 363 (empty -> .)
    ECHO            reduce using rule 363 (empty -> .)
    INLINE_HTML     reduce using rule 363 (empty -> .)
    UNSET           reduce using rule 363 (empty -> .)
    SEMI            reduce using rule 363 (empty -> .)
    TRY             reduce using rule 363 (empty -> .)
    THROW           reduce using rule 363 (empty -> .)
    DECLARE         reduce using rule 363 (empty -> .)
    FUNCTION        reduce using rule 363 (empty -> .)
    INTERFACE       reduce using rule 363 (empty -> .)
    NEW             reduce using rule 363 (empty -> .)
    CLONE           reduce using rule 363 (empty -> .)
    LIST            reduce using rule 363 (empty -> .)
    ARRAY           reduce using rule 363 (empty -> .)
    PLUS            reduce using rule 363 (empty -> .)
    MINUS           reduce using rule 363 (empty -> .)
    NOT             reduce using rule 363 (empty -> .)
    BOOLEAN_NOT     reduce using rule 363 (empty -> .)
    INC             reduce using rule 363 (empty -> .)
    DEC             reduce using rule 363 (empty -> .)
    INT_CAST        reduce using rule 363 (empty -> .)
    DOUBLE_CAST     reduce using rule 363 (empty -> .)
    STRING_CAST     reduce using rule 363 (empty -> .)
    ARRAY_CAST      reduce using rule 363 (empty -> .)
    OBJECT_CAST     reduce using rule 363 (empty -> .)
    BOOL_CAST       reduce using rule 363 (empty -> .)
    UNSET_CAST      reduce using rule 363 (empty -> .)
    ISSET           reduce using rule 363 (empty -> .)
    EMPTY           reduce using rule 363 (empty -> .)
    EVAL            reduce using rule 363 (empty -> .)
    INCLUDE         reduce using rule 363 (empty -> .)
    INCLUDE_ONCE    reduce using rule 363 (empty -> .)
    REQUIRE         reduce using rule 363 (empty -> .)
    REQUIRE_ONCE    reduce using rule 363 (empty -> .)
    EXIT            reduce using rule 363 (empty -> .)
    PRINT           reduce using rule 363 (empty -> .)
    AT              reduce using rule 363 (empty -> .)
    LPAREN          reduce using rule 363 (empty -> .)
    CLASS           reduce using rule 363 (empty -> .)
    ABSTRACT        reduce using rule 363 (empty -> .)
    FINAL           reduce using rule 363 (empty -> .)
    QUOTE           reduce using rule 363 (empty -> .)
    START_HEREDOC   reduce using rule 363 (empty -> .)
    STRING_VARNAME  reduce using rule 363 (empty -> .)
    NS_SEPARATOR    reduce using rule 363 (empty -> .)
    LNUMBER         reduce using rule 363 (empty -> .)
    DNUMBER         reduce using rule 363 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 363 (empty -> .)
    LINE            reduce using rule 363 (empty -> .)
    FILE            reduce using rule 363 (empty -> .)
    DIR             reduce using rule 363 (empty -> .)
    CLASS_C         reduce using rule 363 (empty -> .)
    METHOD_C        reduce using rule 363 (empty -> .)
    FUNC_C          reduce using rule 363 (empty -> .)
    NS_C            reduce using rule 363 (empty -> .)
    STRING          reduce using rule 363 (empty -> .)
    DOLLAR          reduce using rule 363 (empty -> .)
    VARIABLE        reduce using rule 363 (empty -> .)

    top_statement_list             shift and go to state 246
    empty                          shift and go to state 3

state 106

    (321) scalar -> NAMESPACE NS_SEPARATOR . namespace_name
    (188) function_call -> NAMESPACE NS_SEPARATOR . namespace_name LPAREN function_call_parameter_list RPAREN
    (166) class_name -> NAMESPACE NS_SEPARATOR . namespace_name
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    STRING          shift and go to state 89

    namespace_name                 shift and go to state 247

state 107

    (8) top_statement -> NAMESPACE namespace_name . SEMI
    (10) top_statement -> NAMESPACE namespace_name . LBRACE top_statement_list RBRACE
    (349) namespace_name -> namespace_name . NS_SEPARATOR STRING

    SEMI            shift and go to state 249
    LBRACE          shift and go to state 248
    NS_SEPARATOR    shift and go to state 178


state 108

    (34) statement -> FOREACH LPAREN . expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 250

state 109

    (303) expr -> EVAL LPAREN . expr RPAREN
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 251

state 110

    (53) statement -> DECLARE LPAREN . declare_list RPAREN declare_statement
    (54) declare_list -> . STRING EQUALS static_scalar
    (55) declare_list -> . declare_list COMMA STRING EQUALS static_scalar

    STRING          shift and go to state 252

    declare_list                   shift and go to state 253

state 111

    (305) expr -> INCLUDE_ONCE expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 305 (expr -> INCLUDE_ONCE expr .)
    SEMI            reduce using rule 305 (expr -> INCLUDE_ONCE expr .)
    COMMA           reduce using rule 305 (expr -> INCLUDE_ONCE expr .)
    RPAREN          reduce using rule 305 (expr -> INCLUDE_ONCE expr .)
    RBRACE          reduce using rule 305 (expr -> INCLUDE_ONCE expr .)
    RBRACKET        reduce using rule 305 (expr -> INCLUDE_ONCE expr .)
    DOUBLE_ARROW    reduce using rule 305 (expr -> INCLUDE_ONCE expr .)
    COLON           reduce using rule 305 (expr -> INCLUDE_ONCE expr .)
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    LOGICAL_AND     shift and go to state 181
    LOGICAL_OR      shift and go to state 202
    LOGICAL_XOR     shift and go to state 200
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188

  ! BOOLEAN_AND     [ reduce using rule 305 (expr -> INCLUDE_ONCE expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 305 (expr -> INCLUDE_ONCE expr .) ]
  ! LOGICAL_AND     [ reduce using rule 305 (expr -> INCLUDE_ONCE expr .) ]
  ! LOGICAL_OR      [ reduce using rule 305 (expr -> INCLUDE_ONCE expr .) ]
  ! LOGICAL_XOR     [ reduce using rule 305 (expr -> INCLUDE_ONCE expr .) ]
  ! AND             [ reduce using rule 305 (expr -> INCLUDE_ONCE expr .) ]
  ! OR              [ reduce using rule 305 (expr -> INCLUDE_ONCE expr .) ]
  ! XOR             [ reduce using rule 305 (expr -> INCLUDE_ONCE expr .) ]
  ! CONCAT          [ reduce using rule 305 (expr -> INCLUDE_ONCE expr .) ]
  ! PLUS            [ reduce using rule 305 (expr -> INCLUDE_ONCE expr .) ]
  ! MINUS           [ reduce using rule 305 (expr -> INCLUDE_ONCE expr .) ]
  ! MUL             [ reduce using rule 305 (expr -> INCLUDE_ONCE expr .) ]
  ! DIV             [ reduce using rule 305 (expr -> INCLUDE_ONCE expr .) ]
  ! SL              [ reduce using rule 305 (expr -> INCLUDE_ONCE expr .) ]
  ! SR              [ reduce using rule 305 (expr -> INCLUDE_ONCE expr .) ]
  ! MOD             [ reduce using rule 305 (expr -> INCLUDE_ONCE expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 305 (expr -> INCLUDE_ONCE expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 305 (expr -> INCLUDE_ONCE expr .) ]
  ! IS_EQUAL        [ reduce using rule 305 (expr -> INCLUDE_ONCE expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 305 (expr -> INCLUDE_ONCE expr .) ]
  ! IS_SMALLER      [ reduce using rule 305 (expr -> INCLUDE_ONCE expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 305 (expr -> INCLUDE_ONCE expr .) ]
  ! IS_GREATER      [ reduce using rule 305 (expr -> INCLUDE_ONCE expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 305 (expr -> INCLUDE_ONCE expr .) ]
  ! INSTANCEOF      [ reduce using rule 305 (expr -> INCLUDE_ONCE expr .) ]
  ! QUESTION        [ reduce using rule 305 (expr -> INCLUDE_ONCE expr .) ]


state 112

    (175) expr -> CLONE expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 175 (expr -> CLONE expr .)
    BOOLEAN_AND     reduce using rule 175 (expr -> CLONE expr .)
    BOOLEAN_OR      reduce using rule 175 (expr -> CLONE expr .)
    LOGICAL_AND     reduce using rule 175 (expr -> CLONE expr .)
    LOGICAL_OR      reduce using rule 175 (expr -> CLONE expr .)
    LOGICAL_XOR     reduce using rule 175 (expr -> CLONE expr .)
    AND             reduce using rule 175 (expr -> CLONE expr .)
    OR              reduce using rule 175 (expr -> CLONE expr .)
    XOR             reduce using rule 175 (expr -> CLONE expr .)
    CONCAT          reduce using rule 175 (expr -> CLONE expr .)
    PLUS            reduce using rule 175 (expr -> CLONE expr .)
    MINUS           reduce using rule 175 (expr -> CLONE expr .)
    MUL             reduce using rule 175 (expr -> CLONE expr .)
    DIV             reduce using rule 175 (expr -> CLONE expr .)
    SL              reduce using rule 175 (expr -> CLONE expr .)
    SR              reduce using rule 175 (expr -> CLONE expr .)
    MOD             reduce using rule 175 (expr -> CLONE expr .)
    IS_IDENTICAL    reduce using rule 175 (expr -> CLONE expr .)
    IS_NOT_IDENTICAL reduce using rule 175 (expr -> CLONE expr .)
    IS_EQUAL        reduce using rule 175 (expr -> CLONE expr .)
    IS_NOT_EQUAL    reduce using rule 175 (expr -> CLONE expr .)
    IS_SMALLER      reduce using rule 175 (expr -> CLONE expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 175 (expr -> CLONE expr .)
    IS_GREATER      reduce using rule 175 (expr -> CLONE expr .)
    IS_GREATER_OR_EQUAL reduce using rule 175 (expr -> CLONE expr .)
    INSTANCEOF      reduce using rule 175 (expr -> CLONE expr .)
    QUESTION        reduce using rule 175 (expr -> CLONE expr .)
    SEMI            reduce using rule 175 (expr -> CLONE expr .)
    COMMA           reduce using rule 175 (expr -> CLONE expr .)
    RPAREN          reduce using rule 175 (expr -> CLONE expr .)
    RBRACE          reduce using rule 175 (expr -> CLONE expr .)
    RBRACKET        reduce using rule 175 (expr -> CLONE expr .)
    DOUBLE_ARROW    reduce using rule 175 (expr -> CLONE expr .)
    COLON           reduce using rule 175 (expr -> CLONE expr .)

  ! BOOLEAN_AND     [ shift and go to state 196 ]
  ! BOOLEAN_OR      [ shift and go to state 194 ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]
  ! AND             [ shift and go to state 191 ]
  ! OR              [ shift and go to state 205 ]
  ! XOR             [ shift and go to state 193 ]
  ! CONCAT          [ shift and go to state 186 ]
  ! PLUS            [ shift and go to state 190 ]
  ! MINUS           [ shift and go to state 185 ]
  ! MUL             [ shift and go to state 183 ]
  ! DIV             [ shift and go to state 184 ]
  ! SL              [ shift and go to state 203 ]
  ! SR              [ shift and go to state 199 ]
  ! MOD             [ shift and go to state 206 ]
  ! IS_IDENTICAL    [ shift and go to state 201 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 198 ]
  ! IS_EQUAL        [ shift and go to state 189 ]
  ! IS_NOT_EQUAL    [ shift and go to state 195 ]
  ! IS_SMALLER      [ shift and go to state 192 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 197 ]
  ! IS_GREATER      [ shift and go to state 182 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 180 ]
  ! INSTANCEOF      [ shift and go to state 204 ]
  ! QUESTION        [ shift and go to state 188 ]


state 113

    (105) class_declaration_statement -> INTERFACE STRING . interface_extends_list LBRACE class_statement_list RBRACE
    (129) interface_extends_list -> . EXTENDS interface_list
    (130) interface_extends_list -> . empty
    (363) empty -> .

    EXTENDS         shift and go to state 255
    LBRACE          reduce using rule 363 (empty -> .)

    interface_extends_list         shift and go to state 254
    empty                          shift and go to state 256

state 114

    (7) top_statement -> HALT_COMPILER LPAREN . RPAREN SEMI

    RPAREN          shift and go to state 257


state 115

    (41) statement -> RETURN expr . SEMI
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    SEMI            shift and go to state 258
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    LOGICAL_AND     shift and go to state 181
    LOGICAL_OR      shift and go to state 202
    LOGICAL_XOR     shift and go to state 200
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188


state 116

    (40) statement -> RETURN SEMI .

    HALT_COMPILER   reduce using rule 40 (statement -> RETURN SEMI .)
    NAMESPACE       reduce using rule 40 (statement -> RETURN SEMI .)
    CONST           reduce using rule 40 (statement -> RETURN SEMI .)
    USE             reduce using rule 40 (statement -> RETURN SEMI .)
    LBRACE          reduce using rule 40 (statement -> RETURN SEMI .)
    IF              reduce using rule 40 (statement -> RETURN SEMI .)
    WHILE           reduce using rule 40 (statement -> RETURN SEMI .)
    DO              reduce using rule 40 (statement -> RETURN SEMI .)
    FOR             reduce using rule 40 (statement -> RETURN SEMI .)
    FOREACH         reduce using rule 40 (statement -> RETURN SEMI .)
    SWITCH          reduce using rule 40 (statement -> RETURN SEMI .)
    BREAK           reduce using rule 40 (statement -> RETURN SEMI .)
    CONTINUE        reduce using rule 40 (statement -> RETURN SEMI .)
    RETURN          reduce using rule 40 (statement -> RETURN SEMI .)
    GLOBAL          reduce using rule 40 (statement -> RETURN SEMI .)
    STATIC          reduce using rule 40 (statement -> RETURN SEMI .)
    ECHO            reduce using rule 40 (statement -> RETURN SEMI .)
    INLINE_HTML     reduce using rule 40 (statement -> RETURN SEMI .)
    UNSET           reduce using rule 40 (statement -> RETURN SEMI .)
    SEMI            reduce using rule 40 (statement -> RETURN SEMI .)
    TRY             reduce using rule 40 (statement -> RETURN SEMI .)
    THROW           reduce using rule 40 (statement -> RETURN SEMI .)
    DECLARE         reduce using rule 40 (statement -> RETURN SEMI .)
    FUNCTION        reduce using rule 40 (statement -> RETURN SEMI .)
    INTERFACE       reduce using rule 40 (statement -> RETURN SEMI .)
    NEW             reduce using rule 40 (statement -> RETURN SEMI .)
    CLONE           reduce using rule 40 (statement -> RETURN SEMI .)
    LIST            reduce using rule 40 (statement -> RETURN SEMI .)
    ARRAY           reduce using rule 40 (statement -> RETURN SEMI .)
    PLUS            reduce using rule 40 (statement -> RETURN SEMI .)
    MINUS           reduce using rule 40 (statement -> RETURN SEMI .)
    NOT             reduce using rule 40 (statement -> RETURN SEMI .)
    BOOLEAN_NOT     reduce using rule 40 (statement -> RETURN SEMI .)
    INC             reduce using rule 40 (statement -> RETURN SEMI .)
    DEC             reduce using rule 40 (statement -> RETURN SEMI .)
    INT_CAST        reduce using rule 40 (statement -> RETURN SEMI .)
    DOUBLE_CAST     reduce using rule 40 (statement -> RETURN SEMI .)
    STRING_CAST     reduce using rule 40 (statement -> RETURN SEMI .)
    ARRAY_CAST      reduce using rule 40 (statement -> RETURN SEMI .)
    OBJECT_CAST     reduce using rule 40 (statement -> RETURN SEMI .)
    BOOL_CAST       reduce using rule 40 (statement -> RETURN SEMI .)
    UNSET_CAST      reduce using rule 40 (statement -> RETURN SEMI .)
    ISSET           reduce using rule 40 (statement -> RETURN SEMI .)
    EMPTY           reduce using rule 40 (statement -> RETURN SEMI .)
    EVAL            reduce using rule 40 (statement -> RETURN SEMI .)
    INCLUDE         reduce using rule 40 (statement -> RETURN SEMI .)
    INCLUDE_ONCE    reduce using rule 40 (statement -> RETURN SEMI .)
    REQUIRE         reduce using rule 40 (statement -> RETURN SEMI .)
    REQUIRE_ONCE    reduce using rule 40 (statement -> RETURN SEMI .)
    EXIT            reduce using rule 40 (statement -> RETURN SEMI .)
    PRINT           reduce using rule 40 (statement -> RETURN SEMI .)
    AT              reduce using rule 40 (statement -> RETURN SEMI .)
    LPAREN          reduce using rule 40 (statement -> RETURN SEMI .)
    CLASS           reduce using rule 40 (statement -> RETURN SEMI .)
    ABSTRACT        reduce using rule 40 (statement -> RETURN SEMI .)
    FINAL           reduce using rule 40 (statement -> RETURN SEMI .)
    QUOTE           reduce using rule 40 (statement -> RETURN SEMI .)
    START_HEREDOC   reduce using rule 40 (statement -> RETURN SEMI .)
    STRING_VARNAME  reduce using rule 40 (statement -> RETURN SEMI .)
    NS_SEPARATOR    reduce using rule 40 (statement -> RETURN SEMI .)
    LNUMBER         reduce using rule 40 (statement -> RETURN SEMI .)
    DNUMBER         reduce using rule 40 (statement -> RETURN SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 40 (statement -> RETURN SEMI .)
    LINE            reduce using rule 40 (statement -> RETURN SEMI .)
    FILE            reduce using rule 40 (statement -> RETURN SEMI .)
    DIR             reduce using rule 40 (statement -> RETURN SEMI .)
    CLASS_C         reduce using rule 40 (statement -> RETURN SEMI .)
    METHOD_C        reduce using rule 40 (statement -> RETURN SEMI .)
    FUNC_C          reduce using rule 40 (statement -> RETURN SEMI .)
    NS_C            reduce using rule 40 (statement -> RETURN SEMI .)
    STRING          reduce using rule 40 (statement -> RETURN SEMI .)
    DOLLAR          reduce using rule 40 (statement -> RETURN SEMI .)
    VARIABLE        reduce using rule 40 (statement -> RETURN SEMI .)
    $end            reduce using rule 40 (statement -> RETURN SEMI .)
    RBRACE          reduce using rule 40 (statement -> RETURN SEMI .)
    ELSEIF          reduce using rule 40 (statement -> RETURN SEMI .)
    ELSE            reduce using rule 40 (statement -> RETURN SEMI .)
    ENDDECLARE      reduce using rule 40 (statement -> RETURN SEMI .)
    ENDWHILE        reduce using rule 40 (statement -> RETURN SEMI .)
    ENDIF           reduce using rule 40 (statement -> RETURN SEMI .)
    ENDFOREACH      reduce using rule 40 (statement -> RETURN SEMI .)
    CASE            reduce using rule 40 (statement -> RETURN SEMI .)
    DEFAULT         reduce using rule 40 (statement -> RETURN SEMI .)
    ENDSWITCH       reduce using rule 40 (statement -> RETURN SEMI .)
    ENDFOR          reduce using rule 40 (statement -> RETURN SEMI .)


state 117

    (306) expr -> REQUIRE expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 306 (expr -> REQUIRE expr .)
    SEMI            reduce using rule 306 (expr -> REQUIRE expr .)
    COMMA           reduce using rule 306 (expr -> REQUIRE expr .)
    RPAREN          reduce using rule 306 (expr -> REQUIRE expr .)
    RBRACE          reduce using rule 306 (expr -> REQUIRE expr .)
    RBRACKET        reduce using rule 306 (expr -> REQUIRE expr .)
    DOUBLE_ARROW    reduce using rule 306 (expr -> REQUIRE expr .)
    COLON           reduce using rule 306 (expr -> REQUIRE expr .)
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    LOGICAL_AND     shift and go to state 181
    LOGICAL_OR      shift and go to state 202
    LOGICAL_XOR     shift and go to state 200
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188

  ! BOOLEAN_AND     [ reduce using rule 306 (expr -> REQUIRE expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 306 (expr -> REQUIRE expr .) ]
  ! LOGICAL_AND     [ reduce using rule 306 (expr -> REQUIRE expr .) ]
  ! LOGICAL_OR      [ reduce using rule 306 (expr -> REQUIRE expr .) ]
  ! LOGICAL_XOR     [ reduce using rule 306 (expr -> REQUIRE expr .) ]
  ! AND             [ reduce using rule 306 (expr -> REQUIRE expr .) ]
  ! OR              [ reduce using rule 306 (expr -> REQUIRE expr .) ]
  ! XOR             [ reduce using rule 306 (expr -> REQUIRE expr .) ]
  ! CONCAT          [ reduce using rule 306 (expr -> REQUIRE expr .) ]
  ! PLUS            [ reduce using rule 306 (expr -> REQUIRE expr .) ]
  ! MINUS           [ reduce using rule 306 (expr -> REQUIRE expr .) ]
  ! MUL             [ reduce using rule 306 (expr -> REQUIRE expr .) ]
  ! DIV             [ reduce using rule 306 (expr -> REQUIRE expr .) ]
  ! SL              [ reduce using rule 306 (expr -> REQUIRE expr .) ]
  ! SR              [ reduce using rule 306 (expr -> REQUIRE expr .) ]
  ! MOD             [ reduce using rule 306 (expr -> REQUIRE expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 306 (expr -> REQUIRE expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 306 (expr -> REQUIRE expr .) ]
  ! IS_EQUAL        [ reduce using rule 306 (expr -> REQUIRE expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 306 (expr -> REQUIRE expr .) ]
  ! IS_SMALLER      [ reduce using rule 306 (expr -> REQUIRE expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 306 (expr -> REQUIRE expr .) ]
  ! IS_GREATER      [ reduce using rule 306 (expr -> REQUIRE expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 306 (expr -> REQUIRE expr .) ]
  ! INSTANCEOF      [ reduce using rule 306 (expr -> REQUIRE expr .) ]
  ! QUESTION        [ reduce using rule 306 (expr -> REQUIRE expr .) ]


state 118

    (297) expr -> BOOL_CAST expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 297 (expr -> BOOL_CAST expr .)
    BOOLEAN_AND     reduce using rule 297 (expr -> BOOL_CAST expr .)
    BOOLEAN_OR      reduce using rule 297 (expr -> BOOL_CAST expr .)
    LOGICAL_AND     reduce using rule 297 (expr -> BOOL_CAST expr .)
    LOGICAL_OR      reduce using rule 297 (expr -> BOOL_CAST expr .)
    LOGICAL_XOR     reduce using rule 297 (expr -> BOOL_CAST expr .)
    AND             reduce using rule 297 (expr -> BOOL_CAST expr .)
    OR              reduce using rule 297 (expr -> BOOL_CAST expr .)
    XOR             reduce using rule 297 (expr -> BOOL_CAST expr .)
    CONCAT          reduce using rule 297 (expr -> BOOL_CAST expr .)
    PLUS            reduce using rule 297 (expr -> BOOL_CAST expr .)
    MINUS           reduce using rule 297 (expr -> BOOL_CAST expr .)
    MUL             reduce using rule 297 (expr -> BOOL_CAST expr .)
    DIV             reduce using rule 297 (expr -> BOOL_CAST expr .)
    SL              reduce using rule 297 (expr -> BOOL_CAST expr .)
    SR              reduce using rule 297 (expr -> BOOL_CAST expr .)
    MOD             reduce using rule 297 (expr -> BOOL_CAST expr .)
    IS_IDENTICAL    reduce using rule 297 (expr -> BOOL_CAST expr .)
    IS_NOT_IDENTICAL reduce using rule 297 (expr -> BOOL_CAST expr .)
    IS_EQUAL        reduce using rule 297 (expr -> BOOL_CAST expr .)
    IS_NOT_EQUAL    reduce using rule 297 (expr -> BOOL_CAST expr .)
    IS_SMALLER      reduce using rule 297 (expr -> BOOL_CAST expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 297 (expr -> BOOL_CAST expr .)
    IS_GREATER      reduce using rule 297 (expr -> BOOL_CAST expr .)
    IS_GREATER_OR_EQUAL reduce using rule 297 (expr -> BOOL_CAST expr .)
    INSTANCEOF      reduce using rule 297 (expr -> BOOL_CAST expr .)
    QUESTION        reduce using rule 297 (expr -> BOOL_CAST expr .)
    SEMI            reduce using rule 297 (expr -> BOOL_CAST expr .)
    COMMA           reduce using rule 297 (expr -> BOOL_CAST expr .)
    RPAREN          reduce using rule 297 (expr -> BOOL_CAST expr .)
    RBRACE          reduce using rule 297 (expr -> BOOL_CAST expr .)
    RBRACKET        reduce using rule 297 (expr -> BOOL_CAST expr .)
    DOUBLE_ARROW    reduce using rule 297 (expr -> BOOL_CAST expr .)
    COLON           reduce using rule 297 (expr -> BOOL_CAST expr .)

  ! BOOLEAN_AND     [ shift and go to state 196 ]
  ! BOOLEAN_OR      [ shift and go to state 194 ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]
  ! AND             [ shift and go to state 191 ]
  ! OR              [ shift and go to state 205 ]
  ! XOR             [ shift and go to state 193 ]
  ! CONCAT          [ shift and go to state 186 ]
  ! PLUS            [ shift and go to state 190 ]
  ! MINUS           [ shift and go to state 185 ]
  ! MUL             [ shift and go to state 183 ]
  ! DIV             [ shift and go to state 184 ]
  ! SL              [ shift and go to state 203 ]
  ! SR              [ shift and go to state 199 ]
  ! MOD             [ shift and go to state 206 ]
  ! IS_IDENTICAL    [ shift and go to state 201 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 198 ]
  ! IS_EQUAL        [ shift and go to state 189 ]
  ! IS_NOT_EQUAL    [ shift and go to state 195 ]
  ! IS_SMALLER      [ shift and go to state 192 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 197 ]
  ! IS_GREATER      [ shift and go to state 182 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 180 ]
  ! INSTANCEOF      [ shift and go to state 204 ]
  ! QUESTION        [ shift and go to state 188 ]


state 119

    (286) expr -> BOOLEAN_NOT expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 286 (expr -> BOOLEAN_NOT expr .)
    BOOLEAN_AND     reduce using rule 286 (expr -> BOOLEAN_NOT expr .)
    BOOLEAN_OR      reduce using rule 286 (expr -> BOOLEAN_NOT expr .)
    LOGICAL_AND     reduce using rule 286 (expr -> BOOLEAN_NOT expr .)
    LOGICAL_OR      reduce using rule 286 (expr -> BOOLEAN_NOT expr .)
    LOGICAL_XOR     reduce using rule 286 (expr -> BOOLEAN_NOT expr .)
    AND             reduce using rule 286 (expr -> BOOLEAN_NOT expr .)
    OR              reduce using rule 286 (expr -> BOOLEAN_NOT expr .)
    XOR             reduce using rule 286 (expr -> BOOLEAN_NOT expr .)
    CONCAT          reduce using rule 286 (expr -> BOOLEAN_NOT expr .)
    PLUS            reduce using rule 286 (expr -> BOOLEAN_NOT expr .)
    MINUS           reduce using rule 286 (expr -> BOOLEAN_NOT expr .)
    MUL             reduce using rule 286 (expr -> BOOLEAN_NOT expr .)
    DIV             reduce using rule 286 (expr -> BOOLEAN_NOT expr .)
    SL              reduce using rule 286 (expr -> BOOLEAN_NOT expr .)
    SR              reduce using rule 286 (expr -> BOOLEAN_NOT expr .)
    MOD             reduce using rule 286 (expr -> BOOLEAN_NOT expr .)
    IS_IDENTICAL    reduce using rule 286 (expr -> BOOLEAN_NOT expr .)
    IS_NOT_IDENTICAL reduce using rule 286 (expr -> BOOLEAN_NOT expr .)
    IS_EQUAL        reduce using rule 286 (expr -> BOOLEAN_NOT expr .)
    IS_NOT_EQUAL    reduce using rule 286 (expr -> BOOLEAN_NOT expr .)
    IS_SMALLER      reduce using rule 286 (expr -> BOOLEAN_NOT expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 286 (expr -> BOOLEAN_NOT expr .)
    IS_GREATER      reduce using rule 286 (expr -> BOOLEAN_NOT expr .)
    IS_GREATER_OR_EQUAL reduce using rule 286 (expr -> BOOLEAN_NOT expr .)
    QUESTION        reduce using rule 286 (expr -> BOOLEAN_NOT expr .)
    SEMI            reduce using rule 286 (expr -> BOOLEAN_NOT expr .)
    COMMA           reduce using rule 286 (expr -> BOOLEAN_NOT expr .)
    RPAREN          reduce using rule 286 (expr -> BOOLEAN_NOT expr .)
    RBRACE          reduce using rule 286 (expr -> BOOLEAN_NOT expr .)
    RBRACKET        reduce using rule 286 (expr -> BOOLEAN_NOT expr .)
    DOUBLE_ARROW    reduce using rule 286 (expr -> BOOLEAN_NOT expr .)
    COLON           reduce using rule 286 (expr -> BOOLEAN_NOT expr .)
    INSTANCEOF      shift and go to state 204

  ! INSTANCEOF      [ reduce using rule 286 (expr -> BOOLEAN_NOT expr .) ]
  ! BOOLEAN_AND     [ shift and go to state 196 ]
  ! BOOLEAN_OR      [ shift and go to state 194 ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]
  ! AND             [ shift and go to state 191 ]
  ! OR              [ shift and go to state 205 ]
  ! XOR             [ shift and go to state 193 ]
  ! CONCAT          [ shift and go to state 186 ]
  ! PLUS            [ shift and go to state 190 ]
  ! MINUS           [ shift and go to state 185 ]
  ! MUL             [ shift and go to state 183 ]
  ! DIV             [ shift and go to state 184 ]
  ! SL              [ shift and go to state 203 ]
  ! SR              [ shift and go to state 199 ]
  ! MOD             [ shift and go to state 206 ]
  ! IS_IDENTICAL    [ shift and go to state 201 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 198 ]
  ! IS_EQUAL        [ shift and go to state 189 ]
  ! IS_NOT_EQUAL    [ shift and go to state 195 ]
  ! IS_SMALLER      [ shift and go to state 192 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 197 ]
  ! IS_GREATER      [ shift and go to state 182 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 180 ]
  ! QUESTION        [ shift and go to state 188 ]


state 120

    (95) static_var_list -> static_var .

    SEMI            reduce using rule 95 (static_var_list -> static_var .)
    COMMA           reduce using rule 95 (static_var_list -> static_var .)


state 121

    (43) statement -> STATIC static_var_list . SEMI
    (94) static_var_list -> static_var_list . COMMA static_var

    SEMI            shift and go to state 260
    COMMA           shift and go to state 259


state 122

    (96) static_var -> VARIABLE . EQUALS static_scalar
    (97) static_var -> VARIABLE .

    EQUALS          shift and go to state 261
    SEMI            reduce using rule 97 (static_var -> VARIABLE .)
    COMMA           reduce using rule 97 (static_var -> VARIABLE .)


state 123

    (311) expr -> PRINT expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 311 (expr -> PRINT expr .)
    LOGICAL_AND     reduce using rule 311 (expr -> PRINT expr .)
    LOGICAL_OR      reduce using rule 311 (expr -> PRINT expr .)
    LOGICAL_XOR     reduce using rule 311 (expr -> PRINT expr .)
    SEMI            reduce using rule 311 (expr -> PRINT expr .)
    COMMA           reduce using rule 311 (expr -> PRINT expr .)
    RPAREN          reduce using rule 311 (expr -> PRINT expr .)
    RBRACE          reduce using rule 311 (expr -> PRINT expr .)
    RBRACKET        reduce using rule 311 (expr -> PRINT expr .)
    DOUBLE_ARROW    reduce using rule 311 (expr -> PRINT expr .)
    COLON           reduce using rule 311 (expr -> PRINT expr .)
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188

  ! BOOLEAN_AND     [ reduce using rule 311 (expr -> PRINT expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 311 (expr -> PRINT expr .) ]
  ! AND             [ reduce using rule 311 (expr -> PRINT expr .) ]
  ! OR              [ reduce using rule 311 (expr -> PRINT expr .) ]
  ! XOR             [ reduce using rule 311 (expr -> PRINT expr .) ]
  ! CONCAT          [ reduce using rule 311 (expr -> PRINT expr .) ]
  ! PLUS            [ reduce using rule 311 (expr -> PRINT expr .) ]
  ! MINUS           [ reduce using rule 311 (expr -> PRINT expr .) ]
  ! MUL             [ reduce using rule 311 (expr -> PRINT expr .) ]
  ! DIV             [ reduce using rule 311 (expr -> PRINT expr .) ]
  ! SL              [ reduce using rule 311 (expr -> PRINT expr .) ]
  ! SR              [ reduce using rule 311 (expr -> PRINT expr .) ]
  ! MOD             [ reduce using rule 311 (expr -> PRINT expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 311 (expr -> PRINT expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 311 (expr -> PRINT expr .) ]
  ! IS_EQUAL        [ reduce using rule 311 (expr -> PRINT expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 311 (expr -> PRINT expr .) ]
  ! IS_SMALLER      [ reduce using rule 311 (expr -> PRINT expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 311 (expr -> PRINT expr .) ]
  ! IS_GREATER      [ reduce using rule 311 (expr -> PRINT expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 311 (expr -> PRINT expr .) ]
  ! INSTANCEOF      [ reduce using rule 311 (expr -> PRINT expr .) ]
  ! QUESTION        [ reduce using rule 311 (expr -> PRINT expr .) ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]


state 124

    (189) function_call -> class_name . DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> class_name . DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (203) static_member -> class_name . DOUBLE_COLON variable_without_objects

    DOUBLE_COLON    shift and go to state 262


state 125

    (289) expr -> DEC variable .

    AS              reduce using rule 289 (expr -> DEC variable .)
    BOOLEAN_AND     reduce using rule 289 (expr -> DEC variable .)
    BOOLEAN_OR      reduce using rule 289 (expr -> DEC variable .)
    LOGICAL_AND     reduce using rule 289 (expr -> DEC variable .)
    LOGICAL_OR      reduce using rule 289 (expr -> DEC variable .)
    LOGICAL_XOR     reduce using rule 289 (expr -> DEC variable .)
    AND             reduce using rule 289 (expr -> DEC variable .)
    OR              reduce using rule 289 (expr -> DEC variable .)
    XOR             reduce using rule 289 (expr -> DEC variable .)
    CONCAT          reduce using rule 289 (expr -> DEC variable .)
    PLUS            reduce using rule 289 (expr -> DEC variable .)
    MINUS           reduce using rule 289 (expr -> DEC variable .)
    MUL             reduce using rule 289 (expr -> DEC variable .)
    DIV             reduce using rule 289 (expr -> DEC variable .)
    SL              reduce using rule 289 (expr -> DEC variable .)
    SR              reduce using rule 289 (expr -> DEC variable .)
    MOD             reduce using rule 289 (expr -> DEC variable .)
    IS_IDENTICAL    reduce using rule 289 (expr -> DEC variable .)
    IS_NOT_IDENTICAL reduce using rule 289 (expr -> DEC variable .)
    IS_EQUAL        reduce using rule 289 (expr -> DEC variable .)
    IS_NOT_EQUAL    reduce using rule 289 (expr -> DEC variable .)
    IS_SMALLER      reduce using rule 289 (expr -> DEC variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 289 (expr -> DEC variable .)
    IS_GREATER      reduce using rule 289 (expr -> DEC variable .)
    IS_GREATER_OR_EQUAL reduce using rule 289 (expr -> DEC variable .)
    INSTANCEOF      reduce using rule 289 (expr -> DEC variable .)
    QUESTION        reduce using rule 289 (expr -> DEC variable .)
    SEMI            reduce using rule 289 (expr -> DEC variable .)
    COMMA           reduce using rule 289 (expr -> DEC variable .)
    RPAREN          reduce using rule 289 (expr -> DEC variable .)
    RBRACE          reduce using rule 289 (expr -> DEC variable .)
    RBRACKET        reduce using rule 289 (expr -> DEC variable .)
    DOUBLE_ARROW    reduce using rule 289 (expr -> DEC variable .)
    COLON           reduce using rule 289 (expr -> DEC variable .)


state 126

    (202) simple_indirect_reference -> reference_variable .
    (205) variable_class_name -> reference_variable .
    (206) reference_variable -> reference_variable . LBRACKET dim_offset RBRACKET
    (207) reference_variable -> reference_variable . LBRACE expr RBRACE

    OBJECT_OPERATOR reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    COMMA           reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    RPAREN          reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    LPAREN          reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    SEMI            reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    BOOLEAN_AND     reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    BOOLEAN_OR      reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    LOGICAL_AND     reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    LOGICAL_OR      reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    LOGICAL_XOR     reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    AND             reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    OR              reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    XOR             reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    CONCAT          reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    PLUS            reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    MINUS           reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    MUL             reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    DIV             reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    SL              reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    SR              reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    MOD             reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    IS_IDENTICAL    reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    IS_NOT_IDENTICAL reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    IS_EQUAL        reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    IS_NOT_EQUAL    reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    IS_SMALLER      reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    IS_GREATER      reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    IS_GREATER_OR_EQUAL reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    INSTANCEOF      reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    QUESTION        reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    AS              reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    RBRACE          reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    RBRACKET        reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    DOUBLE_ARROW    reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    COLON           reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    DOUBLE_COLON    reduce using rule 205 (variable_class_name -> reference_variable .)
    LBRACKET        shift and go to state 175
    LBRACE          shift and go to state 174


state 127

    (191) function_call -> variable_class_name . DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> variable_class_name . DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (204) static_member -> variable_class_name . DOUBLE_COLON variable_without_objects

    DOUBLE_COLON    shift and go to state 263


state 128

    (188) function_call -> NAMESPACE . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (166) class_name -> NAMESPACE . NS_SEPARATOR namespace_name

    NS_SEPARATOR    shift and go to state 264


state 129

    (187) function_call -> NS_SEPARATOR . namespace_name LPAREN function_call_parameter_list RPAREN
    (165) class_name -> NS_SEPARATOR . namespace_name
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    STRING          shift and go to state 89

    namespace_name                 shift and go to state 265

state 130

    (186) function_call -> namespace_name . LPAREN function_call_parameter_list RPAREN
    (349) namespace_name -> namespace_name . NS_SEPARATOR STRING
    (164) class_name -> namespace_name .

    LPAREN          shift and go to state 179
    NS_SEPARATOR    shift and go to state 178
    DOUBLE_COLON    reduce using rule 164 (class_name -> namespace_name .)


state 131

    (108) class_entry_type -> FINAL CLASS .

    STRING          reduce using rule 108 (class_entry_type -> FINAL CLASS .)


state 132

    (302) expr -> EMPTY LPAREN . expr RPAREN
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 266

state 133

    (294) expr -> STRING_CAST expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 294 (expr -> STRING_CAST expr .)
    BOOLEAN_AND     reduce using rule 294 (expr -> STRING_CAST expr .)
    BOOLEAN_OR      reduce using rule 294 (expr -> STRING_CAST expr .)
    LOGICAL_AND     reduce using rule 294 (expr -> STRING_CAST expr .)
    LOGICAL_OR      reduce using rule 294 (expr -> STRING_CAST expr .)
    LOGICAL_XOR     reduce using rule 294 (expr -> STRING_CAST expr .)
    AND             reduce using rule 294 (expr -> STRING_CAST expr .)
    OR              reduce using rule 294 (expr -> STRING_CAST expr .)
    XOR             reduce using rule 294 (expr -> STRING_CAST expr .)
    CONCAT          reduce using rule 294 (expr -> STRING_CAST expr .)
    PLUS            reduce using rule 294 (expr -> STRING_CAST expr .)
    MINUS           reduce using rule 294 (expr -> STRING_CAST expr .)
    MUL             reduce using rule 294 (expr -> STRING_CAST expr .)
    DIV             reduce using rule 294 (expr -> STRING_CAST expr .)
    SL              reduce using rule 294 (expr -> STRING_CAST expr .)
    SR              reduce using rule 294 (expr -> STRING_CAST expr .)
    MOD             reduce using rule 294 (expr -> STRING_CAST expr .)
    IS_IDENTICAL    reduce using rule 294 (expr -> STRING_CAST expr .)
    IS_NOT_IDENTICAL reduce using rule 294 (expr -> STRING_CAST expr .)
    IS_EQUAL        reduce using rule 294 (expr -> STRING_CAST expr .)
    IS_NOT_EQUAL    reduce using rule 294 (expr -> STRING_CAST expr .)
    IS_SMALLER      reduce using rule 294 (expr -> STRING_CAST expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 294 (expr -> STRING_CAST expr .)
    IS_GREATER      reduce using rule 294 (expr -> STRING_CAST expr .)
    IS_GREATER_OR_EQUAL reduce using rule 294 (expr -> STRING_CAST expr .)
    INSTANCEOF      reduce using rule 294 (expr -> STRING_CAST expr .)
    QUESTION        reduce using rule 294 (expr -> STRING_CAST expr .)
    SEMI            reduce using rule 294 (expr -> STRING_CAST expr .)
    COMMA           reduce using rule 294 (expr -> STRING_CAST expr .)
    RPAREN          reduce using rule 294 (expr -> STRING_CAST expr .)
    RBRACE          reduce using rule 294 (expr -> STRING_CAST expr .)
    RBRACKET        reduce using rule 294 (expr -> STRING_CAST expr .)
    DOUBLE_ARROW    reduce using rule 294 (expr -> STRING_CAST expr .)
    COLON           reduce using rule 294 (expr -> STRING_CAST expr .)

  ! BOOLEAN_AND     [ shift and go to state 196 ]
  ! BOOLEAN_OR      [ shift and go to state 194 ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]
  ! AND             [ shift and go to state 191 ]
  ! OR              [ shift and go to state 205 ]
  ! XOR             [ shift and go to state 193 ]
  ! CONCAT          [ shift and go to state 186 ]
  ! PLUS            [ shift and go to state 190 ]
  ! MINUS           [ shift and go to state 185 ]
  ! MUL             [ shift and go to state 183 ]
  ! DIV             [ shift and go to state 184 ]
  ! SL              [ shift and go to state 203 ]
  ! SR              [ shift and go to state 199 ]
  ! MOD             [ shift and go to state 206 ]
  ! IS_IDENTICAL    [ shift and go to state 201 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 198 ]
  ! IS_EQUAL        [ shift and go to state 189 ]
  ! IS_NOT_EQUAL    [ shift and go to state 195 ]
  ! IS_SMALLER      [ shift and go to state 192 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 197 ]
  ! IS_GREATER      [ shift and go to state 182 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 180 ]
  ! INSTANCEOF      [ shift and go to state 204 ]
  ! QUESTION        [ shift and go to state 188 ]


state 134

    (33) statement -> FOR LPAREN . for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (68) for_expr -> . empty
    (69) for_expr -> . non_empty_for_expr
    (363) empty -> .
    (70) non_empty_for_expr -> . non_empty_for_expr COMMA expr
    (71) non_empty_for_expr -> . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    SEMI            reduce using rule 363 (empty -> .)
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    non_empty_for_expr             shift and go to state 268
    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    empty                          shift and go to state 269
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 267
    for_expr                       shift and go to state 270

state 135

    (296) expr -> OBJECT_CAST expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 296 (expr -> OBJECT_CAST expr .)
    BOOLEAN_AND     reduce using rule 296 (expr -> OBJECT_CAST expr .)
    BOOLEAN_OR      reduce using rule 296 (expr -> OBJECT_CAST expr .)
    LOGICAL_AND     reduce using rule 296 (expr -> OBJECT_CAST expr .)
    LOGICAL_OR      reduce using rule 296 (expr -> OBJECT_CAST expr .)
    LOGICAL_XOR     reduce using rule 296 (expr -> OBJECT_CAST expr .)
    AND             reduce using rule 296 (expr -> OBJECT_CAST expr .)
    OR              reduce using rule 296 (expr -> OBJECT_CAST expr .)
    XOR             reduce using rule 296 (expr -> OBJECT_CAST expr .)
    CONCAT          reduce using rule 296 (expr -> OBJECT_CAST expr .)
    PLUS            reduce using rule 296 (expr -> OBJECT_CAST expr .)
    MINUS           reduce using rule 296 (expr -> OBJECT_CAST expr .)
    MUL             reduce using rule 296 (expr -> OBJECT_CAST expr .)
    DIV             reduce using rule 296 (expr -> OBJECT_CAST expr .)
    SL              reduce using rule 296 (expr -> OBJECT_CAST expr .)
    SR              reduce using rule 296 (expr -> OBJECT_CAST expr .)
    MOD             reduce using rule 296 (expr -> OBJECT_CAST expr .)
    IS_IDENTICAL    reduce using rule 296 (expr -> OBJECT_CAST expr .)
    IS_NOT_IDENTICAL reduce using rule 296 (expr -> OBJECT_CAST expr .)
    IS_EQUAL        reduce using rule 296 (expr -> OBJECT_CAST expr .)
    IS_NOT_EQUAL    reduce using rule 296 (expr -> OBJECT_CAST expr .)
    IS_SMALLER      reduce using rule 296 (expr -> OBJECT_CAST expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 296 (expr -> OBJECT_CAST expr .)
    IS_GREATER      reduce using rule 296 (expr -> OBJECT_CAST expr .)
    IS_GREATER_OR_EQUAL reduce using rule 296 (expr -> OBJECT_CAST expr .)
    INSTANCEOF      reduce using rule 296 (expr -> OBJECT_CAST expr .)
    QUESTION        reduce using rule 296 (expr -> OBJECT_CAST expr .)
    SEMI            reduce using rule 296 (expr -> OBJECT_CAST expr .)
    COMMA           reduce using rule 296 (expr -> OBJECT_CAST expr .)
    RPAREN          reduce using rule 296 (expr -> OBJECT_CAST expr .)
    RBRACE          reduce using rule 296 (expr -> OBJECT_CAST expr .)
    RBRACKET        reduce using rule 296 (expr -> OBJECT_CAST expr .)
    DOUBLE_ARROW    reduce using rule 296 (expr -> OBJECT_CAST expr .)
    COLON           reduce using rule 296 (expr -> OBJECT_CAST expr .)

  ! BOOLEAN_AND     [ shift and go to state 196 ]
  ! BOOLEAN_OR      [ shift and go to state 194 ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]
  ! AND             [ shift and go to state 191 ]
  ! OR              [ shift and go to state 205 ]
  ! XOR             [ shift and go to state 193 ]
  ! CONCAT          [ shift and go to state 186 ]
  ! PLUS            [ shift and go to state 190 ]
  ! MINUS           [ shift and go to state 185 ]
  ! MUL             [ shift and go to state 183 ]
  ! DIV             [ shift and go to state 184 ]
  ! SL              [ shift and go to state 203 ]
  ! SR              [ shift and go to state 199 ]
  ! MOD             [ shift and go to state 206 ]
  ! IS_IDENTICAL    [ shift and go to state 201 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 198 ]
  ! IS_EQUAL        [ shift and go to state 189 ]
  ! IS_NOT_EQUAL    [ shift and go to state 195 ]
  ! IS_SMALLER      [ shift and go to state 192 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 197 ]
  ! IS_GREATER      [ shift and go to state 182 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 180 ]
  ! INSTANCEOF      [ shift and go to state 204 ]
  ! QUESTION        [ shift and go to state 188 ]


state 136

    (182) variable -> base_variable_with_function_calls OBJECT_OPERATOR . object_property method_or_not variable_properties
    (213) object_property -> . variable_name object_dim_list
    (214) object_property -> . variable_without_objects
    (218) variable_name -> . STRING
    (219) variable_name -> . LBRACE expr RBRACE
    (220) variable_without_objects -> . simple_indirect_reference
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    STRING          shift and go to state 274
    LBRACE          shift and go to state 272
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    variable_without_objects       shift and go to state 271
    object_property                shift and go to state 273
    compound_variable              shift and go to state 72
    reference_variable             shift and go to state 224
    variable_name                  shift and go to state 275
    simple_indirect_reference      shift and go to state 276

state 137

    (312) expr -> AT expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 312 (expr -> AT expr .)
    BOOLEAN_AND     reduce using rule 312 (expr -> AT expr .)
    BOOLEAN_OR      reduce using rule 312 (expr -> AT expr .)
    LOGICAL_AND     reduce using rule 312 (expr -> AT expr .)
    LOGICAL_OR      reduce using rule 312 (expr -> AT expr .)
    LOGICAL_XOR     reduce using rule 312 (expr -> AT expr .)
    AND             reduce using rule 312 (expr -> AT expr .)
    OR              reduce using rule 312 (expr -> AT expr .)
    XOR             reduce using rule 312 (expr -> AT expr .)
    CONCAT          reduce using rule 312 (expr -> AT expr .)
    PLUS            reduce using rule 312 (expr -> AT expr .)
    MINUS           reduce using rule 312 (expr -> AT expr .)
    MUL             reduce using rule 312 (expr -> AT expr .)
    DIV             reduce using rule 312 (expr -> AT expr .)
    SL              reduce using rule 312 (expr -> AT expr .)
    SR              reduce using rule 312 (expr -> AT expr .)
    MOD             reduce using rule 312 (expr -> AT expr .)
    IS_IDENTICAL    reduce using rule 312 (expr -> AT expr .)
    IS_NOT_IDENTICAL reduce using rule 312 (expr -> AT expr .)
    IS_EQUAL        reduce using rule 312 (expr -> AT expr .)
    IS_NOT_EQUAL    reduce using rule 312 (expr -> AT expr .)
    IS_SMALLER      reduce using rule 312 (expr -> AT expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 312 (expr -> AT expr .)
    IS_GREATER      reduce using rule 312 (expr -> AT expr .)
    IS_GREATER_OR_EQUAL reduce using rule 312 (expr -> AT expr .)
    INSTANCEOF      reduce using rule 312 (expr -> AT expr .)
    QUESTION        reduce using rule 312 (expr -> AT expr .)
    SEMI            reduce using rule 312 (expr -> AT expr .)
    COMMA           reduce using rule 312 (expr -> AT expr .)
    RPAREN          reduce using rule 312 (expr -> AT expr .)
    RBRACE          reduce using rule 312 (expr -> AT expr .)
    RBRACKET        reduce using rule 312 (expr -> AT expr .)
    DOUBLE_ARROW    reduce using rule 312 (expr -> AT expr .)
    COLON           reduce using rule 312 (expr -> AT expr .)

  ! BOOLEAN_AND     [ shift and go to state 196 ]
  ! BOOLEAN_OR      [ shift and go to state 194 ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]
  ! AND             [ shift and go to state 191 ]
  ! OR              [ shift and go to state 205 ]
  ! XOR             [ shift and go to state 193 ]
  ! CONCAT          [ shift and go to state 186 ]
  ! PLUS            [ shift and go to state 190 ]
  ! MINUS           [ shift and go to state 185 ]
  ! MUL             [ shift and go to state 183 ]
  ! DIV             [ shift and go to state 184 ]
  ! SL              [ shift and go to state 203 ]
  ! SR              [ shift and go to state 199 ]
  ! MOD             [ shift and go to state 206 ]
  ! IS_IDENTICAL    [ shift and go to state 201 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 198 ]
  ! IS_EQUAL        [ shift and go to state 189 ]
  ! IS_NOT_EQUAL    [ shift and go to state 195 ]
  ! IS_SMALLER      [ shift and go to state 192 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 197 ]
  ! IS_GREATER      [ shift and go to state 182 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 180 ]
  ! INSTANCEOF      [ shift and go to state 204 ]
  ! QUESTION        [ shift and go to state 188 ]


state 138

    (145) is_reference -> AND .

    STRING          reduce using rule 145 (is_reference -> AND .)
    LPAREN          reduce using rule 145 (is_reference -> AND .)


state 139

    (103) function_declaration_statement -> FUNCTION is_reference . STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (240) expr -> FUNCTION is_reference . LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE

    STRING          shift and go to state 277
    LPAREN          shift and go to state 278


state 140

    (146) is_reference -> empty .

    STRING          reduce using rule 146 (is_reference -> empty .)
    LPAREN          reduce using rule 146 (is_reference -> empty .)


state 141

    (323) class_constant -> variable_class_name DOUBLE_COLON . STRING
    (191) function_call -> variable_class_name DOUBLE_COLON . STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> variable_class_name DOUBLE_COLON . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (204) static_member -> variable_class_name DOUBLE_COLON . variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    STRING          shift and go to state 280
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    variable_without_objects       shift and go to state 279
    compound_variable              shift and go to state 72
    reference_variable             shift and go to state 224
    simple_indirect_reference      shift and go to state 276

state 142

    (99) echo_expr_list -> expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    SEMI            reduce using rule 99 (echo_expr_list -> expr .)
    COMMA           reduce using rule 99 (echo_expr_list -> expr .)
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    LOGICAL_AND     shift and go to state 181
    LOGICAL_OR      shift and go to state 202
    LOGICAL_XOR     shift and go to state 200
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188


state 143

    (44) statement -> ECHO echo_expr_list . SEMI
    (98) echo_expr_list -> echo_expr_list . COMMA expr

    SEMI            shift and go to state 282
    COMMA           shift and go to state 281


state 144

    (49) statement -> TRY LBRACE . inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches
    (22) inner_statement_list -> . inner_statement_list inner_statement
    (23) inner_statement_list -> . empty
    (363) empty -> .

    RBRACE          reduce using rule 363 (empty -> .)
    HALT_COMPILER   reduce using rule 363 (empty -> .)
    LBRACE          reduce using rule 363 (empty -> .)
    IF              reduce using rule 363 (empty -> .)
    WHILE           reduce using rule 363 (empty -> .)
    DO              reduce using rule 363 (empty -> .)
    FOR             reduce using rule 363 (empty -> .)
    FOREACH         reduce using rule 363 (empty -> .)
    SWITCH          reduce using rule 363 (empty -> .)
    BREAK           reduce using rule 363 (empty -> .)
    CONTINUE        reduce using rule 363 (empty -> .)
    RETURN          reduce using rule 363 (empty -> .)
    GLOBAL          reduce using rule 363 (empty -> .)
    STATIC          reduce using rule 363 (empty -> .)
    ECHO            reduce using rule 363 (empty -> .)
    INLINE_HTML     reduce using rule 363 (empty -> .)
    UNSET           reduce using rule 363 (empty -> .)
    SEMI            reduce using rule 363 (empty -> .)
    TRY             reduce using rule 363 (empty -> .)
    THROW           reduce using rule 363 (empty -> .)
    DECLARE         reduce using rule 363 (empty -> .)
    FUNCTION        reduce using rule 363 (empty -> .)
    INTERFACE       reduce using rule 363 (empty -> .)
    NEW             reduce using rule 363 (empty -> .)
    CLONE           reduce using rule 363 (empty -> .)
    LIST            reduce using rule 363 (empty -> .)
    ARRAY           reduce using rule 363 (empty -> .)
    PLUS            reduce using rule 363 (empty -> .)
    MINUS           reduce using rule 363 (empty -> .)
    NOT             reduce using rule 363 (empty -> .)
    BOOLEAN_NOT     reduce using rule 363 (empty -> .)
    INC             reduce using rule 363 (empty -> .)
    DEC             reduce using rule 363 (empty -> .)
    INT_CAST        reduce using rule 363 (empty -> .)
    DOUBLE_CAST     reduce using rule 363 (empty -> .)
    STRING_CAST     reduce using rule 363 (empty -> .)
    ARRAY_CAST      reduce using rule 363 (empty -> .)
    OBJECT_CAST     reduce using rule 363 (empty -> .)
    BOOL_CAST       reduce using rule 363 (empty -> .)
    UNSET_CAST      reduce using rule 363 (empty -> .)
    ISSET           reduce using rule 363 (empty -> .)
    EMPTY           reduce using rule 363 (empty -> .)
    EVAL            reduce using rule 363 (empty -> .)
    INCLUDE         reduce using rule 363 (empty -> .)
    INCLUDE_ONCE    reduce using rule 363 (empty -> .)
    REQUIRE         reduce using rule 363 (empty -> .)
    REQUIRE_ONCE    reduce using rule 363 (empty -> .)
    EXIT            reduce using rule 363 (empty -> .)
    PRINT           reduce using rule 363 (empty -> .)
    AT              reduce using rule 363 (empty -> .)
    LPAREN          reduce using rule 363 (empty -> .)
    CLASS           reduce using rule 363 (empty -> .)
    ABSTRACT        reduce using rule 363 (empty -> .)
    FINAL           reduce using rule 363 (empty -> .)
    QUOTE           reduce using rule 363 (empty -> .)
    START_HEREDOC   reduce using rule 363 (empty -> .)
    STRING_VARNAME  reduce using rule 363 (empty -> .)
    NS_SEPARATOR    reduce using rule 363 (empty -> .)
    NAMESPACE       reduce using rule 363 (empty -> .)
    LNUMBER         reduce using rule 363 (empty -> .)
    DNUMBER         reduce using rule 363 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 363 (empty -> .)
    LINE            reduce using rule 363 (empty -> .)
    FILE            reduce using rule 363 (empty -> .)
    DIR             reduce using rule 363 (empty -> .)
    CLASS_C         reduce using rule 363 (empty -> .)
    METHOD_C        reduce using rule 363 (empty -> .)
    FUNC_C          reduce using rule 363 (empty -> .)
    NS_C            reduce using rule 363 (empty -> .)
    STRING          reduce using rule 363 (empty -> .)
    DOLLAR          reduce using rule 363 (empty -> .)
    VARIABLE        reduce using rule 363 (empty -> .)

    inner_statement_list           shift and go to state 283
    empty                          shift and go to state 148

state 145

    (304) expr -> INCLUDE expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 304 (expr -> INCLUDE expr .)
    SEMI            reduce using rule 304 (expr -> INCLUDE expr .)
    COMMA           reduce using rule 304 (expr -> INCLUDE expr .)
    RPAREN          reduce using rule 304 (expr -> INCLUDE expr .)
    RBRACE          reduce using rule 304 (expr -> INCLUDE expr .)
    RBRACKET        reduce using rule 304 (expr -> INCLUDE expr .)
    DOUBLE_ARROW    reduce using rule 304 (expr -> INCLUDE expr .)
    COLON           reduce using rule 304 (expr -> INCLUDE expr .)
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    LOGICAL_AND     shift and go to state 181
    LOGICAL_OR      shift and go to state 202
    LOGICAL_XOR     shift and go to state 200
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188

  ! BOOLEAN_AND     [ reduce using rule 304 (expr -> INCLUDE expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 304 (expr -> INCLUDE expr .) ]
  ! LOGICAL_AND     [ reduce using rule 304 (expr -> INCLUDE expr .) ]
  ! LOGICAL_OR      [ reduce using rule 304 (expr -> INCLUDE expr .) ]
  ! LOGICAL_XOR     [ reduce using rule 304 (expr -> INCLUDE expr .) ]
  ! AND             [ reduce using rule 304 (expr -> INCLUDE expr .) ]
  ! OR              [ reduce using rule 304 (expr -> INCLUDE expr .) ]
  ! XOR             [ reduce using rule 304 (expr -> INCLUDE expr .) ]
  ! CONCAT          [ reduce using rule 304 (expr -> INCLUDE expr .) ]
  ! PLUS            [ reduce using rule 304 (expr -> INCLUDE expr .) ]
  ! MINUS           [ reduce using rule 304 (expr -> INCLUDE expr .) ]
  ! MUL             [ reduce using rule 304 (expr -> INCLUDE expr .) ]
  ! DIV             [ reduce using rule 304 (expr -> INCLUDE expr .) ]
  ! SL              [ reduce using rule 304 (expr -> INCLUDE expr .) ]
  ! SR              [ reduce using rule 304 (expr -> INCLUDE expr .) ]
  ! MOD             [ reduce using rule 304 (expr -> INCLUDE expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 304 (expr -> INCLUDE expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 304 (expr -> INCLUDE expr .) ]
  ! IS_EQUAL        [ reduce using rule 304 (expr -> INCLUDE expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 304 (expr -> INCLUDE expr .) ]
  ! IS_SMALLER      [ reduce using rule 304 (expr -> INCLUDE expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 304 (expr -> INCLUDE expr .) ]
  ! IS_GREATER      [ reduce using rule 304 (expr -> INCLUDE expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 304 (expr -> INCLUDE expr .) ]
  ! INSTANCEOF      [ reduce using rule 304 (expr -> INCLUDE expr .) ]
  ! QUESTION        [ reduce using rule 304 (expr -> INCLUDE expr .) ]


state 146

    (307) expr -> REQUIRE_ONCE expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 307 (expr -> REQUIRE_ONCE expr .)
    SEMI            reduce using rule 307 (expr -> REQUIRE_ONCE expr .)
    COMMA           reduce using rule 307 (expr -> REQUIRE_ONCE expr .)
    RPAREN          reduce using rule 307 (expr -> REQUIRE_ONCE expr .)
    RBRACE          reduce using rule 307 (expr -> REQUIRE_ONCE expr .)
    RBRACKET        reduce using rule 307 (expr -> REQUIRE_ONCE expr .)
    DOUBLE_ARROW    reduce using rule 307 (expr -> REQUIRE_ONCE expr .)
    COLON           reduce using rule 307 (expr -> REQUIRE_ONCE expr .)
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    LOGICAL_AND     shift and go to state 181
    LOGICAL_OR      shift and go to state 202
    LOGICAL_XOR     shift and go to state 200
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188

  ! BOOLEAN_AND     [ reduce using rule 307 (expr -> REQUIRE_ONCE expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 307 (expr -> REQUIRE_ONCE expr .) ]
  ! LOGICAL_AND     [ reduce using rule 307 (expr -> REQUIRE_ONCE expr .) ]
  ! LOGICAL_OR      [ reduce using rule 307 (expr -> REQUIRE_ONCE expr .) ]
  ! LOGICAL_XOR     [ reduce using rule 307 (expr -> REQUIRE_ONCE expr .) ]
  ! AND             [ reduce using rule 307 (expr -> REQUIRE_ONCE expr .) ]
  ! OR              [ reduce using rule 307 (expr -> REQUIRE_ONCE expr .) ]
  ! XOR             [ reduce using rule 307 (expr -> REQUIRE_ONCE expr .) ]
  ! CONCAT          [ reduce using rule 307 (expr -> REQUIRE_ONCE expr .) ]
  ! PLUS            [ reduce using rule 307 (expr -> REQUIRE_ONCE expr .) ]
  ! MINUS           [ reduce using rule 307 (expr -> REQUIRE_ONCE expr .) ]
  ! MUL             [ reduce using rule 307 (expr -> REQUIRE_ONCE expr .) ]
  ! DIV             [ reduce using rule 307 (expr -> REQUIRE_ONCE expr .) ]
  ! SL              [ reduce using rule 307 (expr -> REQUIRE_ONCE expr .) ]
  ! SR              [ reduce using rule 307 (expr -> REQUIRE_ONCE expr .) ]
  ! MOD             [ reduce using rule 307 (expr -> REQUIRE_ONCE expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 307 (expr -> REQUIRE_ONCE expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 307 (expr -> REQUIRE_ONCE expr .) ]
  ! IS_EQUAL        [ reduce using rule 307 (expr -> REQUIRE_ONCE expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 307 (expr -> REQUIRE_ONCE expr .) ]
  ! IS_SMALLER      [ reduce using rule 307 (expr -> REQUIRE_ONCE expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 307 (expr -> REQUIRE_ONCE expr .) ]
  ! IS_GREATER      [ reduce using rule 307 (expr -> REQUIRE_ONCE expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 307 (expr -> REQUIRE_ONCE expr .) ]
  ! INSTANCEOF      [ reduce using rule 307 (expr -> REQUIRE_ONCE expr .) ]
  ! QUESTION        [ reduce using rule 307 (expr -> REQUIRE_ONCE expr .) ]


state 147

    (28) statement -> LBRACE inner_statement_list . RBRACE
    (22) inner_statement_list -> inner_statement_list . inner_statement
    (24) inner_statement -> . statement
    (25) inner_statement -> . function_declaration_statement
    (26) inner_statement -> . class_declaration_statement
    (27) inner_statement -> . HALT_COMPILER LPAREN RPAREN SEMI
    (28) statement -> . LBRACE inner_statement_list RBRACE
    (29) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (30) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (31) statement -> . WHILE LPAREN expr RPAREN while_statement
    (32) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (33) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (34) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (35) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (36) statement -> . BREAK SEMI
    (37) statement -> . BREAK expr SEMI
    (38) statement -> . CONTINUE SEMI
    (39) statement -> . CONTINUE expr SEMI
    (40) statement -> . RETURN SEMI
    (41) statement -> . RETURN expr SEMI
    (42) statement -> . GLOBAL global_var_list SEMI
    (43) statement -> . STATIC static_var_list SEMI
    (44) statement -> . ECHO echo_expr_list SEMI
    (45) statement -> . INLINE_HTML
    (46) statement -> . expr SEMI
    (47) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (48) statement -> . SEMI
    (49) statement -> . TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches
    (52) statement -> . THROW expr SEMI
    (53) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (103) function_declaration_statement -> . FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (104) class_declaration_statement -> . class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE
    (105) class_declaration_statement -> . INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (106) class_entry_type -> . CLASS
    (107) class_entry_type -> . ABSTRACT CLASS
    (108) class_entry_type -> . FINAL CLASS
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    RBRACE          shift and go to state 284
    HALT_COMPILER   shift and go to state 285
    LBRACE          shift and go to state 47
    IF              shift and go to state 93
    WHILE           shift and go to state 57
    DO              shift and go to state 76
    FOR             shift and go to state 36
    FOREACH         shift and go to state 13
    SWITCH          shift and go to state 61
    BREAK           shift and go to state 74
    CONTINUE        shift and go to state 48
    RETURN          shift and go to state 23
    GLOBAL          shift and go to state 55
    STATIC          shift and go to state 29
    ECHO            shift and go to state 42
    INLINE_HTML     shift and go to state 88
    UNSET           shift and go to state 83
    SEMI            shift and go to state 85
    TRY             shift and go to state 43
    THROW           shift and go to state 96
    DECLARE         shift and go to state 16
    FUNCTION        shift and go to state 40
    INTERFACE       shift and go to state 21
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    CLASS           shift and go to state 20
    ABSTRACT        shift and go to state 80
    FINAL           shift and go to state 32
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_entry_type               shift and go to state 53
    inner_statement                shift and go to state 286
    class_name                     shift and go to state 54
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    function_call                  shift and go to state 27
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    function_declaration_statement shift and go to state 287
    statement                      shift and go to state 288
    class_constant                 shift and go to state 24
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    class_declaration_statement    shift and go to state 289
    compound_variable              shift and go to state 72
    expr                           shift and go to state 71

state 148

    (23) inner_statement_list -> empty .

    HALT_COMPILER   reduce using rule 23 (inner_statement_list -> empty .)
    LBRACE          reduce using rule 23 (inner_statement_list -> empty .)
    IF              reduce using rule 23 (inner_statement_list -> empty .)
    WHILE           reduce using rule 23 (inner_statement_list -> empty .)
    DO              reduce using rule 23 (inner_statement_list -> empty .)
    FOR             reduce using rule 23 (inner_statement_list -> empty .)
    FOREACH         reduce using rule 23 (inner_statement_list -> empty .)
    SWITCH          reduce using rule 23 (inner_statement_list -> empty .)
    BREAK           reduce using rule 23 (inner_statement_list -> empty .)
    CONTINUE        reduce using rule 23 (inner_statement_list -> empty .)
    RETURN          reduce using rule 23 (inner_statement_list -> empty .)
    GLOBAL          reduce using rule 23 (inner_statement_list -> empty .)
    STATIC          reduce using rule 23 (inner_statement_list -> empty .)
    ECHO            reduce using rule 23 (inner_statement_list -> empty .)
    INLINE_HTML     reduce using rule 23 (inner_statement_list -> empty .)
    UNSET           reduce using rule 23 (inner_statement_list -> empty .)
    SEMI            reduce using rule 23 (inner_statement_list -> empty .)
    TRY             reduce using rule 23 (inner_statement_list -> empty .)
    THROW           reduce using rule 23 (inner_statement_list -> empty .)
    DECLARE         reduce using rule 23 (inner_statement_list -> empty .)
    FUNCTION        reduce using rule 23 (inner_statement_list -> empty .)
    INTERFACE       reduce using rule 23 (inner_statement_list -> empty .)
    NEW             reduce using rule 23 (inner_statement_list -> empty .)
    CLONE           reduce using rule 23 (inner_statement_list -> empty .)
    LIST            reduce using rule 23 (inner_statement_list -> empty .)
    ARRAY           reduce using rule 23 (inner_statement_list -> empty .)
    PLUS            reduce using rule 23 (inner_statement_list -> empty .)
    MINUS           reduce using rule 23 (inner_statement_list -> empty .)
    NOT             reduce using rule 23 (inner_statement_list -> empty .)
    BOOLEAN_NOT     reduce using rule 23 (inner_statement_list -> empty .)
    INC             reduce using rule 23 (inner_statement_list -> empty .)
    DEC             reduce using rule 23 (inner_statement_list -> empty .)
    INT_CAST        reduce using rule 23 (inner_statement_list -> empty .)
    DOUBLE_CAST     reduce using rule 23 (inner_statement_list -> empty .)
    STRING_CAST     reduce using rule 23 (inner_statement_list -> empty .)
    ARRAY_CAST      reduce using rule 23 (inner_statement_list -> empty .)
    OBJECT_CAST     reduce using rule 23 (inner_statement_list -> empty .)
    BOOL_CAST       reduce using rule 23 (inner_statement_list -> empty .)
    UNSET_CAST      reduce using rule 23 (inner_statement_list -> empty .)
    ISSET           reduce using rule 23 (inner_statement_list -> empty .)
    EMPTY           reduce using rule 23 (inner_statement_list -> empty .)
    EVAL            reduce using rule 23 (inner_statement_list -> empty .)
    INCLUDE         reduce using rule 23 (inner_statement_list -> empty .)
    INCLUDE_ONCE    reduce using rule 23 (inner_statement_list -> empty .)
    REQUIRE         reduce using rule 23 (inner_statement_list -> empty .)
    REQUIRE_ONCE    reduce using rule 23 (inner_statement_list -> empty .)
    EXIT            reduce using rule 23 (inner_statement_list -> empty .)
    PRINT           reduce using rule 23 (inner_statement_list -> empty .)
    AT              reduce using rule 23 (inner_statement_list -> empty .)
    LPAREN          reduce using rule 23 (inner_statement_list -> empty .)
    CLASS           reduce using rule 23 (inner_statement_list -> empty .)
    ABSTRACT        reduce using rule 23 (inner_statement_list -> empty .)
    FINAL           reduce using rule 23 (inner_statement_list -> empty .)
    QUOTE           reduce using rule 23 (inner_statement_list -> empty .)
    START_HEREDOC   reduce using rule 23 (inner_statement_list -> empty .)
    STRING_VARNAME  reduce using rule 23 (inner_statement_list -> empty .)
    NS_SEPARATOR    reduce using rule 23 (inner_statement_list -> empty .)
    NAMESPACE       reduce using rule 23 (inner_statement_list -> empty .)
    LNUMBER         reduce using rule 23 (inner_statement_list -> empty .)
    DNUMBER         reduce using rule 23 (inner_statement_list -> empty .)
    CONSTANT_ENCAPSED_STRING reduce using rule 23 (inner_statement_list -> empty .)
    LINE            reduce using rule 23 (inner_statement_list -> empty .)
    FILE            reduce using rule 23 (inner_statement_list -> empty .)
    DIR             reduce using rule 23 (inner_statement_list -> empty .)
    CLASS_C         reduce using rule 23 (inner_statement_list -> empty .)
    METHOD_C        reduce using rule 23 (inner_statement_list -> empty .)
    FUNC_C          reduce using rule 23 (inner_statement_list -> empty .)
    NS_C            reduce using rule 23 (inner_statement_list -> empty .)
    STRING          reduce using rule 23 (inner_statement_list -> empty .)
    DOLLAR          reduce using rule 23 (inner_statement_list -> empty .)
    VARIABLE        reduce using rule 23 (inner_statement_list -> empty .)
    RBRACE          reduce using rule 23 (inner_statement_list -> empty .)
    CASE            reduce using rule 23 (inner_statement_list -> empty .)
    DEFAULT         reduce using rule 23 (inner_statement_list -> empty .)
    ENDSWITCH       reduce using rule 23 (inner_statement_list -> empty .)
    ENDFOREACH      reduce using rule 23 (inner_statement_list -> empty .)
    ENDWHILE        reduce using rule 23 (inner_statement_list -> empty .)
    ELSEIF          reduce using rule 23 (inner_statement_list -> empty .)
    ELSE            reduce using rule 23 (inner_statement_list -> empty .)
    ENDIF           reduce using rule 23 (inner_statement_list -> empty .)
    ENDDECLARE      reduce using rule 23 (inner_statement_list -> empty .)
    ENDFOR          reduce using rule 23 (inner_statement_list -> empty .)


state 149

    (39) statement -> CONTINUE expr . SEMI
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    SEMI            shift and go to state 290
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    LOGICAL_AND     shift and go to state 181
    LOGICAL_OR      shift and go to state 202
    LOGICAL_XOR     shift and go to state 200
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188


state 150

    (38) statement -> CONTINUE SEMI .

    HALT_COMPILER   reduce using rule 38 (statement -> CONTINUE SEMI .)
    NAMESPACE       reduce using rule 38 (statement -> CONTINUE SEMI .)
    CONST           reduce using rule 38 (statement -> CONTINUE SEMI .)
    USE             reduce using rule 38 (statement -> CONTINUE SEMI .)
    LBRACE          reduce using rule 38 (statement -> CONTINUE SEMI .)
    IF              reduce using rule 38 (statement -> CONTINUE SEMI .)
    WHILE           reduce using rule 38 (statement -> CONTINUE SEMI .)
    DO              reduce using rule 38 (statement -> CONTINUE SEMI .)
    FOR             reduce using rule 38 (statement -> CONTINUE SEMI .)
    FOREACH         reduce using rule 38 (statement -> CONTINUE SEMI .)
    SWITCH          reduce using rule 38 (statement -> CONTINUE SEMI .)
    BREAK           reduce using rule 38 (statement -> CONTINUE SEMI .)
    CONTINUE        reduce using rule 38 (statement -> CONTINUE SEMI .)
    RETURN          reduce using rule 38 (statement -> CONTINUE SEMI .)
    GLOBAL          reduce using rule 38 (statement -> CONTINUE SEMI .)
    STATIC          reduce using rule 38 (statement -> CONTINUE SEMI .)
    ECHO            reduce using rule 38 (statement -> CONTINUE SEMI .)
    INLINE_HTML     reduce using rule 38 (statement -> CONTINUE SEMI .)
    UNSET           reduce using rule 38 (statement -> CONTINUE SEMI .)
    SEMI            reduce using rule 38 (statement -> CONTINUE SEMI .)
    TRY             reduce using rule 38 (statement -> CONTINUE SEMI .)
    THROW           reduce using rule 38 (statement -> CONTINUE SEMI .)
    DECLARE         reduce using rule 38 (statement -> CONTINUE SEMI .)
    FUNCTION        reduce using rule 38 (statement -> CONTINUE SEMI .)
    INTERFACE       reduce using rule 38 (statement -> CONTINUE SEMI .)
    NEW             reduce using rule 38 (statement -> CONTINUE SEMI .)
    CLONE           reduce using rule 38 (statement -> CONTINUE SEMI .)
    LIST            reduce using rule 38 (statement -> CONTINUE SEMI .)
    ARRAY           reduce using rule 38 (statement -> CONTINUE SEMI .)
    PLUS            reduce using rule 38 (statement -> CONTINUE SEMI .)
    MINUS           reduce using rule 38 (statement -> CONTINUE SEMI .)
    NOT             reduce using rule 38 (statement -> CONTINUE SEMI .)
    BOOLEAN_NOT     reduce using rule 38 (statement -> CONTINUE SEMI .)
    INC             reduce using rule 38 (statement -> CONTINUE SEMI .)
    DEC             reduce using rule 38 (statement -> CONTINUE SEMI .)
    INT_CAST        reduce using rule 38 (statement -> CONTINUE SEMI .)
    DOUBLE_CAST     reduce using rule 38 (statement -> CONTINUE SEMI .)
    STRING_CAST     reduce using rule 38 (statement -> CONTINUE SEMI .)
    ARRAY_CAST      reduce using rule 38 (statement -> CONTINUE SEMI .)
    OBJECT_CAST     reduce using rule 38 (statement -> CONTINUE SEMI .)
    BOOL_CAST       reduce using rule 38 (statement -> CONTINUE SEMI .)
    UNSET_CAST      reduce using rule 38 (statement -> CONTINUE SEMI .)
    ISSET           reduce using rule 38 (statement -> CONTINUE SEMI .)
    EMPTY           reduce using rule 38 (statement -> CONTINUE SEMI .)
    EVAL            reduce using rule 38 (statement -> CONTINUE SEMI .)
    INCLUDE         reduce using rule 38 (statement -> CONTINUE SEMI .)
    INCLUDE_ONCE    reduce using rule 38 (statement -> CONTINUE SEMI .)
    REQUIRE         reduce using rule 38 (statement -> CONTINUE SEMI .)
    REQUIRE_ONCE    reduce using rule 38 (statement -> CONTINUE SEMI .)
    EXIT            reduce using rule 38 (statement -> CONTINUE SEMI .)
    PRINT           reduce using rule 38 (statement -> CONTINUE SEMI .)
    AT              reduce using rule 38 (statement -> CONTINUE SEMI .)
    LPAREN          reduce using rule 38 (statement -> CONTINUE SEMI .)
    CLASS           reduce using rule 38 (statement -> CONTINUE SEMI .)
    ABSTRACT        reduce using rule 38 (statement -> CONTINUE SEMI .)
    FINAL           reduce using rule 38 (statement -> CONTINUE SEMI .)
    QUOTE           reduce using rule 38 (statement -> CONTINUE SEMI .)
    START_HEREDOC   reduce using rule 38 (statement -> CONTINUE SEMI .)
    STRING_VARNAME  reduce using rule 38 (statement -> CONTINUE SEMI .)
    NS_SEPARATOR    reduce using rule 38 (statement -> CONTINUE SEMI .)
    LNUMBER         reduce using rule 38 (statement -> CONTINUE SEMI .)
    DNUMBER         reduce using rule 38 (statement -> CONTINUE SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 38 (statement -> CONTINUE SEMI .)
    LINE            reduce using rule 38 (statement -> CONTINUE SEMI .)
    FILE            reduce using rule 38 (statement -> CONTINUE SEMI .)
    DIR             reduce using rule 38 (statement -> CONTINUE SEMI .)
    CLASS_C         reduce using rule 38 (statement -> CONTINUE SEMI .)
    METHOD_C        reduce using rule 38 (statement -> CONTINUE SEMI .)
    FUNC_C          reduce using rule 38 (statement -> CONTINUE SEMI .)
    NS_C            reduce using rule 38 (statement -> CONTINUE SEMI .)
    STRING          reduce using rule 38 (statement -> CONTINUE SEMI .)
    DOLLAR          reduce using rule 38 (statement -> CONTINUE SEMI .)
    VARIABLE        reduce using rule 38 (statement -> CONTINUE SEMI .)
    $end            reduce using rule 38 (statement -> CONTINUE SEMI .)
    RBRACE          reduce using rule 38 (statement -> CONTINUE SEMI .)
    ELSEIF          reduce using rule 38 (statement -> CONTINUE SEMI .)
    ELSE            reduce using rule 38 (statement -> CONTINUE SEMI .)
    ENDDECLARE      reduce using rule 38 (statement -> CONTINUE SEMI .)
    ENDWHILE        reduce using rule 38 (statement -> CONTINUE SEMI .)
    ENDIF           reduce using rule 38 (statement -> CONTINUE SEMI .)
    ENDFOREACH      reduce using rule 38 (statement -> CONTINUE SEMI .)
    CASE            reduce using rule 38 (statement -> CONTINUE SEMI .)
    DEFAULT         reduce using rule 38 (statement -> CONTINUE SEMI .)
    ENDSWITCH       reduce using rule 38 (statement -> CONTINUE SEMI .)
    ENDFOR          reduce using rule 38 (statement -> CONTINUE SEMI .)


state 151

    (316) scalar -> QUOTE encaps_list . QUOTE
    (351) encaps_list -> encaps_list . encaps_var
    (353) encaps_list -> encaps_list . ENCAPSED_AND_WHITESPACE
    (354) encaps_var -> . VARIABLE
    (355) encaps_var -> . VARIABLE LBRACKET encaps_var_offset RBRACKET
    (356) encaps_var -> . VARIABLE OBJECT_OPERATOR STRING
    (357) encaps_var -> . DOLLAR_OPEN_CURLY_BRACES expr RBRACE
    (358) encaps_var -> . DOLLAR_OPEN_CURLY_BRACES STRING_VARNAME LBRACKET expr RBRACKET RBRACE
    (359) encaps_var -> . CURLY_OPEN variable RBRACE

    QUOTE           shift and go to state 292
    ENCAPSED_AND_WHITESPACE shift and go to state 294
    VARIABLE        shift and go to state 295
    DOLLAR_OPEN_CURLY_BRACES shift and go to state 296
    CURLY_OPEN      shift and go to state 291

    encaps_var                     shift and go to state 293

state 152

    (352) encaps_list -> empty .

    QUOTE           reduce using rule 352 (encaps_list -> empty .)
    ENCAPSED_AND_WHITESPACE reduce using rule 352 (encaps_list -> empty .)
    VARIABLE        reduce using rule 352 (encaps_list -> empty .)
    DOLLAR_OPEN_CURLY_BRACES reduce using rule 352 (encaps_list -> empty .)
    CURLY_OPEN      reduce using rule 352 (encaps_list -> empty .)
    END_HEREDOC     reduce using rule 352 (encaps_list -> empty .)


state 153

    (285) expr -> NOT expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 285 (expr -> NOT expr .)
    BOOLEAN_AND     reduce using rule 285 (expr -> NOT expr .)
    BOOLEAN_OR      reduce using rule 285 (expr -> NOT expr .)
    LOGICAL_AND     reduce using rule 285 (expr -> NOT expr .)
    LOGICAL_OR      reduce using rule 285 (expr -> NOT expr .)
    LOGICAL_XOR     reduce using rule 285 (expr -> NOT expr .)
    AND             reduce using rule 285 (expr -> NOT expr .)
    OR              reduce using rule 285 (expr -> NOT expr .)
    XOR             reduce using rule 285 (expr -> NOT expr .)
    CONCAT          reduce using rule 285 (expr -> NOT expr .)
    PLUS            reduce using rule 285 (expr -> NOT expr .)
    MINUS           reduce using rule 285 (expr -> NOT expr .)
    MUL             reduce using rule 285 (expr -> NOT expr .)
    DIV             reduce using rule 285 (expr -> NOT expr .)
    SL              reduce using rule 285 (expr -> NOT expr .)
    SR              reduce using rule 285 (expr -> NOT expr .)
    MOD             reduce using rule 285 (expr -> NOT expr .)
    IS_IDENTICAL    reduce using rule 285 (expr -> NOT expr .)
    IS_NOT_IDENTICAL reduce using rule 285 (expr -> NOT expr .)
    IS_EQUAL        reduce using rule 285 (expr -> NOT expr .)
    IS_NOT_EQUAL    reduce using rule 285 (expr -> NOT expr .)
    IS_SMALLER      reduce using rule 285 (expr -> NOT expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 285 (expr -> NOT expr .)
    IS_GREATER      reduce using rule 285 (expr -> NOT expr .)
    IS_GREATER_OR_EQUAL reduce using rule 285 (expr -> NOT expr .)
    INSTANCEOF      reduce using rule 285 (expr -> NOT expr .)
    QUESTION        reduce using rule 285 (expr -> NOT expr .)
    SEMI            reduce using rule 285 (expr -> NOT expr .)
    COMMA           reduce using rule 285 (expr -> NOT expr .)
    RPAREN          reduce using rule 285 (expr -> NOT expr .)
    RBRACE          reduce using rule 285 (expr -> NOT expr .)
    RBRACKET        reduce using rule 285 (expr -> NOT expr .)
    DOUBLE_ARROW    reduce using rule 285 (expr -> NOT expr .)
    COLON           reduce using rule 285 (expr -> NOT expr .)

  ! BOOLEAN_AND     [ shift and go to state 196 ]
  ! BOOLEAN_OR      [ shift and go to state 194 ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]
  ! AND             [ shift and go to state 191 ]
  ! OR              [ shift and go to state 205 ]
  ! XOR             [ shift and go to state 193 ]
  ! CONCAT          [ shift and go to state 186 ]
  ! PLUS            [ shift and go to state 190 ]
  ! MINUS           [ shift and go to state 185 ]
  ! MUL             [ shift and go to state 183 ]
  ! DIV             [ shift and go to state 184 ]
  ! SL              [ shift and go to state 203 ]
  ! SR              [ shift and go to state 199 ]
  ! MOD             [ shift and go to state 206 ]
  ! IS_IDENTICAL    [ shift and go to state 201 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 198 ]
  ! IS_EQUAL        [ shift and go to state 189 ]
  ! IS_NOT_EQUAL    [ shift and go to state 195 ]
  ! IS_SMALLER      [ shift and go to state 192 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 197 ]
  ! IS_GREATER      [ shift and go to state 182 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 180 ]
  ! INSTANCEOF      [ shift and go to state 204 ]
  ! QUESTION        [ shift and go to state 188 ]


state 154

    (104) class_declaration_statement -> class_entry_type STRING . extends_from implements_list LBRACE class_statement_list RBRACE
    (109) extends_from -> . empty
    (110) extends_from -> . EXTENDS fully_qualified_class_name
    (363) empty -> .

    EXTENDS         shift and go to state 298
    IMPLEMENTS      reduce using rule 363 (empty -> .)
    LBRACE          reduce using rule 363 (empty -> .)

    extends_from                   shift and go to state 297
    empty                          shift and go to state 299

state 155

    (322) class_constant -> class_name DOUBLE_COLON . STRING
    (189) function_call -> class_name DOUBLE_COLON . STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> class_name DOUBLE_COLON . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (203) static_member -> class_name DOUBLE_COLON . variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    STRING          shift and go to state 301
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    variable_without_objects       shift and go to state 300
    compound_variable              shift and go to state 72
    reference_variable             shift and go to state 224
    simple_indirect_reference      shift and go to state 276

state 156

    (90) global_var_list -> global_var .

    SEMI            reduce using rule 90 (global_var_list -> global_var .)
    COMMA           reduce using rule 90 (global_var_list -> global_var .)


state 157

    (92) global_var -> DOLLAR . variable
    (93) global_var -> DOLLAR . LBRACE expr RBRACE
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LBRACE          shift and go to state 303
    NS_SEPARATOR    shift and go to state 129
    NAMESPACE       shift and go to state 128
    DOLLAR          shift and go to state 90
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    VARIABLE        shift and go to state 56

    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    compound_variable              shift and go to state 72
    class_name                     shift and go to state 124
    variable_class_name            shift and go to state 127
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 126
    static_member                  shift and go to state 86
    variable                       shift and go to state 302
    namespace_name                 shift and go to state 130

state 158

    (42) statement -> GLOBAL global_var_list . SEMI
    (89) global_var_list -> global_var_list . COMMA global_var

    SEMI            shift and go to state 305
    COMMA           shift and go to state 304


state 159

    (91) global_var -> VARIABLE .

    SEMI            reduce using rule 91 (global_var -> VARIABLE .)
    COMMA           reduce using rule 91 (global_var -> VARIABLE .)


state 160

    (31) statement -> WHILE LPAREN . expr RPAREN while_statement
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 306

state 161

    (162) class_name_reference -> class_name .
    (203) static_member -> class_name . DOUBLE_COLON variable_without_objects

    LPAREN          reduce using rule 162 (class_name_reference -> class_name .)
    SEMI            reduce using rule 162 (class_name_reference -> class_name .)
    BOOLEAN_AND     reduce using rule 162 (class_name_reference -> class_name .)
    BOOLEAN_OR      reduce using rule 162 (class_name_reference -> class_name .)
    LOGICAL_AND     reduce using rule 162 (class_name_reference -> class_name .)
    LOGICAL_OR      reduce using rule 162 (class_name_reference -> class_name .)
    LOGICAL_XOR     reduce using rule 162 (class_name_reference -> class_name .)
    AND             reduce using rule 162 (class_name_reference -> class_name .)
    OR              reduce using rule 162 (class_name_reference -> class_name .)
    XOR             reduce using rule 162 (class_name_reference -> class_name .)
    CONCAT          reduce using rule 162 (class_name_reference -> class_name .)
    PLUS            reduce using rule 162 (class_name_reference -> class_name .)
    MINUS           reduce using rule 162 (class_name_reference -> class_name .)
    MUL             reduce using rule 162 (class_name_reference -> class_name .)
    DIV             reduce using rule 162 (class_name_reference -> class_name .)
    SL              reduce using rule 162 (class_name_reference -> class_name .)
    SR              reduce using rule 162 (class_name_reference -> class_name .)
    MOD             reduce using rule 162 (class_name_reference -> class_name .)
    IS_IDENTICAL    reduce using rule 162 (class_name_reference -> class_name .)
    IS_NOT_IDENTICAL reduce using rule 162 (class_name_reference -> class_name .)
    IS_EQUAL        reduce using rule 162 (class_name_reference -> class_name .)
    IS_NOT_EQUAL    reduce using rule 162 (class_name_reference -> class_name .)
    IS_SMALLER      reduce using rule 162 (class_name_reference -> class_name .)
    IS_SMALLER_OR_EQUAL reduce using rule 162 (class_name_reference -> class_name .)
    IS_GREATER      reduce using rule 162 (class_name_reference -> class_name .)
    IS_GREATER_OR_EQUAL reduce using rule 162 (class_name_reference -> class_name .)
    INSTANCEOF      reduce using rule 162 (class_name_reference -> class_name .)
    QUESTION        reduce using rule 162 (class_name_reference -> class_name .)
    COMMA           reduce using rule 162 (class_name_reference -> class_name .)
    RPAREN          reduce using rule 162 (class_name_reference -> class_name .)
    AS              reduce using rule 162 (class_name_reference -> class_name .)
    RBRACE          reduce using rule 162 (class_name_reference -> class_name .)
    RBRACKET        reduce using rule 162 (class_name_reference -> class_name .)
    DOUBLE_ARROW    reduce using rule 162 (class_name_reference -> class_name .)
    COLON           reduce using rule 162 (class_name_reference -> class_name .)
    DOUBLE_COLON    shift and go to state 307


state 162

    (168) dynamic_class_name_reference -> base_variable . OBJECT_OPERATOR object_property dynamic_class_name_variable_properties
    (169) dynamic_class_name_reference -> base_variable .

    OBJECT_OPERATOR shift and go to state 308
    LPAREN          reduce using rule 169 (dynamic_class_name_reference -> base_variable .)
    SEMI            reduce using rule 169 (dynamic_class_name_reference -> base_variable .)
    BOOLEAN_AND     reduce using rule 169 (dynamic_class_name_reference -> base_variable .)
    BOOLEAN_OR      reduce using rule 169 (dynamic_class_name_reference -> base_variable .)
    LOGICAL_AND     reduce using rule 169 (dynamic_class_name_reference -> base_variable .)
    LOGICAL_OR      reduce using rule 169 (dynamic_class_name_reference -> base_variable .)
    LOGICAL_XOR     reduce using rule 169 (dynamic_class_name_reference -> base_variable .)
    AND             reduce using rule 169 (dynamic_class_name_reference -> base_variable .)
    OR              reduce using rule 169 (dynamic_class_name_reference -> base_variable .)
    XOR             reduce using rule 169 (dynamic_class_name_reference -> base_variable .)
    CONCAT          reduce using rule 169 (dynamic_class_name_reference -> base_variable .)
    PLUS            reduce using rule 169 (dynamic_class_name_reference -> base_variable .)
    MINUS           reduce using rule 169 (dynamic_class_name_reference -> base_variable .)
    MUL             reduce using rule 169 (dynamic_class_name_reference -> base_variable .)
    DIV             reduce using rule 169 (dynamic_class_name_reference -> base_variable .)
    SL              reduce using rule 169 (dynamic_class_name_reference -> base_variable .)
    SR              reduce using rule 169 (dynamic_class_name_reference -> base_variable .)
    MOD             reduce using rule 169 (dynamic_class_name_reference -> base_variable .)
    IS_IDENTICAL    reduce using rule 169 (dynamic_class_name_reference -> base_variable .)
    IS_NOT_IDENTICAL reduce using rule 169 (dynamic_class_name_reference -> base_variable .)
    IS_EQUAL        reduce using rule 169 (dynamic_class_name_reference -> base_variable .)
    IS_NOT_EQUAL    reduce using rule 169 (dynamic_class_name_reference -> base_variable .)
    IS_SMALLER      reduce using rule 169 (dynamic_class_name_reference -> base_variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 169 (dynamic_class_name_reference -> base_variable .)
    IS_GREATER      reduce using rule 169 (dynamic_class_name_reference -> base_variable .)
    IS_GREATER_OR_EQUAL reduce using rule 169 (dynamic_class_name_reference -> base_variable .)
    INSTANCEOF      reduce using rule 169 (dynamic_class_name_reference -> base_variable .)
    QUESTION        reduce using rule 169 (dynamic_class_name_reference -> base_variable .)
    COMMA           reduce using rule 169 (dynamic_class_name_reference -> base_variable .)
    RPAREN          reduce using rule 169 (dynamic_class_name_reference -> base_variable .)
    AS              reduce using rule 169 (dynamic_class_name_reference -> base_variable .)
    RBRACE          reduce using rule 169 (dynamic_class_name_reference -> base_variable .)
    RBRACKET        reduce using rule 169 (dynamic_class_name_reference -> base_variable .)
    DOUBLE_ARROW    reduce using rule 169 (dynamic_class_name_reference -> base_variable .)
    COLON           reduce using rule 169 (dynamic_class_name_reference -> base_variable .)


state 163

    (161) expr -> NEW class_name_reference . ctor_arguments
    (173) ctor_arguments -> . LPAREN function_call_parameter_list RPAREN
    (174) ctor_arguments -> . empty
    (363) empty -> .

    LPAREN          shift and go to state 310
    SEMI            reduce using rule 363 (empty -> .)
    BOOLEAN_AND     reduce using rule 363 (empty -> .)
    BOOLEAN_OR      reduce using rule 363 (empty -> .)
    LOGICAL_AND     reduce using rule 363 (empty -> .)
    LOGICAL_OR      reduce using rule 363 (empty -> .)
    LOGICAL_XOR     reduce using rule 363 (empty -> .)
    AND             reduce using rule 363 (empty -> .)
    OR              reduce using rule 363 (empty -> .)
    XOR             reduce using rule 363 (empty -> .)
    CONCAT          reduce using rule 363 (empty -> .)
    PLUS            reduce using rule 363 (empty -> .)
    MINUS           reduce using rule 363 (empty -> .)
    MUL             reduce using rule 363 (empty -> .)
    DIV             reduce using rule 363 (empty -> .)
    SL              reduce using rule 363 (empty -> .)
    SR              reduce using rule 363 (empty -> .)
    MOD             reduce using rule 363 (empty -> .)
    IS_IDENTICAL    reduce using rule 363 (empty -> .)
    IS_NOT_IDENTICAL reduce using rule 363 (empty -> .)
    IS_EQUAL        reduce using rule 363 (empty -> .)
    IS_NOT_EQUAL    reduce using rule 363 (empty -> .)
    IS_SMALLER      reduce using rule 363 (empty -> .)
    IS_SMALLER_OR_EQUAL reduce using rule 363 (empty -> .)
    IS_GREATER      reduce using rule 363 (empty -> .)
    IS_GREATER_OR_EQUAL reduce using rule 363 (empty -> .)
    INSTANCEOF      reduce using rule 363 (empty -> .)
    QUESTION        reduce using rule 363 (empty -> .)
    COMMA           reduce using rule 363 (empty -> .)
    RPAREN          reduce using rule 363 (empty -> .)
    AS              reduce using rule 363 (empty -> .)
    RBRACE          reduce using rule 363 (empty -> .)
    RBRACKET        reduce using rule 363 (empty -> .)
    DOUBLE_ARROW    reduce using rule 363 (empty -> .)
    COLON           reduce using rule 363 (empty -> .)

    ctor_arguments                 shift and go to state 309
    empty                          shift and go to state 311

state 164

    (202) simple_indirect_reference -> reference_variable .
    (206) reference_variable -> reference_variable . LBRACKET dim_offset RBRACKET
    (207) reference_variable -> reference_variable . LBRACE expr RBRACE
    (205) variable_class_name -> reference_variable .

    OBJECT_OPERATOR reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    LPAREN          reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    SEMI            reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    BOOLEAN_AND     reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    BOOLEAN_OR      reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    LOGICAL_AND     reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    LOGICAL_OR      reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    LOGICAL_XOR     reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    AND             reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    OR              reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    XOR             reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    CONCAT          reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    PLUS            reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    MINUS           reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    MUL             reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    DIV             reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    SL              reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    SR              reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    MOD             reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    IS_IDENTICAL    reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    IS_NOT_IDENTICAL reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    IS_EQUAL        reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    IS_NOT_EQUAL    reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    IS_SMALLER      reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    IS_GREATER      reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    IS_GREATER_OR_EQUAL reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    INSTANCEOF      reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    QUESTION        reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    COMMA           reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    RPAREN          reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    AS              reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    RBRACE          reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    RBRACKET        reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    DOUBLE_ARROW    reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    COLON           reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    LBRACKET        shift and go to state 175
    LBRACE          shift and go to state 174
    DOUBLE_COLON    reduce using rule 205 (variable_class_name -> reference_variable .)


state 165

    (166) class_name -> NAMESPACE . NS_SEPARATOR namespace_name

    NS_SEPARATOR    shift and go to state 312


state 166

    (204) static_member -> variable_class_name . DOUBLE_COLON variable_without_objects

    DOUBLE_COLON    shift and go to state 313


state 167

    (165) class_name -> NS_SEPARATOR . namespace_name
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    STRING          shift and go to state 89

    namespace_name                 shift and go to state 314

state 168

    (199) base_variable -> simple_indirect_reference .

    OBJECT_OPERATOR reduce using rule 199 (base_variable -> simple_indirect_reference .)
    LPAREN          reduce using rule 199 (base_variable -> simple_indirect_reference .)
    SEMI            reduce using rule 199 (base_variable -> simple_indirect_reference .)
    BOOLEAN_AND     reduce using rule 199 (base_variable -> simple_indirect_reference .)
    BOOLEAN_OR      reduce using rule 199 (base_variable -> simple_indirect_reference .)
    LOGICAL_AND     reduce using rule 199 (base_variable -> simple_indirect_reference .)
    LOGICAL_OR      reduce using rule 199 (base_variable -> simple_indirect_reference .)
    LOGICAL_XOR     reduce using rule 199 (base_variable -> simple_indirect_reference .)
    AND             reduce using rule 199 (base_variable -> simple_indirect_reference .)
    OR              reduce using rule 199 (base_variable -> simple_indirect_reference .)
    XOR             reduce using rule 199 (base_variable -> simple_indirect_reference .)
    CONCAT          reduce using rule 199 (base_variable -> simple_indirect_reference .)
    PLUS            reduce using rule 199 (base_variable -> simple_indirect_reference .)
    MINUS           reduce using rule 199 (base_variable -> simple_indirect_reference .)
    MUL             reduce using rule 199 (base_variable -> simple_indirect_reference .)
    DIV             reduce using rule 199 (base_variable -> simple_indirect_reference .)
    SL              reduce using rule 199 (base_variable -> simple_indirect_reference .)
    SR              reduce using rule 199 (base_variable -> simple_indirect_reference .)
    MOD             reduce using rule 199 (base_variable -> simple_indirect_reference .)
    IS_IDENTICAL    reduce using rule 199 (base_variable -> simple_indirect_reference .)
    IS_NOT_IDENTICAL reduce using rule 199 (base_variable -> simple_indirect_reference .)
    IS_EQUAL        reduce using rule 199 (base_variable -> simple_indirect_reference .)
    IS_NOT_EQUAL    reduce using rule 199 (base_variable -> simple_indirect_reference .)
    IS_SMALLER      reduce using rule 199 (base_variable -> simple_indirect_reference .)
    IS_SMALLER_OR_EQUAL reduce using rule 199 (base_variable -> simple_indirect_reference .)
    IS_GREATER      reduce using rule 199 (base_variable -> simple_indirect_reference .)
    IS_GREATER_OR_EQUAL reduce using rule 199 (base_variable -> simple_indirect_reference .)
    INSTANCEOF      reduce using rule 199 (base_variable -> simple_indirect_reference .)
    QUESTION        reduce using rule 199 (base_variable -> simple_indirect_reference .)
    COMMA           reduce using rule 199 (base_variable -> simple_indirect_reference .)
    RPAREN          reduce using rule 199 (base_variable -> simple_indirect_reference .)
    AS              reduce using rule 199 (base_variable -> simple_indirect_reference .)
    RBRACE          reduce using rule 199 (base_variable -> simple_indirect_reference .)
    RBRACKET        reduce using rule 199 (base_variable -> simple_indirect_reference .)
    DOUBLE_ARROW    reduce using rule 199 (base_variable -> simple_indirect_reference .)
    COLON           reduce using rule 199 (base_variable -> simple_indirect_reference .)


state 169

    (164) class_name -> namespace_name .
    (349) namespace_name -> namespace_name . NS_SEPARATOR STRING

    VARIABLE        reduce using rule 164 (class_name -> namespace_name .)
    AND             reduce using rule 164 (class_name -> namespace_name .)
    DOUBLE_COLON    reduce using rule 164 (class_name -> namespace_name .)
    LPAREN          reduce using rule 164 (class_name -> namespace_name .)
    SEMI            reduce using rule 164 (class_name -> namespace_name .)
    BOOLEAN_AND     reduce using rule 164 (class_name -> namespace_name .)
    BOOLEAN_OR      reduce using rule 164 (class_name -> namespace_name .)
    LOGICAL_AND     reduce using rule 164 (class_name -> namespace_name .)
    LOGICAL_OR      reduce using rule 164 (class_name -> namespace_name .)
    LOGICAL_XOR     reduce using rule 164 (class_name -> namespace_name .)
    OR              reduce using rule 164 (class_name -> namespace_name .)
    XOR             reduce using rule 164 (class_name -> namespace_name .)
    CONCAT          reduce using rule 164 (class_name -> namespace_name .)
    PLUS            reduce using rule 164 (class_name -> namespace_name .)
    MINUS           reduce using rule 164 (class_name -> namespace_name .)
    MUL             reduce using rule 164 (class_name -> namespace_name .)
    DIV             reduce using rule 164 (class_name -> namespace_name .)
    SL              reduce using rule 164 (class_name -> namespace_name .)
    SR              reduce using rule 164 (class_name -> namespace_name .)
    MOD             reduce using rule 164 (class_name -> namespace_name .)
    IS_IDENTICAL    reduce using rule 164 (class_name -> namespace_name .)
    IS_NOT_IDENTICAL reduce using rule 164 (class_name -> namespace_name .)
    IS_EQUAL        reduce using rule 164 (class_name -> namespace_name .)
    IS_NOT_EQUAL    reduce using rule 164 (class_name -> namespace_name .)
    IS_SMALLER      reduce using rule 164 (class_name -> namespace_name .)
    IS_SMALLER_OR_EQUAL reduce using rule 164 (class_name -> namespace_name .)
    IS_GREATER      reduce using rule 164 (class_name -> namespace_name .)
    IS_GREATER_OR_EQUAL reduce using rule 164 (class_name -> namespace_name .)
    INSTANCEOF      reduce using rule 164 (class_name -> namespace_name .)
    QUESTION        reduce using rule 164 (class_name -> namespace_name .)
    COMMA           reduce using rule 164 (class_name -> namespace_name .)
    RPAREN          reduce using rule 164 (class_name -> namespace_name .)
    AS              reduce using rule 164 (class_name -> namespace_name .)
    RBRACE          reduce using rule 164 (class_name -> namespace_name .)
    RBRACKET        reduce using rule 164 (class_name -> namespace_name .)
    DOUBLE_ARROW    reduce using rule 164 (class_name -> namespace_name .)
    COLON           reduce using rule 164 (class_name -> namespace_name .)
    NS_SEPARATOR    shift and go to state 178


state 170

    (163) class_name_reference -> dynamic_class_name_reference .

    LPAREN          reduce using rule 163 (class_name_reference -> dynamic_class_name_reference .)
    SEMI            reduce using rule 163 (class_name_reference -> dynamic_class_name_reference .)
    BOOLEAN_AND     reduce using rule 163 (class_name_reference -> dynamic_class_name_reference .)
    BOOLEAN_OR      reduce using rule 163 (class_name_reference -> dynamic_class_name_reference .)
    LOGICAL_AND     reduce using rule 163 (class_name_reference -> dynamic_class_name_reference .)
    LOGICAL_OR      reduce using rule 163 (class_name_reference -> dynamic_class_name_reference .)
    LOGICAL_XOR     reduce using rule 163 (class_name_reference -> dynamic_class_name_reference .)
    AND             reduce using rule 163 (class_name_reference -> dynamic_class_name_reference .)
    OR              reduce using rule 163 (class_name_reference -> dynamic_class_name_reference .)
    XOR             reduce using rule 163 (class_name_reference -> dynamic_class_name_reference .)
    CONCAT          reduce using rule 163 (class_name_reference -> dynamic_class_name_reference .)
    PLUS            reduce using rule 163 (class_name_reference -> dynamic_class_name_reference .)
    MINUS           reduce using rule 163 (class_name_reference -> dynamic_class_name_reference .)
    MUL             reduce using rule 163 (class_name_reference -> dynamic_class_name_reference .)
    DIV             reduce using rule 163 (class_name_reference -> dynamic_class_name_reference .)
    SL              reduce using rule 163 (class_name_reference -> dynamic_class_name_reference .)
    SR              reduce using rule 163 (class_name_reference -> dynamic_class_name_reference .)
    MOD             reduce using rule 163 (class_name_reference -> dynamic_class_name_reference .)
    IS_IDENTICAL    reduce using rule 163 (class_name_reference -> dynamic_class_name_reference .)
    IS_NOT_IDENTICAL reduce using rule 163 (class_name_reference -> dynamic_class_name_reference .)
    IS_EQUAL        reduce using rule 163 (class_name_reference -> dynamic_class_name_reference .)
    IS_NOT_EQUAL    reduce using rule 163 (class_name_reference -> dynamic_class_name_reference .)
    IS_SMALLER      reduce using rule 163 (class_name_reference -> dynamic_class_name_reference .)
    IS_SMALLER_OR_EQUAL reduce using rule 163 (class_name_reference -> dynamic_class_name_reference .)
    IS_GREATER      reduce using rule 163 (class_name_reference -> dynamic_class_name_reference .)
    IS_GREATER_OR_EQUAL reduce using rule 163 (class_name_reference -> dynamic_class_name_reference .)
    INSTANCEOF      reduce using rule 163 (class_name_reference -> dynamic_class_name_reference .)
    QUESTION        reduce using rule 163 (class_name_reference -> dynamic_class_name_reference .)
    COMMA           reduce using rule 163 (class_name_reference -> dynamic_class_name_reference .)
    RPAREN          reduce using rule 163 (class_name_reference -> dynamic_class_name_reference .)
    AS              reduce using rule 163 (class_name_reference -> dynamic_class_name_reference .)
    RBRACE          reduce using rule 163 (class_name_reference -> dynamic_class_name_reference .)
    RBRACKET        reduce using rule 163 (class_name_reference -> dynamic_class_name_reference .)
    DOUBLE_ARROW    reduce using rule 163 (class_name_reference -> dynamic_class_name_reference .)
    COLON           reduce using rule 163 (class_name_reference -> dynamic_class_name_reference .)


state 171

    (317) scalar -> START_HEREDOC encaps_list . END_HEREDOC
    (351) encaps_list -> encaps_list . encaps_var
    (353) encaps_list -> encaps_list . ENCAPSED_AND_WHITESPACE
    (354) encaps_var -> . VARIABLE
    (355) encaps_var -> . VARIABLE LBRACKET encaps_var_offset RBRACKET
    (356) encaps_var -> . VARIABLE OBJECT_OPERATOR STRING
    (357) encaps_var -> . DOLLAR_OPEN_CURLY_BRACES expr RBRACE
    (358) encaps_var -> . DOLLAR_OPEN_CURLY_BRACES STRING_VARNAME LBRACKET expr RBRACKET RBRACE
    (359) encaps_var -> . CURLY_OPEN variable RBRACE

    END_HEREDOC     shift and go to state 315
    ENCAPSED_AND_WHITESPACE shift and go to state 294
    VARIABLE        shift and go to state 295
    DOLLAR_OPEN_CURLY_BRACES shift and go to state 296
    CURLY_OPEN      shift and go to state 291

    encaps_var                     shift and go to state 293

state 172

    (288) expr -> INC variable .

    AS              reduce using rule 288 (expr -> INC variable .)
    BOOLEAN_AND     reduce using rule 288 (expr -> INC variable .)
    BOOLEAN_OR      reduce using rule 288 (expr -> INC variable .)
    LOGICAL_AND     reduce using rule 288 (expr -> INC variable .)
    LOGICAL_OR      reduce using rule 288 (expr -> INC variable .)
    LOGICAL_XOR     reduce using rule 288 (expr -> INC variable .)
    AND             reduce using rule 288 (expr -> INC variable .)
    OR              reduce using rule 288 (expr -> INC variable .)
    XOR             reduce using rule 288 (expr -> INC variable .)
    CONCAT          reduce using rule 288 (expr -> INC variable .)
    PLUS            reduce using rule 288 (expr -> INC variable .)
    MINUS           reduce using rule 288 (expr -> INC variable .)
    MUL             reduce using rule 288 (expr -> INC variable .)
    DIV             reduce using rule 288 (expr -> INC variable .)
    SL              reduce using rule 288 (expr -> INC variable .)
    SR              reduce using rule 288 (expr -> INC variable .)
    MOD             reduce using rule 288 (expr -> INC variable .)
    IS_IDENTICAL    reduce using rule 288 (expr -> INC variable .)
    IS_NOT_IDENTICAL reduce using rule 288 (expr -> INC variable .)
    IS_EQUAL        reduce using rule 288 (expr -> INC variable .)
    IS_NOT_EQUAL    reduce using rule 288 (expr -> INC variable .)
    IS_SMALLER      reduce using rule 288 (expr -> INC variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 288 (expr -> INC variable .)
    IS_GREATER      reduce using rule 288 (expr -> INC variable .)
    IS_GREATER_OR_EQUAL reduce using rule 288 (expr -> INC variable .)
    INSTANCEOF      reduce using rule 288 (expr -> INC variable .)
    QUESTION        reduce using rule 288 (expr -> INC variable .)
    SEMI            reduce using rule 288 (expr -> INC variable .)
    COMMA           reduce using rule 288 (expr -> INC variable .)
    RPAREN          reduce using rule 288 (expr -> INC variable .)
    RBRACE          reduce using rule 288 (expr -> INC variable .)
    RBRACKET        reduce using rule 288 (expr -> INC variable .)
    DOUBLE_ARROW    reduce using rule 288 (expr -> INC variable .)
    COLON           reduce using rule 288 (expr -> INC variable .)


state 173

    (35) statement -> SWITCH LPAREN . expr RPAREN switch_case_list
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 316

state 174

    (207) reference_variable -> reference_variable LBRACE . expr RBRACE
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 317

state 175

    (206) reference_variable -> reference_variable LBRACKET . dim_offset RBRACKET
    (211) dim_offset -> . expr
    (212) dim_offset -> . empty
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (363) empty -> .
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    RBRACKET        reduce using rule 363 (empty -> .)
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    empty                          shift and go to state 319
    dim_offset                     shift and go to state 320
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 318

state 176

    (222) expr -> ARRAY LPAREN . array_pair_list RPAREN
    (223) array_pair_list -> . empty
    (224) array_pair_list -> . non_empty_array_pair_list possible_comma
    (363) empty -> .
    (225) non_empty_array_pair_list -> . non_empty_array_pair_list COMMA AND variable
    (226) non_empty_array_pair_list -> . non_empty_array_pair_list COMMA expr
    (227) non_empty_array_pair_list -> . AND variable
    (228) non_empty_array_pair_list -> . expr
    (229) non_empty_array_pair_list -> . non_empty_array_pair_list COMMA expr DOUBLE_ARROW AND variable
    (230) non_empty_array_pair_list -> . non_empty_array_pair_list COMMA expr DOUBLE_ARROW expr
    (231) non_empty_array_pair_list -> . expr DOUBLE_ARROW AND variable
    (232) non_empty_array_pair_list -> . expr DOUBLE_ARROW expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    RPAREN          reduce using rule 363 (empty -> .)
    AND             shift and go to state 322
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    empty                          shift and go to state 325
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    array_pair_list                shift and go to state 324
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 321
    non_empty_array_pair_list      shift and go to state 323

state 177

    (320) scalar -> NS_SEPARATOR namespace_name .
    (187) function_call -> NS_SEPARATOR namespace_name . LPAREN function_call_parameter_list RPAREN
    (165) class_name -> NS_SEPARATOR namespace_name .
    (349) namespace_name -> namespace_name . NS_SEPARATOR STRING

    BOOLEAN_AND     reduce using rule 320 (scalar -> NS_SEPARATOR namespace_name .)
    BOOLEAN_OR      reduce using rule 320 (scalar -> NS_SEPARATOR namespace_name .)
    LOGICAL_AND     reduce using rule 320 (scalar -> NS_SEPARATOR namespace_name .)
    LOGICAL_OR      reduce using rule 320 (scalar -> NS_SEPARATOR namespace_name .)
    LOGICAL_XOR     reduce using rule 320 (scalar -> NS_SEPARATOR namespace_name .)
    AND             reduce using rule 320 (scalar -> NS_SEPARATOR namespace_name .)
    OR              reduce using rule 320 (scalar -> NS_SEPARATOR namespace_name .)
    XOR             reduce using rule 320 (scalar -> NS_SEPARATOR namespace_name .)
    CONCAT          reduce using rule 320 (scalar -> NS_SEPARATOR namespace_name .)
    PLUS            reduce using rule 320 (scalar -> NS_SEPARATOR namespace_name .)
    MINUS           reduce using rule 320 (scalar -> NS_SEPARATOR namespace_name .)
    MUL             reduce using rule 320 (scalar -> NS_SEPARATOR namespace_name .)
    DIV             reduce using rule 320 (scalar -> NS_SEPARATOR namespace_name .)
    SL              reduce using rule 320 (scalar -> NS_SEPARATOR namespace_name .)
    SR              reduce using rule 320 (scalar -> NS_SEPARATOR namespace_name .)
    MOD             reduce using rule 320 (scalar -> NS_SEPARATOR namespace_name .)
    IS_IDENTICAL    reduce using rule 320 (scalar -> NS_SEPARATOR namespace_name .)
    IS_NOT_IDENTICAL reduce using rule 320 (scalar -> NS_SEPARATOR namespace_name .)
    IS_EQUAL        reduce using rule 320 (scalar -> NS_SEPARATOR namespace_name .)
    IS_NOT_EQUAL    reduce using rule 320 (scalar -> NS_SEPARATOR namespace_name .)
    IS_SMALLER      reduce using rule 320 (scalar -> NS_SEPARATOR namespace_name .)
    IS_SMALLER_OR_EQUAL reduce using rule 320 (scalar -> NS_SEPARATOR namespace_name .)
    IS_GREATER      reduce using rule 320 (scalar -> NS_SEPARATOR namespace_name .)
    IS_GREATER_OR_EQUAL reduce using rule 320 (scalar -> NS_SEPARATOR namespace_name .)
    INSTANCEOF      reduce using rule 320 (scalar -> NS_SEPARATOR namespace_name .)
    QUESTION        reduce using rule 320 (scalar -> NS_SEPARATOR namespace_name .)
    RPAREN          reduce using rule 320 (scalar -> NS_SEPARATOR namespace_name .)
    COMMA           reduce using rule 320 (scalar -> NS_SEPARATOR namespace_name .)
    SEMI            reduce using rule 320 (scalar -> NS_SEPARATOR namespace_name .)
    AS              reduce using rule 320 (scalar -> NS_SEPARATOR namespace_name .)
    RBRACE          reduce using rule 320 (scalar -> NS_SEPARATOR namespace_name .)
    RBRACKET        reduce using rule 320 (scalar -> NS_SEPARATOR namespace_name .)
    DOUBLE_ARROW    reduce using rule 320 (scalar -> NS_SEPARATOR namespace_name .)
    COLON           reduce using rule 320 (scalar -> NS_SEPARATOR namespace_name .)
    LPAREN          shift and go to state 326
    DOUBLE_COLON    reduce using rule 165 (class_name -> NS_SEPARATOR namespace_name .)
    NS_SEPARATOR    shift and go to state 178


state 178

    (349) namespace_name -> namespace_name NS_SEPARATOR . STRING

    STRING          shift and go to state 327


state 179

    (186) function_call -> namespace_name LPAREN . function_call_parameter_list RPAREN
    (235) function_call_parameter_list -> . function_call_parameter_list COMMA function_call_parameter
    (236) function_call_parameter_list -> . function_call_parameter
    (237) function_call_parameter_list -> . empty
    (238) function_call_parameter -> . expr
    (239) function_call_parameter -> . AND variable
    (363) empty -> .
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    AND             shift and go to state 330
    RPAREN          reduce using rule 363 (empty -> .)
    COMMA           reduce using rule 363 (empty -> .)
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    function_call_parameter_list   shift and go to state 328
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    empty                          shift and go to state 331
    function_call_parameter        shift and go to state 332
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 329

state 180

    (281) expr -> expr IS_GREATER_OR_EQUAL . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 333

state 181

    (260) expr -> expr LOGICAL_AND . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 334

state 182

    (280) expr -> expr IS_GREATER . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 335

state 183

    (269) expr -> expr MUL . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 336

state 184

    (270) expr -> expr DIV . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 337

state 185

    (268) expr -> expr MINUS . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 338

state 186

    (266) expr -> expr CONCAT . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 339

state 187

    (46) statement -> expr SEMI .

    HALT_COMPILER   reduce using rule 46 (statement -> expr SEMI .)
    NAMESPACE       reduce using rule 46 (statement -> expr SEMI .)
    CONST           reduce using rule 46 (statement -> expr SEMI .)
    USE             reduce using rule 46 (statement -> expr SEMI .)
    LBRACE          reduce using rule 46 (statement -> expr SEMI .)
    IF              reduce using rule 46 (statement -> expr SEMI .)
    WHILE           reduce using rule 46 (statement -> expr SEMI .)
    DO              reduce using rule 46 (statement -> expr SEMI .)
    FOR             reduce using rule 46 (statement -> expr SEMI .)
    FOREACH         reduce using rule 46 (statement -> expr SEMI .)
    SWITCH          reduce using rule 46 (statement -> expr SEMI .)
    BREAK           reduce using rule 46 (statement -> expr SEMI .)
    CONTINUE        reduce using rule 46 (statement -> expr SEMI .)
    RETURN          reduce using rule 46 (statement -> expr SEMI .)
    GLOBAL          reduce using rule 46 (statement -> expr SEMI .)
    STATIC          reduce using rule 46 (statement -> expr SEMI .)
    ECHO            reduce using rule 46 (statement -> expr SEMI .)
    INLINE_HTML     reduce using rule 46 (statement -> expr SEMI .)
    UNSET           reduce using rule 46 (statement -> expr SEMI .)
    SEMI            reduce using rule 46 (statement -> expr SEMI .)
    TRY             reduce using rule 46 (statement -> expr SEMI .)
    THROW           reduce using rule 46 (statement -> expr SEMI .)
    DECLARE         reduce using rule 46 (statement -> expr SEMI .)
    FUNCTION        reduce using rule 46 (statement -> expr SEMI .)
    INTERFACE       reduce using rule 46 (statement -> expr SEMI .)
    NEW             reduce using rule 46 (statement -> expr SEMI .)
    CLONE           reduce using rule 46 (statement -> expr SEMI .)
    LIST            reduce using rule 46 (statement -> expr SEMI .)
    ARRAY           reduce using rule 46 (statement -> expr SEMI .)
    PLUS            reduce using rule 46 (statement -> expr SEMI .)
    MINUS           reduce using rule 46 (statement -> expr SEMI .)
    NOT             reduce using rule 46 (statement -> expr SEMI .)
    BOOLEAN_NOT     reduce using rule 46 (statement -> expr SEMI .)
    INC             reduce using rule 46 (statement -> expr SEMI .)
    DEC             reduce using rule 46 (statement -> expr SEMI .)
    INT_CAST        reduce using rule 46 (statement -> expr SEMI .)
    DOUBLE_CAST     reduce using rule 46 (statement -> expr SEMI .)
    STRING_CAST     reduce using rule 46 (statement -> expr SEMI .)
    ARRAY_CAST      reduce using rule 46 (statement -> expr SEMI .)
    OBJECT_CAST     reduce using rule 46 (statement -> expr SEMI .)
    BOOL_CAST       reduce using rule 46 (statement -> expr SEMI .)
    UNSET_CAST      reduce using rule 46 (statement -> expr SEMI .)
    ISSET           reduce using rule 46 (statement -> expr SEMI .)
    EMPTY           reduce using rule 46 (statement -> expr SEMI .)
    EVAL            reduce using rule 46 (statement -> expr SEMI .)
    INCLUDE         reduce using rule 46 (statement -> expr SEMI .)
    INCLUDE_ONCE    reduce using rule 46 (statement -> expr SEMI .)
    REQUIRE         reduce using rule 46 (statement -> expr SEMI .)
    REQUIRE_ONCE    reduce using rule 46 (statement -> expr SEMI .)
    EXIT            reduce using rule 46 (statement -> expr SEMI .)
    PRINT           reduce using rule 46 (statement -> expr SEMI .)
    AT              reduce using rule 46 (statement -> expr SEMI .)
    LPAREN          reduce using rule 46 (statement -> expr SEMI .)
    CLASS           reduce using rule 46 (statement -> expr SEMI .)
    ABSTRACT        reduce using rule 46 (statement -> expr SEMI .)
    FINAL           reduce using rule 46 (statement -> expr SEMI .)
    QUOTE           reduce using rule 46 (statement -> expr SEMI .)
    START_HEREDOC   reduce using rule 46 (statement -> expr SEMI .)
    STRING_VARNAME  reduce using rule 46 (statement -> expr SEMI .)
    NS_SEPARATOR    reduce using rule 46 (statement -> expr SEMI .)
    LNUMBER         reduce using rule 46 (statement -> expr SEMI .)
    DNUMBER         reduce using rule 46 (statement -> expr SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 46 (statement -> expr SEMI .)
    LINE            reduce using rule 46 (statement -> expr SEMI .)
    FILE            reduce using rule 46 (statement -> expr SEMI .)
    DIR             reduce using rule 46 (statement -> expr SEMI .)
    CLASS_C         reduce using rule 46 (statement -> expr SEMI .)
    METHOD_C        reduce using rule 46 (statement -> expr SEMI .)
    FUNC_C          reduce using rule 46 (statement -> expr SEMI .)
    NS_C            reduce using rule 46 (statement -> expr SEMI .)
    STRING          reduce using rule 46 (statement -> expr SEMI .)
    DOLLAR          reduce using rule 46 (statement -> expr SEMI .)
    VARIABLE        reduce using rule 46 (statement -> expr SEMI .)
    $end            reduce using rule 46 (statement -> expr SEMI .)
    RBRACE          reduce using rule 46 (statement -> expr SEMI .)
    ELSEIF          reduce using rule 46 (statement -> expr SEMI .)
    ELSE            reduce using rule 46 (statement -> expr SEMI .)
    ENDDECLARE      reduce using rule 46 (statement -> expr SEMI .)
    ENDWHILE        reduce using rule 46 (statement -> expr SEMI .)
    ENDIF           reduce using rule 46 (statement -> expr SEMI .)
    ENDFOREACH      reduce using rule 46 (statement -> expr SEMI .)
    CASE            reduce using rule 46 (statement -> expr SEMI .)
    DEFAULT         reduce using rule 46 (statement -> expr SEMI .)
    ENDSWITCH       reduce using rule 46 (statement -> expr SEMI .)
    ENDFOR          reduce using rule 46 (statement -> expr SEMI .)


state 188

    (287) expr -> expr QUESTION . expr COLON expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 340

state 189

    (276) expr -> expr IS_EQUAL . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 341

state 190

    (267) expr -> expr PLUS . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 342

state 191

    (263) expr -> expr AND . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 343

state 192

    (278) expr -> expr IS_SMALLER . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 344

state 193

    (265) expr -> expr XOR . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 345

state 194

    (259) expr -> expr BOOLEAN_OR . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 346

state 195

    (277) expr -> expr IS_NOT_EQUAL . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 347

state 196

    (258) expr -> expr BOOLEAN_AND . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 348

state 197

    (279) expr -> expr IS_SMALLER_OR_EQUAL . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 349

state 198

    (275) expr -> expr IS_NOT_IDENTICAL . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 350

state 199

    (272) expr -> expr SR . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 351

state 200

    (262) expr -> expr LOGICAL_XOR . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 352

state 201

    (274) expr -> expr IS_IDENTICAL . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 353

state 202

    (261) expr -> expr LOGICAL_OR . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 354

state 203

    (271) expr -> expr SL . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 355

state 204

    (282) expr -> expr INSTANCEOF . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 356

state 205

    (264) expr -> expr OR . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 357

state 206

    (273) expr -> expr MOD . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 358

state 207

    (176) expr -> LIST LPAREN . assignment_list RPAREN EQUALS expr
    (177) assignment_list -> . assignment_list COMMA assignment_list_element
    (178) assignment_list -> . assignment_list_element
    (179) assignment_list_element -> . variable
    (180) assignment_list_element -> . empty
    (181) assignment_list_element -> . LIST LPAREN assignment_list RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (363) empty -> .
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LIST            shift and go to state 362
    RPAREN          reduce using rule 363 (empty -> .)
    COMMA           reduce using rule 363 (empty -> .)
    NS_SEPARATOR    shift and go to state 129
    NAMESPACE       shift and go to state 128
    DOLLAR          shift and go to state 90
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    VARIABLE        shift and go to state 56

    assignment_list_element        shift and go to state 360
    variable_without_objects       shift and go to state 84
    namespace_name                 shift and go to state 130
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    class_name                     shift and go to state 124
    variable_class_name            shift and go to state 127
    compound_variable              shift and go to state 72
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 126
    assignment_list                shift and go to state 363
    variable                       shift and go to state 359
    empty                          shift and go to state 361

state 208

    (37) statement -> BREAK expr . SEMI
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    SEMI            shift and go to state 364
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    LOGICAL_AND     shift and go to state 181
    LOGICAL_OR      shift and go to state 202
    LOGICAL_XOR     shift and go to state 200
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188


state 209

    (36) statement -> BREAK SEMI .

    HALT_COMPILER   reduce using rule 36 (statement -> BREAK SEMI .)
    NAMESPACE       reduce using rule 36 (statement -> BREAK SEMI .)
    CONST           reduce using rule 36 (statement -> BREAK SEMI .)
    USE             reduce using rule 36 (statement -> BREAK SEMI .)
    LBRACE          reduce using rule 36 (statement -> BREAK SEMI .)
    IF              reduce using rule 36 (statement -> BREAK SEMI .)
    WHILE           reduce using rule 36 (statement -> BREAK SEMI .)
    DO              reduce using rule 36 (statement -> BREAK SEMI .)
    FOR             reduce using rule 36 (statement -> BREAK SEMI .)
    FOREACH         reduce using rule 36 (statement -> BREAK SEMI .)
    SWITCH          reduce using rule 36 (statement -> BREAK SEMI .)
    BREAK           reduce using rule 36 (statement -> BREAK SEMI .)
    CONTINUE        reduce using rule 36 (statement -> BREAK SEMI .)
    RETURN          reduce using rule 36 (statement -> BREAK SEMI .)
    GLOBAL          reduce using rule 36 (statement -> BREAK SEMI .)
    STATIC          reduce using rule 36 (statement -> BREAK SEMI .)
    ECHO            reduce using rule 36 (statement -> BREAK SEMI .)
    INLINE_HTML     reduce using rule 36 (statement -> BREAK SEMI .)
    UNSET           reduce using rule 36 (statement -> BREAK SEMI .)
    SEMI            reduce using rule 36 (statement -> BREAK SEMI .)
    TRY             reduce using rule 36 (statement -> BREAK SEMI .)
    THROW           reduce using rule 36 (statement -> BREAK SEMI .)
    DECLARE         reduce using rule 36 (statement -> BREAK SEMI .)
    FUNCTION        reduce using rule 36 (statement -> BREAK SEMI .)
    INTERFACE       reduce using rule 36 (statement -> BREAK SEMI .)
    NEW             reduce using rule 36 (statement -> BREAK SEMI .)
    CLONE           reduce using rule 36 (statement -> BREAK SEMI .)
    LIST            reduce using rule 36 (statement -> BREAK SEMI .)
    ARRAY           reduce using rule 36 (statement -> BREAK SEMI .)
    PLUS            reduce using rule 36 (statement -> BREAK SEMI .)
    MINUS           reduce using rule 36 (statement -> BREAK SEMI .)
    NOT             reduce using rule 36 (statement -> BREAK SEMI .)
    BOOLEAN_NOT     reduce using rule 36 (statement -> BREAK SEMI .)
    INC             reduce using rule 36 (statement -> BREAK SEMI .)
    DEC             reduce using rule 36 (statement -> BREAK SEMI .)
    INT_CAST        reduce using rule 36 (statement -> BREAK SEMI .)
    DOUBLE_CAST     reduce using rule 36 (statement -> BREAK SEMI .)
    STRING_CAST     reduce using rule 36 (statement -> BREAK SEMI .)
    ARRAY_CAST      reduce using rule 36 (statement -> BREAK SEMI .)
    OBJECT_CAST     reduce using rule 36 (statement -> BREAK SEMI .)
    BOOL_CAST       reduce using rule 36 (statement -> BREAK SEMI .)
    UNSET_CAST      reduce using rule 36 (statement -> BREAK SEMI .)
    ISSET           reduce using rule 36 (statement -> BREAK SEMI .)
    EMPTY           reduce using rule 36 (statement -> BREAK SEMI .)
    EVAL            reduce using rule 36 (statement -> BREAK SEMI .)
    INCLUDE         reduce using rule 36 (statement -> BREAK SEMI .)
    INCLUDE_ONCE    reduce using rule 36 (statement -> BREAK SEMI .)
    REQUIRE         reduce using rule 36 (statement -> BREAK SEMI .)
    REQUIRE_ONCE    reduce using rule 36 (statement -> BREAK SEMI .)
    EXIT            reduce using rule 36 (statement -> BREAK SEMI .)
    PRINT           reduce using rule 36 (statement -> BREAK SEMI .)
    AT              reduce using rule 36 (statement -> BREAK SEMI .)
    LPAREN          reduce using rule 36 (statement -> BREAK SEMI .)
    CLASS           reduce using rule 36 (statement -> BREAK SEMI .)
    ABSTRACT        reduce using rule 36 (statement -> BREAK SEMI .)
    FINAL           reduce using rule 36 (statement -> BREAK SEMI .)
    QUOTE           reduce using rule 36 (statement -> BREAK SEMI .)
    START_HEREDOC   reduce using rule 36 (statement -> BREAK SEMI .)
    STRING_VARNAME  reduce using rule 36 (statement -> BREAK SEMI .)
    NS_SEPARATOR    reduce using rule 36 (statement -> BREAK SEMI .)
    LNUMBER         reduce using rule 36 (statement -> BREAK SEMI .)
    DNUMBER         reduce using rule 36 (statement -> BREAK SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 36 (statement -> BREAK SEMI .)
    LINE            reduce using rule 36 (statement -> BREAK SEMI .)
    FILE            reduce using rule 36 (statement -> BREAK SEMI .)
    DIR             reduce using rule 36 (statement -> BREAK SEMI .)
    CLASS_C         reduce using rule 36 (statement -> BREAK SEMI .)
    METHOD_C        reduce using rule 36 (statement -> BREAK SEMI .)
    FUNC_C          reduce using rule 36 (statement -> BREAK SEMI .)
    NS_C            reduce using rule 36 (statement -> BREAK SEMI .)
    STRING          reduce using rule 36 (statement -> BREAK SEMI .)
    DOLLAR          reduce using rule 36 (statement -> BREAK SEMI .)
    VARIABLE        reduce using rule 36 (statement -> BREAK SEMI .)
    $end            reduce using rule 36 (statement -> BREAK SEMI .)
    RBRACE          reduce using rule 36 (statement -> BREAK SEMI .)
    ELSEIF          reduce using rule 36 (statement -> BREAK SEMI .)
    ELSE            reduce using rule 36 (statement -> BREAK SEMI .)
    ENDDECLARE      reduce using rule 36 (statement -> BREAK SEMI .)
    ENDWHILE        reduce using rule 36 (statement -> BREAK SEMI .)
    ENDIF           reduce using rule 36 (statement -> BREAK SEMI .)
    ENDFOREACH      reduce using rule 36 (statement -> BREAK SEMI .)
    CASE            reduce using rule 36 (statement -> BREAK SEMI .)
    DEFAULT         reduce using rule 36 (statement -> BREAK SEMI .)
    ENDSWITCH       reduce using rule 36 (statement -> BREAK SEMI .)
    ENDFOR          reduce using rule 36 (statement -> BREAK SEMI .)


state 210

    (309) expr -> EXIT LPAREN . RPAREN
    (310) expr -> EXIT LPAREN . expr RPAREN
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    RPAREN          shift and go to state 365
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 366

state 211

    (32) statement -> DO statement . WHILE LPAREN expr RPAREN SEMI

    WHILE           shift and go to state 367


state 212

    (12) top_statement -> USE use_declarations . SEMI
    (13) use_declarations -> use_declarations . COMMA use_declaration

    SEMI            shift and go to state 369
    COMMA           shift and go to state 368


state 213

    (16) use_declaration -> NS_SEPARATOR . namespace_name
    (18) use_declaration -> NS_SEPARATOR . namespace_name AS STRING
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    STRING          shift and go to state 89

    namespace_name                 shift and go to state 370

state 214

    (14) use_declarations -> use_declaration .

    SEMI            reduce using rule 14 (use_declarations -> use_declaration .)
    COMMA           reduce using rule 14 (use_declarations -> use_declaration .)


state 215

    (15) use_declaration -> namespace_name .
    (17) use_declaration -> namespace_name . AS STRING
    (349) namespace_name -> namespace_name . NS_SEPARATOR STRING

    SEMI            reduce using rule 15 (use_declaration -> namespace_name .)
    COMMA           reduce using rule 15 (use_declaration -> namespace_name .)
    AS              shift and go to state 371
    NS_SEPARATOR    shift and go to state 178


state 216

    (11) top_statement -> CONST constant_declarations . SEMI
    (19) constant_declarations -> constant_declarations . COMMA constant_declaration

    SEMI            shift and go to state 373
    COMMA           shift and go to state 372


state 217

    (21) constant_declaration -> STRING . EQUALS static_scalar

    EQUALS          shift and go to state 374


state 218

    (20) constant_declarations -> constant_declaration .

    SEMI            reduce using rule 20 (constant_declarations -> constant_declaration .)
    COMMA           reduce using rule 20 (constant_declarations -> constant_declaration .)


state 219

    (107) class_entry_type -> ABSTRACT CLASS .

    STRING          reduce using rule 107 (class_entry_type -> ABSTRACT CLASS .)


state 220

    (47) statement -> UNSET LPAREN . unset_variables RPAREN SEMI
    (100) unset_variables -> . unset_variables COMMA unset_variable
    (101) unset_variables -> . unset_variable
    (102) unset_variable -> . variable
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NS_SEPARATOR    shift and go to state 129
    NAMESPACE       shift and go to state 128
    DOLLAR          shift and go to state 90
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    VARIABLE        shift and go to state 56

    variable_without_objects       shift and go to state 84
    unset_variables                shift and go to state 377
    base_variable                  shift and go to state 44
    compound_variable              shift and go to state 72
    class_name                     shift and go to state 124
    variable_class_name            shift and go to state 127
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 126
    static_member                  shift and go to state 86
    variable                       shift and go to state 375
    unset_variable                 shift and go to state 376
    namespace_name                 shift and go to state 130

state 221

    (193) function_call -> variable_without_objects LPAREN . function_call_parameter_list RPAREN
    (235) function_call_parameter_list -> . function_call_parameter_list COMMA function_call_parameter
    (236) function_call_parameter_list -> . function_call_parameter
    (237) function_call_parameter_list -> . empty
    (238) function_call_parameter -> . expr
    (239) function_call_parameter -> . AND variable
    (363) empty -> .
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    AND             shift and go to state 330
    RPAREN          reduce using rule 363 (empty -> .)
    COMMA           reduce using rule 363 (empty -> .)
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    function_call_parameter_list   shift and go to state 378
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    empty                          shift and go to state 331
    function_call_parameter        shift and go to state 332
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 329

state 222

    (299) expr -> ISSET LPAREN . isset_variables RPAREN
    (300) isset_variables -> . isset_variables COMMA variable
    (301) isset_variables -> . variable
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NS_SEPARATOR    shift and go to state 129
    NAMESPACE       shift and go to state 128
    DOLLAR          shift and go to state 90
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    VARIABLE        shift and go to state 56

    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    compound_variable              shift and go to state 72
    class_name                     shift and go to state 124
    isset_variables                shift and go to state 380
    variable_class_name            shift and go to state 127
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 126
    static_member                  shift and go to state 86
    variable                       shift and go to state 379
    namespace_name                 shift and go to state 130

state 223

    (210) compound_variable -> DOLLAR LBRACE . expr RBRACE
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 381

state 224

    (202) simple_indirect_reference -> reference_variable .
    (206) reference_variable -> reference_variable . LBRACKET dim_offset RBRACKET
    (207) reference_variable -> reference_variable . LBRACE expr RBRACE

    LPAREN          reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    OBJECT_OPERATOR reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    EQUALS          reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    PLUS_EQUAL      reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    MINUS_EQUAL     reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    MUL_EQUAL       reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    DIV_EQUAL       reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    CONCAT_EQUAL    reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    MOD_EQUAL       reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    AND_EQUAL       reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    OR_EQUAL        reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    XOR_EQUAL       reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    SL_EQUAL        reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    SR_EQUAL        reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    INC             reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    DEC             reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    SEMI            reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    BOOLEAN_AND     reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    BOOLEAN_OR      reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    LOGICAL_AND     reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    LOGICAL_OR      reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    LOGICAL_XOR     reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    AND             reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    OR              reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    XOR             reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    CONCAT          reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    PLUS            reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    MINUS           reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    MUL             reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    DIV             reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    SL              reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    SR              reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    MOD             reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    IS_IDENTICAL    reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    IS_NOT_IDENTICAL reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    IS_EQUAL        reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    IS_NOT_EQUAL    reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    IS_SMALLER      reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    IS_GREATER      reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    IS_GREATER_OR_EQUAL reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    INSTANCEOF      reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    QUESTION        reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    COMMA           reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    RPAREN          reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    AS              reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    RBRACE          reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    RBRACKET        reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    DOUBLE_ARROW    reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    COLON           reduce using rule 202 (simple_indirect_reference -> reference_variable .)
    LBRACKET        shift and go to state 175
    LBRACE          shift and go to state 174


state 225

    (201) simple_indirect_reference -> DOLLAR simple_indirect_reference .

    OBJECT_OPERATOR reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    EQUALS          reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    PLUS_EQUAL      reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    MINUS_EQUAL     reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    MUL_EQUAL       reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    DIV_EQUAL       reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    CONCAT_EQUAL    reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    MOD_EQUAL       reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    AND_EQUAL       reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    OR_EQUAL        reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    XOR_EQUAL       reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    SL_EQUAL        reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    SR_EQUAL        reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    INC             reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    DEC             reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    AS              reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    BOOLEAN_AND     reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    BOOLEAN_OR      reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    LOGICAL_AND     reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    LOGICAL_OR      reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    LOGICAL_XOR     reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    AND             reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    OR              reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    XOR             reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    CONCAT          reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    PLUS            reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    MINUS           reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    MUL             reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    DIV             reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    SL              reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    SR              reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    MOD             reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    IS_IDENTICAL    reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    IS_NOT_IDENTICAL reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    IS_EQUAL        reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    IS_NOT_EQUAL    reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    IS_SMALLER      reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    IS_SMALLER_OR_EQUAL reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    IS_GREATER      reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    IS_GREATER_OR_EQUAL reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    INSTANCEOF      reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    QUESTION        reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    LPAREN          reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    RPAREN          reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    DOUBLE_ARROW    reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    COMMA           reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    RBRACE          reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    SEMI            reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    RBRACKET        reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    COLON           reduce using rule 201 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)


state 226

    (313) expr -> LPAREN expr . RPAREN
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    RPAREN          shift and go to state 382
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    LOGICAL_AND     shift and go to state 181
    LOGICAL_OR      shift and go to state 202
    LOGICAL_XOR     shift and go to state 200
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188


state 227

    (256) expr -> variable SL_EQUAL . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 383

state 228

    (291) expr -> variable DEC .

    AS              reduce using rule 291 (expr -> variable DEC .)
    BOOLEAN_AND     reduce using rule 291 (expr -> variable DEC .)
    BOOLEAN_OR      reduce using rule 291 (expr -> variable DEC .)
    LOGICAL_AND     reduce using rule 291 (expr -> variable DEC .)
    LOGICAL_OR      reduce using rule 291 (expr -> variable DEC .)
    LOGICAL_XOR     reduce using rule 291 (expr -> variable DEC .)
    AND             reduce using rule 291 (expr -> variable DEC .)
    OR              reduce using rule 291 (expr -> variable DEC .)
    XOR             reduce using rule 291 (expr -> variable DEC .)
    CONCAT          reduce using rule 291 (expr -> variable DEC .)
    PLUS            reduce using rule 291 (expr -> variable DEC .)
    MINUS           reduce using rule 291 (expr -> variable DEC .)
    MUL             reduce using rule 291 (expr -> variable DEC .)
    DIV             reduce using rule 291 (expr -> variable DEC .)
    SL              reduce using rule 291 (expr -> variable DEC .)
    SR              reduce using rule 291 (expr -> variable DEC .)
    MOD             reduce using rule 291 (expr -> variable DEC .)
    IS_IDENTICAL    reduce using rule 291 (expr -> variable DEC .)
    IS_NOT_IDENTICAL reduce using rule 291 (expr -> variable DEC .)
    IS_EQUAL        reduce using rule 291 (expr -> variable DEC .)
    IS_NOT_EQUAL    reduce using rule 291 (expr -> variable DEC .)
    IS_SMALLER      reduce using rule 291 (expr -> variable DEC .)
    IS_SMALLER_OR_EQUAL reduce using rule 291 (expr -> variable DEC .)
    IS_GREATER      reduce using rule 291 (expr -> variable DEC .)
    IS_GREATER_OR_EQUAL reduce using rule 291 (expr -> variable DEC .)
    INSTANCEOF      reduce using rule 291 (expr -> variable DEC .)
    QUESTION        reduce using rule 291 (expr -> variable DEC .)
    SEMI            reduce using rule 291 (expr -> variable DEC .)
    COMMA           reduce using rule 291 (expr -> variable DEC .)
    RPAREN          reduce using rule 291 (expr -> variable DEC .)
    RBRACE          reduce using rule 291 (expr -> variable DEC .)
    RBRACKET        reduce using rule 291 (expr -> variable DEC .)
    DOUBLE_ARROW    reduce using rule 291 (expr -> variable DEC .)
    COLON           reduce using rule 291 (expr -> variable DEC .)


state 229

    (254) expr -> variable OR_EQUAL . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 384

state 230

    (247) expr -> variable PLUS_EQUAL . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 385

state 231

    (249) expr -> variable MUL_EQUAL . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 386

state 232

    (159) expr -> variable EQUALS . expr
    (160) expr -> variable EQUALS . AND expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    AND             shift and go to state 388
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 387

state 233

    (290) expr -> variable INC .

    AS              reduce using rule 290 (expr -> variable INC .)
    BOOLEAN_AND     reduce using rule 290 (expr -> variable INC .)
    BOOLEAN_OR      reduce using rule 290 (expr -> variable INC .)
    LOGICAL_AND     reduce using rule 290 (expr -> variable INC .)
    LOGICAL_OR      reduce using rule 290 (expr -> variable INC .)
    LOGICAL_XOR     reduce using rule 290 (expr -> variable INC .)
    AND             reduce using rule 290 (expr -> variable INC .)
    OR              reduce using rule 290 (expr -> variable INC .)
    XOR             reduce using rule 290 (expr -> variable INC .)
    CONCAT          reduce using rule 290 (expr -> variable INC .)
    PLUS            reduce using rule 290 (expr -> variable INC .)
    MINUS           reduce using rule 290 (expr -> variable INC .)
    MUL             reduce using rule 290 (expr -> variable INC .)
    DIV             reduce using rule 290 (expr -> variable INC .)
    SL              reduce using rule 290 (expr -> variable INC .)
    SR              reduce using rule 290 (expr -> variable INC .)
    MOD             reduce using rule 290 (expr -> variable INC .)
    IS_IDENTICAL    reduce using rule 290 (expr -> variable INC .)
    IS_NOT_IDENTICAL reduce using rule 290 (expr -> variable INC .)
    IS_EQUAL        reduce using rule 290 (expr -> variable INC .)
    IS_NOT_EQUAL    reduce using rule 290 (expr -> variable INC .)
    IS_SMALLER      reduce using rule 290 (expr -> variable INC .)
    IS_SMALLER_OR_EQUAL reduce using rule 290 (expr -> variable INC .)
    IS_GREATER      reduce using rule 290 (expr -> variable INC .)
    IS_GREATER_OR_EQUAL reduce using rule 290 (expr -> variable INC .)
    INSTANCEOF      reduce using rule 290 (expr -> variable INC .)
    QUESTION        reduce using rule 290 (expr -> variable INC .)
    SEMI            reduce using rule 290 (expr -> variable INC .)
    COMMA           reduce using rule 290 (expr -> variable INC .)
    RPAREN          reduce using rule 290 (expr -> variable INC .)
    RBRACE          reduce using rule 290 (expr -> variable INC .)
    RBRACKET        reduce using rule 290 (expr -> variable INC .)
    DOUBLE_ARROW    reduce using rule 290 (expr -> variable INC .)
    COLON           reduce using rule 290 (expr -> variable INC .)


state 234

    (252) expr -> variable MOD_EQUAL . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 389

state 235

    (257) expr -> variable SR_EQUAL . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 390

state 236

    (250) expr -> variable DIV_EQUAL . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 391

state 237

    (251) expr -> variable CONCAT_EQUAL . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 392

state 238

    (253) expr -> variable AND_EQUAL . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 393

state 239

    (248) expr -> variable MINUS_EQUAL . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 394

state 240

    (255) expr -> variable XOR_EQUAL . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 395

state 241

    (29) statement -> IF LPAREN . expr RPAREN statement elseif_list else_single
    (30) statement -> IF LPAREN . expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 396

state 242

    (292) expr -> INT_CAST expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 292 (expr -> INT_CAST expr .)
    BOOLEAN_AND     reduce using rule 292 (expr -> INT_CAST expr .)
    BOOLEAN_OR      reduce using rule 292 (expr -> INT_CAST expr .)
    LOGICAL_AND     reduce using rule 292 (expr -> INT_CAST expr .)
    LOGICAL_OR      reduce using rule 292 (expr -> INT_CAST expr .)
    LOGICAL_XOR     reduce using rule 292 (expr -> INT_CAST expr .)
    AND             reduce using rule 292 (expr -> INT_CAST expr .)
    OR              reduce using rule 292 (expr -> INT_CAST expr .)
    XOR             reduce using rule 292 (expr -> INT_CAST expr .)
    CONCAT          reduce using rule 292 (expr -> INT_CAST expr .)
    PLUS            reduce using rule 292 (expr -> INT_CAST expr .)
    MINUS           reduce using rule 292 (expr -> INT_CAST expr .)
    MUL             reduce using rule 292 (expr -> INT_CAST expr .)
    DIV             reduce using rule 292 (expr -> INT_CAST expr .)
    SL              reduce using rule 292 (expr -> INT_CAST expr .)
    SR              reduce using rule 292 (expr -> INT_CAST expr .)
    MOD             reduce using rule 292 (expr -> INT_CAST expr .)
    IS_IDENTICAL    reduce using rule 292 (expr -> INT_CAST expr .)
    IS_NOT_IDENTICAL reduce using rule 292 (expr -> INT_CAST expr .)
    IS_EQUAL        reduce using rule 292 (expr -> INT_CAST expr .)
    IS_NOT_EQUAL    reduce using rule 292 (expr -> INT_CAST expr .)
    IS_SMALLER      reduce using rule 292 (expr -> INT_CAST expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 292 (expr -> INT_CAST expr .)
    IS_GREATER      reduce using rule 292 (expr -> INT_CAST expr .)
    IS_GREATER_OR_EQUAL reduce using rule 292 (expr -> INT_CAST expr .)
    INSTANCEOF      reduce using rule 292 (expr -> INT_CAST expr .)
    QUESTION        reduce using rule 292 (expr -> INT_CAST expr .)
    SEMI            reduce using rule 292 (expr -> INT_CAST expr .)
    COMMA           reduce using rule 292 (expr -> INT_CAST expr .)
    RPAREN          reduce using rule 292 (expr -> INT_CAST expr .)
    RBRACE          reduce using rule 292 (expr -> INT_CAST expr .)
    RBRACKET        reduce using rule 292 (expr -> INT_CAST expr .)
    DOUBLE_ARROW    reduce using rule 292 (expr -> INT_CAST expr .)
    COLON           reduce using rule 292 (expr -> INT_CAST expr .)

  ! BOOLEAN_AND     [ shift and go to state 196 ]
  ! BOOLEAN_OR      [ shift and go to state 194 ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]
  ! AND             [ shift and go to state 191 ]
  ! OR              [ shift and go to state 205 ]
  ! XOR             [ shift and go to state 193 ]
  ! CONCAT          [ shift and go to state 186 ]
  ! PLUS            [ shift and go to state 190 ]
  ! MINUS           [ shift and go to state 185 ]
  ! MUL             [ shift and go to state 183 ]
  ! DIV             [ shift and go to state 184 ]
  ! SL              [ shift and go to state 203 ]
  ! SR              [ shift and go to state 199 ]
  ! MOD             [ shift and go to state 206 ]
  ! IS_IDENTICAL    [ shift and go to state 201 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 198 ]
  ! IS_EQUAL        [ shift and go to state 189 ]
  ! IS_NOT_EQUAL    [ shift and go to state 195 ]
  ! IS_SMALLER      [ shift and go to state 192 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 197 ]
  ! IS_GREATER      [ shift and go to state 182 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 180 ]
  ! INSTANCEOF      [ shift and go to state 204 ]
  ! QUESTION        [ shift and go to state 188 ]


state 243

    (52) statement -> THROW expr . SEMI
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    SEMI            shift and go to state 397
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    LOGICAL_AND     shift and go to state 181
    LOGICAL_OR      shift and go to state 202
    LOGICAL_XOR     shift and go to state 200
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188


state 244

    (295) expr -> ARRAY_CAST expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 295 (expr -> ARRAY_CAST expr .)
    BOOLEAN_AND     reduce using rule 295 (expr -> ARRAY_CAST expr .)
    BOOLEAN_OR      reduce using rule 295 (expr -> ARRAY_CAST expr .)
    LOGICAL_AND     reduce using rule 295 (expr -> ARRAY_CAST expr .)
    LOGICAL_OR      reduce using rule 295 (expr -> ARRAY_CAST expr .)
    LOGICAL_XOR     reduce using rule 295 (expr -> ARRAY_CAST expr .)
    AND             reduce using rule 295 (expr -> ARRAY_CAST expr .)
    OR              reduce using rule 295 (expr -> ARRAY_CAST expr .)
    XOR             reduce using rule 295 (expr -> ARRAY_CAST expr .)
    CONCAT          reduce using rule 295 (expr -> ARRAY_CAST expr .)
    PLUS            reduce using rule 295 (expr -> ARRAY_CAST expr .)
    MINUS           reduce using rule 295 (expr -> ARRAY_CAST expr .)
    MUL             reduce using rule 295 (expr -> ARRAY_CAST expr .)
    DIV             reduce using rule 295 (expr -> ARRAY_CAST expr .)
    SL              reduce using rule 295 (expr -> ARRAY_CAST expr .)
    SR              reduce using rule 295 (expr -> ARRAY_CAST expr .)
    MOD             reduce using rule 295 (expr -> ARRAY_CAST expr .)
    IS_IDENTICAL    reduce using rule 295 (expr -> ARRAY_CAST expr .)
    IS_NOT_IDENTICAL reduce using rule 295 (expr -> ARRAY_CAST expr .)
    IS_EQUAL        reduce using rule 295 (expr -> ARRAY_CAST expr .)
    IS_NOT_EQUAL    reduce using rule 295 (expr -> ARRAY_CAST expr .)
    IS_SMALLER      reduce using rule 295 (expr -> ARRAY_CAST expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 295 (expr -> ARRAY_CAST expr .)
    IS_GREATER      reduce using rule 295 (expr -> ARRAY_CAST expr .)
    IS_GREATER_OR_EQUAL reduce using rule 295 (expr -> ARRAY_CAST expr .)
    INSTANCEOF      reduce using rule 295 (expr -> ARRAY_CAST expr .)
    QUESTION        reduce using rule 295 (expr -> ARRAY_CAST expr .)
    SEMI            reduce using rule 295 (expr -> ARRAY_CAST expr .)
    COMMA           reduce using rule 295 (expr -> ARRAY_CAST expr .)
    RPAREN          reduce using rule 295 (expr -> ARRAY_CAST expr .)
    RBRACE          reduce using rule 295 (expr -> ARRAY_CAST expr .)
    RBRACKET        reduce using rule 295 (expr -> ARRAY_CAST expr .)
    DOUBLE_ARROW    reduce using rule 295 (expr -> ARRAY_CAST expr .)
    COLON           reduce using rule 295 (expr -> ARRAY_CAST expr .)

  ! BOOLEAN_AND     [ shift and go to state 196 ]
  ! BOOLEAN_OR      [ shift and go to state 194 ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]
  ! AND             [ shift and go to state 191 ]
  ! OR              [ shift and go to state 205 ]
  ! XOR             [ shift and go to state 193 ]
  ! CONCAT          [ shift and go to state 186 ]
  ! PLUS            [ shift and go to state 190 ]
  ! MINUS           [ shift and go to state 185 ]
  ! MUL             [ shift and go to state 183 ]
  ! DIV             [ shift and go to state 184 ]
  ! SL              [ shift and go to state 203 ]
  ! SR              [ shift and go to state 199 ]
  ! MOD             [ shift and go to state 206 ]
  ! IS_IDENTICAL    [ shift and go to state 201 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 198 ]
  ! IS_EQUAL        [ shift and go to state 189 ]
  ! IS_NOT_EQUAL    [ shift and go to state 195 ]
  ! IS_SMALLER      [ shift and go to state 192 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 197 ]
  ! IS_GREATER      [ shift and go to state 182 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 180 ]
  ! INSTANCEOF      [ shift and go to state 204 ]
  ! QUESTION        [ shift and go to state 188 ]


state 245

    (240) expr -> FUNCTION is_reference . LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE

    LPAREN          shift and go to state 278


state 246

    (9) top_statement -> NAMESPACE LBRACE top_statement_list . RBRACE
    (2) top_statement_list -> top_statement_list . top_statement
    (4) top_statement -> . statement
    (5) top_statement -> . function_declaration_statement
    (6) top_statement -> . class_declaration_statement
    (7) top_statement -> . HALT_COMPILER LPAREN RPAREN SEMI
    (8) top_statement -> . NAMESPACE namespace_name SEMI
    (9) top_statement -> . NAMESPACE LBRACE top_statement_list RBRACE
    (10) top_statement -> . NAMESPACE namespace_name LBRACE top_statement_list RBRACE
    (11) top_statement -> . CONST constant_declarations SEMI
    (12) top_statement -> . USE use_declarations SEMI
    (28) statement -> . LBRACE inner_statement_list RBRACE
    (29) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (30) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (31) statement -> . WHILE LPAREN expr RPAREN while_statement
    (32) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (33) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (34) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (35) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (36) statement -> . BREAK SEMI
    (37) statement -> . BREAK expr SEMI
    (38) statement -> . CONTINUE SEMI
    (39) statement -> . CONTINUE expr SEMI
    (40) statement -> . RETURN SEMI
    (41) statement -> . RETURN expr SEMI
    (42) statement -> . GLOBAL global_var_list SEMI
    (43) statement -> . STATIC static_var_list SEMI
    (44) statement -> . ECHO echo_expr_list SEMI
    (45) statement -> . INLINE_HTML
    (46) statement -> . expr SEMI
    (47) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (48) statement -> . SEMI
    (49) statement -> . TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches
    (52) statement -> . THROW expr SEMI
    (53) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (103) function_declaration_statement -> . FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (104) class_declaration_statement -> . class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE
    (105) class_declaration_statement -> . INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (106) class_entry_type -> . CLASS
    (107) class_entry_type -> . ABSTRACT CLASS
    (108) class_entry_type -> . FINAL CLASS
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    RBRACE          shift and go to state 398
    HALT_COMPILER   shift and go to state 22
    NAMESPACE       shift and go to state 12
    CONST           shift and go to state 78
    USE             shift and go to state 77
    LBRACE          shift and go to state 47
    IF              shift and go to state 93
    WHILE           shift and go to state 57
    DO              shift and go to state 76
    FOR             shift and go to state 36
    FOREACH         shift and go to state 13
    SWITCH          shift and go to state 61
    BREAK           shift and go to state 74
    CONTINUE        shift and go to state 48
    RETURN          shift and go to state 23
    GLOBAL          shift and go to state 55
    STATIC          shift and go to state 29
    ECHO            shift and go to state 42
    INLINE_HTML     shift and go to state 88
    UNSET           shift and go to state 83
    SEMI            shift and go to state 85
    TRY             shift and go to state 43
    THROW           shift and go to state 96
    DECLARE         shift and go to state 16
    FUNCTION        shift and go to state 40
    INTERFACE       shift and go to state 21
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    CLASS           shift and go to state 20
    ABSTRACT        shift and go to state 80
    FINAL           shift and go to state 32
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_entry_type               shift and go to state 53
    class_name                     shift and go to state 54
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    function_call                  shift and go to state 27
    variable_without_objects       shift and go to state 84
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    function_declaration_statement shift and go to state 62
    statement                      shift and go to state 63
    class_constant                 shift and go to state 24
    variable_class_name            shift and go to state 41
    base_variable                  shift and go to state 44
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    class_declaration_statement    shift and go to state 67
    compound_variable              shift and go to state 72
    expr                           shift and go to state 71
    top_statement                  shift and go to state 52

state 247

    (321) scalar -> NAMESPACE NS_SEPARATOR namespace_name .
    (188) function_call -> NAMESPACE NS_SEPARATOR namespace_name . LPAREN function_call_parameter_list RPAREN
    (166) class_name -> NAMESPACE NS_SEPARATOR namespace_name .
    (349) namespace_name -> namespace_name . NS_SEPARATOR STRING

    BOOLEAN_AND     reduce using rule 321 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    BOOLEAN_OR      reduce using rule 321 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    LOGICAL_AND     reduce using rule 321 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    LOGICAL_OR      reduce using rule 321 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    LOGICAL_XOR     reduce using rule 321 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    AND             reduce using rule 321 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    OR              reduce using rule 321 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    XOR             reduce using rule 321 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    CONCAT          reduce using rule 321 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    PLUS            reduce using rule 321 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    MINUS           reduce using rule 321 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    MUL             reduce using rule 321 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    DIV             reduce using rule 321 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    SL              reduce using rule 321 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    SR              reduce using rule 321 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    MOD             reduce using rule 321 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    IS_IDENTICAL    reduce using rule 321 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    IS_NOT_IDENTICAL reduce using rule 321 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    IS_EQUAL        reduce using rule 321 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    IS_NOT_EQUAL    reduce using rule 321 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    IS_SMALLER      reduce using rule 321 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    IS_SMALLER_OR_EQUAL reduce using rule 321 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    IS_GREATER      reduce using rule 321 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    IS_GREATER_OR_EQUAL reduce using rule 321 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    INSTANCEOF      reduce using rule 321 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    QUESTION        reduce using rule 321 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    RPAREN          reduce using rule 321 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    COMMA           reduce using rule 321 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    SEMI            reduce using rule 321 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    AS              reduce using rule 321 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    RBRACE          reduce using rule 321 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    RBRACKET        reduce using rule 321 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    DOUBLE_ARROW    reduce using rule 321 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    COLON           reduce using rule 321 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    LPAREN          shift and go to state 399
    DOUBLE_COLON    reduce using rule 166 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    NS_SEPARATOR    shift and go to state 178


state 248

    (10) top_statement -> NAMESPACE namespace_name LBRACE . top_statement_list RBRACE
    (2) top_statement_list -> . top_statement_list top_statement
    (3) top_statement_list -> . empty
    (363) empty -> .

    RBRACE          reduce using rule 363 (empty -> .)
    HALT_COMPILER   reduce using rule 363 (empty -> .)
    NAMESPACE       reduce using rule 363 (empty -> .)
    CONST           reduce using rule 363 (empty -> .)
    USE             reduce using rule 363 (empty -> .)
    LBRACE          reduce using rule 363 (empty -> .)
    IF              reduce using rule 363 (empty -> .)
    WHILE           reduce using rule 363 (empty -> .)
    DO              reduce using rule 363 (empty -> .)
    FOR             reduce using rule 363 (empty -> .)
    FOREACH         reduce using rule 363 (empty -> .)
    SWITCH          reduce using rule 363 (empty -> .)
    BREAK           reduce using rule 363 (empty -> .)
    CONTINUE        reduce using rule 363 (empty -> .)
    RETURN          reduce using rule 363 (empty -> .)
    GLOBAL          reduce using rule 363 (empty -> .)
    STATIC          reduce using rule 363 (empty -> .)
    ECHO            reduce using rule 363 (empty -> .)
    INLINE_HTML     reduce using rule 363 (empty -> .)
    UNSET           reduce using rule 363 (empty -> .)
    SEMI            reduce using rule 363 (empty -> .)
    TRY             reduce using rule 363 (empty -> .)
    THROW           reduce using rule 363 (empty -> .)
    DECLARE         reduce using rule 363 (empty -> .)
    FUNCTION        reduce using rule 363 (empty -> .)
    INTERFACE       reduce using rule 363 (empty -> .)
    NEW             reduce using rule 363 (empty -> .)
    CLONE           reduce using rule 363 (empty -> .)
    LIST            reduce using rule 363 (empty -> .)
    ARRAY           reduce using rule 363 (empty -> .)
    PLUS            reduce using rule 363 (empty -> .)
    MINUS           reduce using rule 363 (empty -> .)
    NOT             reduce using rule 363 (empty -> .)
    BOOLEAN_NOT     reduce using rule 363 (empty -> .)
    INC             reduce using rule 363 (empty -> .)
    DEC             reduce using rule 363 (empty -> .)
    INT_CAST        reduce using rule 363 (empty -> .)
    DOUBLE_CAST     reduce using rule 363 (empty -> .)
    STRING_CAST     reduce using rule 363 (empty -> .)
    ARRAY_CAST      reduce using rule 363 (empty -> .)
    OBJECT_CAST     reduce using rule 363 (empty -> .)
    BOOL_CAST       reduce using rule 363 (empty -> .)
    UNSET_CAST      reduce using rule 363 (empty -> .)
    ISSET           reduce using rule 363 (empty -> .)
    EMPTY           reduce using rule 363 (empty -> .)
    EVAL            reduce using rule 363 (empty -> .)
    INCLUDE         reduce using rule 363 (empty -> .)
    INCLUDE_ONCE    reduce using rule 363 (empty -> .)
    REQUIRE         reduce using rule 363 (empty -> .)
    REQUIRE_ONCE    reduce using rule 363 (empty -> .)
    EXIT            reduce using rule 363 (empty -> .)
    PRINT           reduce using rule 363 (empty -> .)
    AT              reduce using rule 363 (empty -> .)
    LPAREN          reduce using rule 363 (empty -> .)
    CLASS           reduce using rule 363 (empty -> .)
    ABSTRACT        reduce using rule 363 (empty -> .)
    FINAL           reduce using rule 363 (empty -> .)
    QUOTE           reduce using rule 363 (empty -> .)
    START_HEREDOC   reduce using rule 363 (empty -> .)
    STRING_VARNAME  reduce using rule 363 (empty -> .)
    NS_SEPARATOR    reduce using rule 363 (empty -> .)
    LNUMBER         reduce using rule 363 (empty -> .)
    DNUMBER         reduce using rule 363 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 363 (empty -> .)
    LINE            reduce using rule 363 (empty -> .)
    FILE            reduce using rule 363 (empty -> .)
    DIR             reduce using rule 363 (empty -> .)
    CLASS_C         reduce using rule 363 (empty -> .)
    METHOD_C        reduce using rule 363 (empty -> .)
    FUNC_C          reduce using rule 363 (empty -> .)
    NS_C            reduce using rule 363 (empty -> .)
    STRING          reduce using rule 363 (empty -> .)
    DOLLAR          reduce using rule 363 (empty -> .)
    VARIABLE        reduce using rule 363 (empty -> .)

    top_statement_list             shift and go to state 400
    empty                          shift and go to state 3

state 249

    (8) top_statement -> NAMESPACE namespace_name SEMI .

    RBRACE          reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    HALT_COMPILER   reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    NAMESPACE       reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    CONST           reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    USE             reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    LBRACE          reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    IF              reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    WHILE           reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    DO              reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    FOR             reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    FOREACH         reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    SWITCH          reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    BREAK           reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    CONTINUE        reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    RETURN          reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    GLOBAL          reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    STATIC          reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    ECHO            reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    INLINE_HTML     reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    UNSET           reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    SEMI            reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    TRY             reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    THROW           reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    DECLARE         reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    FUNCTION        reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    INTERFACE       reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    NEW             reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    CLONE           reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    LIST            reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    ARRAY           reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    PLUS            reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    MINUS           reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    NOT             reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    BOOLEAN_NOT     reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    INC             reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    DEC             reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    INT_CAST        reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    DOUBLE_CAST     reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    STRING_CAST     reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    ARRAY_CAST      reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    OBJECT_CAST     reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    BOOL_CAST       reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    UNSET_CAST      reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    ISSET           reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    EMPTY           reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    EVAL            reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    INCLUDE         reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    INCLUDE_ONCE    reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    REQUIRE         reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    REQUIRE_ONCE    reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    EXIT            reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    PRINT           reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    AT              reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    LPAREN          reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    CLASS           reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    ABSTRACT        reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    FINAL           reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    QUOTE           reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    START_HEREDOC   reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    STRING_VARNAME  reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    NS_SEPARATOR    reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    LNUMBER         reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    DNUMBER         reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    LINE            reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    FILE            reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    DIR             reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    CLASS_C         reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    METHOD_C        reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    FUNC_C          reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    NS_C            reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    STRING          reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    DOLLAR          reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    VARIABLE        reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    $end            reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)


state 250

    (34) statement -> FOREACH LPAREN expr . AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              shift and go to state 401
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    LOGICAL_AND     shift and go to state 181
    LOGICAL_OR      shift and go to state 202
    LOGICAL_XOR     shift and go to state 200
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188


state 251

    (303) expr -> EVAL LPAREN expr . RPAREN
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    RPAREN          shift and go to state 402
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    LOGICAL_AND     shift and go to state 181
    LOGICAL_OR      shift and go to state 202
    LOGICAL_XOR     shift and go to state 200
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188


state 252

    (54) declare_list -> STRING . EQUALS static_scalar

    EQUALS          shift and go to state 403


state 253

    (53) statement -> DECLARE LPAREN declare_list . RPAREN declare_statement
    (55) declare_list -> declare_list . COMMA STRING EQUALS static_scalar

    RPAREN          shift and go to state 404
    COMMA           shift and go to state 405


state 254

    (105) class_declaration_statement -> INTERFACE STRING interface_extends_list . LBRACE class_statement_list RBRACE

    LBRACE          shift and go to state 406


state 255

    (129) interface_extends_list -> EXTENDS . interface_list
    (127) interface_list -> . interface_list COMMA fully_qualified_class_name
    (128) interface_list -> . fully_qualified_class_name
    (111) fully_qualified_class_name -> . namespace_name
    (112) fully_qualified_class_name -> . NS_SEPARATOR namespace_name
    (113) fully_qualified_class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    NS_SEPARATOR    shift and go to state 409
    NAMESPACE       shift and go to state 408
    STRING          shift and go to state 89

    interface_list                 shift and go to state 410
    fully_qualified_class_name     shift and go to state 407
    namespace_name                 shift and go to state 411

state 256

    (130) interface_extends_list -> empty .

    LBRACE          reduce using rule 130 (interface_extends_list -> empty .)


state 257

    (7) top_statement -> HALT_COMPILER LPAREN RPAREN . SEMI

    SEMI            shift and go to state 412


state 258

    (41) statement -> RETURN expr SEMI .

    HALT_COMPILER   reduce using rule 41 (statement -> RETURN expr SEMI .)
    NAMESPACE       reduce using rule 41 (statement -> RETURN expr SEMI .)
    CONST           reduce using rule 41 (statement -> RETURN expr SEMI .)
    USE             reduce using rule 41 (statement -> RETURN expr SEMI .)
    LBRACE          reduce using rule 41 (statement -> RETURN expr SEMI .)
    IF              reduce using rule 41 (statement -> RETURN expr SEMI .)
    WHILE           reduce using rule 41 (statement -> RETURN expr SEMI .)
    DO              reduce using rule 41 (statement -> RETURN expr SEMI .)
    FOR             reduce using rule 41 (statement -> RETURN expr SEMI .)
    FOREACH         reduce using rule 41 (statement -> RETURN expr SEMI .)
    SWITCH          reduce using rule 41 (statement -> RETURN expr SEMI .)
    BREAK           reduce using rule 41 (statement -> RETURN expr SEMI .)
    CONTINUE        reduce using rule 41 (statement -> RETURN expr SEMI .)
    RETURN          reduce using rule 41 (statement -> RETURN expr SEMI .)
    GLOBAL          reduce using rule 41 (statement -> RETURN expr SEMI .)
    STATIC          reduce using rule 41 (statement -> RETURN expr SEMI .)
    ECHO            reduce using rule 41 (statement -> RETURN expr SEMI .)
    INLINE_HTML     reduce using rule 41 (statement -> RETURN expr SEMI .)
    UNSET           reduce using rule 41 (statement -> RETURN expr SEMI .)
    SEMI            reduce using rule 41 (statement -> RETURN expr SEMI .)
    TRY             reduce using rule 41 (statement -> RETURN expr SEMI .)
    THROW           reduce using rule 41 (statement -> RETURN expr SEMI .)
    DECLARE         reduce using rule 41 (statement -> RETURN expr SEMI .)
    FUNCTION        reduce using rule 41 (statement -> RETURN expr SEMI .)
    INTERFACE       reduce using rule 41 (statement -> RETURN expr SEMI .)
    NEW             reduce using rule 41 (statement -> RETURN expr SEMI .)
    CLONE           reduce using rule 41 (statement -> RETURN expr SEMI .)
    LIST            reduce using rule 41 (statement -> RETURN expr SEMI .)
    ARRAY           reduce using rule 41 (statement -> RETURN expr SEMI .)
    PLUS            reduce using rule 41 (statement -> RETURN expr SEMI .)
    MINUS           reduce using rule 41 (statement -> RETURN expr SEMI .)
    NOT             reduce using rule 41 (statement -> RETURN expr SEMI .)
    BOOLEAN_NOT     reduce using rule 41 (statement -> RETURN expr SEMI .)
    INC             reduce using rule 41 (statement -> RETURN expr SEMI .)
    DEC             reduce using rule 41 (statement -> RETURN expr SEMI .)
    INT_CAST        reduce using rule 41 (statement -> RETURN expr SEMI .)
    DOUBLE_CAST     reduce using rule 41 (statement -> RETURN expr SEMI .)
    STRING_CAST     reduce using rule 41 (statement -> RETURN expr SEMI .)
    ARRAY_CAST      reduce using rule 41 (statement -> RETURN expr SEMI .)
    OBJECT_CAST     reduce using rule 41 (statement -> RETURN expr SEMI .)
    BOOL_CAST       reduce using rule 41 (statement -> RETURN expr SEMI .)
    UNSET_CAST      reduce using rule 41 (statement -> RETURN expr SEMI .)
    ISSET           reduce using rule 41 (statement -> RETURN expr SEMI .)
    EMPTY           reduce using rule 41 (statement -> RETURN expr SEMI .)
    EVAL            reduce using rule 41 (statement -> RETURN expr SEMI .)
    INCLUDE         reduce using rule 41 (statement -> RETURN expr SEMI .)
    INCLUDE_ONCE    reduce using rule 41 (statement -> RETURN expr SEMI .)
    REQUIRE         reduce using rule 41 (statement -> RETURN expr SEMI .)
    REQUIRE_ONCE    reduce using rule 41 (statement -> RETURN expr SEMI .)
    EXIT            reduce using rule 41 (statement -> RETURN expr SEMI .)
    PRINT           reduce using rule 41 (statement -> RETURN expr SEMI .)
    AT              reduce using rule 41 (statement -> RETURN expr SEMI .)
    LPAREN          reduce using rule 41 (statement -> RETURN expr SEMI .)
    CLASS           reduce using rule 41 (statement -> RETURN expr SEMI .)
    ABSTRACT        reduce using rule 41 (statement -> RETURN expr SEMI .)
    FINAL           reduce using rule 41 (statement -> RETURN expr SEMI .)
    QUOTE           reduce using rule 41 (statement -> RETURN expr SEMI .)
    START_HEREDOC   reduce using rule 41 (statement -> RETURN expr SEMI .)
    STRING_VARNAME  reduce using rule 41 (statement -> RETURN expr SEMI .)
    NS_SEPARATOR    reduce using rule 41 (statement -> RETURN expr SEMI .)
    LNUMBER         reduce using rule 41 (statement -> RETURN expr SEMI .)
    DNUMBER         reduce using rule 41 (statement -> RETURN expr SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 41 (statement -> RETURN expr SEMI .)
    LINE            reduce using rule 41 (statement -> RETURN expr SEMI .)
    FILE            reduce using rule 41 (statement -> RETURN expr SEMI .)
    DIR             reduce using rule 41 (statement -> RETURN expr SEMI .)
    CLASS_C         reduce using rule 41 (statement -> RETURN expr SEMI .)
    METHOD_C        reduce using rule 41 (statement -> RETURN expr SEMI .)
    FUNC_C          reduce using rule 41 (statement -> RETURN expr SEMI .)
    NS_C            reduce using rule 41 (statement -> RETURN expr SEMI .)
    STRING          reduce using rule 41 (statement -> RETURN expr SEMI .)
    DOLLAR          reduce using rule 41 (statement -> RETURN expr SEMI .)
    VARIABLE        reduce using rule 41 (statement -> RETURN expr SEMI .)
    $end            reduce using rule 41 (statement -> RETURN expr SEMI .)
    RBRACE          reduce using rule 41 (statement -> RETURN expr SEMI .)
    ELSEIF          reduce using rule 41 (statement -> RETURN expr SEMI .)
    ELSE            reduce using rule 41 (statement -> RETURN expr SEMI .)
    ENDDECLARE      reduce using rule 41 (statement -> RETURN expr SEMI .)
    ENDWHILE        reduce using rule 41 (statement -> RETURN expr SEMI .)
    ENDIF           reduce using rule 41 (statement -> RETURN expr SEMI .)
    ENDFOREACH      reduce using rule 41 (statement -> RETURN expr SEMI .)
    CASE            reduce using rule 41 (statement -> RETURN expr SEMI .)
    DEFAULT         reduce using rule 41 (statement -> RETURN expr SEMI .)
    ENDSWITCH       reduce using rule 41 (statement -> RETURN expr SEMI .)
    ENDFOR          reduce using rule 41 (statement -> RETURN expr SEMI .)


state 259

    (94) static_var_list -> static_var_list COMMA . static_var
    (96) static_var -> . VARIABLE EQUALS static_scalar
    (97) static_var -> . VARIABLE

    VARIABLE        shift and go to state 122

    static_var                     shift and go to state 413

state 260

    (43) statement -> STATIC static_var_list SEMI .

    HALT_COMPILER   reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    NAMESPACE       reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    CONST           reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    USE             reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    LBRACE          reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    IF              reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    WHILE           reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    DO              reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    FOR             reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    FOREACH         reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    SWITCH          reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    BREAK           reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    CONTINUE        reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    RETURN          reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    GLOBAL          reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    STATIC          reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    ECHO            reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    INLINE_HTML     reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    UNSET           reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    SEMI            reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    TRY             reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    THROW           reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    DECLARE         reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    FUNCTION        reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    INTERFACE       reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    NEW             reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    CLONE           reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    LIST            reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    ARRAY           reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    PLUS            reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    MINUS           reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    NOT             reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    BOOLEAN_NOT     reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    INC             reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    DEC             reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    INT_CAST        reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    DOUBLE_CAST     reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    STRING_CAST     reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    ARRAY_CAST      reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    OBJECT_CAST     reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    BOOL_CAST       reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    UNSET_CAST      reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    ISSET           reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    EMPTY           reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    EVAL            reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    INCLUDE         reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    INCLUDE_ONCE    reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    REQUIRE         reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    REQUIRE_ONCE    reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    EXIT            reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    PRINT           reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    AT              reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    LPAREN          reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    CLASS           reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    ABSTRACT        reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    FINAL           reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    QUOTE           reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    START_HEREDOC   reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    STRING_VARNAME  reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    NS_SEPARATOR    reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    LNUMBER         reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    DNUMBER         reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    LINE            reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    FILE            reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    DIR             reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    CLASS_C         reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    METHOD_C        reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    FUNC_C          reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    NS_C            reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    STRING          reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    DOLLAR          reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    VARIABLE        reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    $end            reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    RBRACE          reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    ELSEIF          reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    ELSE            reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    ENDDECLARE      reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    ENDWHILE        reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    ENDIF           reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    ENDFOREACH      reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    CASE            reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    DEFAULT         reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    ENDSWITCH       reduce using rule 43 (statement -> STATIC static_var_list SEMI .)
    ENDFOR          reduce using rule 43 (statement -> STATIC static_var_list SEMI .)


state 261

    (96) static_var -> VARIABLE EQUALS . static_scalar
    (334) static_scalar -> . common_scalar
    (335) static_scalar -> . QUOTE QUOTE
    (336) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (337) static_scalar -> . namespace_name
    (338) static_scalar -> . NS_SEPARATOR namespace_name
    (339) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (340) static_scalar -> . PLUS static_scalar
    (341) static_scalar -> . MINUS static_scalar
    (342) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    QUOTE           shift and go to state 417
    NS_SEPARATOR    shift and go to state 421
    NAMESPACE       shift and go to state 420
    PLUS            shift and go to state 418
    MINUS           shift and go to state 415
    ARRAY           shift and go to state 419
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89

    static_scalar                  shift and go to state 416
    common_scalar                  shift and go to state 414
    namespace_name                 shift and go to state 422

state 262

    (189) function_call -> class_name DOUBLE_COLON . STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> class_name DOUBLE_COLON . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (203) static_member -> class_name DOUBLE_COLON . variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    STRING          shift and go to state 423
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    variable_without_objects       shift and go to state 300
    compound_variable              shift and go to state 72
    reference_variable             shift and go to state 224
    simple_indirect_reference      shift and go to state 276

state 263

    (191) function_call -> variable_class_name DOUBLE_COLON . STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> variable_class_name DOUBLE_COLON . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (204) static_member -> variable_class_name DOUBLE_COLON . variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    STRING          shift and go to state 424
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    variable_without_objects       shift and go to state 279
    compound_variable              shift and go to state 72
    reference_variable             shift and go to state 224
    simple_indirect_reference      shift and go to state 276

state 264

    (188) function_call -> NAMESPACE NS_SEPARATOR . namespace_name LPAREN function_call_parameter_list RPAREN
    (166) class_name -> NAMESPACE NS_SEPARATOR . namespace_name
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    STRING          shift and go to state 89

    namespace_name                 shift and go to state 425

state 265

    (187) function_call -> NS_SEPARATOR namespace_name . LPAREN function_call_parameter_list RPAREN
    (165) class_name -> NS_SEPARATOR namespace_name .
    (349) namespace_name -> namespace_name . NS_SEPARATOR STRING

    LPAREN          shift and go to state 326
    DOUBLE_COLON    reduce using rule 165 (class_name -> NS_SEPARATOR namespace_name .)
    NS_SEPARATOR    shift and go to state 178


state 266

    (302) expr -> EMPTY LPAREN expr . RPAREN
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    RPAREN          shift and go to state 426
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    LOGICAL_AND     shift and go to state 181
    LOGICAL_OR      shift and go to state 202
    LOGICAL_XOR     shift and go to state 200
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188


state 267

    (71) non_empty_for_expr -> expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    COMMA           reduce using rule 71 (non_empty_for_expr -> expr .)
    RPAREN          reduce using rule 71 (non_empty_for_expr -> expr .)
    SEMI            reduce using rule 71 (non_empty_for_expr -> expr .)
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    LOGICAL_AND     shift and go to state 181
    LOGICAL_OR      shift and go to state 202
    LOGICAL_XOR     shift and go to state 200
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188


state 268

    (69) for_expr -> non_empty_for_expr .
    (70) non_empty_for_expr -> non_empty_for_expr . COMMA expr

    RPAREN          reduce using rule 69 (for_expr -> non_empty_for_expr .)
    SEMI            reduce using rule 69 (for_expr -> non_empty_for_expr .)
    COMMA           shift and go to state 427


state 269

    (68) for_expr -> empty .

    RPAREN          reduce using rule 68 (for_expr -> empty .)
    SEMI            reduce using rule 68 (for_expr -> empty .)


state 270

    (33) statement -> FOR LPAREN for_expr . SEMI for_expr SEMI for_expr RPAREN for_statement

    SEMI            shift and go to state 428


state 271

    (214) object_property -> variable_without_objects .

    LPAREN          reduce using rule 214 (object_property -> variable_without_objects .)
    OBJECT_OPERATOR reduce using rule 214 (object_property -> variable_without_objects .)
    EQUALS          reduce using rule 214 (object_property -> variable_without_objects .)
    PLUS_EQUAL      reduce using rule 214 (object_property -> variable_without_objects .)
    MINUS_EQUAL     reduce using rule 214 (object_property -> variable_without_objects .)
    MUL_EQUAL       reduce using rule 214 (object_property -> variable_without_objects .)
    DIV_EQUAL       reduce using rule 214 (object_property -> variable_without_objects .)
    CONCAT_EQUAL    reduce using rule 214 (object_property -> variable_without_objects .)
    MOD_EQUAL       reduce using rule 214 (object_property -> variable_without_objects .)
    AND_EQUAL       reduce using rule 214 (object_property -> variable_without_objects .)
    OR_EQUAL        reduce using rule 214 (object_property -> variable_without_objects .)
    XOR_EQUAL       reduce using rule 214 (object_property -> variable_without_objects .)
    SL_EQUAL        reduce using rule 214 (object_property -> variable_without_objects .)
    SR_EQUAL        reduce using rule 214 (object_property -> variable_without_objects .)
    INC             reduce using rule 214 (object_property -> variable_without_objects .)
    DEC             reduce using rule 214 (object_property -> variable_without_objects .)
    SEMI            reduce using rule 214 (object_property -> variable_without_objects .)
    BOOLEAN_AND     reduce using rule 214 (object_property -> variable_without_objects .)
    BOOLEAN_OR      reduce using rule 214 (object_property -> variable_without_objects .)
    LOGICAL_AND     reduce using rule 214 (object_property -> variable_without_objects .)
    LOGICAL_OR      reduce using rule 214 (object_property -> variable_without_objects .)
    LOGICAL_XOR     reduce using rule 214 (object_property -> variable_without_objects .)
    AND             reduce using rule 214 (object_property -> variable_without_objects .)
    OR              reduce using rule 214 (object_property -> variable_without_objects .)
    XOR             reduce using rule 214 (object_property -> variable_without_objects .)
    CONCAT          reduce using rule 214 (object_property -> variable_without_objects .)
    PLUS            reduce using rule 214 (object_property -> variable_without_objects .)
    MINUS           reduce using rule 214 (object_property -> variable_without_objects .)
    MUL             reduce using rule 214 (object_property -> variable_without_objects .)
    DIV             reduce using rule 214 (object_property -> variable_without_objects .)
    SL              reduce using rule 214 (object_property -> variable_without_objects .)
    SR              reduce using rule 214 (object_property -> variable_without_objects .)
    MOD             reduce using rule 214 (object_property -> variable_without_objects .)
    IS_IDENTICAL    reduce using rule 214 (object_property -> variable_without_objects .)
    IS_NOT_IDENTICAL reduce using rule 214 (object_property -> variable_without_objects .)
    IS_EQUAL        reduce using rule 214 (object_property -> variable_without_objects .)
    IS_NOT_EQUAL    reduce using rule 214 (object_property -> variable_without_objects .)
    IS_SMALLER      reduce using rule 214 (object_property -> variable_without_objects .)
    IS_SMALLER_OR_EQUAL reduce using rule 214 (object_property -> variable_without_objects .)
    IS_GREATER      reduce using rule 214 (object_property -> variable_without_objects .)
    IS_GREATER_OR_EQUAL reduce using rule 214 (object_property -> variable_without_objects .)
    INSTANCEOF      reduce using rule 214 (object_property -> variable_without_objects .)
    QUESTION        reduce using rule 214 (object_property -> variable_without_objects .)
    COMMA           reduce using rule 214 (object_property -> variable_without_objects .)
    RPAREN          reduce using rule 214 (object_property -> variable_without_objects .)
    AS              reduce using rule 214 (object_property -> variable_without_objects .)
    RBRACE          reduce using rule 214 (object_property -> variable_without_objects .)
    RBRACKET        reduce using rule 214 (object_property -> variable_without_objects .)
    DOUBLE_ARROW    reduce using rule 214 (object_property -> variable_without_objects .)
    COLON           reduce using rule 214 (object_property -> variable_without_objects .)


state 272

    (219) variable_name -> LBRACE . expr RBRACE
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 429

state 273

    (182) variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property . method_or_not variable_properties
    (194) method_or_not -> . LPAREN function_call_parameter_list RPAREN
    (195) method_or_not -> . empty
    (363) empty -> .

    LPAREN          shift and go to state 431
    OBJECT_OPERATOR reduce using rule 363 (empty -> .)
    EQUALS          reduce using rule 363 (empty -> .)
    PLUS_EQUAL      reduce using rule 363 (empty -> .)
    MINUS_EQUAL     reduce using rule 363 (empty -> .)
    MUL_EQUAL       reduce using rule 363 (empty -> .)
    DIV_EQUAL       reduce using rule 363 (empty -> .)
    CONCAT_EQUAL    reduce using rule 363 (empty -> .)
    MOD_EQUAL       reduce using rule 363 (empty -> .)
    AND_EQUAL       reduce using rule 363 (empty -> .)
    OR_EQUAL        reduce using rule 363 (empty -> .)
    XOR_EQUAL       reduce using rule 363 (empty -> .)
    SL_EQUAL        reduce using rule 363 (empty -> .)
    SR_EQUAL        reduce using rule 363 (empty -> .)
    INC             reduce using rule 363 (empty -> .)
    DEC             reduce using rule 363 (empty -> .)
    SEMI            reduce using rule 363 (empty -> .)
    BOOLEAN_AND     reduce using rule 363 (empty -> .)
    BOOLEAN_OR      reduce using rule 363 (empty -> .)
    LOGICAL_AND     reduce using rule 363 (empty -> .)
    LOGICAL_OR      reduce using rule 363 (empty -> .)
    LOGICAL_XOR     reduce using rule 363 (empty -> .)
    AND             reduce using rule 363 (empty -> .)
    OR              reduce using rule 363 (empty -> .)
    XOR             reduce using rule 363 (empty -> .)
    CONCAT          reduce using rule 363 (empty -> .)
    PLUS            reduce using rule 363 (empty -> .)
    MINUS           reduce using rule 363 (empty -> .)
    MUL             reduce using rule 363 (empty -> .)
    DIV             reduce using rule 363 (empty -> .)
    SL              reduce using rule 363 (empty -> .)
    SR              reduce using rule 363 (empty -> .)
    MOD             reduce using rule 363 (empty -> .)
    IS_IDENTICAL    reduce using rule 363 (empty -> .)
    IS_NOT_IDENTICAL reduce using rule 363 (empty -> .)
    IS_EQUAL        reduce using rule 363 (empty -> .)
    IS_NOT_EQUAL    reduce using rule 363 (empty -> .)
    IS_SMALLER      reduce using rule 363 (empty -> .)
    IS_SMALLER_OR_EQUAL reduce using rule 363 (empty -> .)
    IS_GREATER      reduce using rule 363 (empty -> .)
    IS_GREATER_OR_EQUAL reduce using rule 363 (empty -> .)
    INSTANCEOF      reduce using rule 363 (empty -> .)
    QUESTION        reduce using rule 363 (empty -> .)
    COMMA           reduce using rule 363 (empty -> .)
    RPAREN          reduce using rule 363 (empty -> .)
    AS              reduce using rule 363 (empty -> .)
    RBRACE          reduce using rule 363 (empty -> .)
    RBRACKET        reduce using rule 363 (empty -> .)
    DOUBLE_ARROW    reduce using rule 363 (empty -> .)
    COLON           reduce using rule 363 (empty -> .)

    method_or_not                  shift and go to state 432
    empty                          shift and go to state 430

state 274

    (218) variable_name -> STRING .

    LBRACKET        reduce using rule 218 (variable_name -> STRING .)
    LBRACE          reduce using rule 218 (variable_name -> STRING .)
    OBJECT_OPERATOR reduce using rule 218 (variable_name -> STRING .)
    LPAREN          reduce using rule 218 (variable_name -> STRING .)
    SEMI            reduce using rule 218 (variable_name -> STRING .)
    BOOLEAN_AND     reduce using rule 218 (variable_name -> STRING .)
    BOOLEAN_OR      reduce using rule 218 (variable_name -> STRING .)
    LOGICAL_AND     reduce using rule 218 (variable_name -> STRING .)
    LOGICAL_OR      reduce using rule 218 (variable_name -> STRING .)
    LOGICAL_XOR     reduce using rule 218 (variable_name -> STRING .)
    AND             reduce using rule 218 (variable_name -> STRING .)
    OR              reduce using rule 218 (variable_name -> STRING .)
    XOR             reduce using rule 218 (variable_name -> STRING .)
    CONCAT          reduce using rule 218 (variable_name -> STRING .)
    PLUS            reduce using rule 218 (variable_name -> STRING .)
    MINUS           reduce using rule 218 (variable_name -> STRING .)
    MUL             reduce using rule 218 (variable_name -> STRING .)
    DIV             reduce using rule 218 (variable_name -> STRING .)
    SL              reduce using rule 218 (variable_name -> STRING .)
    SR              reduce using rule 218 (variable_name -> STRING .)
    MOD             reduce using rule 218 (variable_name -> STRING .)
    IS_IDENTICAL    reduce using rule 218 (variable_name -> STRING .)
    IS_NOT_IDENTICAL reduce using rule 218 (variable_name -> STRING .)
    IS_EQUAL        reduce using rule 218 (variable_name -> STRING .)
    IS_NOT_EQUAL    reduce using rule 218 (variable_name -> STRING .)
    IS_SMALLER      reduce using rule 218 (variable_name -> STRING .)
    IS_SMALLER_OR_EQUAL reduce using rule 218 (variable_name -> STRING .)
    IS_GREATER      reduce using rule 218 (variable_name -> STRING .)
    IS_GREATER_OR_EQUAL reduce using rule 218 (variable_name -> STRING .)
    INSTANCEOF      reduce using rule 218 (variable_name -> STRING .)
    QUESTION        reduce using rule 218 (variable_name -> STRING .)
    COMMA           reduce using rule 218 (variable_name -> STRING .)
    RPAREN          reduce using rule 218 (variable_name -> STRING .)
    AS              reduce using rule 218 (variable_name -> STRING .)
    RBRACE          reduce using rule 218 (variable_name -> STRING .)
    RBRACKET        reduce using rule 218 (variable_name -> STRING .)
    DOUBLE_ARROW    reduce using rule 218 (variable_name -> STRING .)
    COLON           reduce using rule 218 (variable_name -> STRING .)
    EQUALS          reduce using rule 218 (variable_name -> STRING .)
    PLUS_EQUAL      reduce using rule 218 (variable_name -> STRING .)
    MINUS_EQUAL     reduce using rule 218 (variable_name -> STRING .)
    MUL_EQUAL       reduce using rule 218 (variable_name -> STRING .)
    DIV_EQUAL       reduce using rule 218 (variable_name -> STRING .)
    CONCAT_EQUAL    reduce using rule 218 (variable_name -> STRING .)
    MOD_EQUAL       reduce using rule 218 (variable_name -> STRING .)
    AND_EQUAL       reduce using rule 218 (variable_name -> STRING .)
    OR_EQUAL        reduce using rule 218 (variable_name -> STRING .)
    XOR_EQUAL       reduce using rule 218 (variable_name -> STRING .)
    SL_EQUAL        reduce using rule 218 (variable_name -> STRING .)
    SR_EQUAL        reduce using rule 218 (variable_name -> STRING .)
    INC             reduce using rule 218 (variable_name -> STRING .)
    DEC             reduce using rule 218 (variable_name -> STRING .)


state 275

    (213) object_property -> variable_name . object_dim_list
    (215) object_dim_list -> . empty
    (216) object_dim_list -> . object_dim_list LBRACKET dim_offset RBRACKET
    (217) object_dim_list -> . object_dim_list LBRACE expr RBRACE
    (363) empty -> .

    LBRACKET        reduce using rule 363 (empty -> .)
    LBRACE          reduce using rule 363 (empty -> .)
    LPAREN          reduce using rule 363 (empty -> .)
    OBJECT_OPERATOR reduce using rule 363 (empty -> .)
    EQUALS          reduce using rule 363 (empty -> .)
    PLUS_EQUAL      reduce using rule 363 (empty -> .)
    MINUS_EQUAL     reduce using rule 363 (empty -> .)
    MUL_EQUAL       reduce using rule 363 (empty -> .)
    DIV_EQUAL       reduce using rule 363 (empty -> .)
    CONCAT_EQUAL    reduce using rule 363 (empty -> .)
    MOD_EQUAL       reduce using rule 363 (empty -> .)
    AND_EQUAL       reduce using rule 363 (empty -> .)
    OR_EQUAL        reduce using rule 363 (empty -> .)
    XOR_EQUAL       reduce using rule 363 (empty -> .)
    SL_EQUAL        reduce using rule 363 (empty -> .)
    SR_EQUAL        reduce using rule 363 (empty -> .)
    INC             reduce using rule 363 (empty -> .)
    DEC             reduce using rule 363 (empty -> .)
    SEMI            reduce using rule 363 (empty -> .)
    BOOLEAN_AND     reduce using rule 363 (empty -> .)
    BOOLEAN_OR      reduce using rule 363 (empty -> .)
    LOGICAL_AND     reduce using rule 363 (empty -> .)
    LOGICAL_OR      reduce using rule 363 (empty -> .)
    LOGICAL_XOR     reduce using rule 363 (empty -> .)
    AND             reduce using rule 363 (empty -> .)
    OR              reduce using rule 363 (empty -> .)
    XOR             reduce using rule 363 (empty -> .)
    CONCAT          reduce using rule 363 (empty -> .)
    PLUS            reduce using rule 363 (empty -> .)
    MINUS           reduce using rule 363 (empty -> .)
    MUL             reduce using rule 363 (empty -> .)
    DIV             reduce using rule 363 (empty -> .)
    SL              reduce using rule 363 (empty -> .)
    SR              reduce using rule 363 (empty -> .)
    MOD             reduce using rule 363 (empty -> .)
    IS_IDENTICAL    reduce using rule 363 (empty -> .)
    IS_NOT_IDENTICAL reduce using rule 363 (empty -> .)
    IS_EQUAL        reduce using rule 363 (empty -> .)
    IS_NOT_EQUAL    reduce using rule 363 (empty -> .)
    IS_SMALLER      reduce using rule 363 (empty -> .)
    IS_SMALLER_OR_EQUAL reduce using rule 363 (empty -> .)
    IS_GREATER      reduce using rule 363 (empty -> .)
    IS_GREATER_OR_EQUAL reduce using rule 363 (empty -> .)
    INSTANCEOF      reduce using rule 363 (empty -> .)
    QUESTION        reduce using rule 363 (empty -> .)
    COMMA           reduce using rule 363 (empty -> .)
    RPAREN          reduce using rule 363 (empty -> .)
    AS              reduce using rule 363 (empty -> .)
    RBRACE          reduce using rule 363 (empty -> .)
    RBRACKET        reduce using rule 363 (empty -> .)
    DOUBLE_ARROW    reduce using rule 363 (empty -> .)
    COLON           reduce using rule 363 (empty -> .)

    empty                          shift and go to state 434
    object_dim_list                shift and go to state 433

state 276

    (220) variable_without_objects -> simple_indirect_reference .

    LPAREN          reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    OBJECT_OPERATOR reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    EQUALS          reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    PLUS_EQUAL      reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    MINUS_EQUAL     reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    MUL_EQUAL       reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    DIV_EQUAL       reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    CONCAT_EQUAL    reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    MOD_EQUAL       reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    AND_EQUAL       reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    OR_EQUAL        reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    XOR_EQUAL       reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    SL_EQUAL        reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    SR_EQUAL        reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    INC             reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    DEC             reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    SEMI            reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    BOOLEAN_AND     reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    BOOLEAN_OR      reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    LOGICAL_AND     reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    LOGICAL_OR      reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    LOGICAL_XOR     reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    AND             reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    OR              reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    XOR             reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    CONCAT          reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    PLUS            reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    MINUS           reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    MUL             reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    DIV             reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    SL              reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    SR              reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    MOD             reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    IS_IDENTICAL    reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    IS_NOT_IDENTICAL reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    IS_EQUAL        reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    IS_NOT_EQUAL    reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    IS_SMALLER      reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    IS_SMALLER_OR_EQUAL reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    IS_GREATER      reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    IS_GREATER_OR_EQUAL reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    INSTANCEOF      reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    QUESTION        reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    COMMA           reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    RPAREN          reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    AS              reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    RBRACE          reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    RBRACKET        reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    DOUBLE_ARROW    reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)
    COLON           reduce using rule 220 (variable_without_objects -> simple_indirect_reference .)


state 277

    (103) function_declaration_statement -> FUNCTION is_reference STRING . LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE

    LPAREN          shift and go to state 435


state 278

    (240) expr -> FUNCTION is_reference LPAREN . parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (147) parameter_list -> . parameter_list COMMA parameter
    (148) parameter_list -> . parameter
    (149) parameter_list -> . empty
    (150) parameter -> . VARIABLE
    (151) parameter -> . class_name VARIABLE
    (152) parameter -> . AND VARIABLE
    (153) parameter -> . class_name AND VARIABLE
    (154) parameter -> . VARIABLE EQUALS static_scalar
    (155) parameter -> . class_name VARIABLE EQUALS static_scalar
    (156) parameter -> . AND VARIABLE EQUALS static_scalar
    (157) parameter -> . class_name AND VARIABLE EQUALS static_scalar
    (363) empty -> .
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    VARIABLE        shift and go to state 439
    AND             shift and go to state 440
    RPAREN          reduce using rule 363 (empty -> .)
    COMMA           reduce using rule 363 (empty -> .)
    NS_SEPARATOR    shift and go to state 167
    NAMESPACE       shift and go to state 165
    STATIC          shift and go to state 101
    STRING          shift and go to state 89

    parameter_list                 shift and go to state 441
    class_name                     shift and go to state 436
    parameter                      shift and go to state 437
    empty                          shift and go to state 438
    namespace_name                 shift and go to state 169

state 279

    (192) function_call -> variable_class_name DOUBLE_COLON variable_without_objects . LPAREN function_call_parameter_list RPAREN
    (204) static_member -> variable_class_name DOUBLE_COLON variable_without_objects .

    LPAREN          shift and go to state 442
    OBJECT_OPERATOR reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    EQUALS          reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    PLUS_EQUAL      reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    MINUS_EQUAL     reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    MUL_EQUAL       reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    DIV_EQUAL       reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    CONCAT_EQUAL    reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    MOD_EQUAL       reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    AND_EQUAL       reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    OR_EQUAL        reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    XOR_EQUAL       reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    SL_EQUAL        reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    SR_EQUAL        reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    INC             reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    DEC             reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    BOOLEAN_AND     reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    BOOLEAN_OR      reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    LOGICAL_AND     reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    LOGICAL_OR      reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    LOGICAL_XOR     reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    AND             reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    OR              reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    XOR             reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    CONCAT          reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    PLUS            reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    MINUS           reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    MUL             reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    DIV             reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    SL              reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    SR              reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    MOD             reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    IS_IDENTICAL    reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    IS_NOT_IDENTICAL reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    IS_EQUAL        reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    IS_NOT_EQUAL    reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    IS_SMALLER      reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    IS_SMALLER_OR_EQUAL reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    IS_GREATER      reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    IS_GREATER_OR_EQUAL reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    INSTANCEOF      reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    QUESTION        reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    RBRACKET        reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    SEMI            reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    COMMA           reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    RPAREN          reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    AS              reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    RBRACE          reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    DOUBLE_ARROW    reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    COLON           reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)


state 280

    (323) class_constant -> variable_class_name DOUBLE_COLON STRING .
    (191) function_call -> variable_class_name DOUBLE_COLON STRING . LPAREN function_call_parameter_list RPAREN

    SEMI            reduce using rule 323 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    BOOLEAN_AND     reduce using rule 323 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    BOOLEAN_OR      reduce using rule 323 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    LOGICAL_AND     reduce using rule 323 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    LOGICAL_OR      reduce using rule 323 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    LOGICAL_XOR     reduce using rule 323 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    AND             reduce using rule 323 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    OR              reduce using rule 323 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    XOR             reduce using rule 323 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    CONCAT          reduce using rule 323 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    PLUS            reduce using rule 323 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    MINUS           reduce using rule 323 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    MUL             reduce using rule 323 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    DIV             reduce using rule 323 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    SL              reduce using rule 323 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    SR              reduce using rule 323 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    MOD             reduce using rule 323 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    IS_IDENTICAL    reduce using rule 323 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    IS_NOT_IDENTICAL reduce using rule 323 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    IS_EQUAL        reduce using rule 323 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    IS_NOT_EQUAL    reduce using rule 323 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    IS_SMALLER      reduce using rule 323 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    IS_SMALLER_OR_EQUAL reduce using rule 323 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    IS_GREATER      reduce using rule 323 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    IS_GREATER_OR_EQUAL reduce using rule 323 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    INSTANCEOF      reduce using rule 323 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    QUESTION        reduce using rule 323 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    COMMA           reduce using rule 323 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    RPAREN          reduce using rule 323 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    AS              reduce using rule 323 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    RBRACE          reduce using rule 323 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    RBRACKET        reduce using rule 323 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    DOUBLE_ARROW    reduce using rule 323 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    COLON           reduce using rule 323 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    LPAREN          shift and go to state 443


state 281

    (98) echo_expr_list -> echo_expr_list COMMA . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 444

state 282

    (44) statement -> ECHO echo_expr_list SEMI .

    HALT_COMPILER   reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    NAMESPACE       reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    CONST           reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    USE             reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    LBRACE          reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    IF              reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    WHILE           reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    DO              reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    FOR             reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    FOREACH         reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    SWITCH          reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    BREAK           reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    CONTINUE        reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    RETURN          reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    GLOBAL          reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    STATIC          reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    ECHO            reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    INLINE_HTML     reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    UNSET           reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    SEMI            reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    TRY             reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    THROW           reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    DECLARE         reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    FUNCTION        reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    INTERFACE       reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    NEW             reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    CLONE           reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    LIST            reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    ARRAY           reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    PLUS            reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    MINUS           reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    NOT             reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    BOOLEAN_NOT     reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    INC             reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    DEC             reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    INT_CAST        reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    DOUBLE_CAST     reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    STRING_CAST     reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    ARRAY_CAST      reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    OBJECT_CAST     reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    BOOL_CAST       reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    UNSET_CAST      reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    ISSET           reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    EMPTY           reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    EVAL            reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    INCLUDE         reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    INCLUDE_ONCE    reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    REQUIRE         reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    REQUIRE_ONCE    reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    EXIT            reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    PRINT           reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    AT              reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    LPAREN          reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    CLASS           reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    ABSTRACT        reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    FINAL           reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    QUOTE           reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    START_HEREDOC   reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    STRING_VARNAME  reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    NS_SEPARATOR    reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    LNUMBER         reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    DNUMBER         reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    LINE            reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    FILE            reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    DIR             reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    CLASS_C         reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    METHOD_C        reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    FUNC_C          reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    NS_C            reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    STRING          reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    DOLLAR          reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    VARIABLE        reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    $end            reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    RBRACE          reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    ELSEIF          reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    ELSE            reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    ENDDECLARE      reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    ENDWHILE        reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    ENDIF           reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    ENDFOREACH      reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    CASE            reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    DEFAULT         reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    ENDSWITCH       reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)
    ENDFOR          reduce using rule 44 (statement -> ECHO echo_expr_list SEMI .)


state 283

    (49) statement -> TRY LBRACE inner_statement_list . RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches
    (22) inner_statement_list -> inner_statement_list . inner_statement
    (24) inner_statement -> . statement
    (25) inner_statement -> . function_declaration_statement
    (26) inner_statement -> . class_declaration_statement
    (27) inner_statement -> . HALT_COMPILER LPAREN RPAREN SEMI
    (28) statement -> . LBRACE inner_statement_list RBRACE
    (29) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (30) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (31) statement -> . WHILE LPAREN expr RPAREN while_statement
    (32) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (33) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (34) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (35) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (36) statement -> . BREAK SEMI
    (37) statement -> . BREAK expr SEMI
    (38) statement -> . CONTINUE SEMI
    (39) statement -> . CONTINUE expr SEMI
    (40) statement -> . RETURN SEMI
    (41) statement -> . RETURN expr SEMI
    (42) statement -> . GLOBAL global_var_list SEMI
    (43) statement -> . STATIC static_var_list SEMI
    (44) statement -> . ECHO echo_expr_list SEMI
    (45) statement -> . INLINE_HTML
    (46) statement -> . expr SEMI
    (47) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (48) statement -> . SEMI
    (49) statement -> . TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches
    (52) statement -> . THROW expr SEMI
    (53) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (103) function_declaration_statement -> . FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (104) class_declaration_statement -> . class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE
    (105) class_declaration_statement -> . INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (106) class_entry_type -> . CLASS
    (107) class_entry_type -> . ABSTRACT CLASS
    (108) class_entry_type -> . FINAL CLASS
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    RBRACE          shift and go to state 445
    HALT_COMPILER   shift and go to state 285
    LBRACE          shift and go to state 47
    IF              shift and go to state 93
    WHILE           shift and go to state 57
    DO              shift and go to state 76
    FOR             shift and go to state 36
    FOREACH         shift and go to state 13
    SWITCH          shift and go to state 61
    BREAK           shift and go to state 74
    CONTINUE        shift and go to state 48
    RETURN          shift and go to state 23
    GLOBAL          shift and go to state 55
    STATIC          shift and go to state 29
    ECHO            shift and go to state 42
    INLINE_HTML     shift and go to state 88
    UNSET           shift and go to state 83
    SEMI            shift and go to state 85
    TRY             shift and go to state 43
    THROW           shift and go to state 96
    DECLARE         shift and go to state 16
    FUNCTION        shift and go to state 40
    INTERFACE       shift and go to state 21
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    CLASS           shift and go to state 20
    ABSTRACT        shift and go to state 80
    FINAL           shift and go to state 32
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_entry_type               shift and go to state 53
    inner_statement                shift and go to state 286
    class_name                     shift and go to state 54
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    function_call                  shift and go to state 27
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    function_declaration_statement shift and go to state 287
    statement                      shift and go to state 288
    class_constant                 shift and go to state 24
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    class_declaration_statement    shift and go to state 289
    compound_variable              shift and go to state 72
    expr                           shift and go to state 71

state 284

    (28) statement -> LBRACE inner_statement_list RBRACE .

    HALT_COMPILER   reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    NAMESPACE       reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    CONST           reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    USE             reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    LBRACE          reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    IF              reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    WHILE           reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    DO              reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    FOR             reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    FOREACH         reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    SWITCH          reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    BREAK           reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    CONTINUE        reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    RETURN          reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    GLOBAL          reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    STATIC          reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    ECHO            reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    INLINE_HTML     reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    UNSET           reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    SEMI            reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    TRY             reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    THROW           reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    DECLARE         reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    FUNCTION        reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    INTERFACE       reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    NEW             reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    CLONE           reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    LIST            reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    ARRAY           reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    PLUS            reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    MINUS           reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    NOT             reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    BOOLEAN_NOT     reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    INC             reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    DEC             reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    INT_CAST        reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    DOUBLE_CAST     reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    STRING_CAST     reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    ARRAY_CAST      reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    OBJECT_CAST     reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    BOOL_CAST       reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    UNSET_CAST      reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    ISSET           reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    EMPTY           reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    EVAL            reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    INCLUDE         reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    INCLUDE_ONCE    reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    REQUIRE         reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    REQUIRE_ONCE    reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    EXIT            reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    PRINT           reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    AT              reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    LPAREN          reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    CLASS           reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    ABSTRACT        reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    FINAL           reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    QUOTE           reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    START_HEREDOC   reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    STRING_VARNAME  reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    NS_SEPARATOR    reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    LNUMBER         reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    DNUMBER         reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    CONSTANT_ENCAPSED_STRING reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    LINE            reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    FILE            reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    DIR             reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    CLASS_C         reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    METHOD_C        reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    FUNC_C          reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    NS_C            reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    STRING          reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    DOLLAR          reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    VARIABLE        reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    $end            reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    RBRACE          reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    ELSEIF          reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    ELSE            reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    ENDDECLARE      reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    ENDWHILE        reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    ENDIF           reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    ENDFOREACH      reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    CASE            reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    DEFAULT         reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    ENDSWITCH       reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)
    ENDFOR          reduce using rule 28 (statement -> LBRACE inner_statement_list RBRACE .)


state 285

    (27) inner_statement -> HALT_COMPILER . LPAREN RPAREN SEMI

    LPAREN          shift and go to state 446


state 286

    (22) inner_statement_list -> inner_statement_list inner_statement .

    HALT_COMPILER   reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    LBRACE          reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    IF              reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    WHILE           reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    DO              reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    FOR             reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    FOREACH         reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    SWITCH          reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    BREAK           reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    CONTINUE        reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    RETURN          reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    GLOBAL          reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    STATIC          reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    ECHO            reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    INLINE_HTML     reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    UNSET           reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    SEMI            reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    TRY             reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    THROW           reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    DECLARE         reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    FUNCTION        reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    INTERFACE       reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    NEW             reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    CLONE           reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    LIST            reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    ARRAY           reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    PLUS            reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    MINUS           reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    NOT             reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    BOOLEAN_NOT     reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    INC             reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    DEC             reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    INT_CAST        reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    DOUBLE_CAST     reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    STRING_CAST     reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    ARRAY_CAST      reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    OBJECT_CAST     reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    BOOL_CAST       reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    UNSET_CAST      reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    ISSET           reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    EMPTY           reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    EVAL            reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    INCLUDE         reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    INCLUDE_ONCE    reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    REQUIRE         reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    REQUIRE_ONCE    reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    EXIT            reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    PRINT           reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    AT              reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    LPAREN          reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    CLASS           reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    ABSTRACT        reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    FINAL           reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    QUOTE           reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    START_HEREDOC   reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    STRING_VARNAME  reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    NS_SEPARATOR    reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    NAMESPACE       reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    LNUMBER         reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    DNUMBER         reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    LINE            reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    FILE            reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    DIR             reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    CLASS_C         reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    METHOD_C        reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    FUNC_C          reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    NS_C            reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    STRING          reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    DOLLAR          reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    VARIABLE        reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    RBRACE          reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    CASE            reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    DEFAULT         reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    ENDSWITCH       reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    ENDFOREACH      reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    ENDWHILE        reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    ELSEIF          reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    ELSE            reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    ENDIF           reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    ENDDECLARE      reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    ENDFOR          reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)


state 287

    (25) inner_statement -> function_declaration_statement .

    ENDDECLARE      reduce using rule 25 (inner_statement -> function_declaration_statement .)
    HALT_COMPILER   reduce using rule 25 (inner_statement -> function_declaration_statement .)
    LBRACE          reduce using rule 25 (inner_statement -> function_declaration_statement .)
    IF              reduce using rule 25 (inner_statement -> function_declaration_statement .)
    WHILE           reduce using rule 25 (inner_statement -> function_declaration_statement .)
    DO              reduce using rule 25 (inner_statement -> function_declaration_statement .)
    FOR             reduce using rule 25 (inner_statement -> function_declaration_statement .)
    FOREACH         reduce using rule 25 (inner_statement -> function_declaration_statement .)
    SWITCH          reduce using rule 25 (inner_statement -> function_declaration_statement .)
    BREAK           reduce using rule 25 (inner_statement -> function_declaration_statement .)
    CONTINUE        reduce using rule 25 (inner_statement -> function_declaration_statement .)
    RETURN          reduce using rule 25 (inner_statement -> function_declaration_statement .)
    GLOBAL          reduce using rule 25 (inner_statement -> function_declaration_statement .)
    STATIC          reduce using rule 25 (inner_statement -> function_declaration_statement .)
    ECHO            reduce using rule 25 (inner_statement -> function_declaration_statement .)
    INLINE_HTML     reduce using rule 25 (inner_statement -> function_declaration_statement .)
    UNSET           reduce using rule 25 (inner_statement -> function_declaration_statement .)
    SEMI            reduce using rule 25 (inner_statement -> function_declaration_statement .)
    TRY             reduce using rule 25 (inner_statement -> function_declaration_statement .)
    THROW           reduce using rule 25 (inner_statement -> function_declaration_statement .)
    DECLARE         reduce using rule 25 (inner_statement -> function_declaration_statement .)
    FUNCTION        reduce using rule 25 (inner_statement -> function_declaration_statement .)
    INTERFACE       reduce using rule 25 (inner_statement -> function_declaration_statement .)
    NEW             reduce using rule 25 (inner_statement -> function_declaration_statement .)
    CLONE           reduce using rule 25 (inner_statement -> function_declaration_statement .)
    LIST            reduce using rule 25 (inner_statement -> function_declaration_statement .)
    ARRAY           reduce using rule 25 (inner_statement -> function_declaration_statement .)
    PLUS            reduce using rule 25 (inner_statement -> function_declaration_statement .)
    MINUS           reduce using rule 25 (inner_statement -> function_declaration_statement .)
    NOT             reduce using rule 25 (inner_statement -> function_declaration_statement .)
    BOOLEAN_NOT     reduce using rule 25 (inner_statement -> function_declaration_statement .)
    INC             reduce using rule 25 (inner_statement -> function_declaration_statement .)
    DEC             reduce using rule 25 (inner_statement -> function_declaration_statement .)
    INT_CAST        reduce using rule 25 (inner_statement -> function_declaration_statement .)
    DOUBLE_CAST     reduce using rule 25 (inner_statement -> function_declaration_statement .)
    STRING_CAST     reduce using rule 25 (inner_statement -> function_declaration_statement .)
    ARRAY_CAST      reduce using rule 25 (inner_statement -> function_declaration_statement .)
    OBJECT_CAST     reduce using rule 25 (inner_statement -> function_declaration_statement .)
    BOOL_CAST       reduce using rule 25 (inner_statement -> function_declaration_statement .)
    UNSET_CAST      reduce using rule 25 (inner_statement -> function_declaration_statement .)
    ISSET           reduce using rule 25 (inner_statement -> function_declaration_statement .)
    EMPTY           reduce using rule 25 (inner_statement -> function_declaration_statement .)
    EVAL            reduce using rule 25 (inner_statement -> function_declaration_statement .)
    INCLUDE         reduce using rule 25 (inner_statement -> function_declaration_statement .)
    INCLUDE_ONCE    reduce using rule 25 (inner_statement -> function_declaration_statement .)
    REQUIRE         reduce using rule 25 (inner_statement -> function_declaration_statement .)
    REQUIRE_ONCE    reduce using rule 25 (inner_statement -> function_declaration_statement .)
    EXIT            reduce using rule 25 (inner_statement -> function_declaration_statement .)
    PRINT           reduce using rule 25 (inner_statement -> function_declaration_statement .)
    AT              reduce using rule 25 (inner_statement -> function_declaration_statement .)
    LPAREN          reduce using rule 25 (inner_statement -> function_declaration_statement .)
    CLASS           reduce using rule 25 (inner_statement -> function_declaration_statement .)
    ABSTRACT        reduce using rule 25 (inner_statement -> function_declaration_statement .)
    FINAL           reduce using rule 25 (inner_statement -> function_declaration_statement .)
    QUOTE           reduce using rule 25 (inner_statement -> function_declaration_statement .)
    START_HEREDOC   reduce using rule 25 (inner_statement -> function_declaration_statement .)
    STRING_VARNAME  reduce using rule 25 (inner_statement -> function_declaration_statement .)
    NS_SEPARATOR    reduce using rule 25 (inner_statement -> function_declaration_statement .)
    NAMESPACE       reduce using rule 25 (inner_statement -> function_declaration_statement .)
    LNUMBER         reduce using rule 25 (inner_statement -> function_declaration_statement .)
    DNUMBER         reduce using rule 25 (inner_statement -> function_declaration_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 25 (inner_statement -> function_declaration_statement .)
    LINE            reduce using rule 25 (inner_statement -> function_declaration_statement .)
    FILE            reduce using rule 25 (inner_statement -> function_declaration_statement .)
    DIR             reduce using rule 25 (inner_statement -> function_declaration_statement .)
    CLASS_C         reduce using rule 25 (inner_statement -> function_declaration_statement .)
    METHOD_C        reduce using rule 25 (inner_statement -> function_declaration_statement .)
    FUNC_C          reduce using rule 25 (inner_statement -> function_declaration_statement .)
    NS_C            reduce using rule 25 (inner_statement -> function_declaration_statement .)
    STRING          reduce using rule 25 (inner_statement -> function_declaration_statement .)
    DOLLAR          reduce using rule 25 (inner_statement -> function_declaration_statement .)
    VARIABLE        reduce using rule 25 (inner_statement -> function_declaration_statement .)
    ELSEIF          reduce using rule 25 (inner_statement -> function_declaration_statement .)
    ELSE            reduce using rule 25 (inner_statement -> function_declaration_statement .)
    ENDIF           reduce using rule 25 (inner_statement -> function_declaration_statement .)
    RBRACE          reduce using rule 25 (inner_statement -> function_declaration_statement .)
    ENDWHILE        reduce using rule 25 (inner_statement -> function_declaration_statement .)
    CASE            reduce using rule 25 (inner_statement -> function_declaration_statement .)
    DEFAULT         reduce using rule 25 (inner_statement -> function_declaration_statement .)
    ENDSWITCH       reduce using rule 25 (inner_statement -> function_declaration_statement .)
    ENDFOR          reduce using rule 25 (inner_statement -> function_declaration_statement .)
    ENDFOREACH      reduce using rule 25 (inner_statement -> function_declaration_statement .)


state 288

    (24) inner_statement -> statement .

    ENDDECLARE      reduce using rule 24 (inner_statement -> statement .)
    HALT_COMPILER   reduce using rule 24 (inner_statement -> statement .)
    LBRACE          reduce using rule 24 (inner_statement -> statement .)
    IF              reduce using rule 24 (inner_statement -> statement .)
    WHILE           reduce using rule 24 (inner_statement -> statement .)
    DO              reduce using rule 24 (inner_statement -> statement .)
    FOR             reduce using rule 24 (inner_statement -> statement .)
    FOREACH         reduce using rule 24 (inner_statement -> statement .)
    SWITCH          reduce using rule 24 (inner_statement -> statement .)
    BREAK           reduce using rule 24 (inner_statement -> statement .)
    CONTINUE        reduce using rule 24 (inner_statement -> statement .)
    RETURN          reduce using rule 24 (inner_statement -> statement .)
    GLOBAL          reduce using rule 24 (inner_statement -> statement .)
    STATIC          reduce using rule 24 (inner_statement -> statement .)
    ECHO            reduce using rule 24 (inner_statement -> statement .)
    INLINE_HTML     reduce using rule 24 (inner_statement -> statement .)
    UNSET           reduce using rule 24 (inner_statement -> statement .)
    SEMI            reduce using rule 24 (inner_statement -> statement .)
    TRY             reduce using rule 24 (inner_statement -> statement .)
    THROW           reduce using rule 24 (inner_statement -> statement .)
    DECLARE         reduce using rule 24 (inner_statement -> statement .)
    FUNCTION        reduce using rule 24 (inner_statement -> statement .)
    INTERFACE       reduce using rule 24 (inner_statement -> statement .)
    NEW             reduce using rule 24 (inner_statement -> statement .)
    CLONE           reduce using rule 24 (inner_statement -> statement .)
    LIST            reduce using rule 24 (inner_statement -> statement .)
    ARRAY           reduce using rule 24 (inner_statement -> statement .)
    PLUS            reduce using rule 24 (inner_statement -> statement .)
    MINUS           reduce using rule 24 (inner_statement -> statement .)
    NOT             reduce using rule 24 (inner_statement -> statement .)
    BOOLEAN_NOT     reduce using rule 24 (inner_statement -> statement .)
    INC             reduce using rule 24 (inner_statement -> statement .)
    DEC             reduce using rule 24 (inner_statement -> statement .)
    INT_CAST        reduce using rule 24 (inner_statement -> statement .)
    DOUBLE_CAST     reduce using rule 24 (inner_statement -> statement .)
    STRING_CAST     reduce using rule 24 (inner_statement -> statement .)
    ARRAY_CAST      reduce using rule 24 (inner_statement -> statement .)
    OBJECT_CAST     reduce using rule 24 (inner_statement -> statement .)
    BOOL_CAST       reduce using rule 24 (inner_statement -> statement .)
    UNSET_CAST      reduce using rule 24 (inner_statement -> statement .)
    ISSET           reduce using rule 24 (inner_statement -> statement .)
    EMPTY           reduce using rule 24 (inner_statement -> statement .)
    EVAL            reduce using rule 24 (inner_statement -> statement .)
    INCLUDE         reduce using rule 24 (inner_statement -> statement .)
    INCLUDE_ONCE    reduce using rule 24 (inner_statement -> statement .)
    REQUIRE         reduce using rule 24 (inner_statement -> statement .)
    REQUIRE_ONCE    reduce using rule 24 (inner_statement -> statement .)
    EXIT            reduce using rule 24 (inner_statement -> statement .)
    PRINT           reduce using rule 24 (inner_statement -> statement .)
    AT              reduce using rule 24 (inner_statement -> statement .)
    LPAREN          reduce using rule 24 (inner_statement -> statement .)
    CLASS           reduce using rule 24 (inner_statement -> statement .)
    ABSTRACT        reduce using rule 24 (inner_statement -> statement .)
    FINAL           reduce using rule 24 (inner_statement -> statement .)
    QUOTE           reduce using rule 24 (inner_statement -> statement .)
    START_HEREDOC   reduce using rule 24 (inner_statement -> statement .)
    STRING_VARNAME  reduce using rule 24 (inner_statement -> statement .)
    NS_SEPARATOR    reduce using rule 24 (inner_statement -> statement .)
    NAMESPACE       reduce using rule 24 (inner_statement -> statement .)
    LNUMBER         reduce using rule 24 (inner_statement -> statement .)
    DNUMBER         reduce using rule 24 (inner_statement -> statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 24 (inner_statement -> statement .)
    LINE            reduce using rule 24 (inner_statement -> statement .)
    FILE            reduce using rule 24 (inner_statement -> statement .)
    DIR             reduce using rule 24 (inner_statement -> statement .)
    CLASS_C         reduce using rule 24 (inner_statement -> statement .)
    METHOD_C        reduce using rule 24 (inner_statement -> statement .)
    FUNC_C          reduce using rule 24 (inner_statement -> statement .)
    NS_C            reduce using rule 24 (inner_statement -> statement .)
    STRING          reduce using rule 24 (inner_statement -> statement .)
    DOLLAR          reduce using rule 24 (inner_statement -> statement .)
    VARIABLE        reduce using rule 24 (inner_statement -> statement .)
    ELSEIF          reduce using rule 24 (inner_statement -> statement .)
    ELSE            reduce using rule 24 (inner_statement -> statement .)
    ENDIF           reduce using rule 24 (inner_statement -> statement .)
    RBRACE          reduce using rule 24 (inner_statement -> statement .)
    ENDWHILE        reduce using rule 24 (inner_statement -> statement .)
    CASE            reduce using rule 24 (inner_statement -> statement .)
    DEFAULT         reduce using rule 24 (inner_statement -> statement .)
    ENDSWITCH       reduce using rule 24 (inner_statement -> statement .)
    ENDFOR          reduce using rule 24 (inner_statement -> statement .)
    ENDFOREACH      reduce using rule 24 (inner_statement -> statement .)


state 289

    (26) inner_statement -> class_declaration_statement .

    ENDDECLARE      reduce using rule 26 (inner_statement -> class_declaration_statement .)
    HALT_COMPILER   reduce using rule 26 (inner_statement -> class_declaration_statement .)
    LBRACE          reduce using rule 26 (inner_statement -> class_declaration_statement .)
    IF              reduce using rule 26 (inner_statement -> class_declaration_statement .)
    WHILE           reduce using rule 26 (inner_statement -> class_declaration_statement .)
    DO              reduce using rule 26 (inner_statement -> class_declaration_statement .)
    FOR             reduce using rule 26 (inner_statement -> class_declaration_statement .)
    FOREACH         reduce using rule 26 (inner_statement -> class_declaration_statement .)
    SWITCH          reduce using rule 26 (inner_statement -> class_declaration_statement .)
    BREAK           reduce using rule 26 (inner_statement -> class_declaration_statement .)
    CONTINUE        reduce using rule 26 (inner_statement -> class_declaration_statement .)
    RETURN          reduce using rule 26 (inner_statement -> class_declaration_statement .)
    GLOBAL          reduce using rule 26 (inner_statement -> class_declaration_statement .)
    STATIC          reduce using rule 26 (inner_statement -> class_declaration_statement .)
    ECHO            reduce using rule 26 (inner_statement -> class_declaration_statement .)
    INLINE_HTML     reduce using rule 26 (inner_statement -> class_declaration_statement .)
    UNSET           reduce using rule 26 (inner_statement -> class_declaration_statement .)
    SEMI            reduce using rule 26 (inner_statement -> class_declaration_statement .)
    TRY             reduce using rule 26 (inner_statement -> class_declaration_statement .)
    THROW           reduce using rule 26 (inner_statement -> class_declaration_statement .)
    DECLARE         reduce using rule 26 (inner_statement -> class_declaration_statement .)
    FUNCTION        reduce using rule 26 (inner_statement -> class_declaration_statement .)
    INTERFACE       reduce using rule 26 (inner_statement -> class_declaration_statement .)
    NEW             reduce using rule 26 (inner_statement -> class_declaration_statement .)
    CLONE           reduce using rule 26 (inner_statement -> class_declaration_statement .)
    LIST            reduce using rule 26 (inner_statement -> class_declaration_statement .)
    ARRAY           reduce using rule 26 (inner_statement -> class_declaration_statement .)
    PLUS            reduce using rule 26 (inner_statement -> class_declaration_statement .)
    MINUS           reduce using rule 26 (inner_statement -> class_declaration_statement .)
    NOT             reduce using rule 26 (inner_statement -> class_declaration_statement .)
    BOOLEAN_NOT     reduce using rule 26 (inner_statement -> class_declaration_statement .)
    INC             reduce using rule 26 (inner_statement -> class_declaration_statement .)
    DEC             reduce using rule 26 (inner_statement -> class_declaration_statement .)
    INT_CAST        reduce using rule 26 (inner_statement -> class_declaration_statement .)
    DOUBLE_CAST     reduce using rule 26 (inner_statement -> class_declaration_statement .)
    STRING_CAST     reduce using rule 26 (inner_statement -> class_declaration_statement .)
    ARRAY_CAST      reduce using rule 26 (inner_statement -> class_declaration_statement .)
    OBJECT_CAST     reduce using rule 26 (inner_statement -> class_declaration_statement .)
    BOOL_CAST       reduce using rule 26 (inner_statement -> class_declaration_statement .)
    UNSET_CAST      reduce using rule 26 (inner_statement -> class_declaration_statement .)
    ISSET           reduce using rule 26 (inner_statement -> class_declaration_statement .)
    EMPTY           reduce using rule 26 (inner_statement -> class_declaration_statement .)
    EVAL            reduce using rule 26 (inner_statement -> class_declaration_statement .)
    INCLUDE         reduce using rule 26 (inner_statement -> class_declaration_statement .)
    INCLUDE_ONCE    reduce using rule 26 (inner_statement -> class_declaration_statement .)
    REQUIRE         reduce using rule 26 (inner_statement -> class_declaration_statement .)
    REQUIRE_ONCE    reduce using rule 26 (inner_statement -> class_declaration_statement .)
    EXIT            reduce using rule 26 (inner_statement -> class_declaration_statement .)
    PRINT           reduce using rule 26 (inner_statement -> class_declaration_statement .)
    AT              reduce using rule 26 (inner_statement -> class_declaration_statement .)
    LPAREN          reduce using rule 26 (inner_statement -> class_declaration_statement .)
    CLASS           reduce using rule 26 (inner_statement -> class_declaration_statement .)
    ABSTRACT        reduce using rule 26 (inner_statement -> class_declaration_statement .)
    FINAL           reduce using rule 26 (inner_statement -> class_declaration_statement .)
    QUOTE           reduce using rule 26 (inner_statement -> class_declaration_statement .)
    START_HEREDOC   reduce using rule 26 (inner_statement -> class_declaration_statement .)
    STRING_VARNAME  reduce using rule 26 (inner_statement -> class_declaration_statement .)
    NS_SEPARATOR    reduce using rule 26 (inner_statement -> class_declaration_statement .)
    NAMESPACE       reduce using rule 26 (inner_statement -> class_declaration_statement .)
    LNUMBER         reduce using rule 26 (inner_statement -> class_declaration_statement .)
    DNUMBER         reduce using rule 26 (inner_statement -> class_declaration_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 26 (inner_statement -> class_declaration_statement .)
    LINE            reduce using rule 26 (inner_statement -> class_declaration_statement .)
    FILE            reduce using rule 26 (inner_statement -> class_declaration_statement .)
    DIR             reduce using rule 26 (inner_statement -> class_declaration_statement .)
    CLASS_C         reduce using rule 26 (inner_statement -> class_declaration_statement .)
    METHOD_C        reduce using rule 26 (inner_statement -> class_declaration_statement .)
    FUNC_C          reduce using rule 26 (inner_statement -> class_declaration_statement .)
    NS_C            reduce using rule 26 (inner_statement -> class_declaration_statement .)
    STRING          reduce using rule 26 (inner_statement -> class_declaration_statement .)
    DOLLAR          reduce using rule 26 (inner_statement -> class_declaration_statement .)
    VARIABLE        reduce using rule 26 (inner_statement -> class_declaration_statement .)
    ELSEIF          reduce using rule 26 (inner_statement -> class_declaration_statement .)
    ELSE            reduce using rule 26 (inner_statement -> class_declaration_statement .)
    ENDIF           reduce using rule 26 (inner_statement -> class_declaration_statement .)
    RBRACE          reduce using rule 26 (inner_statement -> class_declaration_statement .)
    ENDWHILE        reduce using rule 26 (inner_statement -> class_declaration_statement .)
    CASE            reduce using rule 26 (inner_statement -> class_declaration_statement .)
    DEFAULT         reduce using rule 26 (inner_statement -> class_declaration_statement .)
    ENDSWITCH       reduce using rule 26 (inner_statement -> class_declaration_statement .)
    ENDFOR          reduce using rule 26 (inner_statement -> class_declaration_statement .)
    ENDFOREACH      reduce using rule 26 (inner_statement -> class_declaration_statement .)


state 290

    (39) statement -> CONTINUE expr SEMI .

    HALT_COMPILER   reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    NAMESPACE       reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    CONST           reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    USE             reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    LBRACE          reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    IF              reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    WHILE           reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    DO              reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    FOR             reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    FOREACH         reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    SWITCH          reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    BREAK           reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    CONTINUE        reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    RETURN          reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    GLOBAL          reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    STATIC          reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    ECHO            reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    INLINE_HTML     reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    UNSET           reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    SEMI            reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    TRY             reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    THROW           reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    DECLARE         reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    FUNCTION        reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    INTERFACE       reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    NEW             reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    CLONE           reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    LIST            reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    ARRAY           reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    PLUS            reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    MINUS           reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    NOT             reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    BOOLEAN_NOT     reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    INC             reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    DEC             reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    INT_CAST        reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    DOUBLE_CAST     reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    STRING_CAST     reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    ARRAY_CAST      reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    OBJECT_CAST     reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    BOOL_CAST       reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    UNSET_CAST      reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    ISSET           reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    EMPTY           reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    EVAL            reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    INCLUDE         reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    INCLUDE_ONCE    reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    REQUIRE         reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    REQUIRE_ONCE    reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    EXIT            reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    PRINT           reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    AT              reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    LPAREN          reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    CLASS           reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    ABSTRACT        reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    FINAL           reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    QUOTE           reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    START_HEREDOC   reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    STRING_VARNAME  reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    NS_SEPARATOR    reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    LNUMBER         reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    DNUMBER         reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    LINE            reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    FILE            reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    DIR             reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    CLASS_C         reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    METHOD_C        reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    FUNC_C          reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    NS_C            reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    STRING          reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    DOLLAR          reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    VARIABLE        reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    $end            reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    RBRACE          reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    ELSEIF          reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    ELSE            reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    ENDDECLARE      reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    ENDWHILE        reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    ENDIF           reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    ENDFOREACH      reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    CASE            reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    DEFAULT         reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    ENDSWITCH       reduce using rule 39 (statement -> CONTINUE expr SEMI .)
    ENDFOR          reduce using rule 39 (statement -> CONTINUE expr SEMI .)


state 291

    (359) encaps_var -> CURLY_OPEN . variable RBRACE
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NS_SEPARATOR    shift and go to state 129
    NAMESPACE       shift and go to state 128
    DOLLAR          shift and go to state 90
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    VARIABLE        shift and go to state 56

    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    compound_variable              shift and go to state 72
    class_name                     shift and go to state 124
    variable_class_name            shift and go to state 127
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 126
    static_member                  shift and go to state 86
    variable                       shift and go to state 447
    namespace_name                 shift and go to state 130

state 292

    (316) scalar -> QUOTE encaps_list QUOTE .

    BOOLEAN_AND     reduce using rule 316 (scalar -> QUOTE encaps_list QUOTE .)
    BOOLEAN_OR      reduce using rule 316 (scalar -> QUOTE encaps_list QUOTE .)
    LOGICAL_AND     reduce using rule 316 (scalar -> QUOTE encaps_list QUOTE .)
    LOGICAL_OR      reduce using rule 316 (scalar -> QUOTE encaps_list QUOTE .)
    LOGICAL_XOR     reduce using rule 316 (scalar -> QUOTE encaps_list QUOTE .)
    AND             reduce using rule 316 (scalar -> QUOTE encaps_list QUOTE .)
    OR              reduce using rule 316 (scalar -> QUOTE encaps_list QUOTE .)
    XOR             reduce using rule 316 (scalar -> QUOTE encaps_list QUOTE .)
    CONCAT          reduce using rule 316 (scalar -> QUOTE encaps_list QUOTE .)
    PLUS            reduce using rule 316 (scalar -> QUOTE encaps_list QUOTE .)
    MINUS           reduce using rule 316 (scalar -> QUOTE encaps_list QUOTE .)
    MUL             reduce using rule 316 (scalar -> QUOTE encaps_list QUOTE .)
    DIV             reduce using rule 316 (scalar -> QUOTE encaps_list QUOTE .)
    SL              reduce using rule 316 (scalar -> QUOTE encaps_list QUOTE .)
    SR              reduce using rule 316 (scalar -> QUOTE encaps_list QUOTE .)
    MOD             reduce using rule 316 (scalar -> QUOTE encaps_list QUOTE .)
    IS_IDENTICAL    reduce using rule 316 (scalar -> QUOTE encaps_list QUOTE .)
    IS_NOT_IDENTICAL reduce using rule 316 (scalar -> QUOTE encaps_list QUOTE .)
    IS_EQUAL        reduce using rule 316 (scalar -> QUOTE encaps_list QUOTE .)
    IS_NOT_EQUAL    reduce using rule 316 (scalar -> QUOTE encaps_list QUOTE .)
    IS_SMALLER      reduce using rule 316 (scalar -> QUOTE encaps_list QUOTE .)
    IS_SMALLER_OR_EQUAL reduce using rule 316 (scalar -> QUOTE encaps_list QUOTE .)
    IS_GREATER      reduce using rule 316 (scalar -> QUOTE encaps_list QUOTE .)
    IS_GREATER_OR_EQUAL reduce using rule 316 (scalar -> QUOTE encaps_list QUOTE .)
    INSTANCEOF      reduce using rule 316 (scalar -> QUOTE encaps_list QUOTE .)
    QUESTION        reduce using rule 316 (scalar -> QUOTE encaps_list QUOTE .)
    RPAREN          reduce using rule 316 (scalar -> QUOTE encaps_list QUOTE .)
    COMMA           reduce using rule 316 (scalar -> QUOTE encaps_list QUOTE .)
    SEMI            reduce using rule 316 (scalar -> QUOTE encaps_list QUOTE .)
    AS              reduce using rule 316 (scalar -> QUOTE encaps_list QUOTE .)
    RBRACE          reduce using rule 316 (scalar -> QUOTE encaps_list QUOTE .)
    RBRACKET        reduce using rule 316 (scalar -> QUOTE encaps_list QUOTE .)
    DOUBLE_ARROW    reduce using rule 316 (scalar -> QUOTE encaps_list QUOTE .)
    COLON           reduce using rule 316 (scalar -> QUOTE encaps_list QUOTE .)


state 293

    (351) encaps_list -> encaps_list encaps_var .

    QUOTE           reduce using rule 351 (encaps_list -> encaps_list encaps_var .)
    ENCAPSED_AND_WHITESPACE reduce using rule 351 (encaps_list -> encaps_list encaps_var .)
    VARIABLE        reduce using rule 351 (encaps_list -> encaps_list encaps_var .)
    DOLLAR_OPEN_CURLY_BRACES reduce using rule 351 (encaps_list -> encaps_list encaps_var .)
    CURLY_OPEN      reduce using rule 351 (encaps_list -> encaps_list encaps_var .)
    END_HEREDOC     reduce using rule 351 (encaps_list -> encaps_list encaps_var .)


state 294

    (353) encaps_list -> encaps_list ENCAPSED_AND_WHITESPACE .

    QUOTE           reduce using rule 353 (encaps_list -> encaps_list ENCAPSED_AND_WHITESPACE .)
    ENCAPSED_AND_WHITESPACE reduce using rule 353 (encaps_list -> encaps_list ENCAPSED_AND_WHITESPACE .)
    VARIABLE        reduce using rule 353 (encaps_list -> encaps_list ENCAPSED_AND_WHITESPACE .)
    DOLLAR_OPEN_CURLY_BRACES reduce using rule 353 (encaps_list -> encaps_list ENCAPSED_AND_WHITESPACE .)
    CURLY_OPEN      reduce using rule 353 (encaps_list -> encaps_list ENCAPSED_AND_WHITESPACE .)
    END_HEREDOC     reduce using rule 353 (encaps_list -> encaps_list ENCAPSED_AND_WHITESPACE .)


state 295

    (354) encaps_var -> VARIABLE .
    (355) encaps_var -> VARIABLE . LBRACKET encaps_var_offset RBRACKET
    (356) encaps_var -> VARIABLE . OBJECT_OPERATOR STRING

    QUOTE           reduce using rule 354 (encaps_var -> VARIABLE .)
    ENCAPSED_AND_WHITESPACE reduce using rule 354 (encaps_var -> VARIABLE .)
    VARIABLE        reduce using rule 354 (encaps_var -> VARIABLE .)
    DOLLAR_OPEN_CURLY_BRACES reduce using rule 354 (encaps_var -> VARIABLE .)
    CURLY_OPEN      reduce using rule 354 (encaps_var -> VARIABLE .)
    END_HEREDOC     reduce using rule 354 (encaps_var -> VARIABLE .)
    LBRACKET        shift and go to state 449
    OBJECT_OPERATOR shift and go to state 448


state 296

    (357) encaps_var -> DOLLAR_OPEN_CURLY_BRACES . expr RBRACE
    (358) encaps_var -> DOLLAR_OPEN_CURLY_BRACES . STRING_VARNAME LBRACKET expr RBRACKET RBRACE
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    STRING_VARNAME  shift and go to state 451
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 450

state 297

    (104) class_declaration_statement -> class_entry_type STRING extends_from . implements_list LBRACE class_statement_list RBRACE
    (114) implements_list -> . IMPLEMENTS interface_list
    (115) implements_list -> . empty
    (363) empty -> .

    IMPLEMENTS      shift and go to state 452
    LBRACE          reduce using rule 363 (empty -> .)

    implements_list                shift and go to state 453
    empty                          shift and go to state 454

state 298

    (110) extends_from -> EXTENDS . fully_qualified_class_name
    (111) fully_qualified_class_name -> . namespace_name
    (112) fully_qualified_class_name -> . NS_SEPARATOR namespace_name
    (113) fully_qualified_class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    NS_SEPARATOR    shift and go to state 409
    NAMESPACE       shift and go to state 408
    STRING          shift and go to state 89

    fully_qualified_class_name     shift and go to state 455
    namespace_name                 shift and go to state 411

state 299

    (109) extends_from -> empty .

    IMPLEMENTS      reduce using rule 109 (extends_from -> empty .)
    LBRACE          reduce using rule 109 (extends_from -> empty .)


state 300

    (190) function_call -> class_name DOUBLE_COLON variable_without_objects . LPAREN function_call_parameter_list RPAREN
    (203) static_member -> class_name DOUBLE_COLON variable_without_objects .

    LPAREN          shift and go to state 456
    OBJECT_OPERATOR reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    EQUALS          reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    PLUS_EQUAL      reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    MINUS_EQUAL     reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    MUL_EQUAL       reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    DIV_EQUAL       reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    CONCAT_EQUAL    reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    MOD_EQUAL       reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    AND_EQUAL       reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    OR_EQUAL        reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    XOR_EQUAL       reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    SL_EQUAL        reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    SR_EQUAL        reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    INC             reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    DEC             reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    BOOLEAN_AND     reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    BOOLEAN_OR      reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    LOGICAL_AND     reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    LOGICAL_OR      reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    LOGICAL_XOR     reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    AND             reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    OR              reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    XOR             reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    CONCAT          reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    PLUS            reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    MINUS           reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    MUL             reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    DIV             reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    SL              reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    SR              reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    MOD             reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    IS_IDENTICAL    reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    IS_NOT_IDENTICAL reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    IS_EQUAL        reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    IS_NOT_EQUAL    reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    IS_SMALLER      reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    IS_SMALLER_OR_EQUAL reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    IS_GREATER      reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    IS_GREATER_OR_EQUAL reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    INSTANCEOF      reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    QUESTION        reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    RBRACKET        reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    SEMI            reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    COMMA           reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    RPAREN          reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    AS              reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    RBRACE          reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    DOUBLE_ARROW    reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    COLON           reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)


state 301

    (322) class_constant -> class_name DOUBLE_COLON STRING .
    (189) function_call -> class_name DOUBLE_COLON STRING . LPAREN function_call_parameter_list RPAREN

    SEMI            reduce using rule 322 (class_constant -> class_name DOUBLE_COLON STRING .)
    BOOLEAN_AND     reduce using rule 322 (class_constant -> class_name DOUBLE_COLON STRING .)
    BOOLEAN_OR      reduce using rule 322 (class_constant -> class_name DOUBLE_COLON STRING .)
    LOGICAL_AND     reduce using rule 322 (class_constant -> class_name DOUBLE_COLON STRING .)
    LOGICAL_OR      reduce using rule 322 (class_constant -> class_name DOUBLE_COLON STRING .)
    LOGICAL_XOR     reduce using rule 322 (class_constant -> class_name DOUBLE_COLON STRING .)
    AND             reduce using rule 322 (class_constant -> class_name DOUBLE_COLON STRING .)
    OR              reduce using rule 322 (class_constant -> class_name DOUBLE_COLON STRING .)
    XOR             reduce using rule 322 (class_constant -> class_name DOUBLE_COLON STRING .)
    CONCAT          reduce using rule 322 (class_constant -> class_name DOUBLE_COLON STRING .)
    PLUS            reduce using rule 322 (class_constant -> class_name DOUBLE_COLON STRING .)
    MINUS           reduce using rule 322 (class_constant -> class_name DOUBLE_COLON STRING .)
    MUL             reduce using rule 322 (class_constant -> class_name DOUBLE_COLON STRING .)
    DIV             reduce using rule 322 (class_constant -> class_name DOUBLE_COLON STRING .)
    SL              reduce using rule 322 (class_constant -> class_name DOUBLE_COLON STRING .)
    SR              reduce using rule 322 (class_constant -> class_name DOUBLE_COLON STRING .)
    MOD             reduce using rule 322 (class_constant -> class_name DOUBLE_COLON STRING .)
    IS_IDENTICAL    reduce using rule 322 (class_constant -> class_name DOUBLE_COLON STRING .)
    IS_NOT_IDENTICAL reduce using rule 322 (class_constant -> class_name DOUBLE_COLON STRING .)
    IS_EQUAL        reduce using rule 322 (class_constant -> class_name DOUBLE_COLON STRING .)
    IS_NOT_EQUAL    reduce using rule 322 (class_constant -> class_name DOUBLE_COLON STRING .)
    IS_SMALLER      reduce using rule 322 (class_constant -> class_name DOUBLE_COLON STRING .)
    IS_SMALLER_OR_EQUAL reduce using rule 322 (class_constant -> class_name DOUBLE_COLON STRING .)
    IS_GREATER      reduce using rule 322 (class_constant -> class_name DOUBLE_COLON STRING .)
    IS_GREATER_OR_EQUAL reduce using rule 322 (class_constant -> class_name DOUBLE_COLON STRING .)
    INSTANCEOF      reduce using rule 322 (class_constant -> class_name DOUBLE_COLON STRING .)
    QUESTION        reduce using rule 322 (class_constant -> class_name DOUBLE_COLON STRING .)
    COMMA           reduce using rule 322 (class_constant -> class_name DOUBLE_COLON STRING .)
    RPAREN          reduce using rule 322 (class_constant -> class_name DOUBLE_COLON STRING .)
    AS              reduce using rule 322 (class_constant -> class_name DOUBLE_COLON STRING .)
    RBRACE          reduce using rule 322 (class_constant -> class_name DOUBLE_COLON STRING .)
    RBRACKET        reduce using rule 322 (class_constant -> class_name DOUBLE_COLON STRING .)
    DOUBLE_ARROW    reduce using rule 322 (class_constant -> class_name DOUBLE_COLON STRING .)
    COLON           reduce using rule 322 (class_constant -> class_name DOUBLE_COLON STRING .)
    LPAREN          shift and go to state 457


state 302

    (92) global_var -> DOLLAR variable .

    SEMI            reduce using rule 92 (global_var -> DOLLAR variable .)
    COMMA           reduce using rule 92 (global_var -> DOLLAR variable .)


state 303

    (93) global_var -> DOLLAR LBRACE . expr RBRACE
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 458

state 304

    (89) global_var_list -> global_var_list COMMA . global_var
    (91) global_var -> . VARIABLE
    (92) global_var -> . DOLLAR variable
    (93) global_var -> . DOLLAR LBRACE expr RBRACE

    VARIABLE        shift and go to state 159
    DOLLAR          shift and go to state 157

    global_var                     shift and go to state 459

state 305

    (42) statement -> GLOBAL global_var_list SEMI .

    HALT_COMPILER   reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    NAMESPACE       reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    CONST           reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    USE             reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    LBRACE          reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    IF              reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    WHILE           reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    DO              reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    FOR             reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    FOREACH         reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    SWITCH          reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    BREAK           reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    CONTINUE        reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    RETURN          reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    GLOBAL          reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    STATIC          reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    ECHO            reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    INLINE_HTML     reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    UNSET           reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    SEMI            reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    TRY             reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    THROW           reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    DECLARE         reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    FUNCTION        reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    INTERFACE       reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    NEW             reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    CLONE           reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    LIST            reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    ARRAY           reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    PLUS            reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    MINUS           reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    NOT             reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    BOOLEAN_NOT     reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    INC             reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    DEC             reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    INT_CAST        reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    DOUBLE_CAST     reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    STRING_CAST     reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    ARRAY_CAST      reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    OBJECT_CAST     reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    BOOL_CAST       reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    UNSET_CAST      reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    ISSET           reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    EMPTY           reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    EVAL            reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    INCLUDE         reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    INCLUDE_ONCE    reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    REQUIRE         reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    REQUIRE_ONCE    reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    EXIT            reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    PRINT           reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    AT              reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    LPAREN          reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    CLASS           reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    ABSTRACT        reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    FINAL           reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    QUOTE           reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    START_HEREDOC   reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    STRING_VARNAME  reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    NS_SEPARATOR    reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    LNUMBER         reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    DNUMBER         reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    LINE            reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    FILE            reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    DIR             reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    CLASS_C         reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    METHOD_C        reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    FUNC_C          reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    NS_C            reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    STRING          reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    DOLLAR          reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    VARIABLE        reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    $end            reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    RBRACE          reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    ELSEIF          reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    ELSE            reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    ENDDECLARE      reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    ENDWHILE        reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    ENDIF           reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    ENDFOREACH      reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    CASE            reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    DEFAULT         reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    ENDSWITCH       reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)
    ENDFOR          reduce using rule 42 (statement -> GLOBAL global_var_list SEMI .)


state 306

    (31) statement -> WHILE LPAREN expr . RPAREN while_statement
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    RPAREN          shift and go to state 460
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    LOGICAL_AND     shift and go to state 181
    LOGICAL_OR      shift and go to state 202
    LOGICAL_XOR     shift and go to state 200
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188


state 307

    (203) static_member -> class_name DOUBLE_COLON . variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    variable_without_objects       shift and go to state 461
    compound_variable              shift and go to state 72
    reference_variable             shift and go to state 224
    simple_indirect_reference      shift and go to state 276

state 308

    (168) dynamic_class_name_reference -> base_variable OBJECT_OPERATOR . object_property dynamic_class_name_variable_properties
    (213) object_property -> . variable_name object_dim_list
    (214) object_property -> . variable_without_objects
    (218) variable_name -> . STRING
    (219) variable_name -> . LBRACE expr RBRACE
    (220) variable_without_objects -> . simple_indirect_reference
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    STRING          shift and go to state 274
    LBRACE          shift and go to state 272
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    variable_without_objects       shift and go to state 271
    object_property                shift and go to state 462
    compound_variable              shift and go to state 72
    reference_variable             shift and go to state 224
    variable_name                  shift and go to state 275
    simple_indirect_reference      shift and go to state 276

state 309

    (161) expr -> NEW class_name_reference ctor_arguments .

    AS              reduce using rule 161 (expr -> NEW class_name_reference ctor_arguments .)
    BOOLEAN_AND     reduce using rule 161 (expr -> NEW class_name_reference ctor_arguments .)
    BOOLEAN_OR      reduce using rule 161 (expr -> NEW class_name_reference ctor_arguments .)
    LOGICAL_AND     reduce using rule 161 (expr -> NEW class_name_reference ctor_arguments .)
    LOGICAL_OR      reduce using rule 161 (expr -> NEW class_name_reference ctor_arguments .)
    LOGICAL_XOR     reduce using rule 161 (expr -> NEW class_name_reference ctor_arguments .)
    AND             reduce using rule 161 (expr -> NEW class_name_reference ctor_arguments .)
    OR              reduce using rule 161 (expr -> NEW class_name_reference ctor_arguments .)
    XOR             reduce using rule 161 (expr -> NEW class_name_reference ctor_arguments .)
    CONCAT          reduce using rule 161 (expr -> NEW class_name_reference ctor_arguments .)
    PLUS            reduce using rule 161 (expr -> NEW class_name_reference ctor_arguments .)
    MINUS           reduce using rule 161 (expr -> NEW class_name_reference ctor_arguments .)
    MUL             reduce using rule 161 (expr -> NEW class_name_reference ctor_arguments .)
    DIV             reduce using rule 161 (expr -> NEW class_name_reference ctor_arguments .)
    SL              reduce using rule 161 (expr -> NEW class_name_reference ctor_arguments .)
    SR              reduce using rule 161 (expr -> NEW class_name_reference ctor_arguments .)
    MOD             reduce using rule 161 (expr -> NEW class_name_reference ctor_arguments .)
    IS_IDENTICAL    reduce using rule 161 (expr -> NEW class_name_reference ctor_arguments .)
    IS_NOT_IDENTICAL reduce using rule 161 (expr -> NEW class_name_reference ctor_arguments .)
    IS_EQUAL        reduce using rule 161 (expr -> NEW class_name_reference ctor_arguments .)
    IS_NOT_EQUAL    reduce using rule 161 (expr -> NEW class_name_reference ctor_arguments .)
    IS_SMALLER      reduce using rule 161 (expr -> NEW class_name_reference ctor_arguments .)
    IS_SMALLER_OR_EQUAL reduce using rule 161 (expr -> NEW class_name_reference ctor_arguments .)
    IS_GREATER      reduce using rule 161 (expr -> NEW class_name_reference ctor_arguments .)
    IS_GREATER_OR_EQUAL reduce using rule 161 (expr -> NEW class_name_reference ctor_arguments .)
    INSTANCEOF      reduce using rule 161 (expr -> NEW class_name_reference ctor_arguments .)
    QUESTION        reduce using rule 161 (expr -> NEW class_name_reference ctor_arguments .)
    SEMI            reduce using rule 161 (expr -> NEW class_name_reference ctor_arguments .)
    COMMA           reduce using rule 161 (expr -> NEW class_name_reference ctor_arguments .)
    RPAREN          reduce using rule 161 (expr -> NEW class_name_reference ctor_arguments .)
    RBRACE          reduce using rule 161 (expr -> NEW class_name_reference ctor_arguments .)
    RBRACKET        reduce using rule 161 (expr -> NEW class_name_reference ctor_arguments .)
    DOUBLE_ARROW    reduce using rule 161 (expr -> NEW class_name_reference ctor_arguments .)
    COLON           reduce using rule 161 (expr -> NEW class_name_reference ctor_arguments .)


state 310

    (173) ctor_arguments -> LPAREN . function_call_parameter_list RPAREN
    (235) function_call_parameter_list -> . function_call_parameter_list COMMA function_call_parameter
    (236) function_call_parameter_list -> . function_call_parameter
    (237) function_call_parameter_list -> . empty
    (238) function_call_parameter -> . expr
    (239) function_call_parameter -> . AND variable
    (363) empty -> .
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    AND             shift and go to state 330
    RPAREN          reduce using rule 363 (empty -> .)
    COMMA           reduce using rule 363 (empty -> .)
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    function_call_parameter_list   shift and go to state 463
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    empty                          shift and go to state 331
    function_call_parameter        shift and go to state 332
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 329

state 311

    (174) ctor_arguments -> empty .

    SEMI            reduce using rule 174 (ctor_arguments -> empty .)
    BOOLEAN_AND     reduce using rule 174 (ctor_arguments -> empty .)
    BOOLEAN_OR      reduce using rule 174 (ctor_arguments -> empty .)
    LOGICAL_AND     reduce using rule 174 (ctor_arguments -> empty .)
    LOGICAL_OR      reduce using rule 174 (ctor_arguments -> empty .)
    LOGICAL_XOR     reduce using rule 174 (ctor_arguments -> empty .)
    AND             reduce using rule 174 (ctor_arguments -> empty .)
    OR              reduce using rule 174 (ctor_arguments -> empty .)
    XOR             reduce using rule 174 (ctor_arguments -> empty .)
    CONCAT          reduce using rule 174 (ctor_arguments -> empty .)
    PLUS            reduce using rule 174 (ctor_arguments -> empty .)
    MINUS           reduce using rule 174 (ctor_arguments -> empty .)
    MUL             reduce using rule 174 (ctor_arguments -> empty .)
    DIV             reduce using rule 174 (ctor_arguments -> empty .)
    SL              reduce using rule 174 (ctor_arguments -> empty .)
    SR              reduce using rule 174 (ctor_arguments -> empty .)
    MOD             reduce using rule 174 (ctor_arguments -> empty .)
    IS_IDENTICAL    reduce using rule 174 (ctor_arguments -> empty .)
    IS_NOT_IDENTICAL reduce using rule 174 (ctor_arguments -> empty .)
    IS_EQUAL        reduce using rule 174 (ctor_arguments -> empty .)
    IS_NOT_EQUAL    reduce using rule 174 (ctor_arguments -> empty .)
    IS_SMALLER      reduce using rule 174 (ctor_arguments -> empty .)
    IS_SMALLER_OR_EQUAL reduce using rule 174 (ctor_arguments -> empty .)
    IS_GREATER      reduce using rule 174 (ctor_arguments -> empty .)
    IS_GREATER_OR_EQUAL reduce using rule 174 (ctor_arguments -> empty .)
    INSTANCEOF      reduce using rule 174 (ctor_arguments -> empty .)
    QUESTION        reduce using rule 174 (ctor_arguments -> empty .)
    COMMA           reduce using rule 174 (ctor_arguments -> empty .)
    RPAREN          reduce using rule 174 (ctor_arguments -> empty .)
    AS              reduce using rule 174 (ctor_arguments -> empty .)
    RBRACE          reduce using rule 174 (ctor_arguments -> empty .)
    RBRACKET        reduce using rule 174 (ctor_arguments -> empty .)
    DOUBLE_ARROW    reduce using rule 174 (ctor_arguments -> empty .)
    COLON           reduce using rule 174 (ctor_arguments -> empty .)


state 312

    (166) class_name -> NAMESPACE NS_SEPARATOR . namespace_name
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    STRING          shift and go to state 89

    namespace_name                 shift and go to state 464

state 313

    (204) static_member -> variable_class_name DOUBLE_COLON . variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    variable_without_objects       shift and go to state 465
    compound_variable              shift and go to state 72
    reference_variable             shift and go to state 224
    simple_indirect_reference      shift and go to state 276

state 314

    (165) class_name -> NS_SEPARATOR namespace_name .
    (349) namespace_name -> namespace_name . NS_SEPARATOR STRING

    VARIABLE        reduce using rule 165 (class_name -> NS_SEPARATOR namespace_name .)
    AND             reduce using rule 165 (class_name -> NS_SEPARATOR namespace_name .)
    DOUBLE_COLON    reduce using rule 165 (class_name -> NS_SEPARATOR namespace_name .)
    LPAREN          reduce using rule 165 (class_name -> NS_SEPARATOR namespace_name .)
    SEMI            reduce using rule 165 (class_name -> NS_SEPARATOR namespace_name .)
    BOOLEAN_AND     reduce using rule 165 (class_name -> NS_SEPARATOR namespace_name .)
    BOOLEAN_OR      reduce using rule 165 (class_name -> NS_SEPARATOR namespace_name .)
    LOGICAL_AND     reduce using rule 165 (class_name -> NS_SEPARATOR namespace_name .)
    LOGICAL_OR      reduce using rule 165 (class_name -> NS_SEPARATOR namespace_name .)
    LOGICAL_XOR     reduce using rule 165 (class_name -> NS_SEPARATOR namespace_name .)
    OR              reduce using rule 165 (class_name -> NS_SEPARATOR namespace_name .)
    XOR             reduce using rule 165 (class_name -> NS_SEPARATOR namespace_name .)
    CONCAT          reduce using rule 165 (class_name -> NS_SEPARATOR namespace_name .)
    PLUS            reduce using rule 165 (class_name -> NS_SEPARATOR namespace_name .)
    MINUS           reduce using rule 165 (class_name -> NS_SEPARATOR namespace_name .)
    MUL             reduce using rule 165 (class_name -> NS_SEPARATOR namespace_name .)
    DIV             reduce using rule 165 (class_name -> NS_SEPARATOR namespace_name .)
    SL              reduce using rule 165 (class_name -> NS_SEPARATOR namespace_name .)
    SR              reduce using rule 165 (class_name -> NS_SEPARATOR namespace_name .)
    MOD             reduce using rule 165 (class_name -> NS_SEPARATOR namespace_name .)
    IS_IDENTICAL    reduce using rule 165 (class_name -> NS_SEPARATOR namespace_name .)
    IS_NOT_IDENTICAL reduce using rule 165 (class_name -> NS_SEPARATOR namespace_name .)
    IS_EQUAL        reduce using rule 165 (class_name -> NS_SEPARATOR namespace_name .)
    IS_NOT_EQUAL    reduce using rule 165 (class_name -> NS_SEPARATOR namespace_name .)
    IS_SMALLER      reduce using rule 165 (class_name -> NS_SEPARATOR namespace_name .)
    IS_SMALLER_OR_EQUAL reduce using rule 165 (class_name -> NS_SEPARATOR namespace_name .)
    IS_GREATER      reduce using rule 165 (class_name -> NS_SEPARATOR namespace_name .)
    IS_GREATER_OR_EQUAL reduce using rule 165 (class_name -> NS_SEPARATOR namespace_name .)
    INSTANCEOF      reduce using rule 165 (class_name -> NS_SEPARATOR namespace_name .)
    QUESTION        reduce using rule 165 (class_name -> NS_SEPARATOR namespace_name .)
    COMMA           reduce using rule 165 (class_name -> NS_SEPARATOR namespace_name .)
    RPAREN          reduce using rule 165 (class_name -> NS_SEPARATOR namespace_name .)
    AS              reduce using rule 165 (class_name -> NS_SEPARATOR namespace_name .)
    RBRACE          reduce using rule 165 (class_name -> NS_SEPARATOR namespace_name .)
    RBRACKET        reduce using rule 165 (class_name -> NS_SEPARATOR namespace_name .)
    DOUBLE_ARROW    reduce using rule 165 (class_name -> NS_SEPARATOR namespace_name .)
    COLON           reduce using rule 165 (class_name -> NS_SEPARATOR namespace_name .)
    NS_SEPARATOR    shift and go to state 178


state 315

    (317) scalar -> START_HEREDOC encaps_list END_HEREDOC .

    BOOLEAN_AND     reduce using rule 317 (scalar -> START_HEREDOC encaps_list END_HEREDOC .)
    BOOLEAN_OR      reduce using rule 317 (scalar -> START_HEREDOC encaps_list END_HEREDOC .)
    LOGICAL_AND     reduce using rule 317 (scalar -> START_HEREDOC encaps_list END_HEREDOC .)
    LOGICAL_OR      reduce using rule 317 (scalar -> START_HEREDOC encaps_list END_HEREDOC .)
    LOGICAL_XOR     reduce using rule 317 (scalar -> START_HEREDOC encaps_list END_HEREDOC .)
    AND             reduce using rule 317 (scalar -> START_HEREDOC encaps_list END_HEREDOC .)
    OR              reduce using rule 317 (scalar -> START_HEREDOC encaps_list END_HEREDOC .)
    XOR             reduce using rule 317 (scalar -> START_HEREDOC encaps_list END_HEREDOC .)
    CONCAT          reduce using rule 317 (scalar -> START_HEREDOC encaps_list END_HEREDOC .)
    PLUS            reduce using rule 317 (scalar -> START_HEREDOC encaps_list END_HEREDOC .)
    MINUS           reduce using rule 317 (scalar -> START_HEREDOC encaps_list END_HEREDOC .)
    MUL             reduce using rule 317 (scalar -> START_HEREDOC encaps_list END_HEREDOC .)
    DIV             reduce using rule 317 (scalar -> START_HEREDOC encaps_list END_HEREDOC .)
    SL              reduce using rule 317 (scalar -> START_HEREDOC encaps_list END_HEREDOC .)
    SR              reduce using rule 317 (scalar -> START_HEREDOC encaps_list END_HEREDOC .)
    MOD             reduce using rule 317 (scalar -> START_HEREDOC encaps_list END_HEREDOC .)
    IS_IDENTICAL    reduce using rule 317 (scalar -> START_HEREDOC encaps_list END_HEREDOC .)
    IS_NOT_IDENTICAL reduce using rule 317 (scalar -> START_HEREDOC encaps_list END_HEREDOC .)
    IS_EQUAL        reduce using rule 317 (scalar -> START_HEREDOC encaps_list END_HEREDOC .)
    IS_NOT_EQUAL    reduce using rule 317 (scalar -> START_HEREDOC encaps_list END_HEREDOC .)
    IS_SMALLER      reduce using rule 317 (scalar -> START_HEREDOC encaps_list END_HEREDOC .)
    IS_SMALLER_OR_EQUAL reduce using rule 317 (scalar -> START_HEREDOC encaps_list END_HEREDOC .)
    IS_GREATER      reduce using rule 317 (scalar -> START_HEREDOC encaps_list END_HEREDOC .)
    IS_GREATER_OR_EQUAL reduce using rule 317 (scalar -> START_HEREDOC encaps_list END_HEREDOC .)
    INSTANCEOF      reduce using rule 317 (scalar -> START_HEREDOC encaps_list END_HEREDOC .)
    QUESTION        reduce using rule 317 (scalar -> START_HEREDOC encaps_list END_HEREDOC .)
    RPAREN          reduce using rule 317 (scalar -> START_HEREDOC encaps_list END_HEREDOC .)
    COMMA           reduce using rule 317 (scalar -> START_HEREDOC encaps_list END_HEREDOC .)
    SEMI            reduce using rule 317 (scalar -> START_HEREDOC encaps_list END_HEREDOC .)
    AS              reduce using rule 317 (scalar -> START_HEREDOC encaps_list END_HEREDOC .)
    RBRACE          reduce using rule 317 (scalar -> START_HEREDOC encaps_list END_HEREDOC .)
    RBRACKET        reduce using rule 317 (scalar -> START_HEREDOC encaps_list END_HEREDOC .)
    DOUBLE_ARROW    reduce using rule 317 (scalar -> START_HEREDOC encaps_list END_HEREDOC .)
    COLON           reduce using rule 317 (scalar -> START_HEREDOC encaps_list END_HEREDOC .)


state 316

    (35) statement -> SWITCH LPAREN expr . RPAREN switch_case_list
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    RPAREN          shift and go to state 466
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    LOGICAL_AND     shift and go to state 181
    LOGICAL_OR      shift and go to state 202
    LOGICAL_XOR     shift and go to state 200
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188


state 317

    (207) reference_variable -> reference_variable LBRACE expr . RBRACE
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    RBRACE          shift and go to state 467
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    LOGICAL_AND     shift and go to state 181
    LOGICAL_OR      shift and go to state 202
    LOGICAL_XOR     shift and go to state 200
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188


state 318

    (211) dim_offset -> expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    RBRACKET        reduce using rule 211 (dim_offset -> expr .)
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    LOGICAL_AND     shift and go to state 181
    LOGICAL_OR      shift and go to state 202
    LOGICAL_XOR     shift and go to state 200
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188


state 319

    (212) dim_offset -> empty .

    RBRACKET        reduce using rule 212 (dim_offset -> empty .)


state 320

    (206) reference_variable -> reference_variable LBRACKET dim_offset . RBRACKET

    RBRACKET        shift and go to state 468


state 321

    (228) non_empty_array_pair_list -> expr .
    (231) non_empty_array_pair_list -> expr . DOUBLE_ARROW AND variable
    (232) non_empty_array_pair_list -> expr . DOUBLE_ARROW expr
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    COMMA           reduce using rule 228 (non_empty_array_pair_list -> expr .)
    RPAREN          reduce using rule 228 (non_empty_array_pair_list -> expr .)
    DOUBLE_ARROW    shift and go to state 469
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    LOGICAL_AND     shift and go to state 181
    LOGICAL_OR      shift and go to state 202
    LOGICAL_XOR     shift and go to state 200
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188


state 322

    (227) non_empty_array_pair_list -> AND . variable
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NS_SEPARATOR    shift and go to state 129
    NAMESPACE       shift and go to state 128
    DOLLAR          shift and go to state 90
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    VARIABLE        shift and go to state 56

    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    compound_variable              shift and go to state 72
    class_name                     shift and go to state 124
    variable_class_name            shift and go to state 127
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 126
    static_member                  shift and go to state 86
    variable                       shift and go to state 470
    namespace_name                 shift and go to state 130

state 323

    (224) array_pair_list -> non_empty_array_pair_list . possible_comma
    (225) non_empty_array_pair_list -> non_empty_array_pair_list . COMMA AND variable
    (226) non_empty_array_pair_list -> non_empty_array_pair_list . COMMA expr
    (229) non_empty_array_pair_list -> non_empty_array_pair_list . COMMA expr DOUBLE_ARROW AND variable
    (230) non_empty_array_pair_list -> non_empty_array_pair_list . COMMA expr DOUBLE_ARROW expr
    (233) possible_comma -> . empty
    (234) possible_comma -> . COMMA
    (363) empty -> .

    COMMA           shift and go to state 472
    RPAREN          reduce using rule 363 (empty -> .)

    empty                          shift and go to state 473
    possible_comma                 shift and go to state 471

state 324

    (222) expr -> ARRAY LPAREN array_pair_list . RPAREN

    RPAREN          shift and go to state 474


state 325

    (223) array_pair_list -> empty .

    RPAREN          reduce using rule 223 (array_pair_list -> empty .)


state 326

    (187) function_call -> NS_SEPARATOR namespace_name LPAREN . function_call_parameter_list RPAREN
    (235) function_call_parameter_list -> . function_call_parameter_list COMMA function_call_parameter
    (236) function_call_parameter_list -> . function_call_parameter
    (237) function_call_parameter_list -> . empty
    (238) function_call_parameter -> . expr
    (239) function_call_parameter -> . AND variable
    (363) empty -> .
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    AND             shift and go to state 330
    RPAREN          reduce using rule 363 (empty -> .)
    COMMA           reduce using rule 363 (empty -> .)
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    function_call_parameter_list   shift and go to state 475
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    empty                          shift and go to state 331
    function_call_parameter        shift and go to state 332
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 329

state 327

    (349) namespace_name -> namespace_name NS_SEPARATOR STRING .

    NS_SEPARATOR    reduce using rule 349 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    LPAREN          reduce using rule 349 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    SEMI            reduce using rule 349 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    BOOLEAN_AND     reduce using rule 349 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    BOOLEAN_OR      reduce using rule 349 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    LOGICAL_AND     reduce using rule 349 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    LOGICAL_OR      reduce using rule 349 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    LOGICAL_XOR     reduce using rule 349 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    AND             reduce using rule 349 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    OR              reduce using rule 349 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    XOR             reduce using rule 349 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    CONCAT          reduce using rule 349 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    PLUS            reduce using rule 349 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    MINUS           reduce using rule 349 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    MUL             reduce using rule 349 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    DIV             reduce using rule 349 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    SL              reduce using rule 349 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    SR              reduce using rule 349 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    MOD             reduce using rule 349 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    IS_IDENTICAL    reduce using rule 349 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    IS_NOT_IDENTICAL reduce using rule 349 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    IS_EQUAL        reduce using rule 349 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    IS_NOT_EQUAL    reduce using rule 349 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    IS_SMALLER      reduce using rule 349 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    IS_SMALLER_OR_EQUAL reduce using rule 349 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    IS_GREATER      reduce using rule 349 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    IS_GREATER_OR_EQUAL reduce using rule 349 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    INSTANCEOF      reduce using rule 349 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    QUESTION        reduce using rule 349 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    DOUBLE_COLON    reduce using rule 349 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    COMMA           reduce using rule 349 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    LBRACE          reduce using rule 349 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    RPAREN          reduce using rule 349 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    AS              reduce using rule 349 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    RBRACE          reduce using rule 349 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    RBRACKET        reduce using rule 349 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    DOUBLE_ARROW    reduce using rule 349 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    COLON           reduce using rule 349 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    VARIABLE        reduce using rule 349 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    IMPLEMENTS      reduce using rule 349 (namespace_name -> namespace_name NS_SEPARATOR STRING .)


state 328

    (186) function_call -> namespace_name LPAREN function_call_parameter_list . RPAREN
    (235) function_call_parameter_list -> function_call_parameter_list . COMMA function_call_parameter

    RPAREN          shift and go to state 476
    COMMA           shift and go to state 477


state 329

    (238) function_call_parameter -> expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    RPAREN          reduce using rule 238 (function_call_parameter -> expr .)
    COMMA           reduce using rule 238 (function_call_parameter -> expr .)
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    LOGICAL_AND     shift and go to state 181
    LOGICAL_OR      shift and go to state 202
    LOGICAL_XOR     shift and go to state 200
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188


state 330

    (239) function_call_parameter -> AND . variable
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NS_SEPARATOR    shift and go to state 129
    NAMESPACE       shift and go to state 128
    DOLLAR          shift and go to state 90
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    VARIABLE        shift and go to state 56

    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    compound_variable              shift and go to state 72
    class_name                     shift and go to state 124
    variable_class_name            shift and go to state 127
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 126
    static_member                  shift and go to state 86
    variable                       shift and go to state 478
    namespace_name                 shift and go to state 130

state 331

    (237) function_call_parameter_list -> empty .

    RPAREN          reduce using rule 237 (function_call_parameter_list -> empty .)
    COMMA           reduce using rule 237 (function_call_parameter_list -> empty .)


state 332

    (236) function_call_parameter_list -> function_call_parameter .

    RPAREN          reduce using rule 236 (function_call_parameter_list -> function_call_parameter .)
    COMMA           reduce using rule 236 (function_call_parameter_list -> function_call_parameter .)


state 333

    (281) expr -> expr IS_GREATER_OR_EQUAL expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 281 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    BOOLEAN_AND     reduce using rule 281 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    BOOLEAN_OR      reduce using rule 281 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    LOGICAL_AND     reduce using rule 281 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    LOGICAL_OR      reduce using rule 281 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    LOGICAL_XOR     reduce using rule 281 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    AND             reduce using rule 281 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    OR              reduce using rule 281 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    XOR             reduce using rule 281 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    IS_IDENTICAL    reduce using rule 281 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    IS_NOT_IDENTICAL reduce using rule 281 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    IS_EQUAL        reduce using rule 281 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    IS_NOT_EQUAL    reduce using rule 281 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    IS_SMALLER      reduce using rule 281 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 281 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    IS_GREATER      reduce using rule 281 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    IS_GREATER_OR_EQUAL reduce using rule 281 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    QUESTION        reduce using rule 281 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    SEMI            reduce using rule 281 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    COMMA           reduce using rule 281 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    RPAREN          reduce using rule 281 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    RBRACE          reduce using rule 281 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    RBRACKET        reduce using rule 281 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    DOUBLE_ARROW    reduce using rule 281 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    COLON           reduce using rule 281 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    INSTANCEOF      shift and go to state 204

  ! CONCAT          [ reduce using rule 281 (expr -> expr IS_GREATER_OR_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 281 (expr -> expr IS_GREATER_OR_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 281 (expr -> expr IS_GREATER_OR_EQUAL expr .) ]
  ! MUL             [ reduce using rule 281 (expr -> expr IS_GREATER_OR_EQUAL expr .) ]
  ! DIV             [ reduce using rule 281 (expr -> expr IS_GREATER_OR_EQUAL expr .) ]
  ! SL              [ reduce using rule 281 (expr -> expr IS_GREATER_OR_EQUAL expr .) ]
  ! SR              [ reduce using rule 281 (expr -> expr IS_GREATER_OR_EQUAL expr .) ]
  ! MOD             [ reduce using rule 281 (expr -> expr IS_GREATER_OR_EQUAL expr .) ]
  ! INSTANCEOF      [ reduce using rule 281 (expr -> expr IS_GREATER_OR_EQUAL expr .) ]
  ! BOOLEAN_AND     [ shift and go to state 196 ]
  ! BOOLEAN_OR      [ shift and go to state 194 ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]
  ! AND             [ shift and go to state 191 ]
  ! OR              [ shift and go to state 205 ]
  ! XOR             [ shift and go to state 193 ]
  ! IS_IDENTICAL    [ shift and go to state 201 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 198 ]
  ! IS_EQUAL        [ shift and go to state 189 ]
  ! IS_NOT_EQUAL    [ shift and go to state 195 ]
  ! IS_SMALLER      [ shift and go to state 192 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 197 ]
  ! IS_GREATER      [ shift and go to state 182 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 180 ]
  ! QUESTION        [ shift and go to state 188 ]


state 334

    (260) expr -> expr LOGICAL_AND expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 260 (expr -> expr LOGICAL_AND expr .)
    LOGICAL_AND     reduce using rule 260 (expr -> expr LOGICAL_AND expr .)
    LOGICAL_OR      reduce using rule 260 (expr -> expr LOGICAL_AND expr .)
    LOGICAL_XOR     reduce using rule 260 (expr -> expr LOGICAL_AND expr .)
    SEMI            reduce using rule 260 (expr -> expr LOGICAL_AND expr .)
    COMMA           reduce using rule 260 (expr -> expr LOGICAL_AND expr .)
    RPAREN          reduce using rule 260 (expr -> expr LOGICAL_AND expr .)
    RBRACE          reduce using rule 260 (expr -> expr LOGICAL_AND expr .)
    RBRACKET        reduce using rule 260 (expr -> expr LOGICAL_AND expr .)
    DOUBLE_ARROW    reduce using rule 260 (expr -> expr LOGICAL_AND expr .)
    COLON           reduce using rule 260 (expr -> expr LOGICAL_AND expr .)
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188

  ! BOOLEAN_AND     [ reduce using rule 260 (expr -> expr LOGICAL_AND expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 260 (expr -> expr LOGICAL_AND expr .) ]
  ! AND             [ reduce using rule 260 (expr -> expr LOGICAL_AND expr .) ]
  ! OR              [ reduce using rule 260 (expr -> expr LOGICAL_AND expr .) ]
  ! XOR             [ reduce using rule 260 (expr -> expr LOGICAL_AND expr .) ]
  ! CONCAT          [ reduce using rule 260 (expr -> expr LOGICAL_AND expr .) ]
  ! PLUS            [ reduce using rule 260 (expr -> expr LOGICAL_AND expr .) ]
  ! MINUS           [ reduce using rule 260 (expr -> expr LOGICAL_AND expr .) ]
  ! MUL             [ reduce using rule 260 (expr -> expr LOGICAL_AND expr .) ]
  ! DIV             [ reduce using rule 260 (expr -> expr LOGICAL_AND expr .) ]
  ! SL              [ reduce using rule 260 (expr -> expr LOGICAL_AND expr .) ]
  ! SR              [ reduce using rule 260 (expr -> expr LOGICAL_AND expr .) ]
  ! MOD             [ reduce using rule 260 (expr -> expr LOGICAL_AND expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 260 (expr -> expr LOGICAL_AND expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 260 (expr -> expr LOGICAL_AND expr .) ]
  ! IS_EQUAL        [ reduce using rule 260 (expr -> expr LOGICAL_AND expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 260 (expr -> expr LOGICAL_AND expr .) ]
  ! IS_SMALLER      [ reduce using rule 260 (expr -> expr LOGICAL_AND expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 260 (expr -> expr LOGICAL_AND expr .) ]
  ! IS_GREATER      [ reduce using rule 260 (expr -> expr LOGICAL_AND expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 260 (expr -> expr LOGICAL_AND expr .) ]
  ! INSTANCEOF      [ reduce using rule 260 (expr -> expr LOGICAL_AND expr .) ]
  ! QUESTION        [ reduce using rule 260 (expr -> expr LOGICAL_AND expr .) ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]


state 335

    (280) expr -> expr IS_GREATER expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 280 (expr -> expr IS_GREATER expr .)
    BOOLEAN_AND     reduce using rule 280 (expr -> expr IS_GREATER expr .)
    BOOLEAN_OR      reduce using rule 280 (expr -> expr IS_GREATER expr .)
    LOGICAL_AND     reduce using rule 280 (expr -> expr IS_GREATER expr .)
    LOGICAL_OR      reduce using rule 280 (expr -> expr IS_GREATER expr .)
    LOGICAL_XOR     reduce using rule 280 (expr -> expr IS_GREATER expr .)
    AND             reduce using rule 280 (expr -> expr IS_GREATER expr .)
    OR              reduce using rule 280 (expr -> expr IS_GREATER expr .)
    XOR             reduce using rule 280 (expr -> expr IS_GREATER expr .)
    IS_IDENTICAL    reduce using rule 280 (expr -> expr IS_GREATER expr .)
    IS_NOT_IDENTICAL reduce using rule 280 (expr -> expr IS_GREATER expr .)
    IS_EQUAL        reduce using rule 280 (expr -> expr IS_GREATER expr .)
    IS_NOT_EQUAL    reduce using rule 280 (expr -> expr IS_GREATER expr .)
    IS_SMALLER      reduce using rule 280 (expr -> expr IS_GREATER expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 280 (expr -> expr IS_GREATER expr .)
    IS_GREATER      reduce using rule 280 (expr -> expr IS_GREATER expr .)
    IS_GREATER_OR_EQUAL reduce using rule 280 (expr -> expr IS_GREATER expr .)
    QUESTION        reduce using rule 280 (expr -> expr IS_GREATER expr .)
    SEMI            reduce using rule 280 (expr -> expr IS_GREATER expr .)
    COMMA           reduce using rule 280 (expr -> expr IS_GREATER expr .)
    RPAREN          reduce using rule 280 (expr -> expr IS_GREATER expr .)
    RBRACE          reduce using rule 280 (expr -> expr IS_GREATER expr .)
    RBRACKET        reduce using rule 280 (expr -> expr IS_GREATER expr .)
    DOUBLE_ARROW    reduce using rule 280 (expr -> expr IS_GREATER expr .)
    COLON           reduce using rule 280 (expr -> expr IS_GREATER expr .)
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    INSTANCEOF      shift and go to state 204

  ! CONCAT          [ reduce using rule 280 (expr -> expr IS_GREATER expr .) ]
  ! PLUS            [ reduce using rule 280 (expr -> expr IS_GREATER expr .) ]
  ! MINUS           [ reduce using rule 280 (expr -> expr IS_GREATER expr .) ]
  ! MUL             [ reduce using rule 280 (expr -> expr IS_GREATER expr .) ]
  ! DIV             [ reduce using rule 280 (expr -> expr IS_GREATER expr .) ]
  ! SL              [ reduce using rule 280 (expr -> expr IS_GREATER expr .) ]
  ! SR              [ reduce using rule 280 (expr -> expr IS_GREATER expr .) ]
  ! MOD             [ reduce using rule 280 (expr -> expr IS_GREATER expr .) ]
  ! INSTANCEOF      [ reduce using rule 280 (expr -> expr IS_GREATER expr .) ]
  ! BOOLEAN_AND     [ shift and go to state 196 ]
  ! BOOLEAN_OR      [ shift and go to state 194 ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]
  ! AND             [ shift and go to state 191 ]
  ! OR              [ shift and go to state 205 ]
  ! XOR             [ shift and go to state 193 ]
  ! IS_IDENTICAL    [ shift and go to state 201 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 198 ]
  ! IS_EQUAL        [ shift and go to state 189 ]
  ! IS_NOT_EQUAL    [ shift and go to state 195 ]
  ! IS_SMALLER      [ shift and go to state 192 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 197 ]
  ! IS_GREATER      [ shift and go to state 182 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 180 ]
  ! QUESTION        [ shift and go to state 188 ]


state 336

    (269) expr -> expr MUL expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 269 (expr -> expr MUL expr .)
    BOOLEAN_AND     reduce using rule 269 (expr -> expr MUL expr .)
    BOOLEAN_OR      reduce using rule 269 (expr -> expr MUL expr .)
    LOGICAL_AND     reduce using rule 269 (expr -> expr MUL expr .)
    LOGICAL_OR      reduce using rule 269 (expr -> expr MUL expr .)
    LOGICAL_XOR     reduce using rule 269 (expr -> expr MUL expr .)
    AND             reduce using rule 269 (expr -> expr MUL expr .)
    OR              reduce using rule 269 (expr -> expr MUL expr .)
    XOR             reduce using rule 269 (expr -> expr MUL expr .)
    CONCAT          reduce using rule 269 (expr -> expr MUL expr .)
    PLUS            reduce using rule 269 (expr -> expr MUL expr .)
    MINUS           reduce using rule 269 (expr -> expr MUL expr .)
    MUL             reduce using rule 269 (expr -> expr MUL expr .)
    DIV             reduce using rule 269 (expr -> expr MUL expr .)
    SL              reduce using rule 269 (expr -> expr MUL expr .)
    SR              reduce using rule 269 (expr -> expr MUL expr .)
    MOD             reduce using rule 269 (expr -> expr MUL expr .)
    IS_IDENTICAL    reduce using rule 269 (expr -> expr MUL expr .)
    IS_NOT_IDENTICAL reduce using rule 269 (expr -> expr MUL expr .)
    IS_EQUAL        reduce using rule 269 (expr -> expr MUL expr .)
    IS_NOT_EQUAL    reduce using rule 269 (expr -> expr MUL expr .)
    IS_SMALLER      reduce using rule 269 (expr -> expr MUL expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 269 (expr -> expr MUL expr .)
    IS_GREATER      reduce using rule 269 (expr -> expr MUL expr .)
    IS_GREATER_OR_EQUAL reduce using rule 269 (expr -> expr MUL expr .)
    QUESTION        reduce using rule 269 (expr -> expr MUL expr .)
    SEMI            reduce using rule 269 (expr -> expr MUL expr .)
    COMMA           reduce using rule 269 (expr -> expr MUL expr .)
    RPAREN          reduce using rule 269 (expr -> expr MUL expr .)
    RBRACE          reduce using rule 269 (expr -> expr MUL expr .)
    RBRACKET        reduce using rule 269 (expr -> expr MUL expr .)
    DOUBLE_ARROW    reduce using rule 269 (expr -> expr MUL expr .)
    COLON           reduce using rule 269 (expr -> expr MUL expr .)
    INSTANCEOF      shift and go to state 204

  ! INSTANCEOF      [ reduce using rule 269 (expr -> expr MUL expr .) ]
  ! BOOLEAN_AND     [ shift and go to state 196 ]
  ! BOOLEAN_OR      [ shift and go to state 194 ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]
  ! AND             [ shift and go to state 191 ]
  ! OR              [ shift and go to state 205 ]
  ! XOR             [ shift and go to state 193 ]
  ! CONCAT          [ shift and go to state 186 ]
  ! PLUS            [ shift and go to state 190 ]
  ! MINUS           [ shift and go to state 185 ]
  ! MUL             [ shift and go to state 183 ]
  ! DIV             [ shift and go to state 184 ]
  ! SL              [ shift and go to state 203 ]
  ! SR              [ shift and go to state 199 ]
  ! MOD             [ shift and go to state 206 ]
  ! IS_IDENTICAL    [ shift and go to state 201 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 198 ]
  ! IS_EQUAL        [ shift and go to state 189 ]
  ! IS_NOT_EQUAL    [ shift and go to state 195 ]
  ! IS_SMALLER      [ shift and go to state 192 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 197 ]
  ! IS_GREATER      [ shift and go to state 182 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 180 ]
  ! QUESTION        [ shift and go to state 188 ]


state 337

    (270) expr -> expr DIV expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 270 (expr -> expr DIV expr .)
    BOOLEAN_AND     reduce using rule 270 (expr -> expr DIV expr .)
    BOOLEAN_OR      reduce using rule 270 (expr -> expr DIV expr .)
    LOGICAL_AND     reduce using rule 270 (expr -> expr DIV expr .)
    LOGICAL_OR      reduce using rule 270 (expr -> expr DIV expr .)
    LOGICAL_XOR     reduce using rule 270 (expr -> expr DIV expr .)
    AND             reduce using rule 270 (expr -> expr DIV expr .)
    OR              reduce using rule 270 (expr -> expr DIV expr .)
    XOR             reduce using rule 270 (expr -> expr DIV expr .)
    CONCAT          reduce using rule 270 (expr -> expr DIV expr .)
    PLUS            reduce using rule 270 (expr -> expr DIV expr .)
    MINUS           reduce using rule 270 (expr -> expr DIV expr .)
    MUL             reduce using rule 270 (expr -> expr DIV expr .)
    DIV             reduce using rule 270 (expr -> expr DIV expr .)
    SL              reduce using rule 270 (expr -> expr DIV expr .)
    SR              reduce using rule 270 (expr -> expr DIV expr .)
    MOD             reduce using rule 270 (expr -> expr DIV expr .)
    IS_IDENTICAL    reduce using rule 270 (expr -> expr DIV expr .)
    IS_NOT_IDENTICAL reduce using rule 270 (expr -> expr DIV expr .)
    IS_EQUAL        reduce using rule 270 (expr -> expr DIV expr .)
    IS_NOT_EQUAL    reduce using rule 270 (expr -> expr DIV expr .)
    IS_SMALLER      reduce using rule 270 (expr -> expr DIV expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 270 (expr -> expr DIV expr .)
    IS_GREATER      reduce using rule 270 (expr -> expr DIV expr .)
    IS_GREATER_OR_EQUAL reduce using rule 270 (expr -> expr DIV expr .)
    QUESTION        reduce using rule 270 (expr -> expr DIV expr .)
    SEMI            reduce using rule 270 (expr -> expr DIV expr .)
    COMMA           reduce using rule 270 (expr -> expr DIV expr .)
    RPAREN          reduce using rule 270 (expr -> expr DIV expr .)
    RBRACE          reduce using rule 270 (expr -> expr DIV expr .)
    RBRACKET        reduce using rule 270 (expr -> expr DIV expr .)
    DOUBLE_ARROW    reduce using rule 270 (expr -> expr DIV expr .)
    COLON           reduce using rule 270 (expr -> expr DIV expr .)
    INSTANCEOF      shift and go to state 204

  ! INSTANCEOF      [ reduce using rule 270 (expr -> expr DIV expr .) ]
  ! BOOLEAN_AND     [ shift and go to state 196 ]
  ! BOOLEAN_OR      [ shift and go to state 194 ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]
  ! AND             [ shift and go to state 191 ]
  ! OR              [ shift and go to state 205 ]
  ! XOR             [ shift and go to state 193 ]
  ! CONCAT          [ shift and go to state 186 ]
  ! PLUS            [ shift and go to state 190 ]
  ! MINUS           [ shift and go to state 185 ]
  ! MUL             [ shift and go to state 183 ]
  ! DIV             [ shift and go to state 184 ]
  ! SL              [ shift and go to state 203 ]
  ! SR              [ shift and go to state 199 ]
  ! MOD             [ shift and go to state 206 ]
  ! IS_IDENTICAL    [ shift and go to state 201 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 198 ]
  ! IS_EQUAL        [ shift and go to state 189 ]
  ! IS_NOT_EQUAL    [ shift and go to state 195 ]
  ! IS_SMALLER      [ shift and go to state 192 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 197 ]
  ! IS_GREATER      [ shift and go to state 182 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 180 ]
  ! QUESTION        [ shift and go to state 188 ]


state 338

    (268) expr -> expr MINUS expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 268 (expr -> expr MINUS expr .)
    BOOLEAN_AND     reduce using rule 268 (expr -> expr MINUS expr .)
    BOOLEAN_OR      reduce using rule 268 (expr -> expr MINUS expr .)
    LOGICAL_AND     reduce using rule 268 (expr -> expr MINUS expr .)
    LOGICAL_OR      reduce using rule 268 (expr -> expr MINUS expr .)
    LOGICAL_XOR     reduce using rule 268 (expr -> expr MINUS expr .)
    AND             reduce using rule 268 (expr -> expr MINUS expr .)
    OR              reduce using rule 268 (expr -> expr MINUS expr .)
    XOR             reduce using rule 268 (expr -> expr MINUS expr .)
    CONCAT          reduce using rule 268 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 268 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 268 (expr -> expr MINUS expr .)
    SL              reduce using rule 268 (expr -> expr MINUS expr .)
    SR              reduce using rule 268 (expr -> expr MINUS expr .)
    IS_IDENTICAL    reduce using rule 268 (expr -> expr MINUS expr .)
    IS_NOT_IDENTICAL reduce using rule 268 (expr -> expr MINUS expr .)
    IS_EQUAL        reduce using rule 268 (expr -> expr MINUS expr .)
    IS_NOT_EQUAL    reduce using rule 268 (expr -> expr MINUS expr .)
    IS_SMALLER      reduce using rule 268 (expr -> expr MINUS expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 268 (expr -> expr MINUS expr .)
    IS_GREATER      reduce using rule 268 (expr -> expr MINUS expr .)
    IS_GREATER_OR_EQUAL reduce using rule 268 (expr -> expr MINUS expr .)
    QUESTION        reduce using rule 268 (expr -> expr MINUS expr .)
    SEMI            reduce using rule 268 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 268 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 268 (expr -> expr MINUS expr .)
    RBRACE          reduce using rule 268 (expr -> expr MINUS expr .)
    RBRACKET        reduce using rule 268 (expr -> expr MINUS expr .)
    DOUBLE_ARROW    reduce using rule 268 (expr -> expr MINUS expr .)
    COLON           reduce using rule 268 (expr -> expr MINUS expr .)
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    MOD             shift and go to state 206
    INSTANCEOF      shift and go to state 204

  ! MUL             [ reduce using rule 268 (expr -> expr MINUS expr .) ]
  ! DIV             [ reduce using rule 268 (expr -> expr MINUS expr .) ]
  ! MOD             [ reduce using rule 268 (expr -> expr MINUS expr .) ]
  ! INSTANCEOF      [ reduce using rule 268 (expr -> expr MINUS expr .) ]
  ! BOOLEAN_AND     [ shift and go to state 196 ]
  ! BOOLEAN_OR      [ shift and go to state 194 ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]
  ! AND             [ shift and go to state 191 ]
  ! OR              [ shift and go to state 205 ]
  ! XOR             [ shift and go to state 193 ]
  ! CONCAT          [ shift and go to state 186 ]
  ! PLUS            [ shift and go to state 190 ]
  ! MINUS           [ shift and go to state 185 ]
  ! SL              [ shift and go to state 203 ]
  ! SR              [ shift and go to state 199 ]
  ! IS_IDENTICAL    [ shift and go to state 201 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 198 ]
  ! IS_EQUAL        [ shift and go to state 189 ]
  ! IS_NOT_EQUAL    [ shift and go to state 195 ]
  ! IS_SMALLER      [ shift and go to state 192 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 197 ]
  ! IS_GREATER      [ shift and go to state 182 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 180 ]
  ! QUESTION        [ shift and go to state 188 ]


state 339

    (266) expr -> expr CONCAT expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 266 (expr -> expr CONCAT expr .)
    BOOLEAN_AND     reduce using rule 266 (expr -> expr CONCAT expr .)
    BOOLEAN_OR      reduce using rule 266 (expr -> expr CONCAT expr .)
    LOGICAL_AND     reduce using rule 266 (expr -> expr CONCAT expr .)
    LOGICAL_OR      reduce using rule 266 (expr -> expr CONCAT expr .)
    LOGICAL_XOR     reduce using rule 266 (expr -> expr CONCAT expr .)
    AND             reduce using rule 266 (expr -> expr CONCAT expr .)
    OR              reduce using rule 266 (expr -> expr CONCAT expr .)
    XOR             reduce using rule 266 (expr -> expr CONCAT expr .)
    CONCAT          reduce using rule 266 (expr -> expr CONCAT expr .)
    PLUS            reduce using rule 266 (expr -> expr CONCAT expr .)
    MINUS           reduce using rule 266 (expr -> expr CONCAT expr .)
    SL              reduce using rule 266 (expr -> expr CONCAT expr .)
    SR              reduce using rule 266 (expr -> expr CONCAT expr .)
    IS_IDENTICAL    reduce using rule 266 (expr -> expr CONCAT expr .)
    IS_NOT_IDENTICAL reduce using rule 266 (expr -> expr CONCAT expr .)
    IS_EQUAL        reduce using rule 266 (expr -> expr CONCAT expr .)
    IS_NOT_EQUAL    reduce using rule 266 (expr -> expr CONCAT expr .)
    IS_SMALLER      reduce using rule 266 (expr -> expr CONCAT expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 266 (expr -> expr CONCAT expr .)
    IS_GREATER      reduce using rule 266 (expr -> expr CONCAT expr .)
    IS_GREATER_OR_EQUAL reduce using rule 266 (expr -> expr CONCAT expr .)
    QUESTION        reduce using rule 266 (expr -> expr CONCAT expr .)
    SEMI            reduce using rule 266 (expr -> expr CONCAT expr .)
    COMMA           reduce using rule 266 (expr -> expr CONCAT expr .)
    RPAREN          reduce using rule 266 (expr -> expr CONCAT expr .)
    RBRACE          reduce using rule 266 (expr -> expr CONCAT expr .)
    RBRACKET        reduce using rule 266 (expr -> expr CONCAT expr .)
    DOUBLE_ARROW    reduce using rule 266 (expr -> expr CONCAT expr .)
    COLON           reduce using rule 266 (expr -> expr CONCAT expr .)
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    MOD             shift and go to state 206
    INSTANCEOF      shift and go to state 204

  ! MUL             [ reduce using rule 266 (expr -> expr CONCAT expr .) ]
  ! DIV             [ reduce using rule 266 (expr -> expr CONCAT expr .) ]
  ! MOD             [ reduce using rule 266 (expr -> expr CONCAT expr .) ]
  ! INSTANCEOF      [ reduce using rule 266 (expr -> expr CONCAT expr .) ]
  ! BOOLEAN_AND     [ shift and go to state 196 ]
  ! BOOLEAN_OR      [ shift and go to state 194 ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]
  ! AND             [ shift and go to state 191 ]
  ! OR              [ shift and go to state 205 ]
  ! XOR             [ shift and go to state 193 ]
  ! CONCAT          [ shift and go to state 186 ]
  ! PLUS            [ shift and go to state 190 ]
  ! MINUS           [ shift and go to state 185 ]
  ! SL              [ shift and go to state 203 ]
  ! SR              [ shift and go to state 199 ]
  ! IS_IDENTICAL    [ shift and go to state 201 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 198 ]
  ! IS_EQUAL        [ shift and go to state 189 ]
  ! IS_NOT_EQUAL    [ shift and go to state 195 ]
  ! IS_SMALLER      [ shift and go to state 192 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 197 ]
  ! IS_GREATER      [ shift and go to state 182 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 180 ]
  ! QUESTION        [ shift and go to state 188 ]


state 340

    (287) expr -> expr QUESTION expr . COLON expr
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    COLON           shift and go to state 479
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    LOGICAL_AND     shift and go to state 181
    LOGICAL_OR      shift and go to state 202
    LOGICAL_XOR     shift and go to state 200
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188


state 341

    (276) expr -> expr IS_EQUAL expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 276 (expr -> expr IS_EQUAL expr .)
    BOOLEAN_AND     reduce using rule 276 (expr -> expr IS_EQUAL expr .)
    BOOLEAN_OR      reduce using rule 276 (expr -> expr IS_EQUAL expr .)
    LOGICAL_AND     reduce using rule 276 (expr -> expr IS_EQUAL expr .)
    LOGICAL_OR      reduce using rule 276 (expr -> expr IS_EQUAL expr .)
    LOGICAL_XOR     reduce using rule 276 (expr -> expr IS_EQUAL expr .)
    AND             reduce using rule 276 (expr -> expr IS_EQUAL expr .)
    OR              reduce using rule 276 (expr -> expr IS_EQUAL expr .)
    XOR             reduce using rule 276 (expr -> expr IS_EQUAL expr .)
    IS_IDENTICAL    reduce using rule 276 (expr -> expr IS_EQUAL expr .)
    IS_NOT_IDENTICAL reduce using rule 276 (expr -> expr IS_EQUAL expr .)
    IS_EQUAL        reduce using rule 276 (expr -> expr IS_EQUAL expr .)
    IS_NOT_EQUAL    reduce using rule 276 (expr -> expr IS_EQUAL expr .)
    QUESTION        reduce using rule 276 (expr -> expr IS_EQUAL expr .)
    SEMI            reduce using rule 276 (expr -> expr IS_EQUAL expr .)
    COMMA           reduce using rule 276 (expr -> expr IS_EQUAL expr .)
    RPAREN          reduce using rule 276 (expr -> expr IS_EQUAL expr .)
    RBRACE          reduce using rule 276 (expr -> expr IS_EQUAL expr .)
    RBRACKET        reduce using rule 276 (expr -> expr IS_EQUAL expr .)
    DOUBLE_ARROW    reduce using rule 276 (expr -> expr IS_EQUAL expr .)
    COLON           reduce using rule 276 (expr -> expr IS_EQUAL expr .)
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204

  ! CONCAT          [ reduce using rule 276 (expr -> expr IS_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 276 (expr -> expr IS_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 276 (expr -> expr IS_EQUAL expr .) ]
  ! MUL             [ reduce using rule 276 (expr -> expr IS_EQUAL expr .) ]
  ! DIV             [ reduce using rule 276 (expr -> expr IS_EQUAL expr .) ]
  ! SL              [ reduce using rule 276 (expr -> expr IS_EQUAL expr .) ]
  ! SR              [ reduce using rule 276 (expr -> expr IS_EQUAL expr .) ]
  ! MOD             [ reduce using rule 276 (expr -> expr IS_EQUAL expr .) ]
  ! IS_SMALLER      [ reduce using rule 276 (expr -> expr IS_EQUAL expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 276 (expr -> expr IS_EQUAL expr .) ]
  ! IS_GREATER      [ reduce using rule 276 (expr -> expr IS_EQUAL expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 276 (expr -> expr IS_EQUAL expr .) ]
  ! INSTANCEOF      [ reduce using rule 276 (expr -> expr IS_EQUAL expr .) ]
  ! BOOLEAN_AND     [ shift and go to state 196 ]
  ! BOOLEAN_OR      [ shift and go to state 194 ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]
  ! AND             [ shift and go to state 191 ]
  ! OR              [ shift and go to state 205 ]
  ! XOR             [ shift and go to state 193 ]
  ! IS_IDENTICAL    [ shift and go to state 201 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 198 ]
  ! IS_EQUAL        [ shift and go to state 189 ]
  ! IS_NOT_EQUAL    [ shift and go to state 195 ]
  ! QUESTION        [ shift and go to state 188 ]


state 342

    (267) expr -> expr PLUS expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 267 (expr -> expr PLUS expr .)
    BOOLEAN_AND     reduce using rule 267 (expr -> expr PLUS expr .)
    BOOLEAN_OR      reduce using rule 267 (expr -> expr PLUS expr .)
    LOGICAL_AND     reduce using rule 267 (expr -> expr PLUS expr .)
    LOGICAL_OR      reduce using rule 267 (expr -> expr PLUS expr .)
    LOGICAL_XOR     reduce using rule 267 (expr -> expr PLUS expr .)
    AND             reduce using rule 267 (expr -> expr PLUS expr .)
    OR              reduce using rule 267 (expr -> expr PLUS expr .)
    XOR             reduce using rule 267 (expr -> expr PLUS expr .)
    CONCAT          reduce using rule 267 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 267 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 267 (expr -> expr PLUS expr .)
    SL              reduce using rule 267 (expr -> expr PLUS expr .)
    SR              reduce using rule 267 (expr -> expr PLUS expr .)
    IS_IDENTICAL    reduce using rule 267 (expr -> expr PLUS expr .)
    IS_NOT_IDENTICAL reduce using rule 267 (expr -> expr PLUS expr .)
    IS_EQUAL        reduce using rule 267 (expr -> expr PLUS expr .)
    IS_NOT_EQUAL    reduce using rule 267 (expr -> expr PLUS expr .)
    IS_SMALLER      reduce using rule 267 (expr -> expr PLUS expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 267 (expr -> expr PLUS expr .)
    IS_GREATER      reduce using rule 267 (expr -> expr PLUS expr .)
    IS_GREATER_OR_EQUAL reduce using rule 267 (expr -> expr PLUS expr .)
    QUESTION        reduce using rule 267 (expr -> expr PLUS expr .)
    SEMI            reduce using rule 267 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 267 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 267 (expr -> expr PLUS expr .)
    RBRACE          reduce using rule 267 (expr -> expr PLUS expr .)
    RBRACKET        reduce using rule 267 (expr -> expr PLUS expr .)
    DOUBLE_ARROW    reduce using rule 267 (expr -> expr PLUS expr .)
    COLON           reduce using rule 267 (expr -> expr PLUS expr .)
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    MOD             shift and go to state 206
    INSTANCEOF      shift and go to state 204

  ! MUL             [ reduce using rule 267 (expr -> expr PLUS expr .) ]
  ! DIV             [ reduce using rule 267 (expr -> expr PLUS expr .) ]
  ! MOD             [ reduce using rule 267 (expr -> expr PLUS expr .) ]
  ! INSTANCEOF      [ reduce using rule 267 (expr -> expr PLUS expr .) ]
  ! BOOLEAN_AND     [ shift and go to state 196 ]
  ! BOOLEAN_OR      [ shift and go to state 194 ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]
  ! AND             [ shift and go to state 191 ]
  ! OR              [ shift and go to state 205 ]
  ! XOR             [ shift and go to state 193 ]
  ! CONCAT          [ shift and go to state 186 ]
  ! PLUS            [ shift and go to state 190 ]
  ! MINUS           [ shift and go to state 185 ]
  ! SL              [ shift and go to state 203 ]
  ! SR              [ shift and go to state 199 ]
  ! IS_IDENTICAL    [ shift and go to state 201 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 198 ]
  ! IS_EQUAL        [ shift and go to state 189 ]
  ! IS_NOT_EQUAL    [ shift and go to state 195 ]
  ! IS_SMALLER      [ shift and go to state 192 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 197 ]
  ! IS_GREATER      [ shift and go to state 182 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 180 ]
  ! QUESTION        [ shift and go to state 188 ]


state 343

    (263) expr -> expr AND expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 263 (expr -> expr AND expr .)
    BOOLEAN_AND     reduce using rule 263 (expr -> expr AND expr .)
    BOOLEAN_OR      reduce using rule 263 (expr -> expr AND expr .)
    LOGICAL_AND     reduce using rule 263 (expr -> expr AND expr .)
    LOGICAL_OR      reduce using rule 263 (expr -> expr AND expr .)
    LOGICAL_XOR     reduce using rule 263 (expr -> expr AND expr .)
    AND             reduce using rule 263 (expr -> expr AND expr .)
    OR              reduce using rule 263 (expr -> expr AND expr .)
    XOR             reduce using rule 263 (expr -> expr AND expr .)
    QUESTION        reduce using rule 263 (expr -> expr AND expr .)
    SEMI            reduce using rule 263 (expr -> expr AND expr .)
    COMMA           reduce using rule 263 (expr -> expr AND expr .)
    RPAREN          reduce using rule 263 (expr -> expr AND expr .)
    RBRACE          reduce using rule 263 (expr -> expr AND expr .)
    RBRACKET        reduce using rule 263 (expr -> expr AND expr .)
    DOUBLE_ARROW    reduce using rule 263 (expr -> expr AND expr .)
    COLON           reduce using rule 263 (expr -> expr AND expr .)
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204

  ! CONCAT          [ reduce using rule 263 (expr -> expr AND expr .) ]
  ! PLUS            [ reduce using rule 263 (expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 263 (expr -> expr AND expr .) ]
  ! MUL             [ reduce using rule 263 (expr -> expr AND expr .) ]
  ! DIV             [ reduce using rule 263 (expr -> expr AND expr .) ]
  ! SL              [ reduce using rule 263 (expr -> expr AND expr .) ]
  ! SR              [ reduce using rule 263 (expr -> expr AND expr .) ]
  ! MOD             [ reduce using rule 263 (expr -> expr AND expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 263 (expr -> expr AND expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 263 (expr -> expr AND expr .) ]
  ! IS_EQUAL        [ reduce using rule 263 (expr -> expr AND expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 263 (expr -> expr AND expr .) ]
  ! IS_SMALLER      [ reduce using rule 263 (expr -> expr AND expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 263 (expr -> expr AND expr .) ]
  ! IS_GREATER      [ reduce using rule 263 (expr -> expr AND expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 263 (expr -> expr AND expr .) ]
  ! INSTANCEOF      [ reduce using rule 263 (expr -> expr AND expr .) ]
  ! BOOLEAN_AND     [ shift and go to state 196 ]
  ! BOOLEAN_OR      [ shift and go to state 194 ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]
  ! AND             [ shift and go to state 191 ]
  ! OR              [ shift and go to state 205 ]
  ! XOR             [ shift and go to state 193 ]
  ! QUESTION        [ shift and go to state 188 ]


state 344

    (278) expr -> expr IS_SMALLER expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 278 (expr -> expr IS_SMALLER expr .)
    BOOLEAN_AND     reduce using rule 278 (expr -> expr IS_SMALLER expr .)
    BOOLEAN_OR      reduce using rule 278 (expr -> expr IS_SMALLER expr .)
    LOGICAL_AND     reduce using rule 278 (expr -> expr IS_SMALLER expr .)
    LOGICAL_OR      reduce using rule 278 (expr -> expr IS_SMALLER expr .)
    LOGICAL_XOR     reduce using rule 278 (expr -> expr IS_SMALLER expr .)
    AND             reduce using rule 278 (expr -> expr IS_SMALLER expr .)
    OR              reduce using rule 278 (expr -> expr IS_SMALLER expr .)
    XOR             reduce using rule 278 (expr -> expr IS_SMALLER expr .)
    IS_IDENTICAL    reduce using rule 278 (expr -> expr IS_SMALLER expr .)
    IS_NOT_IDENTICAL reduce using rule 278 (expr -> expr IS_SMALLER expr .)
    IS_EQUAL        reduce using rule 278 (expr -> expr IS_SMALLER expr .)
    IS_NOT_EQUAL    reduce using rule 278 (expr -> expr IS_SMALLER expr .)
    IS_SMALLER      reduce using rule 278 (expr -> expr IS_SMALLER expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 278 (expr -> expr IS_SMALLER expr .)
    IS_GREATER      reduce using rule 278 (expr -> expr IS_SMALLER expr .)
    IS_GREATER_OR_EQUAL reduce using rule 278 (expr -> expr IS_SMALLER expr .)
    QUESTION        reduce using rule 278 (expr -> expr IS_SMALLER expr .)
    SEMI            reduce using rule 278 (expr -> expr IS_SMALLER expr .)
    COMMA           reduce using rule 278 (expr -> expr IS_SMALLER expr .)
    RPAREN          reduce using rule 278 (expr -> expr IS_SMALLER expr .)
    RBRACE          reduce using rule 278 (expr -> expr IS_SMALLER expr .)
    RBRACKET        reduce using rule 278 (expr -> expr IS_SMALLER expr .)
    DOUBLE_ARROW    reduce using rule 278 (expr -> expr IS_SMALLER expr .)
    COLON           reduce using rule 278 (expr -> expr IS_SMALLER expr .)
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    INSTANCEOF      shift and go to state 204

  ! CONCAT          [ reduce using rule 278 (expr -> expr IS_SMALLER expr .) ]
  ! PLUS            [ reduce using rule 278 (expr -> expr IS_SMALLER expr .) ]
  ! MINUS           [ reduce using rule 278 (expr -> expr IS_SMALLER expr .) ]
  ! MUL             [ reduce using rule 278 (expr -> expr IS_SMALLER expr .) ]
  ! DIV             [ reduce using rule 278 (expr -> expr IS_SMALLER expr .) ]
  ! SL              [ reduce using rule 278 (expr -> expr IS_SMALLER expr .) ]
  ! SR              [ reduce using rule 278 (expr -> expr IS_SMALLER expr .) ]
  ! MOD             [ reduce using rule 278 (expr -> expr IS_SMALLER expr .) ]
  ! INSTANCEOF      [ reduce using rule 278 (expr -> expr IS_SMALLER expr .) ]
  ! BOOLEAN_AND     [ shift and go to state 196 ]
  ! BOOLEAN_OR      [ shift and go to state 194 ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]
  ! AND             [ shift and go to state 191 ]
  ! OR              [ shift and go to state 205 ]
  ! XOR             [ shift and go to state 193 ]
  ! IS_IDENTICAL    [ shift and go to state 201 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 198 ]
  ! IS_EQUAL        [ shift and go to state 189 ]
  ! IS_NOT_EQUAL    [ shift and go to state 195 ]
  ! IS_SMALLER      [ shift and go to state 192 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 197 ]
  ! IS_GREATER      [ shift and go to state 182 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 180 ]
  ! QUESTION        [ shift and go to state 188 ]


state 345

    (265) expr -> expr XOR expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 265 (expr -> expr XOR expr .)
    BOOLEAN_AND     reduce using rule 265 (expr -> expr XOR expr .)
    BOOLEAN_OR      reduce using rule 265 (expr -> expr XOR expr .)
    LOGICAL_AND     reduce using rule 265 (expr -> expr XOR expr .)
    LOGICAL_OR      reduce using rule 265 (expr -> expr XOR expr .)
    LOGICAL_XOR     reduce using rule 265 (expr -> expr XOR expr .)
    OR              reduce using rule 265 (expr -> expr XOR expr .)
    XOR             reduce using rule 265 (expr -> expr XOR expr .)
    QUESTION        reduce using rule 265 (expr -> expr XOR expr .)
    SEMI            reduce using rule 265 (expr -> expr XOR expr .)
    COMMA           reduce using rule 265 (expr -> expr XOR expr .)
    RPAREN          reduce using rule 265 (expr -> expr XOR expr .)
    RBRACE          reduce using rule 265 (expr -> expr XOR expr .)
    RBRACKET        reduce using rule 265 (expr -> expr XOR expr .)
    DOUBLE_ARROW    reduce using rule 265 (expr -> expr XOR expr .)
    COLON           reduce using rule 265 (expr -> expr XOR expr .)
    AND             shift and go to state 191
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204

  ! AND             [ reduce using rule 265 (expr -> expr XOR expr .) ]
  ! CONCAT          [ reduce using rule 265 (expr -> expr XOR expr .) ]
  ! PLUS            [ reduce using rule 265 (expr -> expr XOR expr .) ]
  ! MINUS           [ reduce using rule 265 (expr -> expr XOR expr .) ]
  ! MUL             [ reduce using rule 265 (expr -> expr XOR expr .) ]
  ! DIV             [ reduce using rule 265 (expr -> expr XOR expr .) ]
  ! SL              [ reduce using rule 265 (expr -> expr XOR expr .) ]
  ! SR              [ reduce using rule 265 (expr -> expr XOR expr .) ]
  ! MOD             [ reduce using rule 265 (expr -> expr XOR expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 265 (expr -> expr XOR expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 265 (expr -> expr XOR expr .) ]
  ! IS_EQUAL        [ reduce using rule 265 (expr -> expr XOR expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 265 (expr -> expr XOR expr .) ]
  ! IS_SMALLER      [ reduce using rule 265 (expr -> expr XOR expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 265 (expr -> expr XOR expr .) ]
  ! IS_GREATER      [ reduce using rule 265 (expr -> expr XOR expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 265 (expr -> expr XOR expr .) ]
  ! INSTANCEOF      [ reduce using rule 265 (expr -> expr XOR expr .) ]
  ! BOOLEAN_AND     [ shift and go to state 196 ]
  ! BOOLEAN_OR      [ shift and go to state 194 ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]
  ! OR              [ shift and go to state 205 ]
  ! XOR             [ shift and go to state 193 ]
  ! QUESTION        [ shift and go to state 188 ]


state 346

    (259) expr -> expr BOOLEAN_OR expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 259 (expr -> expr BOOLEAN_OR expr .)
    BOOLEAN_OR      reduce using rule 259 (expr -> expr BOOLEAN_OR expr .)
    LOGICAL_AND     reduce using rule 259 (expr -> expr BOOLEAN_OR expr .)
    LOGICAL_OR      reduce using rule 259 (expr -> expr BOOLEAN_OR expr .)
    LOGICAL_XOR     reduce using rule 259 (expr -> expr BOOLEAN_OR expr .)
    QUESTION        reduce using rule 259 (expr -> expr BOOLEAN_OR expr .)
    SEMI            reduce using rule 259 (expr -> expr BOOLEAN_OR expr .)
    COMMA           reduce using rule 259 (expr -> expr BOOLEAN_OR expr .)
    RPAREN          reduce using rule 259 (expr -> expr BOOLEAN_OR expr .)
    RBRACE          reduce using rule 259 (expr -> expr BOOLEAN_OR expr .)
    RBRACKET        reduce using rule 259 (expr -> expr BOOLEAN_OR expr .)
    DOUBLE_ARROW    reduce using rule 259 (expr -> expr BOOLEAN_OR expr .)
    COLON           reduce using rule 259 (expr -> expr BOOLEAN_OR expr .)
    BOOLEAN_AND     shift and go to state 196
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204

  ! BOOLEAN_AND     [ reduce using rule 259 (expr -> expr BOOLEAN_OR expr .) ]
  ! AND             [ reduce using rule 259 (expr -> expr BOOLEAN_OR expr .) ]
  ! OR              [ reduce using rule 259 (expr -> expr BOOLEAN_OR expr .) ]
  ! XOR             [ reduce using rule 259 (expr -> expr BOOLEAN_OR expr .) ]
  ! CONCAT          [ reduce using rule 259 (expr -> expr BOOLEAN_OR expr .) ]
  ! PLUS            [ reduce using rule 259 (expr -> expr BOOLEAN_OR expr .) ]
  ! MINUS           [ reduce using rule 259 (expr -> expr BOOLEAN_OR expr .) ]
  ! MUL             [ reduce using rule 259 (expr -> expr BOOLEAN_OR expr .) ]
  ! DIV             [ reduce using rule 259 (expr -> expr BOOLEAN_OR expr .) ]
  ! SL              [ reduce using rule 259 (expr -> expr BOOLEAN_OR expr .) ]
  ! SR              [ reduce using rule 259 (expr -> expr BOOLEAN_OR expr .) ]
  ! MOD             [ reduce using rule 259 (expr -> expr BOOLEAN_OR expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 259 (expr -> expr BOOLEAN_OR expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 259 (expr -> expr BOOLEAN_OR expr .) ]
  ! IS_EQUAL        [ reduce using rule 259 (expr -> expr BOOLEAN_OR expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 259 (expr -> expr BOOLEAN_OR expr .) ]
  ! IS_SMALLER      [ reduce using rule 259 (expr -> expr BOOLEAN_OR expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 259 (expr -> expr BOOLEAN_OR expr .) ]
  ! IS_GREATER      [ reduce using rule 259 (expr -> expr BOOLEAN_OR expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 259 (expr -> expr BOOLEAN_OR expr .) ]
  ! INSTANCEOF      [ reduce using rule 259 (expr -> expr BOOLEAN_OR expr .) ]
  ! BOOLEAN_OR      [ shift and go to state 194 ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]
  ! QUESTION        [ shift and go to state 188 ]


state 347

    (277) expr -> expr IS_NOT_EQUAL expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 277 (expr -> expr IS_NOT_EQUAL expr .)
    BOOLEAN_AND     reduce using rule 277 (expr -> expr IS_NOT_EQUAL expr .)
    BOOLEAN_OR      reduce using rule 277 (expr -> expr IS_NOT_EQUAL expr .)
    LOGICAL_AND     reduce using rule 277 (expr -> expr IS_NOT_EQUAL expr .)
    LOGICAL_OR      reduce using rule 277 (expr -> expr IS_NOT_EQUAL expr .)
    LOGICAL_XOR     reduce using rule 277 (expr -> expr IS_NOT_EQUAL expr .)
    AND             reduce using rule 277 (expr -> expr IS_NOT_EQUAL expr .)
    OR              reduce using rule 277 (expr -> expr IS_NOT_EQUAL expr .)
    XOR             reduce using rule 277 (expr -> expr IS_NOT_EQUAL expr .)
    IS_IDENTICAL    reduce using rule 277 (expr -> expr IS_NOT_EQUAL expr .)
    IS_NOT_IDENTICAL reduce using rule 277 (expr -> expr IS_NOT_EQUAL expr .)
    IS_EQUAL        reduce using rule 277 (expr -> expr IS_NOT_EQUAL expr .)
    IS_NOT_EQUAL    reduce using rule 277 (expr -> expr IS_NOT_EQUAL expr .)
    QUESTION        reduce using rule 277 (expr -> expr IS_NOT_EQUAL expr .)
    SEMI            reduce using rule 277 (expr -> expr IS_NOT_EQUAL expr .)
    COMMA           reduce using rule 277 (expr -> expr IS_NOT_EQUAL expr .)
    RPAREN          reduce using rule 277 (expr -> expr IS_NOT_EQUAL expr .)
    RBRACE          reduce using rule 277 (expr -> expr IS_NOT_EQUAL expr .)
    RBRACKET        reduce using rule 277 (expr -> expr IS_NOT_EQUAL expr .)
    DOUBLE_ARROW    reduce using rule 277 (expr -> expr IS_NOT_EQUAL expr .)
    COLON           reduce using rule 277 (expr -> expr IS_NOT_EQUAL expr .)
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204

  ! CONCAT          [ reduce using rule 277 (expr -> expr IS_NOT_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 277 (expr -> expr IS_NOT_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 277 (expr -> expr IS_NOT_EQUAL expr .) ]
  ! MUL             [ reduce using rule 277 (expr -> expr IS_NOT_EQUAL expr .) ]
  ! DIV             [ reduce using rule 277 (expr -> expr IS_NOT_EQUAL expr .) ]
  ! SL              [ reduce using rule 277 (expr -> expr IS_NOT_EQUAL expr .) ]
  ! SR              [ reduce using rule 277 (expr -> expr IS_NOT_EQUAL expr .) ]
  ! MOD             [ reduce using rule 277 (expr -> expr IS_NOT_EQUAL expr .) ]
  ! IS_SMALLER      [ reduce using rule 277 (expr -> expr IS_NOT_EQUAL expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 277 (expr -> expr IS_NOT_EQUAL expr .) ]
  ! IS_GREATER      [ reduce using rule 277 (expr -> expr IS_NOT_EQUAL expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 277 (expr -> expr IS_NOT_EQUAL expr .) ]
  ! INSTANCEOF      [ reduce using rule 277 (expr -> expr IS_NOT_EQUAL expr .) ]
  ! BOOLEAN_AND     [ shift and go to state 196 ]
  ! BOOLEAN_OR      [ shift and go to state 194 ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]
  ! AND             [ shift and go to state 191 ]
  ! OR              [ shift and go to state 205 ]
  ! XOR             [ shift and go to state 193 ]
  ! IS_IDENTICAL    [ shift and go to state 201 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 198 ]
  ! IS_EQUAL        [ shift and go to state 189 ]
  ! IS_NOT_EQUAL    [ shift and go to state 195 ]
  ! QUESTION        [ shift and go to state 188 ]


state 348

    (258) expr -> expr BOOLEAN_AND expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 258 (expr -> expr BOOLEAN_AND expr .)
    BOOLEAN_AND     reduce using rule 258 (expr -> expr BOOLEAN_AND expr .)
    BOOLEAN_OR      reduce using rule 258 (expr -> expr BOOLEAN_AND expr .)
    LOGICAL_AND     reduce using rule 258 (expr -> expr BOOLEAN_AND expr .)
    LOGICAL_OR      reduce using rule 258 (expr -> expr BOOLEAN_AND expr .)
    LOGICAL_XOR     reduce using rule 258 (expr -> expr BOOLEAN_AND expr .)
    QUESTION        reduce using rule 258 (expr -> expr BOOLEAN_AND expr .)
    SEMI            reduce using rule 258 (expr -> expr BOOLEAN_AND expr .)
    COMMA           reduce using rule 258 (expr -> expr BOOLEAN_AND expr .)
    RPAREN          reduce using rule 258 (expr -> expr BOOLEAN_AND expr .)
    RBRACE          reduce using rule 258 (expr -> expr BOOLEAN_AND expr .)
    RBRACKET        reduce using rule 258 (expr -> expr BOOLEAN_AND expr .)
    DOUBLE_ARROW    reduce using rule 258 (expr -> expr BOOLEAN_AND expr .)
    COLON           reduce using rule 258 (expr -> expr BOOLEAN_AND expr .)
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204

  ! AND             [ reduce using rule 258 (expr -> expr BOOLEAN_AND expr .) ]
  ! OR              [ reduce using rule 258 (expr -> expr BOOLEAN_AND expr .) ]
  ! XOR             [ reduce using rule 258 (expr -> expr BOOLEAN_AND expr .) ]
  ! CONCAT          [ reduce using rule 258 (expr -> expr BOOLEAN_AND expr .) ]
  ! PLUS            [ reduce using rule 258 (expr -> expr BOOLEAN_AND expr .) ]
  ! MINUS           [ reduce using rule 258 (expr -> expr BOOLEAN_AND expr .) ]
  ! MUL             [ reduce using rule 258 (expr -> expr BOOLEAN_AND expr .) ]
  ! DIV             [ reduce using rule 258 (expr -> expr BOOLEAN_AND expr .) ]
  ! SL              [ reduce using rule 258 (expr -> expr BOOLEAN_AND expr .) ]
  ! SR              [ reduce using rule 258 (expr -> expr BOOLEAN_AND expr .) ]
  ! MOD             [ reduce using rule 258 (expr -> expr BOOLEAN_AND expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 258 (expr -> expr BOOLEAN_AND expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 258 (expr -> expr BOOLEAN_AND expr .) ]
  ! IS_EQUAL        [ reduce using rule 258 (expr -> expr BOOLEAN_AND expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 258 (expr -> expr BOOLEAN_AND expr .) ]
  ! IS_SMALLER      [ reduce using rule 258 (expr -> expr BOOLEAN_AND expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 258 (expr -> expr BOOLEAN_AND expr .) ]
  ! IS_GREATER      [ reduce using rule 258 (expr -> expr BOOLEAN_AND expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 258 (expr -> expr BOOLEAN_AND expr .) ]
  ! INSTANCEOF      [ reduce using rule 258 (expr -> expr BOOLEAN_AND expr .) ]
  ! BOOLEAN_AND     [ shift and go to state 196 ]
  ! BOOLEAN_OR      [ shift and go to state 194 ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]
  ! QUESTION        [ shift and go to state 188 ]


state 349

    (279) expr -> expr IS_SMALLER_OR_EQUAL expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 279 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    BOOLEAN_AND     reduce using rule 279 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    BOOLEAN_OR      reduce using rule 279 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    LOGICAL_AND     reduce using rule 279 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    LOGICAL_OR      reduce using rule 279 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    LOGICAL_XOR     reduce using rule 279 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    AND             reduce using rule 279 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    OR              reduce using rule 279 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    XOR             reduce using rule 279 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    IS_IDENTICAL    reduce using rule 279 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    IS_NOT_IDENTICAL reduce using rule 279 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    IS_EQUAL        reduce using rule 279 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    IS_NOT_EQUAL    reduce using rule 279 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    IS_SMALLER      reduce using rule 279 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 279 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    IS_GREATER      reduce using rule 279 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    IS_GREATER_OR_EQUAL reduce using rule 279 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    QUESTION        reduce using rule 279 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    SEMI            reduce using rule 279 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    COMMA           reduce using rule 279 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    RPAREN          reduce using rule 279 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    RBRACE          reduce using rule 279 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    RBRACKET        reduce using rule 279 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    DOUBLE_ARROW    reduce using rule 279 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    COLON           reduce using rule 279 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    INSTANCEOF      shift and go to state 204

  ! CONCAT          [ reduce using rule 279 (expr -> expr IS_SMALLER_OR_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 279 (expr -> expr IS_SMALLER_OR_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 279 (expr -> expr IS_SMALLER_OR_EQUAL expr .) ]
  ! MUL             [ reduce using rule 279 (expr -> expr IS_SMALLER_OR_EQUAL expr .) ]
  ! DIV             [ reduce using rule 279 (expr -> expr IS_SMALLER_OR_EQUAL expr .) ]
  ! SL              [ reduce using rule 279 (expr -> expr IS_SMALLER_OR_EQUAL expr .) ]
  ! SR              [ reduce using rule 279 (expr -> expr IS_SMALLER_OR_EQUAL expr .) ]
  ! MOD             [ reduce using rule 279 (expr -> expr IS_SMALLER_OR_EQUAL expr .) ]
  ! INSTANCEOF      [ reduce using rule 279 (expr -> expr IS_SMALLER_OR_EQUAL expr .) ]
  ! BOOLEAN_AND     [ shift and go to state 196 ]
  ! BOOLEAN_OR      [ shift and go to state 194 ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]
  ! AND             [ shift and go to state 191 ]
  ! OR              [ shift and go to state 205 ]
  ! XOR             [ shift and go to state 193 ]
  ! IS_IDENTICAL    [ shift and go to state 201 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 198 ]
  ! IS_EQUAL        [ shift and go to state 189 ]
  ! IS_NOT_EQUAL    [ shift and go to state 195 ]
  ! IS_SMALLER      [ shift and go to state 192 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 197 ]
  ! IS_GREATER      [ shift and go to state 182 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 180 ]
  ! QUESTION        [ shift and go to state 188 ]


state 350

    (275) expr -> expr IS_NOT_IDENTICAL expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 275 (expr -> expr IS_NOT_IDENTICAL expr .)
    BOOLEAN_AND     reduce using rule 275 (expr -> expr IS_NOT_IDENTICAL expr .)
    BOOLEAN_OR      reduce using rule 275 (expr -> expr IS_NOT_IDENTICAL expr .)
    LOGICAL_AND     reduce using rule 275 (expr -> expr IS_NOT_IDENTICAL expr .)
    LOGICAL_OR      reduce using rule 275 (expr -> expr IS_NOT_IDENTICAL expr .)
    LOGICAL_XOR     reduce using rule 275 (expr -> expr IS_NOT_IDENTICAL expr .)
    AND             reduce using rule 275 (expr -> expr IS_NOT_IDENTICAL expr .)
    OR              reduce using rule 275 (expr -> expr IS_NOT_IDENTICAL expr .)
    XOR             reduce using rule 275 (expr -> expr IS_NOT_IDENTICAL expr .)
    IS_IDENTICAL    reduce using rule 275 (expr -> expr IS_NOT_IDENTICAL expr .)
    IS_NOT_IDENTICAL reduce using rule 275 (expr -> expr IS_NOT_IDENTICAL expr .)
    IS_EQUAL        reduce using rule 275 (expr -> expr IS_NOT_IDENTICAL expr .)
    IS_NOT_EQUAL    reduce using rule 275 (expr -> expr IS_NOT_IDENTICAL expr .)
    QUESTION        reduce using rule 275 (expr -> expr IS_NOT_IDENTICAL expr .)
    SEMI            reduce using rule 275 (expr -> expr IS_NOT_IDENTICAL expr .)
    COMMA           reduce using rule 275 (expr -> expr IS_NOT_IDENTICAL expr .)
    RPAREN          reduce using rule 275 (expr -> expr IS_NOT_IDENTICAL expr .)
    RBRACE          reduce using rule 275 (expr -> expr IS_NOT_IDENTICAL expr .)
    RBRACKET        reduce using rule 275 (expr -> expr IS_NOT_IDENTICAL expr .)
    DOUBLE_ARROW    reduce using rule 275 (expr -> expr IS_NOT_IDENTICAL expr .)
    COLON           reduce using rule 275 (expr -> expr IS_NOT_IDENTICAL expr .)
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204

  ! CONCAT          [ reduce using rule 275 (expr -> expr IS_NOT_IDENTICAL expr .) ]
  ! PLUS            [ reduce using rule 275 (expr -> expr IS_NOT_IDENTICAL expr .) ]
  ! MINUS           [ reduce using rule 275 (expr -> expr IS_NOT_IDENTICAL expr .) ]
  ! MUL             [ reduce using rule 275 (expr -> expr IS_NOT_IDENTICAL expr .) ]
  ! DIV             [ reduce using rule 275 (expr -> expr IS_NOT_IDENTICAL expr .) ]
  ! SL              [ reduce using rule 275 (expr -> expr IS_NOT_IDENTICAL expr .) ]
  ! SR              [ reduce using rule 275 (expr -> expr IS_NOT_IDENTICAL expr .) ]
  ! MOD             [ reduce using rule 275 (expr -> expr IS_NOT_IDENTICAL expr .) ]
  ! IS_SMALLER      [ reduce using rule 275 (expr -> expr IS_NOT_IDENTICAL expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 275 (expr -> expr IS_NOT_IDENTICAL expr .) ]
  ! IS_GREATER      [ reduce using rule 275 (expr -> expr IS_NOT_IDENTICAL expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 275 (expr -> expr IS_NOT_IDENTICAL expr .) ]
  ! INSTANCEOF      [ reduce using rule 275 (expr -> expr IS_NOT_IDENTICAL expr .) ]
  ! BOOLEAN_AND     [ shift and go to state 196 ]
  ! BOOLEAN_OR      [ shift and go to state 194 ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]
  ! AND             [ shift and go to state 191 ]
  ! OR              [ shift and go to state 205 ]
  ! XOR             [ shift and go to state 193 ]
  ! IS_IDENTICAL    [ shift and go to state 201 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 198 ]
  ! IS_EQUAL        [ shift and go to state 189 ]
  ! IS_NOT_EQUAL    [ shift and go to state 195 ]
  ! QUESTION        [ shift and go to state 188 ]


state 351

    (272) expr -> expr SR expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 272 (expr -> expr SR expr .)
    BOOLEAN_AND     reduce using rule 272 (expr -> expr SR expr .)
    BOOLEAN_OR      reduce using rule 272 (expr -> expr SR expr .)
    LOGICAL_AND     reduce using rule 272 (expr -> expr SR expr .)
    LOGICAL_OR      reduce using rule 272 (expr -> expr SR expr .)
    LOGICAL_XOR     reduce using rule 272 (expr -> expr SR expr .)
    AND             reduce using rule 272 (expr -> expr SR expr .)
    OR              reduce using rule 272 (expr -> expr SR expr .)
    XOR             reduce using rule 272 (expr -> expr SR expr .)
    SL              reduce using rule 272 (expr -> expr SR expr .)
    SR              reduce using rule 272 (expr -> expr SR expr .)
    IS_IDENTICAL    reduce using rule 272 (expr -> expr SR expr .)
    IS_NOT_IDENTICAL reduce using rule 272 (expr -> expr SR expr .)
    IS_EQUAL        reduce using rule 272 (expr -> expr SR expr .)
    IS_NOT_EQUAL    reduce using rule 272 (expr -> expr SR expr .)
    IS_SMALLER      reduce using rule 272 (expr -> expr SR expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 272 (expr -> expr SR expr .)
    IS_GREATER      reduce using rule 272 (expr -> expr SR expr .)
    IS_GREATER_OR_EQUAL reduce using rule 272 (expr -> expr SR expr .)
    QUESTION        reduce using rule 272 (expr -> expr SR expr .)
    SEMI            reduce using rule 272 (expr -> expr SR expr .)
    COMMA           reduce using rule 272 (expr -> expr SR expr .)
    RPAREN          reduce using rule 272 (expr -> expr SR expr .)
    RBRACE          reduce using rule 272 (expr -> expr SR expr .)
    RBRACKET        reduce using rule 272 (expr -> expr SR expr .)
    DOUBLE_ARROW    reduce using rule 272 (expr -> expr SR expr .)
    COLON           reduce using rule 272 (expr -> expr SR expr .)
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    MOD             shift and go to state 206
    INSTANCEOF      shift and go to state 204

  ! CONCAT          [ reduce using rule 272 (expr -> expr SR expr .) ]
  ! PLUS            [ reduce using rule 272 (expr -> expr SR expr .) ]
  ! MINUS           [ reduce using rule 272 (expr -> expr SR expr .) ]
  ! MUL             [ reduce using rule 272 (expr -> expr SR expr .) ]
  ! DIV             [ reduce using rule 272 (expr -> expr SR expr .) ]
  ! MOD             [ reduce using rule 272 (expr -> expr SR expr .) ]
  ! INSTANCEOF      [ reduce using rule 272 (expr -> expr SR expr .) ]
  ! BOOLEAN_AND     [ shift and go to state 196 ]
  ! BOOLEAN_OR      [ shift and go to state 194 ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]
  ! AND             [ shift and go to state 191 ]
  ! OR              [ shift and go to state 205 ]
  ! XOR             [ shift and go to state 193 ]
  ! SL              [ shift and go to state 203 ]
  ! SR              [ shift and go to state 199 ]
  ! IS_IDENTICAL    [ shift and go to state 201 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 198 ]
  ! IS_EQUAL        [ shift and go to state 189 ]
  ! IS_NOT_EQUAL    [ shift and go to state 195 ]
  ! IS_SMALLER      [ shift and go to state 192 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 197 ]
  ! IS_GREATER      [ shift and go to state 182 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 180 ]
  ! QUESTION        [ shift and go to state 188 ]


state 352

    (262) expr -> expr LOGICAL_XOR expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 262 (expr -> expr LOGICAL_XOR expr .)
    LOGICAL_OR      reduce using rule 262 (expr -> expr LOGICAL_XOR expr .)
    LOGICAL_XOR     reduce using rule 262 (expr -> expr LOGICAL_XOR expr .)
    SEMI            reduce using rule 262 (expr -> expr LOGICAL_XOR expr .)
    COMMA           reduce using rule 262 (expr -> expr LOGICAL_XOR expr .)
    RPAREN          reduce using rule 262 (expr -> expr LOGICAL_XOR expr .)
    RBRACE          reduce using rule 262 (expr -> expr LOGICAL_XOR expr .)
    RBRACKET        reduce using rule 262 (expr -> expr LOGICAL_XOR expr .)
    DOUBLE_ARROW    reduce using rule 262 (expr -> expr LOGICAL_XOR expr .)
    COLON           reduce using rule 262 (expr -> expr LOGICAL_XOR expr .)
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    LOGICAL_AND     shift and go to state 181
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188

  ! BOOLEAN_AND     [ reduce using rule 262 (expr -> expr LOGICAL_XOR expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 262 (expr -> expr LOGICAL_XOR expr .) ]
  ! LOGICAL_AND     [ reduce using rule 262 (expr -> expr LOGICAL_XOR expr .) ]
  ! AND             [ reduce using rule 262 (expr -> expr LOGICAL_XOR expr .) ]
  ! OR              [ reduce using rule 262 (expr -> expr LOGICAL_XOR expr .) ]
  ! XOR             [ reduce using rule 262 (expr -> expr LOGICAL_XOR expr .) ]
  ! CONCAT          [ reduce using rule 262 (expr -> expr LOGICAL_XOR expr .) ]
  ! PLUS            [ reduce using rule 262 (expr -> expr LOGICAL_XOR expr .) ]
  ! MINUS           [ reduce using rule 262 (expr -> expr LOGICAL_XOR expr .) ]
  ! MUL             [ reduce using rule 262 (expr -> expr LOGICAL_XOR expr .) ]
  ! DIV             [ reduce using rule 262 (expr -> expr LOGICAL_XOR expr .) ]
  ! SL              [ reduce using rule 262 (expr -> expr LOGICAL_XOR expr .) ]
  ! SR              [ reduce using rule 262 (expr -> expr LOGICAL_XOR expr .) ]
  ! MOD             [ reduce using rule 262 (expr -> expr LOGICAL_XOR expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 262 (expr -> expr LOGICAL_XOR expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 262 (expr -> expr LOGICAL_XOR expr .) ]
  ! IS_EQUAL        [ reduce using rule 262 (expr -> expr LOGICAL_XOR expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 262 (expr -> expr LOGICAL_XOR expr .) ]
  ! IS_SMALLER      [ reduce using rule 262 (expr -> expr LOGICAL_XOR expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 262 (expr -> expr LOGICAL_XOR expr .) ]
  ! IS_GREATER      [ reduce using rule 262 (expr -> expr LOGICAL_XOR expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 262 (expr -> expr LOGICAL_XOR expr .) ]
  ! INSTANCEOF      [ reduce using rule 262 (expr -> expr LOGICAL_XOR expr .) ]
  ! QUESTION        [ reduce using rule 262 (expr -> expr LOGICAL_XOR expr .) ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]


state 353

    (274) expr -> expr IS_IDENTICAL expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 274 (expr -> expr IS_IDENTICAL expr .)
    BOOLEAN_AND     reduce using rule 274 (expr -> expr IS_IDENTICAL expr .)
    BOOLEAN_OR      reduce using rule 274 (expr -> expr IS_IDENTICAL expr .)
    LOGICAL_AND     reduce using rule 274 (expr -> expr IS_IDENTICAL expr .)
    LOGICAL_OR      reduce using rule 274 (expr -> expr IS_IDENTICAL expr .)
    LOGICAL_XOR     reduce using rule 274 (expr -> expr IS_IDENTICAL expr .)
    AND             reduce using rule 274 (expr -> expr IS_IDENTICAL expr .)
    OR              reduce using rule 274 (expr -> expr IS_IDENTICAL expr .)
    XOR             reduce using rule 274 (expr -> expr IS_IDENTICAL expr .)
    IS_IDENTICAL    reduce using rule 274 (expr -> expr IS_IDENTICAL expr .)
    IS_NOT_IDENTICAL reduce using rule 274 (expr -> expr IS_IDENTICAL expr .)
    IS_EQUAL        reduce using rule 274 (expr -> expr IS_IDENTICAL expr .)
    IS_NOT_EQUAL    reduce using rule 274 (expr -> expr IS_IDENTICAL expr .)
    QUESTION        reduce using rule 274 (expr -> expr IS_IDENTICAL expr .)
    SEMI            reduce using rule 274 (expr -> expr IS_IDENTICAL expr .)
    COMMA           reduce using rule 274 (expr -> expr IS_IDENTICAL expr .)
    RPAREN          reduce using rule 274 (expr -> expr IS_IDENTICAL expr .)
    RBRACE          reduce using rule 274 (expr -> expr IS_IDENTICAL expr .)
    RBRACKET        reduce using rule 274 (expr -> expr IS_IDENTICAL expr .)
    DOUBLE_ARROW    reduce using rule 274 (expr -> expr IS_IDENTICAL expr .)
    COLON           reduce using rule 274 (expr -> expr IS_IDENTICAL expr .)
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204

  ! CONCAT          [ reduce using rule 274 (expr -> expr IS_IDENTICAL expr .) ]
  ! PLUS            [ reduce using rule 274 (expr -> expr IS_IDENTICAL expr .) ]
  ! MINUS           [ reduce using rule 274 (expr -> expr IS_IDENTICAL expr .) ]
  ! MUL             [ reduce using rule 274 (expr -> expr IS_IDENTICAL expr .) ]
  ! DIV             [ reduce using rule 274 (expr -> expr IS_IDENTICAL expr .) ]
  ! SL              [ reduce using rule 274 (expr -> expr IS_IDENTICAL expr .) ]
  ! SR              [ reduce using rule 274 (expr -> expr IS_IDENTICAL expr .) ]
  ! MOD             [ reduce using rule 274 (expr -> expr IS_IDENTICAL expr .) ]
  ! IS_SMALLER      [ reduce using rule 274 (expr -> expr IS_IDENTICAL expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 274 (expr -> expr IS_IDENTICAL expr .) ]
  ! IS_GREATER      [ reduce using rule 274 (expr -> expr IS_IDENTICAL expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 274 (expr -> expr IS_IDENTICAL expr .) ]
  ! INSTANCEOF      [ reduce using rule 274 (expr -> expr IS_IDENTICAL expr .) ]
  ! BOOLEAN_AND     [ shift and go to state 196 ]
  ! BOOLEAN_OR      [ shift and go to state 194 ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]
  ! AND             [ shift and go to state 191 ]
  ! OR              [ shift and go to state 205 ]
  ! XOR             [ shift and go to state 193 ]
  ! IS_IDENTICAL    [ shift and go to state 201 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 198 ]
  ! IS_EQUAL        [ shift and go to state 189 ]
  ! IS_NOT_EQUAL    [ shift and go to state 195 ]
  ! QUESTION        [ shift and go to state 188 ]


state 354

    (261) expr -> expr LOGICAL_OR expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 261 (expr -> expr LOGICAL_OR expr .)
    LOGICAL_OR      reduce using rule 261 (expr -> expr LOGICAL_OR expr .)
    SEMI            reduce using rule 261 (expr -> expr LOGICAL_OR expr .)
    COMMA           reduce using rule 261 (expr -> expr LOGICAL_OR expr .)
    RPAREN          reduce using rule 261 (expr -> expr LOGICAL_OR expr .)
    RBRACE          reduce using rule 261 (expr -> expr LOGICAL_OR expr .)
    RBRACKET        reduce using rule 261 (expr -> expr LOGICAL_OR expr .)
    DOUBLE_ARROW    reduce using rule 261 (expr -> expr LOGICAL_OR expr .)
    COLON           reduce using rule 261 (expr -> expr LOGICAL_OR expr .)
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    LOGICAL_AND     shift and go to state 181
    LOGICAL_XOR     shift and go to state 200
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188

  ! BOOLEAN_AND     [ reduce using rule 261 (expr -> expr LOGICAL_OR expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 261 (expr -> expr LOGICAL_OR expr .) ]
  ! LOGICAL_AND     [ reduce using rule 261 (expr -> expr LOGICAL_OR expr .) ]
  ! LOGICAL_XOR     [ reduce using rule 261 (expr -> expr LOGICAL_OR expr .) ]
  ! AND             [ reduce using rule 261 (expr -> expr LOGICAL_OR expr .) ]
  ! OR              [ reduce using rule 261 (expr -> expr LOGICAL_OR expr .) ]
  ! XOR             [ reduce using rule 261 (expr -> expr LOGICAL_OR expr .) ]
  ! CONCAT          [ reduce using rule 261 (expr -> expr LOGICAL_OR expr .) ]
  ! PLUS            [ reduce using rule 261 (expr -> expr LOGICAL_OR expr .) ]
  ! MINUS           [ reduce using rule 261 (expr -> expr LOGICAL_OR expr .) ]
  ! MUL             [ reduce using rule 261 (expr -> expr LOGICAL_OR expr .) ]
  ! DIV             [ reduce using rule 261 (expr -> expr LOGICAL_OR expr .) ]
  ! SL              [ reduce using rule 261 (expr -> expr LOGICAL_OR expr .) ]
  ! SR              [ reduce using rule 261 (expr -> expr LOGICAL_OR expr .) ]
  ! MOD             [ reduce using rule 261 (expr -> expr LOGICAL_OR expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 261 (expr -> expr LOGICAL_OR expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 261 (expr -> expr LOGICAL_OR expr .) ]
  ! IS_EQUAL        [ reduce using rule 261 (expr -> expr LOGICAL_OR expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 261 (expr -> expr LOGICAL_OR expr .) ]
  ! IS_SMALLER      [ reduce using rule 261 (expr -> expr LOGICAL_OR expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 261 (expr -> expr LOGICAL_OR expr .) ]
  ! IS_GREATER      [ reduce using rule 261 (expr -> expr LOGICAL_OR expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 261 (expr -> expr LOGICAL_OR expr .) ]
  ! INSTANCEOF      [ reduce using rule 261 (expr -> expr LOGICAL_OR expr .) ]
  ! QUESTION        [ reduce using rule 261 (expr -> expr LOGICAL_OR expr .) ]
  ! LOGICAL_OR      [ shift and go to state 202 ]


state 355

    (271) expr -> expr SL expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 271 (expr -> expr SL expr .)
    BOOLEAN_AND     reduce using rule 271 (expr -> expr SL expr .)
    BOOLEAN_OR      reduce using rule 271 (expr -> expr SL expr .)
    LOGICAL_AND     reduce using rule 271 (expr -> expr SL expr .)
    LOGICAL_OR      reduce using rule 271 (expr -> expr SL expr .)
    LOGICAL_XOR     reduce using rule 271 (expr -> expr SL expr .)
    AND             reduce using rule 271 (expr -> expr SL expr .)
    OR              reduce using rule 271 (expr -> expr SL expr .)
    XOR             reduce using rule 271 (expr -> expr SL expr .)
    SL              reduce using rule 271 (expr -> expr SL expr .)
    SR              reduce using rule 271 (expr -> expr SL expr .)
    IS_IDENTICAL    reduce using rule 271 (expr -> expr SL expr .)
    IS_NOT_IDENTICAL reduce using rule 271 (expr -> expr SL expr .)
    IS_EQUAL        reduce using rule 271 (expr -> expr SL expr .)
    IS_NOT_EQUAL    reduce using rule 271 (expr -> expr SL expr .)
    IS_SMALLER      reduce using rule 271 (expr -> expr SL expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 271 (expr -> expr SL expr .)
    IS_GREATER      reduce using rule 271 (expr -> expr SL expr .)
    IS_GREATER_OR_EQUAL reduce using rule 271 (expr -> expr SL expr .)
    QUESTION        reduce using rule 271 (expr -> expr SL expr .)
    SEMI            reduce using rule 271 (expr -> expr SL expr .)
    COMMA           reduce using rule 271 (expr -> expr SL expr .)
    RPAREN          reduce using rule 271 (expr -> expr SL expr .)
    RBRACE          reduce using rule 271 (expr -> expr SL expr .)
    RBRACKET        reduce using rule 271 (expr -> expr SL expr .)
    DOUBLE_ARROW    reduce using rule 271 (expr -> expr SL expr .)
    COLON           reduce using rule 271 (expr -> expr SL expr .)
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    MOD             shift and go to state 206
    INSTANCEOF      shift and go to state 204

  ! CONCAT          [ reduce using rule 271 (expr -> expr SL expr .) ]
  ! PLUS            [ reduce using rule 271 (expr -> expr SL expr .) ]
  ! MINUS           [ reduce using rule 271 (expr -> expr SL expr .) ]
  ! MUL             [ reduce using rule 271 (expr -> expr SL expr .) ]
  ! DIV             [ reduce using rule 271 (expr -> expr SL expr .) ]
  ! MOD             [ reduce using rule 271 (expr -> expr SL expr .) ]
  ! INSTANCEOF      [ reduce using rule 271 (expr -> expr SL expr .) ]
  ! BOOLEAN_AND     [ shift and go to state 196 ]
  ! BOOLEAN_OR      [ shift and go to state 194 ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]
  ! AND             [ shift and go to state 191 ]
  ! OR              [ shift and go to state 205 ]
  ! XOR             [ shift and go to state 193 ]
  ! SL              [ shift and go to state 203 ]
  ! SR              [ shift and go to state 199 ]
  ! IS_IDENTICAL    [ shift and go to state 201 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 198 ]
  ! IS_EQUAL        [ shift and go to state 189 ]
  ! IS_NOT_EQUAL    [ shift and go to state 195 ]
  ! IS_SMALLER      [ shift and go to state 192 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 197 ]
  ! IS_GREATER      [ shift and go to state 182 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 180 ]
  ! QUESTION        [ shift and go to state 188 ]


state 356

    (282) expr -> expr INSTANCEOF expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 282 (expr -> expr INSTANCEOF expr .)
    BOOLEAN_AND     reduce using rule 282 (expr -> expr INSTANCEOF expr .)
    BOOLEAN_OR      reduce using rule 282 (expr -> expr INSTANCEOF expr .)
    LOGICAL_AND     reduce using rule 282 (expr -> expr INSTANCEOF expr .)
    LOGICAL_OR      reduce using rule 282 (expr -> expr INSTANCEOF expr .)
    LOGICAL_XOR     reduce using rule 282 (expr -> expr INSTANCEOF expr .)
    AND             reduce using rule 282 (expr -> expr INSTANCEOF expr .)
    OR              reduce using rule 282 (expr -> expr INSTANCEOF expr .)
    XOR             reduce using rule 282 (expr -> expr INSTANCEOF expr .)
    CONCAT          reduce using rule 282 (expr -> expr INSTANCEOF expr .)
    PLUS            reduce using rule 282 (expr -> expr INSTANCEOF expr .)
    MINUS           reduce using rule 282 (expr -> expr INSTANCEOF expr .)
    MUL             reduce using rule 282 (expr -> expr INSTANCEOF expr .)
    DIV             reduce using rule 282 (expr -> expr INSTANCEOF expr .)
    SL              reduce using rule 282 (expr -> expr INSTANCEOF expr .)
    SR              reduce using rule 282 (expr -> expr INSTANCEOF expr .)
    MOD             reduce using rule 282 (expr -> expr INSTANCEOF expr .)
    IS_IDENTICAL    reduce using rule 282 (expr -> expr INSTANCEOF expr .)
    IS_NOT_IDENTICAL reduce using rule 282 (expr -> expr INSTANCEOF expr .)
    IS_EQUAL        reduce using rule 282 (expr -> expr INSTANCEOF expr .)
    IS_NOT_EQUAL    reduce using rule 282 (expr -> expr INSTANCEOF expr .)
    IS_SMALLER      reduce using rule 282 (expr -> expr INSTANCEOF expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 282 (expr -> expr INSTANCEOF expr .)
    IS_GREATER      reduce using rule 282 (expr -> expr INSTANCEOF expr .)
    IS_GREATER_OR_EQUAL reduce using rule 282 (expr -> expr INSTANCEOF expr .)
    INSTANCEOF      reduce using rule 282 (expr -> expr INSTANCEOF expr .)
    QUESTION        reduce using rule 282 (expr -> expr INSTANCEOF expr .)
    SEMI            reduce using rule 282 (expr -> expr INSTANCEOF expr .)
    COMMA           reduce using rule 282 (expr -> expr INSTANCEOF expr .)
    RPAREN          reduce using rule 282 (expr -> expr INSTANCEOF expr .)
    RBRACE          reduce using rule 282 (expr -> expr INSTANCEOF expr .)
    RBRACKET        reduce using rule 282 (expr -> expr INSTANCEOF expr .)
    DOUBLE_ARROW    reduce using rule 282 (expr -> expr INSTANCEOF expr .)
    COLON           reduce using rule 282 (expr -> expr INSTANCEOF expr .)

  ! BOOLEAN_AND     [ shift and go to state 196 ]
  ! BOOLEAN_OR      [ shift and go to state 194 ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]
  ! AND             [ shift and go to state 191 ]
  ! OR              [ shift and go to state 205 ]
  ! XOR             [ shift and go to state 193 ]
  ! CONCAT          [ shift and go to state 186 ]
  ! PLUS            [ shift and go to state 190 ]
  ! MINUS           [ shift and go to state 185 ]
  ! MUL             [ shift and go to state 183 ]
  ! DIV             [ shift and go to state 184 ]
  ! SL              [ shift and go to state 203 ]
  ! SR              [ shift and go to state 199 ]
  ! MOD             [ shift and go to state 206 ]
  ! IS_IDENTICAL    [ shift and go to state 201 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 198 ]
  ! IS_EQUAL        [ shift and go to state 189 ]
  ! IS_NOT_EQUAL    [ shift and go to state 195 ]
  ! IS_SMALLER      [ shift and go to state 192 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 197 ]
  ! IS_GREATER      [ shift and go to state 182 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 180 ]
  ! INSTANCEOF      [ shift and go to state 204 ]
  ! QUESTION        [ shift and go to state 188 ]


state 357

    (264) expr -> expr OR expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 264 (expr -> expr OR expr .)
    BOOLEAN_AND     reduce using rule 264 (expr -> expr OR expr .)
    BOOLEAN_OR      reduce using rule 264 (expr -> expr OR expr .)
    LOGICAL_AND     reduce using rule 264 (expr -> expr OR expr .)
    LOGICAL_OR      reduce using rule 264 (expr -> expr OR expr .)
    LOGICAL_XOR     reduce using rule 264 (expr -> expr OR expr .)
    OR              reduce using rule 264 (expr -> expr OR expr .)
    QUESTION        reduce using rule 264 (expr -> expr OR expr .)
    SEMI            reduce using rule 264 (expr -> expr OR expr .)
    COMMA           reduce using rule 264 (expr -> expr OR expr .)
    RPAREN          reduce using rule 264 (expr -> expr OR expr .)
    RBRACE          reduce using rule 264 (expr -> expr OR expr .)
    RBRACKET        reduce using rule 264 (expr -> expr OR expr .)
    DOUBLE_ARROW    reduce using rule 264 (expr -> expr OR expr .)
    COLON           reduce using rule 264 (expr -> expr OR expr .)
    AND             shift and go to state 191
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204

  ! AND             [ reduce using rule 264 (expr -> expr OR expr .) ]
  ! XOR             [ reduce using rule 264 (expr -> expr OR expr .) ]
  ! CONCAT          [ reduce using rule 264 (expr -> expr OR expr .) ]
  ! PLUS            [ reduce using rule 264 (expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 264 (expr -> expr OR expr .) ]
  ! MUL             [ reduce using rule 264 (expr -> expr OR expr .) ]
  ! DIV             [ reduce using rule 264 (expr -> expr OR expr .) ]
  ! SL              [ reduce using rule 264 (expr -> expr OR expr .) ]
  ! SR              [ reduce using rule 264 (expr -> expr OR expr .) ]
  ! MOD             [ reduce using rule 264 (expr -> expr OR expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 264 (expr -> expr OR expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 264 (expr -> expr OR expr .) ]
  ! IS_EQUAL        [ reduce using rule 264 (expr -> expr OR expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 264 (expr -> expr OR expr .) ]
  ! IS_SMALLER      [ reduce using rule 264 (expr -> expr OR expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 264 (expr -> expr OR expr .) ]
  ! IS_GREATER      [ reduce using rule 264 (expr -> expr OR expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 264 (expr -> expr OR expr .) ]
  ! INSTANCEOF      [ reduce using rule 264 (expr -> expr OR expr .) ]
  ! BOOLEAN_AND     [ shift and go to state 196 ]
  ! BOOLEAN_OR      [ shift and go to state 194 ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]
  ! OR              [ shift and go to state 205 ]
  ! QUESTION        [ shift and go to state 188 ]


state 358

    (273) expr -> expr MOD expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 273 (expr -> expr MOD expr .)
    BOOLEAN_AND     reduce using rule 273 (expr -> expr MOD expr .)
    BOOLEAN_OR      reduce using rule 273 (expr -> expr MOD expr .)
    LOGICAL_AND     reduce using rule 273 (expr -> expr MOD expr .)
    LOGICAL_OR      reduce using rule 273 (expr -> expr MOD expr .)
    LOGICAL_XOR     reduce using rule 273 (expr -> expr MOD expr .)
    AND             reduce using rule 273 (expr -> expr MOD expr .)
    OR              reduce using rule 273 (expr -> expr MOD expr .)
    XOR             reduce using rule 273 (expr -> expr MOD expr .)
    CONCAT          reduce using rule 273 (expr -> expr MOD expr .)
    PLUS            reduce using rule 273 (expr -> expr MOD expr .)
    MINUS           reduce using rule 273 (expr -> expr MOD expr .)
    MUL             reduce using rule 273 (expr -> expr MOD expr .)
    DIV             reduce using rule 273 (expr -> expr MOD expr .)
    SL              reduce using rule 273 (expr -> expr MOD expr .)
    SR              reduce using rule 273 (expr -> expr MOD expr .)
    MOD             reduce using rule 273 (expr -> expr MOD expr .)
    IS_IDENTICAL    reduce using rule 273 (expr -> expr MOD expr .)
    IS_NOT_IDENTICAL reduce using rule 273 (expr -> expr MOD expr .)
    IS_EQUAL        reduce using rule 273 (expr -> expr MOD expr .)
    IS_NOT_EQUAL    reduce using rule 273 (expr -> expr MOD expr .)
    IS_SMALLER      reduce using rule 273 (expr -> expr MOD expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 273 (expr -> expr MOD expr .)
    IS_GREATER      reduce using rule 273 (expr -> expr MOD expr .)
    IS_GREATER_OR_EQUAL reduce using rule 273 (expr -> expr MOD expr .)
    QUESTION        reduce using rule 273 (expr -> expr MOD expr .)
    SEMI            reduce using rule 273 (expr -> expr MOD expr .)
    COMMA           reduce using rule 273 (expr -> expr MOD expr .)
    RPAREN          reduce using rule 273 (expr -> expr MOD expr .)
    RBRACE          reduce using rule 273 (expr -> expr MOD expr .)
    RBRACKET        reduce using rule 273 (expr -> expr MOD expr .)
    DOUBLE_ARROW    reduce using rule 273 (expr -> expr MOD expr .)
    COLON           reduce using rule 273 (expr -> expr MOD expr .)
    INSTANCEOF      shift and go to state 204

  ! INSTANCEOF      [ reduce using rule 273 (expr -> expr MOD expr .) ]
  ! BOOLEAN_AND     [ shift and go to state 196 ]
  ! BOOLEAN_OR      [ shift and go to state 194 ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]
  ! AND             [ shift and go to state 191 ]
  ! OR              [ shift and go to state 205 ]
  ! XOR             [ shift and go to state 193 ]
  ! CONCAT          [ shift and go to state 186 ]
  ! PLUS            [ shift and go to state 190 ]
  ! MINUS           [ shift and go to state 185 ]
  ! MUL             [ shift and go to state 183 ]
  ! DIV             [ shift and go to state 184 ]
  ! SL              [ shift and go to state 203 ]
  ! SR              [ shift and go to state 199 ]
  ! MOD             [ shift and go to state 206 ]
  ! IS_IDENTICAL    [ shift and go to state 201 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 198 ]
  ! IS_EQUAL        [ shift and go to state 189 ]
  ! IS_NOT_EQUAL    [ shift and go to state 195 ]
  ! IS_SMALLER      [ shift and go to state 192 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 197 ]
  ! IS_GREATER      [ shift and go to state 182 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 180 ]
  ! QUESTION        [ shift and go to state 188 ]


state 359

    (179) assignment_list_element -> variable .

    RPAREN          reduce using rule 179 (assignment_list_element -> variable .)
    COMMA           reduce using rule 179 (assignment_list_element -> variable .)


state 360

    (178) assignment_list -> assignment_list_element .

    RPAREN          reduce using rule 178 (assignment_list -> assignment_list_element .)
    COMMA           reduce using rule 178 (assignment_list -> assignment_list_element .)


state 361

    (180) assignment_list_element -> empty .

    RPAREN          reduce using rule 180 (assignment_list_element -> empty .)
    COMMA           reduce using rule 180 (assignment_list_element -> empty .)


state 362

    (181) assignment_list_element -> LIST . LPAREN assignment_list RPAREN

    LPAREN          shift and go to state 480


state 363

    (176) expr -> LIST LPAREN assignment_list . RPAREN EQUALS expr
    (177) assignment_list -> assignment_list . COMMA assignment_list_element

    RPAREN          shift and go to state 481
    COMMA           shift and go to state 482


state 364

    (37) statement -> BREAK expr SEMI .

    HALT_COMPILER   reduce using rule 37 (statement -> BREAK expr SEMI .)
    NAMESPACE       reduce using rule 37 (statement -> BREAK expr SEMI .)
    CONST           reduce using rule 37 (statement -> BREAK expr SEMI .)
    USE             reduce using rule 37 (statement -> BREAK expr SEMI .)
    LBRACE          reduce using rule 37 (statement -> BREAK expr SEMI .)
    IF              reduce using rule 37 (statement -> BREAK expr SEMI .)
    WHILE           reduce using rule 37 (statement -> BREAK expr SEMI .)
    DO              reduce using rule 37 (statement -> BREAK expr SEMI .)
    FOR             reduce using rule 37 (statement -> BREAK expr SEMI .)
    FOREACH         reduce using rule 37 (statement -> BREAK expr SEMI .)
    SWITCH          reduce using rule 37 (statement -> BREAK expr SEMI .)
    BREAK           reduce using rule 37 (statement -> BREAK expr SEMI .)
    CONTINUE        reduce using rule 37 (statement -> BREAK expr SEMI .)
    RETURN          reduce using rule 37 (statement -> BREAK expr SEMI .)
    GLOBAL          reduce using rule 37 (statement -> BREAK expr SEMI .)
    STATIC          reduce using rule 37 (statement -> BREAK expr SEMI .)
    ECHO            reduce using rule 37 (statement -> BREAK expr SEMI .)
    INLINE_HTML     reduce using rule 37 (statement -> BREAK expr SEMI .)
    UNSET           reduce using rule 37 (statement -> BREAK expr SEMI .)
    SEMI            reduce using rule 37 (statement -> BREAK expr SEMI .)
    TRY             reduce using rule 37 (statement -> BREAK expr SEMI .)
    THROW           reduce using rule 37 (statement -> BREAK expr SEMI .)
    DECLARE         reduce using rule 37 (statement -> BREAK expr SEMI .)
    FUNCTION        reduce using rule 37 (statement -> BREAK expr SEMI .)
    INTERFACE       reduce using rule 37 (statement -> BREAK expr SEMI .)
    NEW             reduce using rule 37 (statement -> BREAK expr SEMI .)
    CLONE           reduce using rule 37 (statement -> BREAK expr SEMI .)
    LIST            reduce using rule 37 (statement -> BREAK expr SEMI .)
    ARRAY           reduce using rule 37 (statement -> BREAK expr SEMI .)
    PLUS            reduce using rule 37 (statement -> BREAK expr SEMI .)
    MINUS           reduce using rule 37 (statement -> BREAK expr SEMI .)
    NOT             reduce using rule 37 (statement -> BREAK expr SEMI .)
    BOOLEAN_NOT     reduce using rule 37 (statement -> BREAK expr SEMI .)
    INC             reduce using rule 37 (statement -> BREAK expr SEMI .)
    DEC             reduce using rule 37 (statement -> BREAK expr SEMI .)
    INT_CAST        reduce using rule 37 (statement -> BREAK expr SEMI .)
    DOUBLE_CAST     reduce using rule 37 (statement -> BREAK expr SEMI .)
    STRING_CAST     reduce using rule 37 (statement -> BREAK expr SEMI .)
    ARRAY_CAST      reduce using rule 37 (statement -> BREAK expr SEMI .)
    OBJECT_CAST     reduce using rule 37 (statement -> BREAK expr SEMI .)
    BOOL_CAST       reduce using rule 37 (statement -> BREAK expr SEMI .)
    UNSET_CAST      reduce using rule 37 (statement -> BREAK expr SEMI .)
    ISSET           reduce using rule 37 (statement -> BREAK expr SEMI .)
    EMPTY           reduce using rule 37 (statement -> BREAK expr SEMI .)
    EVAL            reduce using rule 37 (statement -> BREAK expr SEMI .)
    INCLUDE         reduce using rule 37 (statement -> BREAK expr SEMI .)
    INCLUDE_ONCE    reduce using rule 37 (statement -> BREAK expr SEMI .)
    REQUIRE         reduce using rule 37 (statement -> BREAK expr SEMI .)
    REQUIRE_ONCE    reduce using rule 37 (statement -> BREAK expr SEMI .)
    EXIT            reduce using rule 37 (statement -> BREAK expr SEMI .)
    PRINT           reduce using rule 37 (statement -> BREAK expr SEMI .)
    AT              reduce using rule 37 (statement -> BREAK expr SEMI .)
    LPAREN          reduce using rule 37 (statement -> BREAK expr SEMI .)
    CLASS           reduce using rule 37 (statement -> BREAK expr SEMI .)
    ABSTRACT        reduce using rule 37 (statement -> BREAK expr SEMI .)
    FINAL           reduce using rule 37 (statement -> BREAK expr SEMI .)
    QUOTE           reduce using rule 37 (statement -> BREAK expr SEMI .)
    START_HEREDOC   reduce using rule 37 (statement -> BREAK expr SEMI .)
    STRING_VARNAME  reduce using rule 37 (statement -> BREAK expr SEMI .)
    NS_SEPARATOR    reduce using rule 37 (statement -> BREAK expr SEMI .)
    LNUMBER         reduce using rule 37 (statement -> BREAK expr SEMI .)
    DNUMBER         reduce using rule 37 (statement -> BREAK expr SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 37 (statement -> BREAK expr SEMI .)
    LINE            reduce using rule 37 (statement -> BREAK expr SEMI .)
    FILE            reduce using rule 37 (statement -> BREAK expr SEMI .)
    DIR             reduce using rule 37 (statement -> BREAK expr SEMI .)
    CLASS_C         reduce using rule 37 (statement -> BREAK expr SEMI .)
    METHOD_C        reduce using rule 37 (statement -> BREAK expr SEMI .)
    FUNC_C          reduce using rule 37 (statement -> BREAK expr SEMI .)
    NS_C            reduce using rule 37 (statement -> BREAK expr SEMI .)
    STRING          reduce using rule 37 (statement -> BREAK expr SEMI .)
    DOLLAR          reduce using rule 37 (statement -> BREAK expr SEMI .)
    VARIABLE        reduce using rule 37 (statement -> BREAK expr SEMI .)
    $end            reduce using rule 37 (statement -> BREAK expr SEMI .)
    RBRACE          reduce using rule 37 (statement -> BREAK expr SEMI .)
    ELSEIF          reduce using rule 37 (statement -> BREAK expr SEMI .)
    ELSE            reduce using rule 37 (statement -> BREAK expr SEMI .)
    ENDDECLARE      reduce using rule 37 (statement -> BREAK expr SEMI .)
    ENDWHILE        reduce using rule 37 (statement -> BREAK expr SEMI .)
    ENDIF           reduce using rule 37 (statement -> BREAK expr SEMI .)
    ENDFOREACH      reduce using rule 37 (statement -> BREAK expr SEMI .)
    CASE            reduce using rule 37 (statement -> BREAK expr SEMI .)
    DEFAULT         reduce using rule 37 (statement -> BREAK expr SEMI .)
    ENDSWITCH       reduce using rule 37 (statement -> BREAK expr SEMI .)
    ENDFOR          reduce using rule 37 (statement -> BREAK expr SEMI .)


state 365

    (309) expr -> EXIT LPAREN RPAREN .

    AS              reduce using rule 309 (expr -> EXIT LPAREN RPAREN .)
    BOOLEAN_AND     reduce using rule 309 (expr -> EXIT LPAREN RPAREN .)
    BOOLEAN_OR      reduce using rule 309 (expr -> EXIT LPAREN RPAREN .)
    LOGICAL_AND     reduce using rule 309 (expr -> EXIT LPAREN RPAREN .)
    LOGICAL_OR      reduce using rule 309 (expr -> EXIT LPAREN RPAREN .)
    LOGICAL_XOR     reduce using rule 309 (expr -> EXIT LPAREN RPAREN .)
    AND             reduce using rule 309 (expr -> EXIT LPAREN RPAREN .)
    OR              reduce using rule 309 (expr -> EXIT LPAREN RPAREN .)
    XOR             reduce using rule 309 (expr -> EXIT LPAREN RPAREN .)
    CONCAT          reduce using rule 309 (expr -> EXIT LPAREN RPAREN .)
    PLUS            reduce using rule 309 (expr -> EXIT LPAREN RPAREN .)
    MINUS           reduce using rule 309 (expr -> EXIT LPAREN RPAREN .)
    MUL             reduce using rule 309 (expr -> EXIT LPAREN RPAREN .)
    DIV             reduce using rule 309 (expr -> EXIT LPAREN RPAREN .)
    SL              reduce using rule 309 (expr -> EXIT LPAREN RPAREN .)
    SR              reduce using rule 309 (expr -> EXIT LPAREN RPAREN .)
    MOD             reduce using rule 309 (expr -> EXIT LPAREN RPAREN .)
    IS_IDENTICAL    reduce using rule 309 (expr -> EXIT LPAREN RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 309 (expr -> EXIT LPAREN RPAREN .)
    IS_EQUAL        reduce using rule 309 (expr -> EXIT LPAREN RPAREN .)
    IS_NOT_EQUAL    reduce using rule 309 (expr -> EXIT LPAREN RPAREN .)
    IS_SMALLER      reduce using rule 309 (expr -> EXIT LPAREN RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 309 (expr -> EXIT LPAREN RPAREN .)
    IS_GREATER      reduce using rule 309 (expr -> EXIT LPAREN RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 309 (expr -> EXIT LPAREN RPAREN .)
    INSTANCEOF      reduce using rule 309 (expr -> EXIT LPAREN RPAREN .)
    QUESTION        reduce using rule 309 (expr -> EXIT LPAREN RPAREN .)
    SEMI            reduce using rule 309 (expr -> EXIT LPAREN RPAREN .)
    COMMA           reduce using rule 309 (expr -> EXIT LPAREN RPAREN .)
    RPAREN          reduce using rule 309 (expr -> EXIT LPAREN RPAREN .)
    RBRACE          reduce using rule 309 (expr -> EXIT LPAREN RPAREN .)
    RBRACKET        reduce using rule 309 (expr -> EXIT LPAREN RPAREN .)
    DOUBLE_ARROW    reduce using rule 309 (expr -> EXIT LPAREN RPAREN .)
    COLON           reduce using rule 309 (expr -> EXIT LPAREN RPAREN .)


state 366

    (310) expr -> EXIT LPAREN expr . RPAREN
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    RPAREN          shift and go to state 483
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    LOGICAL_AND     shift and go to state 181
    LOGICAL_OR      shift and go to state 202
    LOGICAL_XOR     shift and go to state 200
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188


state 367

    (32) statement -> DO statement WHILE . LPAREN expr RPAREN SEMI

    LPAREN          shift and go to state 484


state 368

    (13) use_declarations -> use_declarations COMMA . use_declaration
    (15) use_declaration -> . namespace_name
    (16) use_declaration -> . NS_SEPARATOR namespace_name
    (17) use_declaration -> . namespace_name AS STRING
    (18) use_declaration -> . NS_SEPARATOR namespace_name AS STRING
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    NS_SEPARATOR    shift and go to state 213
    STRING          shift and go to state 89

    namespace_name                 shift and go to state 215
    use_declaration                shift and go to state 485

state 369

    (12) top_statement -> USE use_declarations SEMI .

    RBRACE          reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    HALT_COMPILER   reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    NAMESPACE       reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    CONST           reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    USE             reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    LBRACE          reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    IF              reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    WHILE           reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    DO              reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    FOR             reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    FOREACH         reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    SWITCH          reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    BREAK           reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    CONTINUE        reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    RETURN          reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    GLOBAL          reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    STATIC          reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    ECHO            reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    INLINE_HTML     reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    UNSET           reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    SEMI            reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    TRY             reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    THROW           reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    DECLARE         reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    FUNCTION        reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    INTERFACE       reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    NEW             reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    CLONE           reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    LIST            reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    ARRAY           reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    PLUS            reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    MINUS           reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    NOT             reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    BOOLEAN_NOT     reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    INC             reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    DEC             reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    INT_CAST        reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    DOUBLE_CAST     reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    STRING_CAST     reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    ARRAY_CAST      reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    OBJECT_CAST     reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    BOOL_CAST       reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    UNSET_CAST      reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    ISSET           reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    EMPTY           reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    EVAL            reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    INCLUDE         reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    INCLUDE_ONCE    reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    REQUIRE         reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    REQUIRE_ONCE    reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    EXIT            reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    PRINT           reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    AT              reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    LPAREN          reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    CLASS           reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    ABSTRACT        reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    FINAL           reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    QUOTE           reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    START_HEREDOC   reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    STRING_VARNAME  reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    NS_SEPARATOR    reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    LNUMBER         reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    DNUMBER         reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    LINE            reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    FILE            reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    DIR             reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    CLASS_C         reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    METHOD_C        reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    FUNC_C          reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    NS_C            reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    STRING          reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    DOLLAR          reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    VARIABLE        reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    $end            reduce using rule 12 (top_statement -> USE use_declarations SEMI .)


state 370

    (16) use_declaration -> NS_SEPARATOR namespace_name .
    (18) use_declaration -> NS_SEPARATOR namespace_name . AS STRING
    (349) namespace_name -> namespace_name . NS_SEPARATOR STRING

    SEMI            reduce using rule 16 (use_declaration -> NS_SEPARATOR namespace_name .)
    COMMA           reduce using rule 16 (use_declaration -> NS_SEPARATOR namespace_name .)
    AS              shift and go to state 486
    NS_SEPARATOR    shift and go to state 178


state 371

    (17) use_declaration -> namespace_name AS . STRING

    STRING          shift and go to state 487


state 372

    (19) constant_declarations -> constant_declarations COMMA . constant_declaration
    (21) constant_declaration -> . STRING EQUALS static_scalar

    STRING          shift and go to state 217

    constant_declaration           shift and go to state 488

state 373

    (11) top_statement -> CONST constant_declarations SEMI .

    RBRACE          reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    HALT_COMPILER   reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    NAMESPACE       reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    CONST           reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    USE             reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    LBRACE          reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    IF              reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    WHILE           reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    DO              reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    FOR             reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    FOREACH         reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    SWITCH          reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    BREAK           reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    CONTINUE        reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    RETURN          reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    GLOBAL          reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    STATIC          reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    ECHO            reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    INLINE_HTML     reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    UNSET           reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    SEMI            reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    TRY             reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    THROW           reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    DECLARE         reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    FUNCTION        reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    INTERFACE       reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    NEW             reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    CLONE           reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    LIST            reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    ARRAY           reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    PLUS            reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    MINUS           reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    NOT             reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    BOOLEAN_NOT     reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    INC             reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    DEC             reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    INT_CAST        reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    DOUBLE_CAST     reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    STRING_CAST     reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    ARRAY_CAST      reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    OBJECT_CAST     reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    BOOL_CAST       reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    UNSET_CAST      reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    ISSET           reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    EMPTY           reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    EVAL            reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    INCLUDE         reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    INCLUDE_ONCE    reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    REQUIRE         reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    REQUIRE_ONCE    reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    EXIT            reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    PRINT           reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    AT              reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    LPAREN          reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    CLASS           reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    ABSTRACT        reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    FINAL           reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    QUOTE           reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    START_HEREDOC   reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    STRING_VARNAME  reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    NS_SEPARATOR    reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    LNUMBER         reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    DNUMBER         reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    LINE            reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    FILE            reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    DIR             reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    CLASS_C         reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    METHOD_C        reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    FUNC_C          reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    NS_C            reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    STRING          reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    DOLLAR          reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    VARIABLE        reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    $end            reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)


state 374

    (21) constant_declaration -> STRING EQUALS . static_scalar
    (334) static_scalar -> . common_scalar
    (335) static_scalar -> . QUOTE QUOTE
    (336) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (337) static_scalar -> . namespace_name
    (338) static_scalar -> . NS_SEPARATOR namespace_name
    (339) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (340) static_scalar -> . PLUS static_scalar
    (341) static_scalar -> . MINUS static_scalar
    (342) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    QUOTE           shift and go to state 417
    NS_SEPARATOR    shift and go to state 421
    NAMESPACE       shift and go to state 420
    PLUS            shift and go to state 418
    MINUS           shift and go to state 415
    ARRAY           shift and go to state 419
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89

    static_scalar                  shift and go to state 489
    common_scalar                  shift and go to state 414
    namespace_name                 shift and go to state 422

state 375

    (102) unset_variable -> variable .

    RPAREN          reduce using rule 102 (unset_variable -> variable .)
    COMMA           reduce using rule 102 (unset_variable -> variable .)


state 376

    (101) unset_variables -> unset_variable .

    RPAREN          reduce using rule 101 (unset_variables -> unset_variable .)
    COMMA           reduce using rule 101 (unset_variables -> unset_variable .)


state 377

    (47) statement -> UNSET LPAREN unset_variables . RPAREN SEMI
    (100) unset_variables -> unset_variables . COMMA unset_variable

    RPAREN          shift and go to state 490
    COMMA           shift and go to state 491


state 378

    (193) function_call -> variable_without_objects LPAREN function_call_parameter_list . RPAREN
    (235) function_call_parameter_list -> function_call_parameter_list . COMMA function_call_parameter

    RPAREN          shift and go to state 492
    COMMA           shift and go to state 477


state 379

    (301) isset_variables -> variable .

    RPAREN          reduce using rule 301 (isset_variables -> variable .)
    COMMA           reduce using rule 301 (isset_variables -> variable .)


state 380

    (299) expr -> ISSET LPAREN isset_variables . RPAREN
    (300) isset_variables -> isset_variables . COMMA variable

    RPAREN          shift and go to state 493
    COMMA           shift and go to state 494


state 381

    (210) compound_variable -> DOLLAR LBRACE expr . RBRACE
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    RBRACE          shift and go to state 495
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    LOGICAL_AND     shift and go to state 181
    LOGICAL_OR      shift and go to state 202
    LOGICAL_XOR     shift and go to state 200
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188


state 382

    (313) expr -> LPAREN expr RPAREN .

    AS              reduce using rule 313 (expr -> LPAREN expr RPAREN .)
    BOOLEAN_AND     reduce using rule 313 (expr -> LPAREN expr RPAREN .)
    BOOLEAN_OR      reduce using rule 313 (expr -> LPAREN expr RPAREN .)
    LOGICAL_AND     reduce using rule 313 (expr -> LPAREN expr RPAREN .)
    LOGICAL_OR      reduce using rule 313 (expr -> LPAREN expr RPAREN .)
    LOGICAL_XOR     reduce using rule 313 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 313 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 313 (expr -> LPAREN expr RPAREN .)
    XOR             reduce using rule 313 (expr -> LPAREN expr RPAREN .)
    CONCAT          reduce using rule 313 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 313 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 313 (expr -> LPAREN expr RPAREN .)
    MUL             reduce using rule 313 (expr -> LPAREN expr RPAREN .)
    DIV             reduce using rule 313 (expr -> LPAREN expr RPAREN .)
    SL              reduce using rule 313 (expr -> LPAREN expr RPAREN .)
    SR              reduce using rule 313 (expr -> LPAREN expr RPAREN .)
    MOD             reduce using rule 313 (expr -> LPAREN expr RPAREN .)
    IS_IDENTICAL    reduce using rule 313 (expr -> LPAREN expr RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 313 (expr -> LPAREN expr RPAREN .)
    IS_EQUAL        reduce using rule 313 (expr -> LPAREN expr RPAREN .)
    IS_NOT_EQUAL    reduce using rule 313 (expr -> LPAREN expr RPAREN .)
    IS_SMALLER      reduce using rule 313 (expr -> LPAREN expr RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 313 (expr -> LPAREN expr RPAREN .)
    IS_GREATER      reduce using rule 313 (expr -> LPAREN expr RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 313 (expr -> LPAREN expr RPAREN .)
    INSTANCEOF      reduce using rule 313 (expr -> LPAREN expr RPAREN .)
    QUESTION        reduce using rule 313 (expr -> LPAREN expr RPAREN .)
    SEMI            reduce using rule 313 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 313 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 313 (expr -> LPAREN expr RPAREN .)
    RBRACE          reduce using rule 313 (expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 313 (expr -> LPAREN expr RPAREN .)
    DOUBLE_ARROW    reduce using rule 313 (expr -> LPAREN expr RPAREN .)
    COLON           reduce using rule 313 (expr -> LPAREN expr RPAREN .)


state 383

    (256) expr -> variable SL_EQUAL expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 256 (expr -> variable SL_EQUAL expr .)
    LOGICAL_AND     reduce using rule 256 (expr -> variable SL_EQUAL expr .)
    LOGICAL_OR      reduce using rule 256 (expr -> variable SL_EQUAL expr .)
    LOGICAL_XOR     reduce using rule 256 (expr -> variable SL_EQUAL expr .)
    SEMI            reduce using rule 256 (expr -> variable SL_EQUAL expr .)
    COMMA           reduce using rule 256 (expr -> variable SL_EQUAL expr .)
    RPAREN          reduce using rule 256 (expr -> variable SL_EQUAL expr .)
    RBRACE          reduce using rule 256 (expr -> variable SL_EQUAL expr .)
    RBRACKET        reduce using rule 256 (expr -> variable SL_EQUAL expr .)
    DOUBLE_ARROW    reduce using rule 256 (expr -> variable SL_EQUAL expr .)
    COLON           reduce using rule 256 (expr -> variable SL_EQUAL expr .)
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188

  ! BOOLEAN_AND     [ reduce using rule 256 (expr -> variable SL_EQUAL expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 256 (expr -> variable SL_EQUAL expr .) ]
  ! AND             [ reduce using rule 256 (expr -> variable SL_EQUAL expr .) ]
  ! OR              [ reduce using rule 256 (expr -> variable SL_EQUAL expr .) ]
  ! XOR             [ reduce using rule 256 (expr -> variable SL_EQUAL expr .) ]
  ! CONCAT          [ reduce using rule 256 (expr -> variable SL_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 256 (expr -> variable SL_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 256 (expr -> variable SL_EQUAL expr .) ]
  ! MUL             [ reduce using rule 256 (expr -> variable SL_EQUAL expr .) ]
  ! DIV             [ reduce using rule 256 (expr -> variable SL_EQUAL expr .) ]
  ! SL              [ reduce using rule 256 (expr -> variable SL_EQUAL expr .) ]
  ! SR              [ reduce using rule 256 (expr -> variable SL_EQUAL expr .) ]
  ! MOD             [ reduce using rule 256 (expr -> variable SL_EQUAL expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 256 (expr -> variable SL_EQUAL expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 256 (expr -> variable SL_EQUAL expr .) ]
  ! IS_EQUAL        [ reduce using rule 256 (expr -> variable SL_EQUAL expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 256 (expr -> variable SL_EQUAL expr .) ]
  ! IS_SMALLER      [ reduce using rule 256 (expr -> variable SL_EQUAL expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 256 (expr -> variable SL_EQUAL expr .) ]
  ! IS_GREATER      [ reduce using rule 256 (expr -> variable SL_EQUAL expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 256 (expr -> variable SL_EQUAL expr .) ]
  ! INSTANCEOF      [ reduce using rule 256 (expr -> variable SL_EQUAL expr .) ]
  ! QUESTION        [ reduce using rule 256 (expr -> variable SL_EQUAL expr .) ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]


state 384

    (254) expr -> variable OR_EQUAL expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 254 (expr -> variable OR_EQUAL expr .)
    LOGICAL_AND     reduce using rule 254 (expr -> variable OR_EQUAL expr .)
    LOGICAL_OR      reduce using rule 254 (expr -> variable OR_EQUAL expr .)
    LOGICAL_XOR     reduce using rule 254 (expr -> variable OR_EQUAL expr .)
    SEMI            reduce using rule 254 (expr -> variable OR_EQUAL expr .)
    COMMA           reduce using rule 254 (expr -> variable OR_EQUAL expr .)
    RPAREN          reduce using rule 254 (expr -> variable OR_EQUAL expr .)
    RBRACE          reduce using rule 254 (expr -> variable OR_EQUAL expr .)
    RBRACKET        reduce using rule 254 (expr -> variable OR_EQUAL expr .)
    DOUBLE_ARROW    reduce using rule 254 (expr -> variable OR_EQUAL expr .)
    COLON           reduce using rule 254 (expr -> variable OR_EQUAL expr .)
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188

  ! BOOLEAN_AND     [ reduce using rule 254 (expr -> variable OR_EQUAL expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 254 (expr -> variable OR_EQUAL expr .) ]
  ! AND             [ reduce using rule 254 (expr -> variable OR_EQUAL expr .) ]
  ! OR              [ reduce using rule 254 (expr -> variable OR_EQUAL expr .) ]
  ! XOR             [ reduce using rule 254 (expr -> variable OR_EQUAL expr .) ]
  ! CONCAT          [ reduce using rule 254 (expr -> variable OR_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 254 (expr -> variable OR_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 254 (expr -> variable OR_EQUAL expr .) ]
  ! MUL             [ reduce using rule 254 (expr -> variable OR_EQUAL expr .) ]
  ! DIV             [ reduce using rule 254 (expr -> variable OR_EQUAL expr .) ]
  ! SL              [ reduce using rule 254 (expr -> variable OR_EQUAL expr .) ]
  ! SR              [ reduce using rule 254 (expr -> variable OR_EQUAL expr .) ]
  ! MOD             [ reduce using rule 254 (expr -> variable OR_EQUAL expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 254 (expr -> variable OR_EQUAL expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 254 (expr -> variable OR_EQUAL expr .) ]
  ! IS_EQUAL        [ reduce using rule 254 (expr -> variable OR_EQUAL expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 254 (expr -> variable OR_EQUAL expr .) ]
  ! IS_SMALLER      [ reduce using rule 254 (expr -> variable OR_EQUAL expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 254 (expr -> variable OR_EQUAL expr .) ]
  ! IS_GREATER      [ reduce using rule 254 (expr -> variable OR_EQUAL expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 254 (expr -> variable OR_EQUAL expr .) ]
  ! INSTANCEOF      [ reduce using rule 254 (expr -> variable OR_EQUAL expr .) ]
  ! QUESTION        [ reduce using rule 254 (expr -> variable OR_EQUAL expr .) ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]


state 385

    (247) expr -> variable PLUS_EQUAL expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 247 (expr -> variable PLUS_EQUAL expr .)
    LOGICAL_AND     reduce using rule 247 (expr -> variable PLUS_EQUAL expr .)
    LOGICAL_OR      reduce using rule 247 (expr -> variable PLUS_EQUAL expr .)
    LOGICAL_XOR     reduce using rule 247 (expr -> variable PLUS_EQUAL expr .)
    SEMI            reduce using rule 247 (expr -> variable PLUS_EQUAL expr .)
    COMMA           reduce using rule 247 (expr -> variable PLUS_EQUAL expr .)
    RPAREN          reduce using rule 247 (expr -> variable PLUS_EQUAL expr .)
    RBRACE          reduce using rule 247 (expr -> variable PLUS_EQUAL expr .)
    RBRACKET        reduce using rule 247 (expr -> variable PLUS_EQUAL expr .)
    DOUBLE_ARROW    reduce using rule 247 (expr -> variable PLUS_EQUAL expr .)
    COLON           reduce using rule 247 (expr -> variable PLUS_EQUAL expr .)
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188

  ! BOOLEAN_AND     [ reduce using rule 247 (expr -> variable PLUS_EQUAL expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 247 (expr -> variable PLUS_EQUAL expr .) ]
  ! AND             [ reduce using rule 247 (expr -> variable PLUS_EQUAL expr .) ]
  ! OR              [ reduce using rule 247 (expr -> variable PLUS_EQUAL expr .) ]
  ! XOR             [ reduce using rule 247 (expr -> variable PLUS_EQUAL expr .) ]
  ! CONCAT          [ reduce using rule 247 (expr -> variable PLUS_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 247 (expr -> variable PLUS_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 247 (expr -> variable PLUS_EQUAL expr .) ]
  ! MUL             [ reduce using rule 247 (expr -> variable PLUS_EQUAL expr .) ]
  ! DIV             [ reduce using rule 247 (expr -> variable PLUS_EQUAL expr .) ]
  ! SL              [ reduce using rule 247 (expr -> variable PLUS_EQUAL expr .) ]
  ! SR              [ reduce using rule 247 (expr -> variable PLUS_EQUAL expr .) ]
  ! MOD             [ reduce using rule 247 (expr -> variable PLUS_EQUAL expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 247 (expr -> variable PLUS_EQUAL expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 247 (expr -> variable PLUS_EQUAL expr .) ]
  ! IS_EQUAL        [ reduce using rule 247 (expr -> variable PLUS_EQUAL expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 247 (expr -> variable PLUS_EQUAL expr .) ]
  ! IS_SMALLER      [ reduce using rule 247 (expr -> variable PLUS_EQUAL expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 247 (expr -> variable PLUS_EQUAL expr .) ]
  ! IS_GREATER      [ reduce using rule 247 (expr -> variable PLUS_EQUAL expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 247 (expr -> variable PLUS_EQUAL expr .) ]
  ! INSTANCEOF      [ reduce using rule 247 (expr -> variable PLUS_EQUAL expr .) ]
  ! QUESTION        [ reduce using rule 247 (expr -> variable PLUS_EQUAL expr .) ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]


state 386

    (249) expr -> variable MUL_EQUAL expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 249 (expr -> variable MUL_EQUAL expr .)
    LOGICAL_AND     reduce using rule 249 (expr -> variable MUL_EQUAL expr .)
    LOGICAL_OR      reduce using rule 249 (expr -> variable MUL_EQUAL expr .)
    LOGICAL_XOR     reduce using rule 249 (expr -> variable MUL_EQUAL expr .)
    SEMI            reduce using rule 249 (expr -> variable MUL_EQUAL expr .)
    COMMA           reduce using rule 249 (expr -> variable MUL_EQUAL expr .)
    RPAREN          reduce using rule 249 (expr -> variable MUL_EQUAL expr .)
    RBRACE          reduce using rule 249 (expr -> variable MUL_EQUAL expr .)
    RBRACKET        reduce using rule 249 (expr -> variable MUL_EQUAL expr .)
    DOUBLE_ARROW    reduce using rule 249 (expr -> variable MUL_EQUAL expr .)
    COLON           reduce using rule 249 (expr -> variable MUL_EQUAL expr .)
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188

  ! BOOLEAN_AND     [ reduce using rule 249 (expr -> variable MUL_EQUAL expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 249 (expr -> variable MUL_EQUAL expr .) ]
  ! AND             [ reduce using rule 249 (expr -> variable MUL_EQUAL expr .) ]
  ! OR              [ reduce using rule 249 (expr -> variable MUL_EQUAL expr .) ]
  ! XOR             [ reduce using rule 249 (expr -> variable MUL_EQUAL expr .) ]
  ! CONCAT          [ reduce using rule 249 (expr -> variable MUL_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 249 (expr -> variable MUL_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 249 (expr -> variable MUL_EQUAL expr .) ]
  ! MUL             [ reduce using rule 249 (expr -> variable MUL_EQUAL expr .) ]
  ! DIV             [ reduce using rule 249 (expr -> variable MUL_EQUAL expr .) ]
  ! SL              [ reduce using rule 249 (expr -> variable MUL_EQUAL expr .) ]
  ! SR              [ reduce using rule 249 (expr -> variable MUL_EQUAL expr .) ]
  ! MOD             [ reduce using rule 249 (expr -> variable MUL_EQUAL expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 249 (expr -> variable MUL_EQUAL expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 249 (expr -> variable MUL_EQUAL expr .) ]
  ! IS_EQUAL        [ reduce using rule 249 (expr -> variable MUL_EQUAL expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 249 (expr -> variable MUL_EQUAL expr .) ]
  ! IS_SMALLER      [ reduce using rule 249 (expr -> variable MUL_EQUAL expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 249 (expr -> variable MUL_EQUAL expr .) ]
  ! IS_GREATER      [ reduce using rule 249 (expr -> variable MUL_EQUAL expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 249 (expr -> variable MUL_EQUAL expr .) ]
  ! INSTANCEOF      [ reduce using rule 249 (expr -> variable MUL_EQUAL expr .) ]
  ! QUESTION        [ reduce using rule 249 (expr -> variable MUL_EQUAL expr .) ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]


state 387

    (159) expr -> variable EQUALS expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 159 (expr -> variable EQUALS expr .)
    LOGICAL_AND     reduce using rule 159 (expr -> variable EQUALS expr .)
    LOGICAL_OR      reduce using rule 159 (expr -> variable EQUALS expr .)
    LOGICAL_XOR     reduce using rule 159 (expr -> variable EQUALS expr .)
    SEMI            reduce using rule 159 (expr -> variable EQUALS expr .)
    COMMA           reduce using rule 159 (expr -> variable EQUALS expr .)
    RPAREN          reduce using rule 159 (expr -> variable EQUALS expr .)
    RBRACE          reduce using rule 159 (expr -> variable EQUALS expr .)
    RBRACKET        reduce using rule 159 (expr -> variable EQUALS expr .)
    DOUBLE_ARROW    reduce using rule 159 (expr -> variable EQUALS expr .)
    COLON           reduce using rule 159 (expr -> variable EQUALS expr .)
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188

  ! BOOLEAN_AND     [ reduce using rule 159 (expr -> variable EQUALS expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 159 (expr -> variable EQUALS expr .) ]
  ! AND             [ reduce using rule 159 (expr -> variable EQUALS expr .) ]
  ! OR              [ reduce using rule 159 (expr -> variable EQUALS expr .) ]
  ! XOR             [ reduce using rule 159 (expr -> variable EQUALS expr .) ]
  ! CONCAT          [ reduce using rule 159 (expr -> variable EQUALS expr .) ]
  ! PLUS            [ reduce using rule 159 (expr -> variable EQUALS expr .) ]
  ! MINUS           [ reduce using rule 159 (expr -> variable EQUALS expr .) ]
  ! MUL             [ reduce using rule 159 (expr -> variable EQUALS expr .) ]
  ! DIV             [ reduce using rule 159 (expr -> variable EQUALS expr .) ]
  ! SL              [ reduce using rule 159 (expr -> variable EQUALS expr .) ]
  ! SR              [ reduce using rule 159 (expr -> variable EQUALS expr .) ]
  ! MOD             [ reduce using rule 159 (expr -> variable EQUALS expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 159 (expr -> variable EQUALS expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 159 (expr -> variable EQUALS expr .) ]
  ! IS_EQUAL        [ reduce using rule 159 (expr -> variable EQUALS expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 159 (expr -> variable EQUALS expr .) ]
  ! IS_SMALLER      [ reduce using rule 159 (expr -> variable EQUALS expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 159 (expr -> variable EQUALS expr .) ]
  ! IS_GREATER      [ reduce using rule 159 (expr -> variable EQUALS expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 159 (expr -> variable EQUALS expr .) ]
  ! INSTANCEOF      [ reduce using rule 159 (expr -> variable EQUALS expr .) ]
  ! QUESTION        [ reduce using rule 159 (expr -> variable EQUALS expr .) ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]


state 388

    (160) expr -> variable EQUALS AND . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 496

state 389

    (252) expr -> variable MOD_EQUAL expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 252 (expr -> variable MOD_EQUAL expr .)
    LOGICAL_AND     reduce using rule 252 (expr -> variable MOD_EQUAL expr .)
    LOGICAL_OR      reduce using rule 252 (expr -> variable MOD_EQUAL expr .)
    LOGICAL_XOR     reduce using rule 252 (expr -> variable MOD_EQUAL expr .)
    SEMI            reduce using rule 252 (expr -> variable MOD_EQUAL expr .)
    COMMA           reduce using rule 252 (expr -> variable MOD_EQUAL expr .)
    RPAREN          reduce using rule 252 (expr -> variable MOD_EQUAL expr .)
    RBRACE          reduce using rule 252 (expr -> variable MOD_EQUAL expr .)
    RBRACKET        reduce using rule 252 (expr -> variable MOD_EQUAL expr .)
    DOUBLE_ARROW    reduce using rule 252 (expr -> variable MOD_EQUAL expr .)
    COLON           reduce using rule 252 (expr -> variable MOD_EQUAL expr .)
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188

  ! BOOLEAN_AND     [ reduce using rule 252 (expr -> variable MOD_EQUAL expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 252 (expr -> variable MOD_EQUAL expr .) ]
  ! AND             [ reduce using rule 252 (expr -> variable MOD_EQUAL expr .) ]
  ! OR              [ reduce using rule 252 (expr -> variable MOD_EQUAL expr .) ]
  ! XOR             [ reduce using rule 252 (expr -> variable MOD_EQUAL expr .) ]
  ! CONCAT          [ reduce using rule 252 (expr -> variable MOD_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 252 (expr -> variable MOD_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 252 (expr -> variable MOD_EQUAL expr .) ]
  ! MUL             [ reduce using rule 252 (expr -> variable MOD_EQUAL expr .) ]
  ! DIV             [ reduce using rule 252 (expr -> variable MOD_EQUAL expr .) ]
  ! SL              [ reduce using rule 252 (expr -> variable MOD_EQUAL expr .) ]
  ! SR              [ reduce using rule 252 (expr -> variable MOD_EQUAL expr .) ]
  ! MOD             [ reduce using rule 252 (expr -> variable MOD_EQUAL expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 252 (expr -> variable MOD_EQUAL expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 252 (expr -> variable MOD_EQUAL expr .) ]
  ! IS_EQUAL        [ reduce using rule 252 (expr -> variable MOD_EQUAL expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 252 (expr -> variable MOD_EQUAL expr .) ]
  ! IS_SMALLER      [ reduce using rule 252 (expr -> variable MOD_EQUAL expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 252 (expr -> variable MOD_EQUAL expr .) ]
  ! IS_GREATER      [ reduce using rule 252 (expr -> variable MOD_EQUAL expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 252 (expr -> variable MOD_EQUAL expr .) ]
  ! INSTANCEOF      [ reduce using rule 252 (expr -> variable MOD_EQUAL expr .) ]
  ! QUESTION        [ reduce using rule 252 (expr -> variable MOD_EQUAL expr .) ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]


state 390

    (257) expr -> variable SR_EQUAL expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 257 (expr -> variable SR_EQUAL expr .)
    LOGICAL_AND     reduce using rule 257 (expr -> variable SR_EQUAL expr .)
    LOGICAL_OR      reduce using rule 257 (expr -> variable SR_EQUAL expr .)
    LOGICAL_XOR     reduce using rule 257 (expr -> variable SR_EQUAL expr .)
    SEMI            reduce using rule 257 (expr -> variable SR_EQUAL expr .)
    COMMA           reduce using rule 257 (expr -> variable SR_EQUAL expr .)
    RPAREN          reduce using rule 257 (expr -> variable SR_EQUAL expr .)
    RBRACE          reduce using rule 257 (expr -> variable SR_EQUAL expr .)
    RBRACKET        reduce using rule 257 (expr -> variable SR_EQUAL expr .)
    DOUBLE_ARROW    reduce using rule 257 (expr -> variable SR_EQUAL expr .)
    COLON           reduce using rule 257 (expr -> variable SR_EQUAL expr .)
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188

  ! BOOLEAN_AND     [ reduce using rule 257 (expr -> variable SR_EQUAL expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 257 (expr -> variable SR_EQUAL expr .) ]
  ! AND             [ reduce using rule 257 (expr -> variable SR_EQUAL expr .) ]
  ! OR              [ reduce using rule 257 (expr -> variable SR_EQUAL expr .) ]
  ! XOR             [ reduce using rule 257 (expr -> variable SR_EQUAL expr .) ]
  ! CONCAT          [ reduce using rule 257 (expr -> variable SR_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 257 (expr -> variable SR_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 257 (expr -> variable SR_EQUAL expr .) ]
  ! MUL             [ reduce using rule 257 (expr -> variable SR_EQUAL expr .) ]
  ! DIV             [ reduce using rule 257 (expr -> variable SR_EQUAL expr .) ]
  ! SL              [ reduce using rule 257 (expr -> variable SR_EQUAL expr .) ]
  ! SR              [ reduce using rule 257 (expr -> variable SR_EQUAL expr .) ]
  ! MOD             [ reduce using rule 257 (expr -> variable SR_EQUAL expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 257 (expr -> variable SR_EQUAL expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 257 (expr -> variable SR_EQUAL expr .) ]
  ! IS_EQUAL        [ reduce using rule 257 (expr -> variable SR_EQUAL expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 257 (expr -> variable SR_EQUAL expr .) ]
  ! IS_SMALLER      [ reduce using rule 257 (expr -> variable SR_EQUAL expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 257 (expr -> variable SR_EQUAL expr .) ]
  ! IS_GREATER      [ reduce using rule 257 (expr -> variable SR_EQUAL expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 257 (expr -> variable SR_EQUAL expr .) ]
  ! INSTANCEOF      [ reduce using rule 257 (expr -> variable SR_EQUAL expr .) ]
  ! QUESTION        [ reduce using rule 257 (expr -> variable SR_EQUAL expr .) ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]


state 391

    (250) expr -> variable DIV_EQUAL expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 250 (expr -> variable DIV_EQUAL expr .)
    LOGICAL_AND     reduce using rule 250 (expr -> variable DIV_EQUAL expr .)
    LOGICAL_OR      reduce using rule 250 (expr -> variable DIV_EQUAL expr .)
    LOGICAL_XOR     reduce using rule 250 (expr -> variable DIV_EQUAL expr .)
    SEMI            reduce using rule 250 (expr -> variable DIV_EQUAL expr .)
    COMMA           reduce using rule 250 (expr -> variable DIV_EQUAL expr .)
    RPAREN          reduce using rule 250 (expr -> variable DIV_EQUAL expr .)
    RBRACE          reduce using rule 250 (expr -> variable DIV_EQUAL expr .)
    RBRACKET        reduce using rule 250 (expr -> variable DIV_EQUAL expr .)
    DOUBLE_ARROW    reduce using rule 250 (expr -> variable DIV_EQUAL expr .)
    COLON           reduce using rule 250 (expr -> variable DIV_EQUAL expr .)
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188

  ! BOOLEAN_AND     [ reduce using rule 250 (expr -> variable DIV_EQUAL expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 250 (expr -> variable DIV_EQUAL expr .) ]
  ! AND             [ reduce using rule 250 (expr -> variable DIV_EQUAL expr .) ]
  ! OR              [ reduce using rule 250 (expr -> variable DIV_EQUAL expr .) ]
  ! XOR             [ reduce using rule 250 (expr -> variable DIV_EQUAL expr .) ]
  ! CONCAT          [ reduce using rule 250 (expr -> variable DIV_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 250 (expr -> variable DIV_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 250 (expr -> variable DIV_EQUAL expr .) ]
  ! MUL             [ reduce using rule 250 (expr -> variable DIV_EQUAL expr .) ]
  ! DIV             [ reduce using rule 250 (expr -> variable DIV_EQUAL expr .) ]
  ! SL              [ reduce using rule 250 (expr -> variable DIV_EQUAL expr .) ]
  ! SR              [ reduce using rule 250 (expr -> variable DIV_EQUAL expr .) ]
  ! MOD             [ reduce using rule 250 (expr -> variable DIV_EQUAL expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 250 (expr -> variable DIV_EQUAL expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 250 (expr -> variable DIV_EQUAL expr .) ]
  ! IS_EQUAL        [ reduce using rule 250 (expr -> variable DIV_EQUAL expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 250 (expr -> variable DIV_EQUAL expr .) ]
  ! IS_SMALLER      [ reduce using rule 250 (expr -> variable DIV_EQUAL expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 250 (expr -> variable DIV_EQUAL expr .) ]
  ! IS_GREATER      [ reduce using rule 250 (expr -> variable DIV_EQUAL expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 250 (expr -> variable DIV_EQUAL expr .) ]
  ! INSTANCEOF      [ reduce using rule 250 (expr -> variable DIV_EQUAL expr .) ]
  ! QUESTION        [ reduce using rule 250 (expr -> variable DIV_EQUAL expr .) ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]


state 392

    (251) expr -> variable CONCAT_EQUAL expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 251 (expr -> variable CONCAT_EQUAL expr .)
    LOGICAL_AND     reduce using rule 251 (expr -> variable CONCAT_EQUAL expr .)
    LOGICAL_OR      reduce using rule 251 (expr -> variable CONCAT_EQUAL expr .)
    LOGICAL_XOR     reduce using rule 251 (expr -> variable CONCAT_EQUAL expr .)
    SEMI            reduce using rule 251 (expr -> variable CONCAT_EQUAL expr .)
    COMMA           reduce using rule 251 (expr -> variable CONCAT_EQUAL expr .)
    RPAREN          reduce using rule 251 (expr -> variable CONCAT_EQUAL expr .)
    RBRACE          reduce using rule 251 (expr -> variable CONCAT_EQUAL expr .)
    RBRACKET        reduce using rule 251 (expr -> variable CONCAT_EQUAL expr .)
    DOUBLE_ARROW    reduce using rule 251 (expr -> variable CONCAT_EQUAL expr .)
    COLON           reduce using rule 251 (expr -> variable CONCAT_EQUAL expr .)
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188

  ! BOOLEAN_AND     [ reduce using rule 251 (expr -> variable CONCAT_EQUAL expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 251 (expr -> variable CONCAT_EQUAL expr .) ]
  ! AND             [ reduce using rule 251 (expr -> variable CONCAT_EQUAL expr .) ]
  ! OR              [ reduce using rule 251 (expr -> variable CONCAT_EQUAL expr .) ]
  ! XOR             [ reduce using rule 251 (expr -> variable CONCAT_EQUAL expr .) ]
  ! CONCAT          [ reduce using rule 251 (expr -> variable CONCAT_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 251 (expr -> variable CONCAT_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 251 (expr -> variable CONCAT_EQUAL expr .) ]
  ! MUL             [ reduce using rule 251 (expr -> variable CONCAT_EQUAL expr .) ]
  ! DIV             [ reduce using rule 251 (expr -> variable CONCAT_EQUAL expr .) ]
  ! SL              [ reduce using rule 251 (expr -> variable CONCAT_EQUAL expr .) ]
  ! SR              [ reduce using rule 251 (expr -> variable CONCAT_EQUAL expr .) ]
  ! MOD             [ reduce using rule 251 (expr -> variable CONCAT_EQUAL expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 251 (expr -> variable CONCAT_EQUAL expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 251 (expr -> variable CONCAT_EQUAL expr .) ]
  ! IS_EQUAL        [ reduce using rule 251 (expr -> variable CONCAT_EQUAL expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 251 (expr -> variable CONCAT_EQUAL expr .) ]
  ! IS_SMALLER      [ reduce using rule 251 (expr -> variable CONCAT_EQUAL expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 251 (expr -> variable CONCAT_EQUAL expr .) ]
  ! IS_GREATER      [ reduce using rule 251 (expr -> variable CONCAT_EQUAL expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 251 (expr -> variable CONCAT_EQUAL expr .) ]
  ! INSTANCEOF      [ reduce using rule 251 (expr -> variable CONCAT_EQUAL expr .) ]
  ! QUESTION        [ reduce using rule 251 (expr -> variable CONCAT_EQUAL expr .) ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]


state 393

    (253) expr -> variable AND_EQUAL expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 253 (expr -> variable AND_EQUAL expr .)
    LOGICAL_AND     reduce using rule 253 (expr -> variable AND_EQUAL expr .)
    LOGICAL_OR      reduce using rule 253 (expr -> variable AND_EQUAL expr .)
    LOGICAL_XOR     reduce using rule 253 (expr -> variable AND_EQUAL expr .)
    SEMI            reduce using rule 253 (expr -> variable AND_EQUAL expr .)
    COMMA           reduce using rule 253 (expr -> variable AND_EQUAL expr .)
    RPAREN          reduce using rule 253 (expr -> variable AND_EQUAL expr .)
    RBRACE          reduce using rule 253 (expr -> variable AND_EQUAL expr .)
    RBRACKET        reduce using rule 253 (expr -> variable AND_EQUAL expr .)
    DOUBLE_ARROW    reduce using rule 253 (expr -> variable AND_EQUAL expr .)
    COLON           reduce using rule 253 (expr -> variable AND_EQUAL expr .)
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188

  ! BOOLEAN_AND     [ reduce using rule 253 (expr -> variable AND_EQUAL expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 253 (expr -> variable AND_EQUAL expr .) ]
  ! AND             [ reduce using rule 253 (expr -> variable AND_EQUAL expr .) ]
  ! OR              [ reduce using rule 253 (expr -> variable AND_EQUAL expr .) ]
  ! XOR             [ reduce using rule 253 (expr -> variable AND_EQUAL expr .) ]
  ! CONCAT          [ reduce using rule 253 (expr -> variable AND_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 253 (expr -> variable AND_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 253 (expr -> variable AND_EQUAL expr .) ]
  ! MUL             [ reduce using rule 253 (expr -> variable AND_EQUAL expr .) ]
  ! DIV             [ reduce using rule 253 (expr -> variable AND_EQUAL expr .) ]
  ! SL              [ reduce using rule 253 (expr -> variable AND_EQUAL expr .) ]
  ! SR              [ reduce using rule 253 (expr -> variable AND_EQUAL expr .) ]
  ! MOD             [ reduce using rule 253 (expr -> variable AND_EQUAL expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 253 (expr -> variable AND_EQUAL expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 253 (expr -> variable AND_EQUAL expr .) ]
  ! IS_EQUAL        [ reduce using rule 253 (expr -> variable AND_EQUAL expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 253 (expr -> variable AND_EQUAL expr .) ]
  ! IS_SMALLER      [ reduce using rule 253 (expr -> variable AND_EQUAL expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 253 (expr -> variable AND_EQUAL expr .) ]
  ! IS_GREATER      [ reduce using rule 253 (expr -> variable AND_EQUAL expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 253 (expr -> variable AND_EQUAL expr .) ]
  ! INSTANCEOF      [ reduce using rule 253 (expr -> variable AND_EQUAL expr .) ]
  ! QUESTION        [ reduce using rule 253 (expr -> variable AND_EQUAL expr .) ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]


state 394

    (248) expr -> variable MINUS_EQUAL expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 248 (expr -> variable MINUS_EQUAL expr .)
    LOGICAL_AND     reduce using rule 248 (expr -> variable MINUS_EQUAL expr .)
    LOGICAL_OR      reduce using rule 248 (expr -> variable MINUS_EQUAL expr .)
    LOGICAL_XOR     reduce using rule 248 (expr -> variable MINUS_EQUAL expr .)
    SEMI            reduce using rule 248 (expr -> variable MINUS_EQUAL expr .)
    COMMA           reduce using rule 248 (expr -> variable MINUS_EQUAL expr .)
    RPAREN          reduce using rule 248 (expr -> variable MINUS_EQUAL expr .)
    RBRACE          reduce using rule 248 (expr -> variable MINUS_EQUAL expr .)
    RBRACKET        reduce using rule 248 (expr -> variable MINUS_EQUAL expr .)
    DOUBLE_ARROW    reduce using rule 248 (expr -> variable MINUS_EQUAL expr .)
    COLON           reduce using rule 248 (expr -> variable MINUS_EQUAL expr .)
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188

  ! BOOLEAN_AND     [ reduce using rule 248 (expr -> variable MINUS_EQUAL expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 248 (expr -> variable MINUS_EQUAL expr .) ]
  ! AND             [ reduce using rule 248 (expr -> variable MINUS_EQUAL expr .) ]
  ! OR              [ reduce using rule 248 (expr -> variable MINUS_EQUAL expr .) ]
  ! XOR             [ reduce using rule 248 (expr -> variable MINUS_EQUAL expr .) ]
  ! CONCAT          [ reduce using rule 248 (expr -> variable MINUS_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 248 (expr -> variable MINUS_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 248 (expr -> variable MINUS_EQUAL expr .) ]
  ! MUL             [ reduce using rule 248 (expr -> variable MINUS_EQUAL expr .) ]
  ! DIV             [ reduce using rule 248 (expr -> variable MINUS_EQUAL expr .) ]
  ! SL              [ reduce using rule 248 (expr -> variable MINUS_EQUAL expr .) ]
  ! SR              [ reduce using rule 248 (expr -> variable MINUS_EQUAL expr .) ]
  ! MOD             [ reduce using rule 248 (expr -> variable MINUS_EQUAL expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 248 (expr -> variable MINUS_EQUAL expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 248 (expr -> variable MINUS_EQUAL expr .) ]
  ! IS_EQUAL        [ reduce using rule 248 (expr -> variable MINUS_EQUAL expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 248 (expr -> variable MINUS_EQUAL expr .) ]
  ! IS_SMALLER      [ reduce using rule 248 (expr -> variable MINUS_EQUAL expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 248 (expr -> variable MINUS_EQUAL expr .) ]
  ! IS_GREATER      [ reduce using rule 248 (expr -> variable MINUS_EQUAL expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 248 (expr -> variable MINUS_EQUAL expr .) ]
  ! INSTANCEOF      [ reduce using rule 248 (expr -> variable MINUS_EQUAL expr .) ]
  ! QUESTION        [ reduce using rule 248 (expr -> variable MINUS_EQUAL expr .) ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]


state 395

    (255) expr -> variable XOR_EQUAL expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 255 (expr -> variable XOR_EQUAL expr .)
    LOGICAL_AND     reduce using rule 255 (expr -> variable XOR_EQUAL expr .)
    LOGICAL_OR      reduce using rule 255 (expr -> variable XOR_EQUAL expr .)
    LOGICAL_XOR     reduce using rule 255 (expr -> variable XOR_EQUAL expr .)
    SEMI            reduce using rule 255 (expr -> variable XOR_EQUAL expr .)
    COMMA           reduce using rule 255 (expr -> variable XOR_EQUAL expr .)
    RPAREN          reduce using rule 255 (expr -> variable XOR_EQUAL expr .)
    RBRACE          reduce using rule 255 (expr -> variable XOR_EQUAL expr .)
    RBRACKET        reduce using rule 255 (expr -> variable XOR_EQUAL expr .)
    DOUBLE_ARROW    reduce using rule 255 (expr -> variable XOR_EQUAL expr .)
    COLON           reduce using rule 255 (expr -> variable XOR_EQUAL expr .)
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188

  ! BOOLEAN_AND     [ reduce using rule 255 (expr -> variable XOR_EQUAL expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 255 (expr -> variable XOR_EQUAL expr .) ]
  ! AND             [ reduce using rule 255 (expr -> variable XOR_EQUAL expr .) ]
  ! OR              [ reduce using rule 255 (expr -> variable XOR_EQUAL expr .) ]
  ! XOR             [ reduce using rule 255 (expr -> variable XOR_EQUAL expr .) ]
  ! CONCAT          [ reduce using rule 255 (expr -> variable XOR_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 255 (expr -> variable XOR_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 255 (expr -> variable XOR_EQUAL expr .) ]
  ! MUL             [ reduce using rule 255 (expr -> variable XOR_EQUAL expr .) ]
  ! DIV             [ reduce using rule 255 (expr -> variable XOR_EQUAL expr .) ]
  ! SL              [ reduce using rule 255 (expr -> variable XOR_EQUAL expr .) ]
  ! SR              [ reduce using rule 255 (expr -> variable XOR_EQUAL expr .) ]
  ! MOD             [ reduce using rule 255 (expr -> variable XOR_EQUAL expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 255 (expr -> variable XOR_EQUAL expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 255 (expr -> variable XOR_EQUAL expr .) ]
  ! IS_EQUAL        [ reduce using rule 255 (expr -> variable XOR_EQUAL expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 255 (expr -> variable XOR_EQUAL expr .) ]
  ! IS_SMALLER      [ reduce using rule 255 (expr -> variable XOR_EQUAL expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 255 (expr -> variable XOR_EQUAL expr .) ]
  ! IS_GREATER      [ reduce using rule 255 (expr -> variable XOR_EQUAL expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 255 (expr -> variable XOR_EQUAL expr .) ]
  ! INSTANCEOF      [ reduce using rule 255 (expr -> variable XOR_EQUAL expr .) ]
  ! QUESTION        [ reduce using rule 255 (expr -> variable XOR_EQUAL expr .) ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]


state 396

    (29) statement -> IF LPAREN expr . RPAREN statement elseif_list else_single
    (30) statement -> IF LPAREN expr . RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    RPAREN          shift and go to state 497
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    LOGICAL_AND     shift and go to state 181
    LOGICAL_OR      shift and go to state 202
    LOGICAL_XOR     shift and go to state 200
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188


state 397

    (52) statement -> THROW expr SEMI .

    HALT_COMPILER   reduce using rule 52 (statement -> THROW expr SEMI .)
    NAMESPACE       reduce using rule 52 (statement -> THROW expr SEMI .)
    CONST           reduce using rule 52 (statement -> THROW expr SEMI .)
    USE             reduce using rule 52 (statement -> THROW expr SEMI .)
    LBRACE          reduce using rule 52 (statement -> THROW expr SEMI .)
    IF              reduce using rule 52 (statement -> THROW expr SEMI .)
    WHILE           reduce using rule 52 (statement -> THROW expr SEMI .)
    DO              reduce using rule 52 (statement -> THROW expr SEMI .)
    FOR             reduce using rule 52 (statement -> THROW expr SEMI .)
    FOREACH         reduce using rule 52 (statement -> THROW expr SEMI .)
    SWITCH          reduce using rule 52 (statement -> THROW expr SEMI .)
    BREAK           reduce using rule 52 (statement -> THROW expr SEMI .)
    CONTINUE        reduce using rule 52 (statement -> THROW expr SEMI .)
    RETURN          reduce using rule 52 (statement -> THROW expr SEMI .)
    GLOBAL          reduce using rule 52 (statement -> THROW expr SEMI .)
    STATIC          reduce using rule 52 (statement -> THROW expr SEMI .)
    ECHO            reduce using rule 52 (statement -> THROW expr SEMI .)
    INLINE_HTML     reduce using rule 52 (statement -> THROW expr SEMI .)
    UNSET           reduce using rule 52 (statement -> THROW expr SEMI .)
    SEMI            reduce using rule 52 (statement -> THROW expr SEMI .)
    TRY             reduce using rule 52 (statement -> THROW expr SEMI .)
    THROW           reduce using rule 52 (statement -> THROW expr SEMI .)
    DECLARE         reduce using rule 52 (statement -> THROW expr SEMI .)
    FUNCTION        reduce using rule 52 (statement -> THROW expr SEMI .)
    INTERFACE       reduce using rule 52 (statement -> THROW expr SEMI .)
    NEW             reduce using rule 52 (statement -> THROW expr SEMI .)
    CLONE           reduce using rule 52 (statement -> THROW expr SEMI .)
    LIST            reduce using rule 52 (statement -> THROW expr SEMI .)
    ARRAY           reduce using rule 52 (statement -> THROW expr SEMI .)
    PLUS            reduce using rule 52 (statement -> THROW expr SEMI .)
    MINUS           reduce using rule 52 (statement -> THROW expr SEMI .)
    NOT             reduce using rule 52 (statement -> THROW expr SEMI .)
    BOOLEAN_NOT     reduce using rule 52 (statement -> THROW expr SEMI .)
    INC             reduce using rule 52 (statement -> THROW expr SEMI .)
    DEC             reduce using rule 52 (statement -> THROW expr SEMI .)
    INT_CAST        reduce using rule 52 (statement -> THROW expr SEMI .)
    DOUBLE_CAST     reduce using rule 52 (statement -> THROW expr SEMI .)
    STRING_CAST     reduce using rule 52 (statement -> THROW expr SEMI .)
    ARRAY_CAST      reduce using rule 52 (statement -> THROW expr SEMI .)
    OBJECT_CAST     reduce using rule 52 (statement -> THROW expr SEMI .)
    BOOL_CAST       reduce using rule 52 (statement -> THROW expr SEMI .)
    UNSET_CAST      reduce using rule 52 (statement -> THROW expr SEMI .)
    ISSET           reduce using rule 52 (statement -> THROW expr SEMI .)
    EMPTY           reduce using rule 52 (statement -> THROW expr SEMI .)
    EVAL            reduce using rule 52 (statement -> THROW expr SEMI .)
    INCLUDE         reduce using rule 52 (statement -> THROW expr SEMI .)
    INCLUDE_ONCE    reduce using rule 52 (statement -> THROW expr SEMI .)
    REQUIRE         reduce using rule 52 (statement -> THROW expr SEMI .)
    REQUIRE_ONCE    reduce using rule 52 (statement -> THROW expr SEMI .)
    EXIT            reduce using rule 52 (statement -> THROW expr SEMI .)
    PRINT           reduce using rule 52 (statement -> THROW expr SEMI .)
    AT              reduce using rule 52 (statement -> THROW expr SEMI .)
    LPAREN          reduce using rule 52 (statement -> THROW expr SEMI .)
    CLASS           reduce using rule 52 (statement -> THROW expr SEMI .)
    ABSTRACT        reduce using rule 52 (statement -> THROW expr SEMI .)
    FINAL           reduce using rule 52 (statement -> THROW expr SEMI .)
    QUOTE           reduce using rule 52 (statement -> THROW expr SEMI .)
    START_HEREDOC   reduce using rule 52 (statement -> THROW expr SEMI .)
    STRING_VARNAME  reduce using rule 52 (statement -> THROW expr SEMI .)
    NS_SEPARATOR    reduce using rule 52 (statement -> THROW expr SEMI .)
    LNUMBER         reduce using rule 52 (statement -> THROW expr SEMI .)
    DNUMBER         reduce using rule 52 (statement -> THROW expr SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 52 (statement -> THROW expr SEMI .)
    LINE            reduce using rule 52 (statement -> THROW expr SEMI .)
    FILE            reduce using rule 52 (statement -> THROW expr SEMI .)
    DIR             reduce using rule 52 (statement -> THROW expr SEMI .)
    CLASS_C         reduce using rule 52 (statement -> THROW expr SEMI .)
    METHOD_C        reduce using rule 52 (statement -> THROW expr SEMI .)
    FUNC_C          reduce using rule 52 (statement -> THROW expr SEMI .)
    NS_C            reduce using rule 52 (statement -> THROW expr SEMI .)
    STRING          reduce using rule 52 (statement -> THROW expr SEMI .)
    DOLLAR          reduce using rule 52 (statement -> THROW expr SEMI .)
    VARIABLE        reduce using rule 52 (statement -> THROW expr SEMI .)
    $end            reduce using rule 52 (statement -> THROW expr SEMI .)
    RBRACE          reduce using rule 52 (statement -> THROW expr SEMI .)
    ELSEIF          reduce using rule 52 (statement -> THROW expr SEMI .)
    ELSE            reduce using rule 52 (statement -> THROW expr SEMI .)
    ENDDECLARE      reduce using rule 52 (statement -> THROW expr SEMI .)
    ENDWHILE        reduce using rule 52 (statement -> THROW expr SEMI .)
    ENDIF           reduce using rule 52 (statement -> THROW expr SEMI .)
    ENDFOREACH      reduce using rule 52 (statement -> THROW expr SEMI .)
    CASE            reduce using rule 52 (statement -> THROW expr SEMI .)
    DEFAULT         reduce using rule 52 (statement -> THROW expr SEMI .)
    ENDSWITCH       reduce using rule 52 (statement -> THROW expr SEMI .)
    ENDFOR          reduce using rule 52 (statement -> THROW expr SEMI .)


state 398

    (9) top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .

    RBRACE          reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    HALT_COMPILER   reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    NAMESPACE       reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    CONST           reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    USE             reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    LBRACE          reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    IF              reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    WHILE           reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    DO              reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    FOR             reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    FOREACH         reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    SWITCH          reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    BREAK           reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    CONTINUE        reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    RETURN          reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    GLOBAL          reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    STATIC          reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    ECHO            reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    INLINE_HTML     reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    UNSET           reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    SEMI            reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    TRY             reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    THROW           reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    DECLARE         reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    FUNCTION        reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    INTERFACE       reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    NEW             reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    CLONE           reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    LIST            reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    ARRAY           reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    PLUS            reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    MINUS           reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    NOT             reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    BOOLEAN_NOT     reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    INC             reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    DEC             reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    INT_CAST        reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    DOUBLE_CAST     reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    STRING_CAST     reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    ARRAY_CAST      reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    OBJECT_CAST     reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    BOOL_CAST       reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    UNSET_CAST      reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    ISSET           reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    EMPTY           reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    EVAL            reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    INCLUDE         reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    INCLUDE_ONCE    reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    REQUIRE         reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    REQUIRE_ONCE    reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    EXIT            reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    PRINT           reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    AT              reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    LPAREN          reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    CLASS           reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    ABSTRACT        reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    FINAL           reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    QUOTE           reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    START_HEREDOC   reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    STRING_VARNAME  reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    NS_SEPARATOR    reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    LNUMBER         reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    DNUMBER         reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    CONSTANT_ENCAPSED_STRING reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    LINE            reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    FILE            reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    DIR             reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    CLASS_C         reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    METHOD_C        reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    FUNC_C          reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    NS_C            reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    STRING          reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    DOLLAR          reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    VARIABLE        reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    $end            reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)


state 399

    (188) function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN . function_call_parameter_list RPAREN
    (235) function_call_parameter_list -> . function_call_parameter_list COMMA function_call_parameter
    (236) function_call_parameter_list -> . function_call_parameter
    (237) function_call_parameter_list -> . empty
    (238) function_call_parameter -> . expr
    (239) function_call_parameter -> . AND variable
    (363) empty -> .
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    AND             shift and go to state 330
    RPAREN          reduce using rule 363 (empty -> .)
    COMMA           reduce using rule 363 (empty -> .)
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    function_call_parameter_list   shift and go to state 498
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    empty                          shift and go to state 331
    function_call_parameter        shift and go to state 332
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 329

state 400

    (10) top_statement -> NAMESPACE namespace_name LBRACE top_statement_list . RBRACE
    (2) top_statement_list -> top_statement_list . top_statement
    (4) top_statement -> . statement
    (5) top_statement -> . function_declaration_statement
    (6) top_statement -> . class_declaration_statement
    (7) top_statement -> . HALT_COMPILER LPAREN RPAREN SEMI
    (8) top_statement -> . NAMESPACE namespace_name SEMI
    (9) top_statement -> . NAMESPACE LBRACE top_statement_list RBRACE
    (10) top_statement -> . NAMESPACE namespace_name LBRACE top_statement_list RBRACE
    (11) top_statement -> . CONST constant_declarations SEMI
    (12) top_statement -> . USE use_declarations SEMI
    (28) statement -> . LBRACE inner_statement_list RBRACE
    (29) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (30) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (31) statement -> . WHILE LPAREN expr RPAREN while_statement
    (32) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (33) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (34) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (35) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (36) statement -> . BREAK SEMI
    (37) statement -> . BREAK expr SEMI
    (38) statement -> . CONTINUE SEMI
    (39) statement -> . CONTINUE expr SEMI
    (40) statement -> . RETURN SEMI
    (41) statement -> . RETURN expr SEMI
    (42) statement -> . GLOBAL global_var_list SEMI
    (43) statement -> . STATIC static_var_list SEMI
    (44) statement -> . ECHO echo_expr_list SEMI
    (45) statement -> . INLINE_HTML
    (46) statement -> . expr SEMI
    (47) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (48) statement -> . SEMI
    (49) statement -> . TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches
    (52) statement -> . THROW expr SEMI
    (53) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (103) function_declaration_statement -> . FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (104) class_declaration_statement -> . class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE
    (105) class_declaration_statement -> . INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (106) class_entry_type -> . CLASS
    (107) class_entry_type -> . ABSTRACT CLASS
    (108) class_entry_type -> . FINAL CLASS
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    RBRACE          shift and go to state 499
    HALT_COMPILER   shift and go to state 22
    NAMESPACE       shift and go to state 12
    CONST           shift and go to state 78
    USE             shift and go to state 77
    LBRACE          shift and go to state 47
    IF              shift and go to state 93
    WHILE           shift and go to state 57
    DO              shift and go to state 76
    FOR             shift and go to state 36
    FOREACH         shift and go to state 13
    SWITCH          shift and go to state 61
    BREAK           shift and go to state 74
    CONTINUE        shift and go to state 48
    RETURN          shift and go to state 23
    GLOBAL          shift and go to state 55
    STATIC          shift and go to state 29
    ECHO            shift and go to state 42
    INLINE_HTML     shift and go to state 88
    UNSET           shift and go to state 83
    SEMI            shift and go to state 85
    TRY             shift and go to state 43
    THROW           shift and go to state 96
    DECLARE         shift and go to state 16
    FUNCTION        shift and go to state 40
    INTERFACE       shift and go to state 21
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    CLASS           shift and go to state 20
    ABSTRACT        shift and go to state 80
    FINAL           shift and go to state 32
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_entry_type               shift and go to state 53
    class_name                     shift and go to state 54
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    function_call                  shift and go to state 27
    variable_without_objects       shift and go to state 84
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    function_declaration_statement shift and go to state 62
    statement                      shift and go to state 63
    class_constant                 shift and go to state 24
    variable_class_name            shift and go to state 41
    base_variable                  shift and go to state 44
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    class_declaration_statement    shift and go to state 67
    compound_variable              shift and go to state 72
    expr                           shift and go to state 71
    top_statement                  shift and go to state 52

state 401

    (34) statement -> FOREACH LPAREN expr AS . foreach_variable foreach_optional_arg RPAREN foreach_statement
    (74) foreach_variable -> . VARIABLE
    (75) foreach_variable -> . AND VARIABLE

    VARIABLE        shift and go to state 502
    AND             shift and go to state 500

    foreach_variable               shift and go to state 501

state 402

    (303) expr -> EVAL LPAREN expr RPAREN .

    AS              reduce using rule 303 (expr -> EVAL LPAREN expr RPAREN .)
    BOOLEAN_AND     reduce using rule 303 (expr -> EVAL LPAREN expr RPAREN .)
    BOOLEAN_OR      reduce using rule 303 (expr -> EVAL LPAREN expr RPAREN .)
    LOGICAL_AND     reduce using rule 303 (expr -> EVAL LPAREN expr RPAREN .)
    LOGICAL_OR      reduce using rule 303 (expr -> EVAL LPAREN expr RPAREN .)
    LOGICAL_XOR     reduce using rule 303 (expr -> EVAL LPAREN expr RPAREN .)
    AND             reduce using rule 303 (expr -> EVAL LPAREN expr RPAREN .)
    OR              reduce using rule 303 (expr -> EVAL LPAREN expr RPAREN .)
    XOR             reduce using rule 303 (expr -> EVAL LPAREN expr RPAREN .)
    CONCAT          reduce using rule 303 (expr -> EVAL LPAREN expr RPAREN .)
    PLUS            reduce using rule 303 (expr -> EVAL LPAREN expr RPAREN .)
    MINUS           reduce using rule 303 (expr -> EVAL LPAREN expr RPAREN .)
    MUL             reduce using rule 303 (expr -> EVAL LPAREN expr RPAREN .)
    DIV             reduce using rule 303 (expr -> EVAL LPAREN expr RPAREN .)
    SL              reduce using rule 303 (expr -> EVAL LPAREN expr RPAREN .)
    SR              reduce using rule 303 (expr -> EVAL LPAREN expr RPAREN .)
    MOD             reduce using rule 303 (expr -> EVAL LPAREN expr RPAREN .)
    IS_IDENTICAL    reduce using rule 303 (expr -> EVAL LPAREN expr RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 303 (expr -> EVAL LPAREN expr RPAREN .)
    IS_EQUAL        reduce using rule 303 (expr -> EVAL LPAREN expr RPAREN .)
    IS_NOT_EQUAL    reduce using rule 303 (expr -> EVAL LPAREN expr RPAREN .)
    IS_SMALLER      reduce using rule 303 (expr -> EVAL LPAREN expr RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 303 (expr -> EVAL LPAREN expr RPAREN .)
    IS_GREATER      reduce using rule 303 (expr -> EVAL LPAREN expr RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 303 (expr -> EVAL LPAREN expr RPAREN .)
    INSTANCEOF      reduce using rule 303 (expr -> EVAL LPAREN expr RPAREN .)
    QUESTION        reduce using rule 303 (expr -> EVAL LPAREN expr RPAREN .)
    SEMI            reduce using rule 303 (expr -> EVAL LPAREN expr RPAREN .)
    COMMA           reduce using rule 303 (expr -> EVAL LPAREN expr RPAREN .)
    RPAREN          reduce using rule 303 (expr -> EVAL LPAREN expr RPAREN .)
    RBRACE          reduce using rule 303 (expr -> EVAL LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 303 (expr -> EVAL LPAREN expr RPAREN .)
    DOUBLE_ARROW    reduce using rule 303 (expr -> EVAL LPAREN expr RPAREN .)
    COLON           reduce using rule 303 (expr -> EVAL LPAREN expr RPAREN .)


state 403

    (54) declare_list -> STRING EQUALS . static_scalar
    (334) static_scalar -> . common_scalar
    (335) static_scalar -> . QUOTE QUOTE
    (336) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (337) static_scalar -> . namespace_name
    (338) static_scalar -> . NS_SEPARATOR namespace_name
    (339) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (340) static_scalar -> . PLUS static_scalar
    (341) static_scalar -> . MINUS static_scalar
    (342) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    QUOTE           shift and go to state 417
    NS_SEPARATOR    shift and go to state 421
    NAMESPACE       shift and go to state 420
    PLUS            shift and go to state 418
    MINUS           shift and go to state 415
    ARRAY           shift and go to state 419
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89

    static_scalar                  shift and go to state 503
    common_scalar                  shift and go to state 414
    namespace_name                 shift and go to state 422

state 404

    (53) statement -> DECLARE LPAREN declare_list RPAREN . declare_statement
    (56) declare_statement -> . statement
    (57) declare_statement -> . COLON inner_statement_list ENDDECLARE SEMI
    (28) statement -> . LBRACE inner_statement_list RBRACE
    (29) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (30) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (31) statement -> . WHILE LPAREN expr RPAREN while_statement
    (32) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (33) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (34) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (35) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (36) statement -> . BREAK SEMI
    (37) statement -> . BREAK expr SEMI
    (38) statement -> . CONTINUE SEMI
    (39) statement -> . CONTINUE expr SEMI
    (40) statement -> . RETURN SEMI
    (41) statement -> . RETURN expr SEMI
    (42) statement -> . GLOBAL global_var_list SEMI
    (43) statement -> . STATIC static_var_list SEMI
    (44) statement -> . ECHO echo_expr_list SEMI
    (45) statement -> . INLINE_HTML
    (46) statement -> . expr SEMI
    (47) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (48) statement -> . SEMI
    (49) statement -> . TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches
    (52) statement -> . THROW expr SEMI
    (53) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    COLON           shift and go to state 505
    LBRACE          shift and go to state 47
    IF              shift and go to state 93
    WHILE           shift and go to state 57
    DO              shift and go to state 76
    FOR             shift and go to state 36
    FOREACH         shift and go to state 13
    SWITCH          shift and go to state 61
    BREAK           shift and go to state 74
    CONTINUE        shift and go to state 48
    RETURN          shift and go to state 23
    GLOBAL          shift and go to state 55
    STATIC          shift and go to state 29
    ECHO            shift and go to state 42
    INLINE_HTML     shift and go to state 88
    UNSET           shift and go to state 83
    SEMI            shift and go to state 85
    TRY             shift and go to state 43
    THROW           shift and go to state 96
    DECLARE         shift and go to state 16
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    declare_statement              shift and go to state 504
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    statement                      shift and go to state 506
    class_constant                 shift and go to state 24
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 71

state 405

    (55) declare_list -> declare_list COMMA . STRING EQUALS static_scalar

    STRING          shift and go to state 507


state 406

    (105) class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE . class_statement_list RBRACE
    (116) class_statement_list -> . class_statement_list class_statement
    (117) class_statement_list -> . empty
    (363) empty -> .

    RBRACE          reduce using rule 363 (empty -> .)
    VAR             reduce using rule 363 (empty -> .)
    CONST           reduce using rule 363 (empty -> .)
    PUBLIC          reduce using rule 363 (empty -> .)
    PROTECTED       reduce using rule 363 (empty -> .)
    PRIVATE         reduce using rule 363 (empty -> .)
    STATIC          reduce using rule 363 (empty -> .)
    ABSTRACT        reduce using rule 363 (empty -> .)
    FINAL           reduce using rule 363 (empty -> .)
    FUNCTION        reduce using rule 363 (empty -> .)

    class_statement_list           shift and go to state 508
    empty                          shift and go to state 509

state 407

    (128) interface_list -> fully_qualified_class_name .

    COMMA           reduce using rule 128 (interface_list -> fully_qualified_class_name .)
    LBRACE          reduce using rule 128 (interface_list -> fully_qualified_class_name .)


state 408

    (113) fully_qualified_class_name -> NAMESPACE . NS_SEPARATOR namespace_name

    NS_SEPARATOR    shift and go to state 510


state 409

    (112) fully_qualified_class_name -> NS_SEPARATOR . namespace_name
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    STRING          shift and go to state 89

    namespace_name                 shift and go to state 511

state 410

    (129) interface_extends_list -> EXTENDS interface_list .
    (127) interface_list -> interface_list . COMMA fully_qualified_class_name

    LBRACE          reduce using rule 129 (interface_extends_list -> EXTENDS interface_list .)
    COMMA           shift and go to state 512


state 411

    (111) fully_qualified_class_name -> namespace_name .
    (349) namespace_name -> namespace_name . NS_SEPARATOR STRING

    COMMA           reduce using rule 111 (fully_qualified_class_name -> namespace_name .)
    LBRACE          reduce using rule 111 (fully_qualified_class_name -> namespace_name .)
    VARIABLE        reduce using rule 111 (fully_qualified_class_name -> namespace_name .)
    IMPLEMENTS      reduce using rule 111 (fully_qualified_class_name -> namespace_name .)
    NS_SEPARATOR    shift and go to state 178


state 412

    (7) top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .

    RBRACE          reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    HALT_COMPILER   reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    NAMESPACE       reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    CONST           reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    USE             reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    LBRACE          reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    IF              reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    WHILE           reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    DO              reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    FOR             reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    FOREACH         reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    SWITCH          reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    BREAK           reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    CONTINUE        reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    RETURN          reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    GLOBAL          reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    STATIC          reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    ECHO            reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    INLINE_HTML     reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    UNSET           reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    SEMI            reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    TRY             reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    THROW           reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    DECLARE         reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    FUNCTION        reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    INTERFACE       reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    NEW             reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    CLONE           reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    LIST            reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    ARRAY           reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    PLUS            reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    MINUS           reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    NOT             reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    BOOLEAN_NOT     reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    INC             reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    DEC             reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    INT_CAST        reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    DOUBLE_CAST     reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    STRING_CAST     reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    ARRAY_CAST      reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    OBJECT_CAST     reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    BOOL_CAST       reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    UNSET_CAST      reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    ISSET           reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    EMPTY           reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    EVAL            reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    INCLUDE         reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    INCLUDE_ONCE    reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    REQUIRE         reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    REQUIRE_ONCE    reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    EXIT            reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    PRINT           reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    AT              reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    LPAREN          reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    CLASS           reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    ABSTRACT        reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    FINAL           reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    QUOTE           reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    START_HEREDOC   reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    STRING_VARNAME  reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    NS_SEPARATOR    reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    LNUMBER         reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    DNUMBER         reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    LINE            reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    FILE            reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    DIR             reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    CLASS_C         reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    METHOD_C        reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    FUNC_C          reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    NS_C            reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    STRING          reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    DOLLAR          reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    VARIABLE        reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    $end            reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)


state 413

    (94) static_var_list -> static_var_list COMMA static_var .

    SEMI            reduce using rule 94 (static_var_list -> static_var_list COMMA static_var .)
    COMMA           reduce using rule 94 (static_var_list -> static_var_list COMMA static_var .)


state 414

    (334) static_scalar -> common_scalar .

    SEMI            reduce using rule 334 (static_scalar -> common_scalar .)
    COMMA           reduce using rule 334 (static_scalar -> common_scalar .)
    RPAREN          reduce using rule 334 (static_scalar -> common_scalar .)
    DOUBLE_ARROW    reduce using rule 334 (static_scalar -> common_scalar .)


state 415

    (341) static_scalar -> MINUS . static_scalar
    (334) static_scalar -> . common_scalar
    (335) static_scalar -> . QUOTE QUOTE
    (336) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (337) static_scalar -> . namespace_name
    (338) static_scalar -> . NS_SEPARATOR namespace_name
    (339) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (340) static_scalar -> . PLUS static_scalar
    (341) static_scalar -> . MINUS static_scalar
    (342) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    QUOTE           shift and go to state 417
    NS_SEPARATOR    shift and go to state 421
    NAMESPACE       shift and go to state 420
    PLUS            shift and go to state 418
    MINUS           shift and go to state 415
    ARRAY           shift and go to state 419
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89

    static_scalar                  shift and go to state 513
    common_scalar                  shift and go to state 414
    namespace_name                 shift and go to state 422

state 416

    (96) static_var -> VARIABLE EQUALS static_scalar .

    SEMI            reduce using rule 96 (static_var -> VARIABLE EQUALS static_scalar .)
    COMMA           reduce using rule 96 (static_var -> VARIABLE EQUALS static_scalar .)


state 417

    (335) static_scalar -> QUOTE . QUOTE
    (336) static_scalar -> QUOTE . ENCAPSED_AND_WHITESPACE QUOTE

    QUOTE           shift and go to state 514
    ENCAPSED_AND_WHITESPACE shift and go to state 515


state 418

    (340) static_scalar -> PLUS . static_scalar
    (334) static_scalar -> . common_scalar
    (335) static_scalar -> . QUOTE QUOTE
    (336) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (337) static_scalar -> . namespace_name
    (338) static_scalar -> . NS_SEPARATOR namespace_name
    (339) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (340) static_scalar -> . PLUS static_scalar
    (341) static_scalar -> . MINUS static_scalar
    (342) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    QUOTE           shift and go to state 417
    NS_SEPARATOR    shift and go to state 421
    NAMESPACE       shift and go to state 420
    PLUS            shift and go to state 418
    MINUS           shift and go to state 415
    ARRAY           shift and go to state 419
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89

    static_scalar                  shift and go to state 516
    common_scalar                  shift and go to state 414
    namespace_name                 shift and go to state 422

state 419

    (342) static_scalar -> ARRAY . LPAREN static_array_pair_list RPAREN

    LPAREN          shift and go to state 517


state 420

    (339) static_scalar -> NAMESPACE . NS_SEPARATOR namespace_name

    NS_SEPARATOR    shift and go to state 518


state 421

    (338) static_scalar -> NS_SEPARATOR . namespace_name
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    STRING          shift and go to state 89

    namespace_name                 shift and go to state 519

state 422

    (337) static_scalar -> namespace_name .
    (349) namespace_name -> namespace_name . NS_SEPARATOR STRING

    SEMI            reduce using rule 337 (static_scalar -> namespace_name .)
    COMMA           reduce using rule 337 (static_scalar -> namespace_name .)
    RPAREN          reduce using rule 337 (static_scalar -> namespace_name .)
    DOUBLE_ARROW    reduce using rule 337 (static_scalar -> namespace_name .)
    NS_SEPARATOR    shift and go to state 178


state 423

    (189) function_call -> class_name DOUBLE_COLON STRING . LPAREN function_call_parameter_list RPAREN

    LPAREN          shift and go to state 457


state 424

    (191) function_call -> variable_class_name DOUBLE_COLON STRING . LPAREN function_call_parameter_list RPAREN

    LPAREN          shift and go to state 443


state 425

    (188) function_call -> NAMESPACE NS_SEPARATOR namespace_name . LPAREN function_call_parameter_list RPAREN
    (166) class_name -> NAMESPACE NS_SEPARATOR namespace_name .
    (349) namespace_name -> namespace_name . NS_SEPARATOR STRING

    LPAREN          shift and go to state 399
    DOUBLE_COLON    reduce using rule 166 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    NS_SEPARATOR    shift and go to state 178


state 426

    (302) expr -> EMPTY LPAREN expr RPAREN .

    AS              reduce using rule 302 (expr -> EMPTY LPAREN expr RPAREN .)
    BOOLEAN_AND     reduce using rule 302 (expr -> EMPTY LPAREN expr RPAREN .)
    BOOLEAN_OR      reduce using rule 302 (expr -> EMPTY LPAREN expr RPAREN .)
    LOGICAL_AND     reduce using rule 302 (expr -> EMPTY LPAREN expr RPAREN .)
    LOGICAL_OR      reduce using rule 302 (expr -> EMPTY LPAREN expr RPAREN .)
    LOGICAL_XOR     reduce using rule 302 (expr -> EMPTY LPAREN expr RPAREN .)
    AND             reduce using rule 302 (expr -> EMPTY LPAREN expr RPAREN .)
    OR              reduce using rule 302 (expr -> EMPTY LPAREN expr RPAREN .)
    XOR             reduce using rule 302 (expr -> EMPTY LPAREN expr RPAREN .)
    CONCAT          reduce using rule 302 (expr -> EMPTY LPAREN expr RPAREN .)
    PLUS            reduce using rule 302 (expr -> EMPTY LPAREN expr RPAREN .)
    MINUS           reduce using rule 302 (expr -> EMPTY LPAREN expr RPAREN .)
    MUL             reduce using rule 302 (expr -> EMPTY LPAREN expr RPAREN .)
    DIV             reduce using rule 302 (expr -> EMPTY LPAREN expr RPAREN .)
    SL              reduce using rule 302 (expr -> EMPTY LPAREN expr RPAREN .)
    SR              reduce using rule 302 (expr -> EMPTY LPAREN expr RPAREN .)
    MOD             reduce using rule 302 (expr -> EMPTY LPAREN expr RPAREN .)
    IS_IDENTICAL    reduce using rule 302 (expr -> EMPTY LPAREN expr RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 302 (expr -> EMPTY LPAREN expr RPAREN .)
    IS_EQUAL        reduce using rule 302 (expr -> EMPTY LPAREN expr RPAREN .)
    IS_NOT_EQUAL    reduce using rule 302 (expr -> EMPTY LPAREN expr RPAREN .)
    IS_SMALLER      reduce using rule 302 (expr -> EMPTY LPAREN expr RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 302 (expr -> EMPTY LPAREN expr RPAREN .)
    IS_GREATER      reduce using rule 302 (expr -> EMPTY LPAREN expr RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 302 (expr -> EMPTY LPAREN expr RPAREN .)
    INSTANCEOF      reduce using rule 302 (expr -> EMPTY LPAREN expr RPAREN .)
    QUESTION        reduce using rule 302 (expr -> EMPTY LPAREN expr RPAREN .)
    SEMI            reduce using rule 302 (expr -> EMPTY LPAREN expr RPAREN .)
    COMMA           reduce using rule 302 (expr -> EMPTY LPAREN expr RPAREN .)
    RPAREN          reduce using rule 302 (expr -> EMPTY LPAREN expr RPAREN .)
    RBRACE          reduce using rule 302 (expr -> EMPTY LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 302 (expr -> EMPTY LPAREN expr RPAREN .)
    DOUBLE_ARROW    reduce using rule 302 (expr -> EMPTY LPAREN expr RPAREN .)
    COLON           reduce using rule 302 (expr -> EMPTY LPAREN expr RPAREN .)


state 427

    (70) non_empty_for_expr -> non_empty_for_expr COMMA . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 520

state 428

    (33) statement -> FOR LPAREN for_expr SEMI . for_expr SEMI for_expr RPAREN for_statement
    (68) for_expr -> . empty
    (69) for_expr -> . non_empty_for_expr
    (363) empty -> .
    (70) non_empty_for_expr -> . non_empty_for_expr COMMA expr
    (71) non_empty_for_expr -> . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    SEMI            reduce using rule 363 (empty -> .)
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    non_empty_for_expr             shift and go to state 268
    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    empty                          shift and go to state 269
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 267
    for_expr                       shift and go to state 521

state 429

    (219) variable_name -> LBRACE expr . RBRACE
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    RBRACE          shift and go to state 522
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    LOGICAL_AND     shift and go to state 181
    LOGICAL_OR      shift and go to state 202
    LOGICAL_XOR     shift and go to state 200
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188


state 430

    (195) method_or_not -> empty .

    OBJECT_OPERATOR reduce using rule 195 (method_or_not -> empty .)
    EQUALS          reduce using rule 195 (method_or_not -> empty .)
    PLUS_EQUAL      reduce using rule 195 (method_or_not -> empty .)
    MINUS_EQUAL     reduce using rule 195 (method_or_not -> empty .)
    MUL_EQUAL       reduce using rule 195 (method_or_not -> empty .)
    DIV_EQUAL       reduce using rule 195 (method_or_not -> empty .)
    CONCAT_EQUAL    reduce using rule 195 (method_or_not -> empty .)
    MOD_EQUAL       reduce using rule 195 (method_or_not -> empty .)
    AND_EQUAL       reduce using rule 195 (method_or_not -> empty .)
    OR_EQUAL        reduce using rule 195 (method_or_not -> empty .)
    XOR_EQUAL       reduce using rule 195 (method_or_not -> empty .)
    SL_EQUAL        reduce using rule 195 (method_or_not -> empty .)
    SR_EQUAL        reduce using rule 195 (method_or_not -> empty .)
    INC             reduce using rule 195 (method_or_not -> empty .)
    DEC             reduce using rule 195 (method_or_not -> empty .)
    SEMI            reduce using rule 195 (method_or_not -> empty .)
    BOOLEAN_AND     reduce using rule 195 (method_or_not -> empty .)
    BOOLEAN_OR      reduce using rule 195 (method_or_not -> empty .)
    LOGICAL_AND     reduce using rule 195 (method_or_not -> empty .)
    LOGICAL_OR      reduce using rule 195 (method_or_not -> empty .)
    LOGICAL_XOR     reduce using rule 195 (method_or_not -> empty .)
    AND             reduce using rule 195 (method_or_not -> empty .)
    OR              reduce using rule 195 (method_or_not -> empty .)
    XOR             reduce using rule 195 (method_or_not -> empty .)
    CONCAT          reduce using rule 195 (method_or_not -> empty .)
    PLUS            reduce using rule 195 (method_or_not -> empty .)
    MINUS           reduce using rule 195 (method_or_not -> empty .)
    MUL             reduce using rule 195 (method_or_not -> empty .)
    DIV             reduce using rule 195 (method_or_not -> empty .)
    SL              reduce using rule 195 (method_or_not -> empty .)
    SR              reduce using rule 195 (method_or_not -> empty .)
    MOD             reduce using rule 195 (method_or_not -> empty .)
    IS_IDENTICAL    reduce using rule 195 (method_or_not -> empty .)
    IS_NOT_IDENTICAL reduce using rule 195 (method_or_not -> empty .)
    IS_EQUAL        reduce using rule 195 (method_or_not -> empty .)
    IS_NOT_EQUAL    reduce using rule 195 (method_or_not -> empty .)
    IS_SMALLER      reduce using rule 195 (method_or_not -> empty .)
    IS_SMALLER_OR_EQUAL reduce using rule 195 (method_or_not -> empty .)
    IS_GREATER      reduce using rule 195 (method_or_not -> empty .)
    IS_GREATER_OR_EQUAL reduce using rule 195 (method_or_not -> empty .)
    INSTANCEOF      reduce using rule 195 (method_or_not -> empty .)
    QUESTION        reduce using rule 195 (method_or_not -> empty .)
    COMMA           reduce using rule 195 (method_or_not -> empty .)
    RPAREN          reduce using rule 195 (method_or_not -> empty .)
    AS              reduce using rule 195 (method_or_not -> empty .)
    RBRACE          reduce using rule 195 (method_or_not -> empty .)
    RBRACKET        reduce using rule 195 (method_or_not -> empty .)
    DOUBLE_ARROW    reduce using rule 195 (method_or_not -> empty .)
    COLON           reduce using rule 195 (method_or_not -> empty .)


state 431

    (194) method_or_not -> LPAREN . function_call_parameter_list RPAREN
    (235) function_call_parameter_list -> . function_call_parameter_list COMMA function_call_parameter
    (236) function_call_parameter_list -> . function_call_parameter
    (237) function_call_parameter_list -> . empty
    (238) function_call_parameter -> . expr
    (239) function_call_parameter -> . AND variable
    (363) empty -> .
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    AND             shift and go to state 330
    RPAREN          reduce using rule 363 (empty -> .)
    COMMA           reduce using rule 363 (empty -> .)
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    function_call_parameter_list   shift and go to state 523
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    empty                          shift and go to state 331
    function_call_parameter        shift and go to state 332
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 329

state 432

    (182) variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not . variable_properties
    (196) variable_properties -> . variable_properties variable_property
    (197) variable_properties -> . empty
    (363) empty -> .

    OBJECT_OPERATOR reduce using rule 363 (empty -> .)
    EQUALS          reduce using rule 363 (empty -> .)
    PLUS_EQUAL      reduce using rule 363 (empty -> .)
    MINUS_EQUAL     reduce using rule 363 (empty -> .)
    MUL_EQUAL       reduce using rule 363 (empty -> .)
    DIV_EQUAL       reduce using rule 363 (empty -> .)
    CONCAT_EQUAL    reduce using rule 363 (empty -> .)
    MOD_EQUAL       reduce using rule 363 (empty -> .)
    AND_EQUAL       reduce using rule 363 (empty -> .)
    OR_EQUAL        reduce using rule 363 (empty -> .)
    XOR_EQUAL       reduce using rule 363 (empty -> .)
    SL_EQUAL        reduce using rule 363 (empty -> .)
    SR_EQUAL        reduce using rule 363 (empty -> .)
    INC             reduce using rule 363 (empty -> .)
    DEC             reduce using rule 363 (empty -> .)
    SEMI            reduce using rule 363 (empty -> .)
    BOOLEAN_AND     reduce using rule 363 (empty -> .)
    BOOLEAN_OR      reduce using rule 363 (empty -> .)
    LOGICAL_AND     reduce using rule 363 (empty -> .)
    LOGICAL_OR      reduce using rule 363 (empty -> .)
    LOGICAL_XOR     reduce using rule 363 (empty -> .)
    AND             reduce using rule 363 (empty -> .)
    OR              reduce using rule 363 (empty -> .)
    XOR             reduce using rule 363 (empty -> .)
    CONCAT          reduce using rule 363 (empty -> .)
    PLUS            reduce using rule 363 (empty -> .)
    MINUS           reduce using rule 363 (empty -> .)
    MUL             reduce using rule 363 (empty -> .)
    DIV             reduce using rule 363 (empty -> .)
    SL              reduce using rule 363 (empty -> .)
    SR              reduce using rule 363 (empty -> .)
    MOD             reduce using rule 363 (empty -> .)
    IS_IDENTICAL    reduce using rule 363 (empty -> .)
    IS_NOT_IDENTICAL reduce using rule 363 (empty -> .)
    IS_EQUAL        reduce using rule 363 (empty -> .)
    IS_NOT_EQUAL    reduce using rule 363 (empty -> .)
    IS_SMALLER      reduce using rule 363 (empty -> .)
    IS_SMALLER_OR_EQUAL reduce using rule 363 (empty -> .)
    IS_GREATER      reduce using rule 363 (empty -> .)
    IS_GREATER_OR_EQUAL reduce using rule 363 (empty -> .)
    INSTANCEOF      reduce using rule 363 (empty -> .)
    QUESTION        reduce using rule 363 (empty -> .)
    COMMA           reduce using rule 363 (empty -> .)
    RPAREN          reduce using rule 363 (empty -> .)
    AS              reduce using rule 363 (empty -> .)
    RBRACE          reduce using rule 363 (empty -> .)
    RBRACKET        reduce using rule 363 (empty -> .)
    DOUBLE_ARROW    reduce using rule 363 (empty -> .)
    COLON           reduce using rule 363 (empty -> .)

    empty                          shift and go to state 524
    variable_properties            shift and go to state 525

state 433

    (213) object_property -> variable_name object_dim_list .
    (216) object_dim_list -> object_dim_list . LBRACKET dim_offset RBRACKET
    (217) object_dim_list -> object_dim_list . LBRACE expr RBRACE

    LPAREN          reduce using rule 213 (object_property -> variable_name object_dim_list .)
    OBJECT_OPERATOR reduce using rule 213 (object_property -> variable_name object_dim_list .)
    EQUALS          reduce using rule 213 (object_property -> variable_name object_dim_list .)
    PLUS_EQUAL      reduce using rule 213 (object_property -> variable_name object_dim_list .)
    MINUS_EQUAL     reduce using rule 213 (object_property -> variable_name object_dim_list .)
    MUL_EQUAL       reduce using rule 213 (object_property -> variable_name object_dim_list .)
    DIV_EQUAL       reduce using rule 213 (object_property -> variable_name object_dim_list .)
    CONCAT_EQUAL    reduce using rule 213 (object_property -> variable_name object_dim_list .)
    MOD_EQUAL       reduce using rule 213 (object_property -> variable_name object_dim_list .)
    AND_EQUAL       reduce using rule 213 (object_property -> variable_name object_dim_list .)
    OR_EQUAL        reduce using rule 213 (object_property -> variable_name object_dim_list .)
    XOR_EQUAL       reduce using rule 213 (object_property -> variable_name object_dim_list .)
    SL_EQUAL        reduce using rule 213 (object_property -> variable_name object_dim_list .)
    SR_EQUAL        reduce using rule 213 (object_property -> variable_name object_dim_list .)
    INC             reduce using rule 213 (object_property -> variable_name object_dim_list .)
    DEC             reduce using rule 213 (object_property -> variable_name object_dim_list .)
    SEMI            reduce using rule 213 (object_property -> variable_name object_dim_list .)
    BOOLEAN_AND     reduce using rule 213 (object_property -> variable_name object_dim_list .)
    BOOLEAN_OR      reduce using rule 213 (object_property -> variable_name object_dim_list .)
    LOGICAL_AND     reduce using rule 213 (object_property -> variable_name object_dim_list .)
    LOGICAL_OR      reduce using rule 213 (object_property -> variable_name object_dim_list .)
    LOGICAL_XOR     reduce using rule 213 (object_property -> variable_name object_dim_list .)
    AND             reduce using rule 213 (object_property -> variable_name object_dim_list .)
    OR              reduce using rule 213 (object_property -> variable_name object_dim_list .)
    XOR             reduce using rule 213 (object_property -> variable_name object_dim_list .)
    CONCAT          reduce using rule 213 (object_property -> variable_name object_dim_list .)
    PLUS            reduce using rule 213 (object_property -> variable_name object_dim_list .)
    MINUS           reduce using rule 213 (object_property -> variable_name object_dim_list .)
    MUL             reduce using rule 213 (object_property -> variable_name object_dim_list .)
    DIV             reduce using rule 213 (object_property -> variable_name object_dim_list .)
    SL              reduce using rule 213 (object_property -> variable_name object_dim_list .)
    SR              reduce using rule 213 (object_property -> variable_name object_dim_list .)
    MOD             reduce using rule 213 (object_property -> variable_name object_dim_list .)
    IS_IDENTICAL    reduce using rule 213 (object_property -> variable_name object_dim_list .)
    IS_NOT_IDENTICAL reduce using rule 213 (object_property -> variable_name object_dim_list .)
    IS_EQUAL        reduce using rule 213 (object_property -> variable_name object_dim_list .)
    IS_NOT_EQUAL    reduce using rule 213 (object_property -> variable_name object_dim_list .)
    IS_SMALLER      reduce using rule 213 (object_property -> variable_name object_dim_list .)
    IS_SMALLER_OR_EQUAL reduce using rule 213 (object_property -> variable_name object_dim_list .)
    IS_GREATER      reduce using rule 213 (object_property -> variable_name object_dim_list .)
    IS_GREATER_OR_EQUAL reduce using rule 213 (object_property -> variable_name object_dim_list .)
    INSTANCEOF      reduce using rule 213 (object_property -> variable_name object_dim_list .)
    QUESTION        reduce using rule 213 (object_property -> variable_name object_dim_list .)
    COMMA           reduce using rule 213 (object_property -> variable_name object_dim_list .)
    RPAREN          reduce using rule 213 (object_property -> variable_name object_dim_list .)
    AS              reduce using rule 213 (object_property -> variable_name object_dim_list .)
    RBRACE          reduce using rule 213 (object_property -> variable_name object_dim_list .)
    RBRACKET        reduce using rule 213 (object_property -> variable_name object_dim_list .)
    DOUBLE_ARROW    reduce using rule 213 (object_property -> variable_name object_dim_list .)
    COLON           reduce using rule 213 (object_property -> variable_name object_dim_list .)
    LBRACKET        shift and go to state 527
    LBRACE          shift and go to state 526


state 434

    (215) object_dim_list -> empty .

    LBRACKET        reduce using rule 215 (object_dim_list -> empty .)
    LBRACE          reduce using rule 215 (object_dim_list -> empty .)
    LPAREN          reduce using rule 215 (object_dim_list -> empty .)
    OBJECT_OPERATOR reduce using rule 215 (object_dim_list -> empty .)
    EQUALS          reduce using rule 215 (object_dim_list -> empty .)
    PLUS_EQUAL      reduce using rule 215 (object_dim_list -> empty .)
    MINUS_EQUAL     reduce using rule 215 (object_dim_list -> empty .)
    MUL_EQUAL       reduce using rule 215 (object_dim_list -> empty .)
    DIV_EQUAL       reduce using rule 215 (object_dim_list -> empty .)
    CONCAT_EQUAL    reduce using rule 215 (object_dim_list -> empty .)
    MOD_EQUAL       reduce using rule 215 (object_dim_list -> empty .)
    AND_EQUAL       reduce using rule 215 (object_dim_list -> empty .)
    OR_EQUAL        reduce using rule 215 (object_dim_list -> empty .)
    XOR_EQUAL       reduce using rule 215 (object_dim_list -> empty .)
    SL_EQUAL        reduce using rule 215 (object_dim_list -> empty .)
    SR_EQUAL        reduce using rule 215 (object_dim_list -> empty .)
    INC             reduce using rule 215 (object_dim_list -> empty .)
    DEC             reduce using rule 215 (object_dim_list -> empty .)
    SEMI            reduce using rule 215 (object_dim_list -> empty .)
    BOOLEAN_AND     reduce using rule 215 (object_dim_list -> empty .)
    BOOLEAN_OR      reduce using rule 215 (object_dim_list -> empty .)
    LOGICAL_AND     reduce using rule 215 (object_dim_list -> empty .)
    LOGICAL_OR      reduce using rule 215 (object_dim_list -> empty .)
    LOGICAL_XOR     reduce using rule 215 (object_dim_list -> empty .)
    AND             reduce using rule 215 (object_dim_list -> empty .)
    OR              reduce using rule 215 (object_dim_list -> empty .)
    XOR             reduce using rule 215 (object_dim_list -> empty .)
    CONCAT          reduce using rule 215 (object_dim_list -> empty .)
    PLUS            reduce using rule 215 (object_dim_list -> empty .)
    MINUS           reduce using rule 215 (object_dim_list -> empty .)
    MUL             reduce using rule 215 (object_dim_list -> empty .)
    DIV             reduce using rule 215 (object_dim_list -> empty .)
    SL              reduce using rule 215 (object_dim_list -> empty .)
    SR              reduce using rule 215 (object_dim_list -> empty .)
    MOD             reduce using rule 215 (object_dim_list -> empty .)
    IS_IDENTICAL    reduce using rule 215 (object_dim_list -> empty .)
    IS_NOT_IDENTICAL reduce using rule 215 (object_dim_list -> empty .)
    IS_EQUAL        reduce using rule 215 (object_dim_list -> empty .)
    IS_NOT_EQUAL    reduce using rule 215 (object_dim_list -> empty .)
    IS_SMALLER      reduce using rule 215 (object_dim_list -> empty .)
    IS_SMALLER_OR_EQUAL reduce using rule 215 (object_dim_list -> empty .)
    IS_GREATER      reduce using rule 215 (object_dim_list -> empty .)
    IS_GREATER_OR_EQUAL reduce using rule 215 (object_dim_list -> empty .)
    INSTANCEOF      reduce using rule 215 (object_dim_list -> empty .)
    QUESTION        reduce using rule 215 (object_dim_list -> empty .)
    COMMA           reduce using rule 215 (object_dim_list -> empty .)
    RPAREN          reduce using rule 215 (object_dim_list -> empty .)
    AS              reduce using rule 215 (object_dim_list -> empty .)
    RBRACE          reduce using rule 215 (object_dim_list -> empty .)
    RBRACKET        reduce using rule 215 (object_dim_list -> empty .)
    DOUBLE_ARROW    reduce using rule 215 (object_dim_list -> empty .)
    COLON           reduce using rule 215 (object_dim_list -> empty .)


state 435

    (103) function_declaration_statement -> FUNCTION is_reference STRING LPAREN . parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (147) parameter_list -> . parameter_list COMMA parameter
    (148) parameter_list -> . parameter
    (149) parameter_list -> . empty
    (150) parameter -> . VARIABLE
    (151) parameter -> . class_name VARIABLE
    (152) parameter -> . AND VARIABLE
    (153) parameter -> . class_name AND VARIABLE
    (154) parameter -> . VARIABLE EQUALS static_scalar
    (155) parameter -> . class_name VARIABLE EQUALS static_scalar
    (156) parameter -> . AND VARIABLE EQUALS static_scalar
    (157) parameter -> . class_name AND VARIABLE EQUALS static_scalar
    (363) empty -> .
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    VARIABLE        shift and go to state 439
    AND             shift and go to state 440
    RPAREN          reduce using rule 363 (empty -> .)
    COMMA           reduce using rule 363 (empty -> .)
    NS_SEPARATOR    shift and go to state 167
    NAMESPACE       shift and go to state 165
    STATIC          shift and go to state 101
    STRING          shift and go to state 89

    parameter_list                 shift and go to state 528
    class_name                     shift and go to state 436
    parameter                      shift and go to state 437
    empty                          shift and go to state 438
    namespace_name                 shift and go to state 169

state 436

    (151) parameter -> class_name . VARIABLE
    (153) parameter -> class_name . AND VARIABLE
    (155) parameter -> class_name . VARIABLE EQUALS static_scalar
    (157) parameter -> class_name . AND VARIABLE EQUALS static_scalar

    VARIABLE        shift and go to state 529
    AND             shift and go to state 530


state 437

    (148) parameter_list -> parameter .

    RPAREN          reduce using rule 148 (parameter_list -> parameter .)
    COMMA           reduce using rule 148 (parameter_list -> parameter .)


state 438

    (149) parameter_list -> empty .

    RPAREN          reduce using rule 149 (parameter_list -> empty .)
    COMMA           reduce using rule 149 (parameter_list -> empty .)


state 439

    (150) parameter -> VARIABLE .
    (154) parameter -> VARIABLE . EQUALS static_scalar

    RPAREN          reduce using rule 150 (parameter -> VARIABLE .)
    COMMA           reduce using rule 150 (parameter -> VARIABLE .)
    EQUALS          shift and go to state 531


state 440

    (152) parameter -> AND . VARIABLE
    (156) parameter -> AND . VARIABLE EQUALS static_scalar

    VARIABLE        shift and go to state 532


state 441

    (240) expr -> FUNCTION is_reference LPAREN parameter_list . RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (147) parameter_list -> parameter_list . COMMA parameter

    RPAREN          shift and go to state 533
    COMMA           shift and go to state 534


state 442

    (192) function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN . function_call_parameter_list RPAREN
    (235) function_call_parameter_list -> . function_call_parameter_list COMMA function_call_parameter
    (236) function_call_parameter_list -> . function_call_parameter
    (237) function_call_parameter_list -> . empty
    (238) function_call_parameter -> . expr
    (239) function_call_parameter -> . AND variable
    (363) empty -> .
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    AND             shift and go to state 330
    RPAREN          reduce using rule 363 (empty -> .)
    COMMA           reduce using rule 363 (empty -> .)
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    function_call_parameter_list   shift and go to state 535
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    empty                          shift and go to state 331
    function_call_parameter        shift and go to state 332
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 329

state 443

    (191) function_call -> variable_class_name DOUBLE_COLON STRING LPAREN . function_call_parameter_list RPAREN
    (235) function_call_parameter_list -> . function_call_parameter_list COMMA function_call_parameter
    (236) function_call_parameter_list -> . function_call_parameter
    (237) function_call_parameter_list -> . empty
    (238) function_call_parameter -> . expr
    (239) function_call_parameter -> . AND variable
    (363) empty -> .
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    AND             shift and go to state 330
    RPAREN          reduce using rule 363 (empty -> .)
    COMMA           reduce using rule 363 (empty -> .)
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    function_call_parameter_list   shift and go to state 536
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    empty                          shift and go to state 331
    function_call_parameter        shift and go to state 332
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 329

state 444

    (98) echo_expr_list -> echo_expr_list COMMA expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    SEMI            reduce using rule 98 (echo_expr_list -> echo_expr_list COMMA expr .)
    COMMA           reduce using rule 98 (echo_expr_list -> echo_expr_list COMMA expr .)
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    LOGICAL_AND     shift and go to state 181
    LOGICAL_OR      shift and go to state 202
    LOGICAL_XOR     shift and go to state 200
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188


state 445

    (49) statement -> TRY LBRACE inner_statement_list RBRACE . CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches

    CATCH           shift and go to state 537


state 446

    (27) inner_statement -> HALT_COMPILER LPAREN . RPAREN SEMI

    RPAREN          shift and go to state 538


state 447

    (359) encaps_var -> CURLY_OPEN variable . RBRACE

    RBRACE          shift and go to state 539


state 448

    (356) encaps_var -> VARIABLE OBJECT_OPERATOR . STRING

    STRING          shift and go to state 540


state 449

    (355) encaps_var -> VARIABLE LBRACKET . encaps_var_offset RBRACKET
    (360) encaps_var_offset -> . STRING
    (361) encaps_var_offset -> . NUM_STRING
    (362) encaps_var_offset -> . VARIABLE

    STRING          shift and go to state 541
    NUM_STRING      shift and go to state 542
    VARIABLE        shift and go to state 543

    encaps_var_offset              shift and go to state 544

state 450

    (357) encaps_var -> DOLLAR_OPEN_CURLY_BRACES expr . RBRACE
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    RBRACE          shift and go to state 545
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    LOGICAL_AND     shift and go to state 181
    LOGICAL_OR      shift and go to state 202
    LOGICAL_XOR     shift and go to state 200
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188


state 451

    (358) encaps_var -> DOLLAR_OPEN_CURLY_BRACES STRING_VARNAME . LBRACKET expr RBRACKET RBRACE
    (318) scalar -> STRING_VARNAME .

    LBRACKET        shift and go to state 546
    RBRACE          reduce using rule 318 (scalar -> STRING_VARNAME .)
    BOOLEAN_AND     reduce using rule 318 (scalar -> STRING_VARNAME .)
    BOOLEAN_OR      reduce using rule 318 (scalar -> STRING_VARNAME .)
    LOGICAL_AND     reduce using rule 318 (scalar -> STRING_VARNAME .)
    LOGICAL_OR      reduce using rule 318 (scalar -> STRING_VARNAME .)
    LOGICAL_XOR     reduce using rule 318 (scalar -> STRING_VARNAME .)
    AND             reduce using rule 318 (scalar -> STRING_VARNAME .)
    OR              reduce using rule 318 (scalar -> STRING_VARNAME .)
    XOR             reduce using rule 318 (scalar -> STRING_VARNAME .)
    CONCAT          reduce using rule 318 (scalar -> STRING_VARNAME .)
    PLUS            reduce using rule 318 (scalar -> STRING_VARNAME .)
    MINUS           reduce using rule 318 (scalar -> STRING_VARNAME .)
    MUL             reduce using rule 318 (scalar -> STRING_VARNAME .)
    DIV             reduce using rule 318 (scalar -> STRING_VARNAME .)
    SL              reduce using rule 318 (scalar -> STRING_VARNAME .)
    SR              reduce using rule 318 (scalar -> STRING_VARNAME .)
    MOD             reduce using rule 318 (scalar -> STRING_VARNAME .)
    IS_IDENTICAL    reduce using rule 318 (scalar -> STRING_VARNAME .)
    IS_NOT_IDENTICAL reduce using rule 318 (scalar -> STRING_VARNAME .)
    IS_EQUAL        reduce using rule 318 (scalar -> STRING_VARNAME .)
    IS_NOT_EQUAL    reduce using rule 318 (scalar -> STRING_VARNAME .)
    IS_SMALLER      reduce using rule 318 (scalar -> STRING_VARNAME .)
    IS_SMALLER_OR_EQUAL reduce using rule 318 (scalar -> STRING_VARNAME .)
    IS_GREATER      reduce using rule 318 (scalar -> STRING_VARNAME .)
    IS_GREATER_OR_EQUAL reduce using rule 318 (scalar -> STRING_VARNAME .)
    INSTANCEOF      reduce using rule 318 (scalar -> STRING_VARNAME .)
    QUESTION        reduce using rule 318 (scalar -> STRING_VARNAME .)


state 452

    (114) implements_list -> IMPLEMENTS . interface_list
    (127) interface_list -> . interface_list COMMA fully_qualified_class_name
    (128) interface_list -> . fully_qualified_class_name
    (111) fully_qualified_class_name -> . namespace_name
    (112) fully_qualified_class_name -> . NS_SEPARATOR namespace_name
    (113) fully_qualified_class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    NS_SEPARATOR    shift and go to state 409
    NAMESPACE       shift and go to state 408
    STRING          shift and go to state 89

    interface_list                 shift and go to state 547
    fully_qualified_class_name     shift and go to state 407
    namespace_name                 shift and go to state 411

state 453

    (104) class_declaration_statement -> class_entry_type STRING extends_from implements_list . LBRACE class_statement_list RBRACE

    LBRACE          shift and go to state 548


state 454

    (115) implements_list -> empty .

    LBRACE          reduce using rule 115 (implements_list -> empty .)


state 455

    (110) extends_from -> EXTENDS fully_qualified_class_name .

    IMPLEMENTS      reduce using rule 110 (extends_from -> EXTENDS fully_qualified_class_name .)
    LBRACE          reduce using rule 110 (extends_from -> EXTENDS fully_qualified_class_name .)


state 456

    (190) function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN . function_call_parameter_list RPAREN
    (235) function_call_parameter_list -> . function_call_parameter_list COMMA function_call_parameter
    (236) function_call_parameter_list -> . function_call_parameter
    (237) function_call_parameter_list -> . empty
    (238) function_call_parameter -> . expr
    (239) function_call_parameter -> . AND variable
    (363) empty -> .
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    AND             shift and go to state 330
    RPAREN          reduce using rule 363 (empty -> .)
    COMMA           reduce using rule 363 (empty -> .)
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    function_call_parameter_list   shift and go to state 549
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    empty                          shift and go to state 331
    function_call_parameter        shift and go to state 332
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 329

state 457

    (189) function_call -> class_name DOUBLE_COLON STRING LPAREN . function_call_parameter_list RPAREN
    (235) function_call_parameter_list -> . function_call_parameter_list COMMA function_call_parameter
    (236) function_call_parameter_list -> . function_call_parameter
    (237) function_call_parameter_list -> . empty
    (238) function_call_parameter -> . expr
    (239) function_call_parameter -> . AND variable
    (363) empty -> .
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    AND             shift and go to state 330
    RPAREN          reduce using rule 363 (empty -> .)
    COMMA           reduce using rule 363 (empty -> .)
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    function_call_parameter_list   shift and go to state 550
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    empty                          shift and go to state 331
    function_call_parameter        shift and go to state 332
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 329

state 458

    (93) global_var -> DOLLAR LBRACE expr . RBRACE
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    RBRACE          shift and go to state 551
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    LOGICAL_AND     shift and go to state 181
    LOGICAL_OR      shift and go to state 202
    LOGICAL_XOR     shift and go to state 200
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188


state 459

    (89) global_var_list -> global_var_list COMMA global_var .

    SEMI            reduce using rule 89 (global_var_list -> global_var_list COMMA global_var .)
    COMMA           reduce using rule 89 (global_var_list -> global_var_list COMMA global_var .)


state 460

    (31) statement -> WHILE LPAREN expr RPAREN . while_statement
    (66) while_statement -> . statement
    (67) while_statement -> . COLON inner_statement_list ENDWHILE SEMI
    (28) statement -> . LBRACE inner_statement_list RBRACE
    (29) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (30) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (31) statement -> . WHILE LPAREN expr RPAREN while_statement
    (32) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (33) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (34) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (35) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (36) statement -> . BREAK SEMI
    (37) statement -> . BREAK expr SEMI
    (38) statement -> . CONTINUE SEMI
    (39) statement -> . CONTINUE expr SEMI
    (40) statement -> . RETURN SEMI
    (41) statement -> . RETURN expr SEMI
    (42) statement -> . GLOBAL global_var_list SEMI
    (43) statement -> . STATIC static_var_list SEMI
    (44) statement -> . ECHO echo_expr_list SEMI
    (45) statement -> . INLINE_HTML
    (46) statement -> . expr SEMI
    (47) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (48) statement -> . SEMI
    (49) statement -> . TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches
    (52) statement -> . THROW expr SEMI
    (53) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    COLON           shift and go to state 553
    LBRACE          shift and go to state 47
    IF              shift and go to state 93
    WHILE           shift and go to state 57
    DO              shift and go to state 76
    FOR             shift and go to state 36
    FOREACH         shift and go to state 13
    SWITCH          shift and go to state 61
    BREAK           shift and go to state 74
    CONTINUE        shift and go to state 48
    RETURN          shift and go to state 23
    GLOBAL          shift and go to state 55
    STATIC          shift and go to state 29
    ECHO            shift and go to state 42
    INLINE_HTML     shift and go to state 88
    UNSET           shift and go to state 83
    SEMI            shift and go to state 85
    TRY             shift and go to state 43
    THROW           shift and go to state 96
    DECLARE         shift and go to state 16
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    class_constant                 shift and go to state 24
    static_member                  shift and go to state 86
    while_statement                shift and go to state 552
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    statement                      shift and go to state 554
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 71

state 461

    (203) static_member -> class_name DOUBLE_COLON variable_without_objects .

    OBJECT_OPERATOR reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    LPAREN          reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    SEMI            reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    BOOLEAN_AND     reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    BOOLEAN_OR      reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    LOGICAL_AND     reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    LOGICAL_OR      reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    LOGICAL_XOR     reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    AND             reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    OR              reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    XOR             reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    CONCAT          reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    PLUS            reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    MINUS           reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    MUL             reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    DIV             reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    SL              reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    SR              reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    MOD             reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    IS_IDENTICAL    reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    IS_NOT_IDENTICAL reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    IS_EQUAL        reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    IS_NOT_EQUAL    reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    IS_SMALLER      reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    IS_SMALLER_OR_EQUAL reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    IS_GREATER      reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    IS_GREATER_OR_EQUAL reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    INSTANCEOF      reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    QUESTION        reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    COMMA           reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    RPAREN          reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    AS              reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    RBRACE          reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    RBRACKET        reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    DOUBLE_ARROW    reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    COLON           reduce using rule 203 (static_member -> class_name DOUBLE_COLON variable_without_objects .)


state 462

    (168) dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property . dynamic_class_name_variable_properties
    (170) dynamic_class_name_variable_properties -> . dynamic_class_name_variable_properties dynamic_class_name_variable_property
    (171) dynamic_class_name_variable_properties -> . empty
    (363) empty -> .

    OBJECT_OPERATOR reduce using rule 363 (empty -> .)
    LPAREN          reduce using rule 363 (empty -> .)
    SEMI            reduce using rule 363 (empty -> .)
    BOOLEAN_AND     reduce using rule 363 (empty -> .)
    BOOLEAN_OR      reduce using rule 363 (empty -> .)
    LOGICAL_AND     reduce using rule 363 (empty -> .)
    LOGICAL_OR      reduce using rule 363 (empty -> .)
    LOGICAL_XOR     reduce using rule 363 (empty -> .)
    AND             reduce using rule 363 (empty -> .)
    OR              reduce using rule 363 (empty -> .)
    XOR             reduce using rule 363 (empty -> .)
    CONCAT          reduce using rule 363 (empty -> .)
    PLUS            reduce using rule 363 (empty -> .)
    MINUS           reduce using rule 363 (empty -> .)
    MUL             reduce using rule 363 (empty -> .)
    DIV             reduce using rule 363 (empty -> .)
    SL              reduce using rule 363 (empty -> .)
    SR              reduce using rule 363 (empty -> .)
    MOD             reduce using rule 363 (empty -> .)
    IS_IDENTICAL    reduce using rule 363 (empty -> .)
    IS_NOT_IDENTICAL reduce using rule 363 (empty -> .)
    IS_EQUAL        reduce using rule 363 (empty -> .)
    IS_NOT_EQUAL    reduce using rule 363 (empty -> .)
    IS_SMALLER      reduce using rule 363 (empty -> .)
    IS_SMALLER_OR_EQUAL reduce using rule 363 (empty -> .)
    IS_GREATER      reduce using rule 363 (empty -> .)
    IS_GREATER_OR_EQUAL reduce using rule 363 (empty -> .)
    INSTANCEOF      reduce using rule 363 (empty -> .)
    QUESTION        reduce using rule 363 (empty -> .)
    COMMA           reduce using rule 363 (empty -> .)
    RPAREN          reduce using rule 363 (empty -> .)
    AS              reduce using rule 363 (empty -> .)
    RBRACE          reduce using rule 363 (empty -> .)
    RBRACKET        reduce using rule 363 (empty -> .)
    DOUBLE_ARROW    reduce using rule 363 (empty -> .)
    COLON           reduce using rule 363 (empty -> .)

    empty                          shift and go to state 556
    dynamic_class_name_variable_properties shift and go to state 555

state 463

    (173) ctor_arguments -> LPAREN function_call_parameter_list . RPAREN
    (235) function_call_parameter_list -> function_call_parameter_list . COMMA function_call_parameter

    RPAREN          shift and go to state 557
    COMMA           shift and go to state 477


state 464

    (166) class_name -> NAMESPACE NS_SEPARATOR namespace_name .
    (349) namespace_name -> namespace_name . NS_SEPARATOR STRING

    VARIABLE        reduce using rule 166 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    AND             reduce using rule 166 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    DOUBLE_COLON    reduce using rule 166 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    LPAREN          reduce using rule 166 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    SEMI            reduce using rule 166 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    BOOLEAN_AND     reduce using rule 166 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    BOOLEAN_OR      reduce using rule 166 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    LOGICAL_AND     reduce using rule 166 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    LOGICAL_OR      reduce using rule 166 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    LOGICAL_XOR     reduce using rule 166 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    OR              reduce using rule 166 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    XOR             reduce using rule 166 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    CONCAT          reduce using rule 166 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    PLUS            reduce using rule 166 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    MINUS           reduce using rule 166 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    MUL             reduce using rule 166 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    DIV             reduce using rule 166 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    SL              reduce using rule 166 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    SR              reduce using rule 166 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    MOD             reduce using rule 166 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    IS_IDENTICAL    reduce using rule 166 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    IS_NOT_IDENTICAL reduce using rule 166 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    IS_EQUAL        reduce using rule 166 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    IS_NOT_EQUAL    reduce using rule 166 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    IS_SMALLER      reduce using rule 166 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    IS_SMALLER_OR_EQUAL reduce using rule 166 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    IS_GREATER      reduce using rule 166 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    IS_GREATER_OR_EQUAL reduce using rule 166 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    INSTANCEOF      reduce using rule 166 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    QUESTION        reduce using rule 166 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    COMMA           reduce using rule 166 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    RPAREN          reduce using rule 166 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    AS              reduce using rule 166 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    RBRACE          reduce using rule 166 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    RBRACKET        reduce using rule 166 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    DOUBLE_ARROW    reduce using rule 166 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    COLON           reduce using rule 166 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    NS_SEPARATOR    shift and go to state 178


state 465

    (204) static_member -> variable_class_name DOUBLE_COLON variable_without_objects .

    OBJECT_OPERATOR reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    LPAREN          reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    SEMI            reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    BOOLEAN_AND     reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    BOOLEAN_OR      reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    LOGICAL_AND     reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    LOGICAL_OR      reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    LOGICAL_XOR     reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    AND             reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    OR              reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    XOR             reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    CONCAT          reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    PLUS            reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    MINUS           reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    MUL             reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    DIV             reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    SL              reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    SR              reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    MOD             reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    IS_IDENTICAL    reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    IS_NOT_IDENTICAL reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    IS_EQUAL        reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    IS_NOT_EQUAL    reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    IS_SMALLER      reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    IS_SMALLER_OR_EQUAL reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    IS_GREATER      reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    IS_GREATER_OR_EQUAL reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    INSTANCEOF      reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    QUESTION        reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    COMMA           reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    RPAREN          reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    AS              reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    RBRACE          reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    RBRACKET        reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    DOUBLE_ARROW    reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    COLON           reduce using rule 204 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)


state 466

    (35) statement -> SWITCH LPAREN expr RPAREN . switch_case_list
    (80) switch_case_list -> . LBRACE case_list RBRACE
    (81) switch_case_list -> . LBRACE SEMI case_list RBRACE
    (82) switch_case_list -> . COLON case_list ENDSWITCH SEMI
    (83) switch_case_list -> . COLON SEMI case_list ENDSWITCH SEMI

    LBRACE          shift and go to state 558
    COLON           shift and go to state 559

    switch_case_list               shift and go to state 560

state 467

    (207) reference_variable -> reference_variable LBRACE expr RBRACE .

    LBRACKET        reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    LBRACE          reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    DOUBLE_COLON    reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    OBJECT_OPERATOR reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    EQUALS          reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    PLUS_EQUAL      reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    MINUS_EQUAL     reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    MUL_EQUAL       reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    DIV_EQUAL       reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    CONCAT_EQUAL    reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    MOD_EQUAL       reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    AND_EQUAL       reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    OR_EQUAL        reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    XOR_EQUAL       reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    SL_EQUAL        reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    SR_EQUAL        reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    INC             reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    DEC             reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    RPAREN          reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    BOOLEAN_AND     reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    BOOLEAN_OR      reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    LOGICAL_AND     reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    LOGICAL_OR      reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    LOGICAL_XOR     reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    AND             reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    OR              reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    XOR             reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    CONCAT          reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    PLUS            reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    MINUS           reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    MUL             reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    DIV             reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    SL              reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    SR              reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    MOD             reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    IS_IDENTICAL    reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    IS_NOT_IDENTICAL reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    IS_EQUAL        reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    IS_NOT_EQUAL    reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    IS_SMALLER      reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    IS_SMALLER_OR_EQUAL reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    IS_GREATER      reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    IS_GREATER_OR_EQUAL reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    INSTANCEOF      reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    QUESTION        reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    LPAREN          reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    SEMI            reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    COMMA           reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    AS              reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    RBRACE          reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    RBRACKET        reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    DOUBLE_ARROW    reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    COLON           reduce using rule 207 (reference_variable -> reference_variable LBRACE expr RBRACE .)


state 468

    (206) reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .

    LBRACKET        reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    LBRACE          reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    DOUBLE_COLON    reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    OBJECT_OPERATOR reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    EQUALS          reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    PLUS_EQUAL      reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    MINUS_EQUAL     reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    MUL_EQUAL       reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    DIV_EQUAL       reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    CONCAT_EQUAL    reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    MOD_EQUAL       reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    AND_EQUAL       reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    OR_EQUAL        reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    XOR_EQUAL       reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    SL_EQUAL        reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    SR_EQUAL        reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    INC             reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    DEC             reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    RPAREN          reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    BOOLEAN_AND     reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    BOOLEAN_OR      reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    LOGICAL_AND     reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    LOGICAL_OR      reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    LOGICAL_XOR     reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    AND             reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    OR              reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    XOR             reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    CONCAT          reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    PLUS            reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    MINUS           reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    MUL             reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    DIV             reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    SL              reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    SR              reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    MOD             reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    IS_IDENTICAL    reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    IS_NOT_IDENTICAL reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    IS_EQUAL        reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    IS_NOT_EQUAL    reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    IS_SMALLER      reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    IS_SMALLER_OR_EQUAL reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    IS_GREATER      reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    IS_GREATER_OR_EQUAL reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    INSTANCEOF      reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    QUESTION        reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    LPAREN          reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    SEMI            reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    COMMA           reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    AS              reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    RBRACE          reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    RBRACKET        reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    DOUBLE_ARROW    reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    COLON           reduce using rule 206 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)


state 469

    (231) non_empty_array_pair_list -> expr DOUBLE_ARROW . AND variable
    (232) non_empty_array_pair_list -> expr DOUBLE_ARROW . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    AND             shift and go to state 562
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 561

state 470

    (227) non_empty_array_pair_list -> AND variable .

    COMMA           reduce using rule 227 (non_empty_array_pair_list -> AND variable .)
    RPAREN          reduce using rule 227 (non_empty_array_pair_list -> AND variable .)


state 471

    (224) array_pair_list -> non_empty_array_pair_list possible_comma .

    RPAREN          reduce using rule 224 (array_pair_list -> non_empty_array_pair_list possible_comma .)


state 472

    (225) non_empty_array_pair_list -> non_empty_array_pair_list COMMA . AND variable
    (226) non_empty_array_pair_list -> non_empty_array_pair_list COMMA . expr
    (229) non_empty_array_pair_list -> non_empty_array_pair_list COMMA . expr DOUBLE_ARROW AND variable
    (230) non_empty_array_pair_list -> non_empty_array_pair_list COMMA . expr DOUBLE_ARROW expr
    (234) possible_comma -> COMMA .
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    AND             shift and go to state 564
    RPAREN          reduce using rule 234 (possible_comma -> COMMA .)
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 563

state 473

    (233) possible_comma -> empty .

    RPAREN          reduce using rule 233 (possible_comma -> empty .)


state 474

    (222) expr -> ARRAY LPAREN array_pair_list RPAREN .

    AS              reduce using rule 222 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    BOOLEAN_AND     reduce using rule 222 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    BOOLEAN_OR      reduce using rule 222 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    LOGICAL_AND     reduce using rule 222 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    LOGICAL_OR      reduce using rule 222 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    LOGICAL_XOR     reduce using rule 222 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    AND             reduce using rule 222 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    OR              reduce using rule 222 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    XOR             reduce using rule 222 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    CONCAT          reduce using rule 222 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    PLUS            reduce using rule 222 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    MINUS           reduce using rule 222 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    MUL             reduce using rule 222 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    DIV             reduce using rule 222 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    SL              reduce using rule 222 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    SR              reduce using rule 222 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    MOD             reduce using rule 222 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    IS_IDENTICAL    reduce using rule 222 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 222 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    IS_EQUAL        reduce using rule 222 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    IS_NOT_EQUAL    reduce using rule 222 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    IS_SMALLER      reduce using rule 222 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 222 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    IS_GREATER      reduce using rule 222 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 222 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    INSTANCEOF      reduce using rule 222 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    QUESTION        reduce using rule 222 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    SEMI            reduce using rule 222 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    COMMA           reduce using rule 222 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    RPAREN          reduce using rule 222 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    RBRACE          reduce using rule 222 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    RBRACKET        reduce using rule 222 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    DOUBLE_ARROW    reduce using rule 222 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    COLON           reduce using rule 222 (expr -> ARRAY LPAREN array_pair_list RPAREN .)


state 475

    (187) function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list . RPAREN
    (235) function_call_parameter_list -> function_call_parameter_list . COMMA function_call_parameter

    RPAREN          shift and go to state 565
    COMMA           shift and go to state 477


state 476

    (186) function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .

    OBJECT_OPERATOR reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    EQUALS          reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    PLUS_EQUAL      reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    MINUS_EQUAL     reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    MUL_EQUAL       reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    DIV_EQUAL       reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    CONCAT_EQUAL    reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    MOD_EQUAL       reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    AND_EQUAL       reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    OR_EQUAL        reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    XOR_EQUAL       reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    SL_EQUAL        reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    SR_EQUAL        reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    INC             reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    DEC             reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_AND     reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_OR      reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_AND     reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_OR      reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_XOR     reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    AND             reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    OR              reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    XOR             reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    CONCAT          reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    PLUS            reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    MINUS           reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    MUL             reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    DIV             reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    SL              reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    SR              reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    MOD             reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_IDENTICAL    reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_EQUAL        reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_EQUAL    reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER      reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER      reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    INSTANCEOF      reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    QUESTION        reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    SEMI            reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    COMMA           reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    RPAREN          reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    AS              reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    RBRACE          reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    RBRACKET        reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    DOUBLE_ARROW    reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    COLON           reduce using rule 186 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)


state 477

    (235) function_call_parameter_list -> function_call_parameter_list COMMA . function_call_parameter
    (238) function_call_parameter -> . expr
    (239) function_call_parameter -> . AND variable
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    AND             shift and go to state 330
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    function_call_parameter        shift and go to state 566
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 329

state 478

    (239) function_call_parameter -> AND variable .

    RPAREN          reduce using rule 239 (function_call_parameter -> AND variable .)
    COMMA           reduce using rule 239 (function_call_parameter -> AND variable .)


state 479

    (287) expr -> expr QUESTION expr COLON . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 567

state 480

    (181) assignment_list_element -> LIST LPAREN . assignment_list RPAREN
    (177) assignment_list -> . assignment_list COMMA assignment_list_element
    (178) assignment_list -> . assignment_list_element
    (179) assignment_list_element -> . variable
    (180) assignment_list_element -> . empty
    (181) assignment_list_element -> . LIST LPAREN assignment_list RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (363) empty -> .
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LIST            shift and go to state 362
    RPAREN          reduce using rule 363 (empty -> .)
    COMMA           reduce using rule 363 (empty -> .)
    NS_SEPARATOR    shift and go to state 129
    NAMESPACE       shift and go to state 128
    DOLLAR          shift and go to state 90
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    VARIABLE        shift and go to state 56

    assignment_list_element        shift and go to state 360
    variable_without_objects       shift and go to state 84
    namespace_name                 shift and go to state 130
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    class_name                     shift and go to state 124
    variable_class_name            shift and go to state 127
    compound_variable              shift and go to state 72
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 126
    assignment_list                shift and go to state 568
    variable                       shift and go to state 359
    empty                          shift and go to state 361

state 481

    (176) expr -> LIST LPAREN assignment_list RPAREN . EQUALS expr

    EQUALS          shift and go to state 569


state 482

    (177) assignment_list -> assignment_list COMMA . assignment_list_element
    (179) assignment_list_element -> . variable
    (180) assignment_list_element -> . empty
    (181) assignment_list_element -> . LIST LPAREN assignment_list RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (363) empty -> .
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LIST            shift and go to state 362
    RPAREN          reduce using rule 363 (empty -> .)
    COMMA           reduce using rule 363 (empty -> .)
    NS_SEPARATOR    shift and go to state 129
    NAMESPACE       shift and go to state 128
    DOLLAR          shift and go to state 90
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    VARIABLE        shift and go to state 56

    assignment_list_element        shift and go to state 570
    variable_without_objects       shift and go to state 84
    namespace_name                 shift and go to state 130
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    class_name                     shift and go to state 124
    variable_class_name            shift and go to state 127
    compound_variable              shift and go to state 72
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 126
    variable                       shift and go to state 359
    empty                          shift and go to state 361

state 483

    (310) expr -> EXIT LPAREN expr RPAREN .

    AS              reduce using rule 310 (expr -> EXIT LPAREN expr RPAREN .)
    BOOLEAN_AND     reduce using rule 310 (expr -> EXIT LPAREN expr RPAREN .)
    BOOLEAN_OR      reduce using rule 310 (expr -> EXIT LPAREN expr RPAREN .)
    LOGICAL_AND     reduce using rule 310 (expr -> EXIT LPAREN expr RPAREN .)
    LOGICAL_OR      reduce using rule 310 (expr -> EXIT LPAREN expr RPAREN .)
    LOGICAL_XOR     reduce using rule 310 (expr -> EXIT LPAREN expr RPAREN .)
    AND             reduce using rule 310 (expr -> EXIT LPAREN expr RPAREN .)
    OR              reduce using rule 310 (expr -> EXIT LPAREN expr RPAREN .)
    XOR             reduce using rule 310 (expr -> EXIT LPAREN expr RPAREN .)
    CONCAT          reduce using rule 310 (expr -> EXIT LPAREN expr RPAREN .)
    PLUS            reduce using rule 310 (expr -> EXIT LPAREN expr RPAREN .)
    MINUS           reduce using rule 310 (expr -> EXIT LPAREN expr RPAREN .)
    MUL             reduce using rule 310 (expr -> EXIT LPAREN expr RPAREN .)
    DIV             reduce using rule 310 (expr -> EXIT LPAREN expr RPAREN .)
    SL              reduce using rule 310 (expr -> EXIT LPAREN expr RPAREN .)
    SR              reduce using rule 310 (expr -> EXIT LPAREN expr RPAREN .)
    MOD             reduce using rule 310 (expr -> EXIT LPAREN expr RPAREN .)
    IS_IDENTICAL    reduce using rule 310 (expr -> EXIT LPAREN expr RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 310 (expr -> EXIT LPAREN expr RPAREN .)
    IS_EQUAL        reduce using rule 310 (expr -> EXIT LPAREN expr RPAREN .)
    IS_NOT_EQUAL    reduce using rule 310 (expr -> EXIT LPAREN expr RPAREN .)
    IS_SMALLER      reduce using rule 310 (expr -> EXIT LPAREN expr RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 310 (expr -> EXIT LPAREN expr RPAREN .)
    IS_GREATER      reduce using rule 310 (expr -> EXIT LPAREN expr RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 310 (expr -> EXIT LPAREN expr RPAREN .)
    INSTANCEOF      reduce using rule 310 (expr -> EXIT LPAREN expr RPAREN .)
    QUESTION        reduce using rule 310 (expr -> EXIT LPAREN expr RPAREN .)
    SEMI            reduce using rule 310 (expr -> EXIT LPAREN expr RPAREN .)
    COMMA           reduce using rule 310 (expr -> EXIT LPAREN expr RPAREN .)
    RPAREN          reduce using rule 310 (expr -> EXIT LPAREN expr RPAREN .)
    RBRACE          reduce using rule 310 (expr -> EXIT LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 310 (expr -> EXIT LPAREN expr RPAREN .)
    DOUBLE_ARROW    reduce using rule 310 (expr -> EXIT LPAREN expr RPAREN .)
    COLON           reduce using rule 310 (expr -> EXIT LPAREN expr RPAREN .)


state 484

    (32) statement -> DO statement WHILE LPAREN . expr RPAREN SEMI
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 571

state 485

    (13) use_declarations -> use_declarations COMMA use_declaration .

    SEMI            reduce using rule 13 (use_declarations -> use_declarations COMMA use_declaration .)
    COMMA           reduce using rule 13 (use_declarations -> use_declarations COMMA use_declaration .)


state 486

    (18) use_declaration -> NS_SEPARATOR namespace_name AS . STRING

    STRING          shift and go to state 572


state 487

    (17) use_declaration -> namespace_name AS STRING .

    SEMI            reduce using rule 17 (use_declaration -> namespace_name AS STRING .)
    COMMA           reduce using rule 17 (use_declaration -> namespace_name AS STRING .)


state 488

    (19) constant_declarations -> constant_declarations COMMA constant_declaration .

    SEMI            reduce using rule 19 (constant_declarations -> constant_declarations COMMA constant_declaration .)
    COMMA           reduce using rule 19 (constant_declarations -> constant_declarations COMMA constant_declaration .)


state 489

    (21) constant_declaration -> STRING EQUALS static_scalar .

    SEMI            reduce using rule 21 (constant_declaration -> STRING EQUALS static_scalar .)
    COMMA           reduce using rule 21 (constant_declaration -> STRING EQUALS static_scalar .)


state 490

    (47) statement -> UNSET LPAREN unset_variables RPAREN . SEMI

    SEMI            shift and go to state 573


state 491

    (100) unset_variables -> unset_variables COMMA . unset_variable
    (102) unset_variable -> . variable
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NS_SEPARATOR    shift and go to state 129
    NAMESPACE       shift and go to state 128
    DOLLAR          shift and go to state 90
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    VARIABLE        shift and go to state 56

    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    compound_variable              shift and go to state 72
    class_name                     shift and go to state 124
    variable_class_name            shift and go to state 127
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 126
    static_member                  shift and go to state 86
    variable                       shift and go to state 375
    unset_variable                 shift and go to state 574
    namespace_name                 shift and go to state 130

state 492

    (193) function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .

    OBJECT_OPERATOR reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    EQUALS          reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    PLUS_EQUAL      reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    MINUS_EQUAL     reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    MUL_EQUAL       reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    DIV_EQUAL       reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    CONCAT_EQUAL    reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    MOD_EQUAL       reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    AND_EQUAL       reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    OR_EQUAL        reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    XOR_EQUAL       reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    SL_EQUAL        reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    SR_EQUAL        reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    INC             reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    DEC             reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_AND     reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_OR      reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_AND     reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_OR      reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_XOR     reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    AND             reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    OR              reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    XOR             reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    CONCAT          reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    PLUS            reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    MINUS           reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    MUL             reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    DIV             reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    SL              reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    SR              reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    MOD             reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_IDENTICAL    reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_EQUAL        reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_EQUAL    reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER      reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER      reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    INSTANCEOF      reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    QUESTION        reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    SEMI            reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    COMMA           reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    RPAREN          reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    AS              reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    RBRACE          reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    RBRACKET        reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    DOUBLE_ARROW    reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    COLON           reduce using rule 193 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)


state 493

    (299) expr -> ISSET LPAREN isset_variables RPAREN .

    AS              reduce using rule 299 (expr -> ISSET LPAREN isset_variables RPAREN .)
    BOOLEAN_AND     reduce using rule 299 (expr -> ISSET LPAREN isset_variables RPAREN .)
    BOOLEAN_OR      reduce using rule 299 (expr -> ISSET LPAREN isset_variables RPAREN .)
    LOGICAL_AND     reduce using rule 299 (expr -> ISSET LPAREN isset_variables RPAREN .)
    LOGICAL_OR      reduce using rule 299 (expr -> ISSET LPAREN isset_variables RPAREN .)
    LOGICAL_XOR     reduce using rule 299 (expr -> ISSET LPAREN isset_variables RPAREN .)
    AND             reduce using rule 299 (expr -> ISSET LPAREN isset_variables RPAREN .)
    OR              reduce using rule 299 (expr -> ISSET LPAREN isset_variables RPAREN .)
    XOR             reduce using rule 299 (expr -> ISSET LPAREN isset_variables RPAREN .)
    CONCAT          reduce using rule 299 (expr -> ISSET LPAREN isset_variables RPAREN .)
    PLUS            reduce using rule 299 (expr -> ISSET LPAREN isset_variables RPAREN .)
    MINUS           reduce using rule 299 (expr -> ISSET LPAREN isset_variables RPAREN .)
    MUL             reduce using rule 299 (expr -> ISSET LPAREN isset_variables RPAREN .)
    DIV             reduce using rule 299 (expr -> ISSET LPAREN isset_variables RPAREN .)
    SL              reduce using rule 299 (expr -> ISSET LPAREN isset_variables RPAREN .)
    SR              reduce using rule 299 (expr -> ISSET LPAREN isset_variables RPAREN .)
    MOD             reduce using rule 299 (expr -> ISSET LPAREN isset_variables RPAREN .)
    IS_IDENTICAL    reduce using rule 299 (expr -> ISSET LPAREN isset_variables RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 299 (expr -> ISSET LPAREN isset_variables RPAREN .)
    IS_EQUAL        reduce using rule 299 (expr -> ISSET LPAREN isset_variables RPAREN .)
    IS_NOT_EQUAL    reduce using rule 299 (expr -> ISSET LPAREN isset_variables RPAREN .)
    IS_SMALLER      reduce using rule 299 (expr -> ISSET LPAREN isset_variables RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 299 (expr -> ISSET LPAREN isset_variables RPAREN .)
    IS_GREATER      reduce using rule 299 (expr -> ISSET LPAREN isset_variables RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 299 (expr -> ISSET LPAREN isset_variables RPAREN .)
    INSTANCEOF      reduce using rule 299 (expr -> ISSET LPAREN isset_variables RPAREN .)
    QUESTION        reduce using rule 299 (expr -> ISSET LPAREN isset_variables RPAREN .)
    SEMI            reduce using rule 299 (expr -> ISSET LPAREN isset_variables RPAREN .)
    COMMA           reduce using rule 299 (expr -> ISSET LPAREN isset_variables RPAREN .)
    RPAREN          reduce using rule 299 (expr -> ISSET LPAREN isset_variables RPAREN .)
    RBRACE          reduce using rule 299 (expr -> ISSET LPAREN isset_variables RPAREN .)
    RBRACKET        reduce using rule 299 (expr -> ISSET LPAREN isset_variables RPAREN .)
    DOUBLE_ARROW    reduce using rule 299 (expr -> ISSET LPAREN isset_variables RPAREN .)
    COLON           reduce using rule 299 (expr -> ISSET LPAREN isset_variables RPAREN .)


state 494

    (300) isset_variables -> isset_variables COMMA . variable
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NS_SEPARATOR    shift and go to state 129
    NAMESPACE       shift and go to state 128
    DOLLAR          shift and go to state 90
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    VARIABLE        shift and go to state 56

    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    compound_variable              shift and go to state 72
    class_name                     shift and go to state 124
    variable_class_name            shift and go to state 127
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 126
    static_member                  shift and go to state 86
    variable                       shift and go to state 575
    namespace_name                 shift and go to state 130

state 495

    (210) compound_variable -> DOLLAR LBRACE expr RBRACE .

    LBRACKET        reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    LBRACE          reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    DOUBLE_COLON    reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    OBJECT_OPERATOR reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    EQUALS          reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    PLUS_EQUAL      reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    MINUS_EQUAL     reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    MUL_EQUAL       reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    DIV_EQUAL       reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    CONCAT_EQUAL    reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    MOD_EQUAL       reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    AND_EQUAL       reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    OR_EQUAL        reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    XOR_EQUAL       reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    SL_EQUAL        reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    SR_EQUAL        reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    INC             reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    DEC             reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    BOOLEAN_AND     reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    BOOLEAN_OR      reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    LOGICAL_AND     reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    LOGICAL_OR      reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    LOGICAL_XOR     reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    AND             reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    OR              reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    XOR             reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    CONCAT          reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    PLUS            reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    MINUS           reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    MUL             reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    DIV             reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    SL              reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    SR              reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    MOD             reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    IS_IDENTICAL    reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    IS_NOT_IDENTICAL reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    IS_EQUAL        reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    IS_NOT_EQUAL    reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    IS_SMALLER      reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    IS_SMALLER_OR_EQUAL reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    IS_GREATER      reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    IS_GREATER_OR_EQUAL reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    INSTANCEOF      reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    QUESTION        reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    SEMI            reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    COMMA           reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    RPAREN          reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    AS              reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    RBRACE          reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    RBRACKET        reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    DOUBLE_ARROW    reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    COLON           reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    LPAREN          reduce using rule 210 (compound_variable -> DOLLAR LBRACE expr RBRACE .)


state 496

    (160) expr -> variable EQUALS AND expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 160 (expr -> variable EQUALS AND expr .)
    BOOLEAN_AND     reduce using rule 160 (expr -> variable EQUALS AND expr .)
    BOOLEAN_OR      reduce using rule 160 (expr -> variable EQUALS AND expr .)
    LOGICAL_AND     reduce using rule 160 (expr -> variable EQUALS AND expr .)
    LOGICAL_OR      reduce using rule 160 (expr -> variable EQUALS AND expr .)
    LOGICAL_XOR     reduce using rule 160 (expr -> variable EQUALS AND expr .)
    AND             reduce using rule 160 (expr -> variable EQUALS AND expr .)
    OR              reduce using rule 160 (expr -> variable EQUALS AND expr .)
    XOR             reduce using rule 160 (expr -> variable EQUALS AND expr .)
    QUESTION        reduce using rule 160 (expr -> variable EQUALS AND expr .)
    SEMI            reduce using rule 160 (expr -> variable EQUALS AND expr .)
    COMMA           reduce using rule 160 (expr -> variable EQUALS AND expr .)
    RPAREN          reduce using rule 160 (expr -> variable EQUALS AND expr .)
    RBRACE          reduce using rule 160 (expr -> variable EQUALS AND expr .)
    RBRACKET        reduce using rule 160 (expr -> variable EQUALS AND expr .)
    DOUBLE_ARROW    reduce using rule 160 (expr -> variable EQUALS AND expr .)
    COLON           reduce using rule 160 (expr -> variable EQUALS AND expr .)
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204

  ! CONCAT          [ reduce using rule 160 (expr -> variable EQUALS AND expr .) ]
  ! PLUS            [ reduce using rule 160 (expr -> variable EQUALS AND expr .) ]
  ! MINUS           [ reduce using rule 160 (expr -> variable EQUALS AND expr .) ]
  ! MUL             [ reduce using rule 160 (expr -> variable EQUALS AND expr .) ]
  ! DIV             [ reduce using rule 160 (expr -> variable EQUALS AND expr .) ]
  ! SL              [ reduce using rule 160 (expr -> variable EQUALS AND expr .) ]
  ! SR              [ reduce using rule 160 (expr -> variable EQUALS AND expr .) ]
  ! MOD             [ reduce using rule 160 (expr -> variable EQUALS AND expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 160 (expr -> variable EQUALS AND expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 160 (expr -> variable EQUALS AND expr .) ]
  ! IS_EQUAL        [ reduce using rule 160 (expr -> variable EQUALS AND expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 160 (expr -> variable EQUALS AND expr .) ]
  ! IS_SMALLER      [ reduce using rule 160 (expr -> variable EQUALS AND expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 160 (expr -> variable EQUALS AND expr .) ]
  ! IS_GREATER      [ reduce using rule 160 (expr -> variable EQUALS AND expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 160 (expr -> variable EQUALS AND expr .) ]
  ! INSTANCEOF      [ reduce using rule 160 (expr -> variable EQUALS AND expr .) ]
  ! BOOLEAN_AND     [ shift and go to state 196 ]
  ! BOOLEAN_OR      [ shift and go to state 194 ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]
  ! AND             [ shift and go to state 191 ]
  ! OR              [ shift and go to state 205 ]
  ! XOR             [ shift and go to state 193 ]
  ! QUESTION        [ shift and go to state 188 ]


state 497

    (29) statement -> IF LPAREN expr RPAREN . statement elseif_list else_single
    (30) statement -> IF LPAREN expr RPAREN . COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (28) statement -> . LBRACE inner_statement_list RBRACE
    (29) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (30) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (31) statement -> . WHILE LPAREN expr RPAREN while_statement
    (32) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (33) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (34) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (35) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (36) statement -> . BREAK SEMI
    (37) statement -> . BREAK expr SEMI
    (38) statement -> . CONTINUE SEMI
    (39) statement -> . CONTINUE expr SEMI
    (40) statement -> . RETURN SEMI
    (41) statement -> . RETURN expr SEMI
    (42) statement -> . GLOBAL global_var_list SEMI
    (43) statement -> . STATIC static_var_list SEMI
    (44) statement -> . ECHO echo_expr_list SEMI
    (45) statement -> . INLINE_HTML
    (46) statement -> . expr SEMI
    (47) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (48) statement -> . SEMI
    (49) statement -> . TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches
    (52) statement -> . THROW expr SEMI
    (53) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    COLON           shift and go to state 576
    LBRACE          shift and go to state 47
    IF              shift and go to state 93
    WHILE           shift and go to state 57
    DO              shift and go to state 76
    FOR             shift and go to state 36
    FOREACH         shift and go to state 13
    SWITCH          shift and go to state 61
    BREAK           shift and go to state 74
    CONTINUE        shift and go to state 48
    RETURN          shift and go to state 23
    GLOBAL          shift and go to state 55
    STATIC          shift and go to state 29
    ECHO            shift and go to state 42
    INLINE_HTML     shift and go to state 88
    UNSET           shift and go to state 83
    SEMI            shift and go to state 85
    TRY             shift and go to state 43
    THROW           shift and go to state 96
    DECLARE         shift and go to state 16
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    class_constant                 shift and go to state 24
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    statement                      shift and go to state 577
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 71

state 498

    (188) function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list . RPAREN
    (235) function_call_parameter_list -> function_call_parameter_list . COMMA function_call_parameter

    RPAREN          shift and go to state 578
    COMMA           shift and go to state 477


state 499

    (10) top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .

    RBRACE          reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    HALT_COMPILER   reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    NAMESPACE       reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    CONST           reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    USE             reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    LBRACE          reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    IF              reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    WHILE           reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    DO              reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    FOR             reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    FOREACH         reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    SWITCH          reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    BREAK           reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    CONTINUE        reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    RETURN          reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    GLOBAL          reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    STATIC          reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    ECHO            reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    INLINE_HTML     reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    UNSET           reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    SEMI            reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    TRY             reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    THROW           reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    DECLARE         reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    FUNCTION        reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    INTERFACE       reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    NEW             reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    CLONE           reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    LIST            reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    ARRAY           reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    PLUS            reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    MINUS           reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    NOT             reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    BOOLEAN_NOT     reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    INC             reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    DEC             reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    INT_CAST        reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    DOUBLE_CAST     reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    STRING_CAST     reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    ARRAY_CAST      reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    OBJECT_CAST     reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    BOOL_CAST       reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    UNSET_CAST      reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    ISSET           reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    EMPTY           reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    EVAL            reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    INCLUDE         reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    INCLUDE_ONCE    reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    REQUIRE         reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    REQUIRE_ONCE    reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    EXIT            reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    PRINT           reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    AT              reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    LPAREN          reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    CLASS           reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    ABSTRACT        reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    FINAL           reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    QUOTE           reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    START_HEREDOC   reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    STRING_VARNAME  reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    NS_SEPARATOR    reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    LNUMBER         reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    DNUMBER         reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    CONSTANT_ENCAPSED_STRING reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    LINE            reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    FILE            reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    DIR             reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    CLASS_C         reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    METHOD_C        reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    FUNC_C          reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    NS_C            reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    STRING          reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    DOLLAR          reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    VARIABLE        reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    $end            reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)


state 500

    (75) foreach_variable -> AND . VARIABLE

    VARIABLE        shift and go to state 579


state 501

    (34) statement -> FOREACH LPAREN expr AS foreach_variable . foreach_optional_arg RPAREN foreach_statement
    (76) foreach_optional_arg -> . empty
    (77) foreach_optional_arg -> . DOUBLE_ARROW foreach_variable
    (363) empty -> .

    DOUBLE_ARROW    shift and go to state 580
    RPAREN          reduce using rule 363 (empty -> .)

    foreach_optional_arg           shift and go to state 581
    empty                          shift and go to state 582

state 502

    (74) foreach_variable -> VARIABLE .

    DOUBLE_ARROW    reduce using rule 74 (foreach_variable -> VARIABLE .)
    RPAREN          reduce using rule 74 (foreach_variable -> VARIABLE .)


state 503

    (54) declare_list -> STRING EQUALS static_scalar .

    RPAREN          reduce using rule 54 (declare_list -> STRING EQUALS static_scalar .)
    COMMA           reduce using rule 54 (declare_list -> STRING EQUALS static_scalar .)


state 504

    (53) statement -> DECLARE LPAREN declare_list RPAREN declare_statement .

    HALT_COMPILER   reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    NAMESPACE       reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    CONST           reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    USE             reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    LBRACE          reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    IF              reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    WHILE           reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    DO              reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    FOR             reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    FOREACH         reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    SWITCH          reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    BREAK           reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    CONTINUE        reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    RETURN          reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    GLOBAL          reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    STATIC          reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    ECHO            reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    INLINE_HTML     reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    UNSET           reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    SEMI            reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    TRY             reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    THROW           reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    DECLARE         reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    FUNCTION        reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    INTERFACE       reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    NEW             reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    CLONE           reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    LIST            reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    ARRAY           reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    PLUS            reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    MINUS           reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    NOT             reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    BOOLEAN_NOT     reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    INC             reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    DEC             reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    INT_CAST        reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    DOUBLE_CAST     reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    STRING_CAST     reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    ARRAY_CAST      reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    OBJECT_CAST     reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    BOOL_CAST       reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    UNSET_CAST      reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    ISSET           reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    EMPTY           reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    EVAL            reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    INCLUDE         reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    INCLUDE_ONCE    reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    REQUIRE         reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    REQUIRE_ONCE    reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    EXIT            reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    PRINT           reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    AT              reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    LPAREN          reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    CLASS           reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    ABSTRACT        reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    FINAL           reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    QUOTE           reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    START_HEREDOC   reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    STRING_VARNAME  reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    NS_SEPARATOR    reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    LNUMBER         reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    DNUMBER         reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    LINE            reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    FILE            reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    DIR             reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    CLASS_C         reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    METHOD_C        reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    FUNC_C          reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    NS_C            reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    STRING          reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    DOLLAR          reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    VARIABLE        reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    $end            reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    RBRACE          reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    ELSEIF          reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    ELSE            reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    ENDDECLARE      reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    ENDWHILE        reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    ENDIF           reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    ENDFOREACH      reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    CASE            reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    DEFAULT         reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    ENDSWITCH       reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    ENDFOR          reduce using rule 53 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)


state 505

    (57) declare_statement -> COLON . inner_statement_list ENDDECLARE SEMI
    (22) inner_statement_list -> . inner_statement_list inner_statement
    (23) inner_statement_list -> . empty
    (363) empty -> .

    ENDDECLARE      reduce using rule 363 (empty -> .)
    HALT_COMPILER   reduce using rule 363 (empty -> .)
    LBRACE          reduce using rule 363 (empty -> .)
    IF              reduce using rule 363 (empty -> .)
    WHILE           reduce using rule 363 (empty -> .)
    DO              reduce using rule 363 (empty -> .)
    FOR             reduce using rule 363 (empty -> .)
    FOREACH         reduce using rule 363 (empty -> .)
    SWITCH          reduce using rule 363 (empty -> .)
    BREAK           reduce using rule 363 (empty -> .)
    CONTINUE        reduce using rule 363 (empty -> .)
    RETURN          reduce using rule 363 (empty -> .)
    GLOBAL          reduce using rule 363 (empty -> .)
    STATIC          reduce using rule 363 (empty -> .)
    ECHO            reduce using rule 363 (empty -> .)
    INLINE_HTML     reduce using rule 363 (empty -> .)
    UNSET           reduce using rule 363 (empty -> .)
    SEMI            reduce using rule 363 (empty -> .)
    TRY             reduce using rule 363 (empty -> .)
    THROW           reduce using rule 363 (empty -> .)
    DECLARE         reduce using rule 363 (empty -> .)
    FUNCTION        reduce using rule 363 (empty -> .)
    INTERFACE       reduce using rule 363 (empty -> .)
    NEW             reduce using rule 363 (empty -> .)
    CLONE           reduce using rule 363 (empty -> .)
    LIST            reduce using rule 363 (empty -> .)
    ARRAY           reduce using rule 363 (empty -> .)
    PLUS            reduce using rule 363 (empty -> .)
    MINUS           reduce using rule 363 (empty -> .)
    NOT             reduce using rule 363 (empty -> .)
    BOOLEAN_NOT     reduce using rule 363 (empty -> .)
    INC             reduce using rule 363 (empty -> .)
    DEC             reduce using rule 363 (empty -> .)
    INT_CAST        reduce using rule 363 (empty -> .)
    DOUBLE_CAST     reduce using rule 363 (empty -> .)
    STRING_CAST     reduce using rule 363 (empty -> .)
    ARRAY_CAST      reduce using rule 363 (empty -> .)
    OBJECT_CAST     reduce using rule 363 (empty -> .)
    BOOL_CAST       reduce using rule 363 (empty -> .)
    UNSET_CAST      reduce using rule 363 (empty -> .)
    ISSET           reduce using rule 363 (empty -> .)
    EMPTY           reduce using rule 363 (empty -> .)
    EVAL            reduce using rule 363 (empty -> .)
    INCLUDE         reduce using rule 363 (empty -> .)
    INCLUDE_ONCE    reduce using rule 363 (empty -> .)
    REQUIRE         reduce using rule 363 (empty -> .)
    REQUIRE_ONCE    reduce using rule 363 (empty -> .)
    EXIT            reduce using rule 363 (empty -> .)
    PRINT           reduce using rule 363 (empty -> .)
    AT              reduce using rule 363 (empty -> .)
    LPAREN          reduce using rule 363 (empty -> .)
    CLASS           reduce using rule 363 (empty -> .)
    ABSTRACT        reduce using rule 363 (empty -> .)
    FINAL           reduce using rule 363 (empty -> .)
    QUOTE           reduce using rule 363 (empty -> .)
    START_HEREDOC   reduce using rule 363 (empty -> .)
    STRING_VARNAME  reduce using rule 363 (empty -> .)
    NS_SEPARATOR    reduce using rule 363 (empty -> .)
    NAMESPACE       reduce using rule 363 (empty -> .)
    LNUMBER         reduce using rule 363 (empty -> .)
    DNUMBER         reduce using rule 363 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 363 (empty -> .)
    LINE            reduce using rule 363 (empty -> .)
    FILE            reduce using rule 363 (empty -> .)
    DIR             reduce using rule 363 (empty -> .)
    CLASS_C         reduce using rule 363 (empty -> .)
    METHOD_C        reduce using rule 363 (empty -> .)
    FUNC_C          reduce using rule 363 (empty -> .)
    NS_C            reduce using rule 363 (empty -> .)
    STRING          reduce using rule 363 (empty -> .)
    DOLLAR          reduce using rule 363 (empty -> .)
    VARIABLE        reduce using rule 363 (empty -> .)

    inner_statement_list           shift and go to state 583
    empty                          shift and go to state 148

state 506

    (56) declare_statement -> statement .

    HALT_COMPILER   reduce using rule 56 (declare_statement -> statement .)
    NAMESPACE       reduce using rule 56 (declare_statement -> statement .)
    CONST           reduce using rule 56 (declare_statement -> statement .)
    USE             reduce using rule 56 (declare_statement -> statement .)
    LBRACE          reduce using rule 56 (declare_statement -> statement .)
    IF              reduce using rule 56 (declare_statement -> statement .)
    WHILE           reduce using rule 56 (declare_statement -> statement .)
    DO              reduce using rule 56 (declare_statement -> statement .)
    FOR             reduce using rule 56 (declare_statement -> statement .)
    FOREACH         reduce using rule 56 (declare_statement -> statement .)
    SWITCH          reduce using rule 56 (declare_statement -> statement .)
    BREAK           reduce using rule 56 (declare_statement -> statement .)
    CONTINUE        reduce using rule 56 (declare_statement -> statement .)
    RETURN          reduce using rule 56 (declare_statement -> statement .)
    GLOBAL          reduce using rule 56 (declare_statement -> statement .)
    STATIC          reduce using rule 56 (declare_statement -> statement .)
    ECHO            reduce using rule 56 (declare_statement -> statement .)
    INLINE_HTML     reduce using rule 56 (declare_statement -> statement .)
    UNSET           reduce using rule 56 (declare_statement -> statement .)
    SEMI            reduce using rule 56 (declare_statement -> statement .)
    TRY             reduce using rule 56 (declare_statement -> statement .)
    THROW           reduce using rule 56 (declare_statement -> statement .)
    DECLARE         reduce using rule 56 (declare_statement -> statement .)
    FUNCTION        reduce using rule 56 (declare_statement -> statement .)
    INTERFACE       reduce using rule 56 (declare_statement -> statement .)
    NEW             reduce using rule 56 (declare_statement -> statement .)
    CLONE           reduce using rule 56 (declare_statement -> statement .)
    LIST            reduce using rule 56 (declare_statement -> statement .)
    ARRAY           reduce using rule 56 (declare_statement -> statement .)
    PLUS            reduce using rule 56 (declare_statement -> statement .)
    MINUS           reduce using rule 56 (declare_statement -> statement .)
    NOT             reduce using rule 56 (declare_statement -> statement .)
    BOOLEAN_NOT     reduce using rule 56 (declare_statement -> statement .)
    INC             reduce using rule 56 (declare_statement -> statement .)
    DEC             reduce using rule 56 (declare_statement -> statement .)
    INT_CAST        reduce using rule 56 (declare_statement -> statement .)
    DOUBLE_CAST     reduce using rule 56 (declare_statement -> statement .)
    STRING_CAST     reduce using rule 56 (declare_statement -> statement .)
    ARRAY_CAST      reduce using rule 56 (declare_statement -> statement .)
    OBJECT_CAST     reduce using rule 56 (declare_statement -> statement .)
    BOOL_CAST       reduce using rule 56 (declare_statement -> statement .)
    UNSET_CAST      reduce using rule 56 (declare_statement -> statement .)
    ISSET           reduce using rule 56 (declare_statement -> statement .)
    EMPTY           reduce using rule 56 (declare_statement -> statement .)
    EVAL            reduce using rule 56 (declare_statement -> statement .)
    INCLUDE         reduce using rule 56 (declare_statement -> statement .)
    INCLUDE_ONCE    reduce using rule 56 (declare_statement -> statement .)
    REQUIRE         reduce using rule 56 (declare_statement -> statement .)
    REQUIRE_ONCE    reduce using rule 56 (declare_statement -> statement .)
    EXIT            reduce using rule 56 (declare_statement -> statement .)
    PRINT           reduce using rule 56 (declare_statement -> statement .)
    AT              reduce using rule 56 (declare_statement -> statement .)
    LPAREN          reduce using rule 56 (declare_statement -> statement .)
    CLASS           reduce using rule 56 (declare_statement -> statement .)
    ABSTRACT        reduce using rule 56 (declare_statement -> statement .)
    FINAL           reduce using rule 56 (declare_statement -> statement .)
    QUOTE           reduce using rule 56 (declare_statement -> statement .)
    START_HEREDOC   reduce using rule 56 (declare_statement -> statement .)
    STRING_VARNAME  reduce using rule 56 (declare_statement -> statement .)
    NS_SEPARATOR    reduce using rule 56 (declare_statement -> statement .)
    LNUMBER         reduce using rule 56 (declare_statement -> statement .)
    DNUMBER         reduce using rule 56 (declare_statement -> statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 56 (declare_statement -> statement .)
    LINE            reduce using rule 56 (declare_statement -> statement .)
    FILE            reduce using rule 56 (declare_statement -> statement .)
    DIR             reduce using rule 56 (declare_statement -> statement .)
    CLASS_C         reduce using rule 56 (declare_statement -> statement .)
    METHOD_C        reduce using rule 56 (declare_statement -> statement .)
    FUNC_C          reduce using rule 56 (declare_statement -> statement .)
    NS_C            reduce using rule 56 (declare_statement -> statement .)
    STRING          reduce using rule 56 (declare_statement -> statement .)
    DOLLAR          reduce using rule 56 (declare_statement -> statement .)
    VARIABLE        reduce using rule 56 (declare_statement -> statement .)
    $end            reduce using rule 56 (declare_statement -> statement .)
    RBRACE          reduce using rule 56 (declare_statement -> statement .)
    ELSEIF          reduce using rule 56 (declare_statement -> statement .)
    ELSE            reduce using rule 56 (declare_statement -> statement .)
    ENDDECLARE      reduce using rule 56 (declare_statement -> statement .)
    ENDWHILE        reduce using rule 56 (declare_statement -> statement .)
    ENDIF           reduce using rule 56 (declare_statement -> statement .)
    ENDFOREACH      reduce using rule 56 (declare_statement -> statement .)
    CASE            reduce using rule 56 (declare_statement -> statement .)
    DEFAULT         reduce using rule 56 (declare_statement -> statement .)
    ENDSWITCH       reduce using rule 56 (declare_statement -> statement .)
    ENDFOR          reduce using rule 56 (declare_statement -> statement .)


state 507

    (55) declare_list -> declare_list COMMA STRING . EQUALS static_scalar

    EQUALS          shift and go to state 584


state 508

    (105) class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list . RBRACE
    (116) class_statement_list -> class_statement_list . class_statement
    (118) class_statement -> . method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body
    (119) class_statement -> . variable_modifiers class_variable_declaration SEMI
    (120) class_statement -> . class_constant_declaration SEMI
    (133) method_modifiers -> . non_empty_member_modifiers
    (134) method_modifiers -> . empty
    (131) variable_modifiers -> . non_empty_member_modifiers
    (132) variable_modifiers -> . VAR
    (125) class_constant_declaration -> . class_constant_declaration COMMA STRING EQUALS static_scalar
    (126) class_constant_declaration -> . CONST STRING EQUALS static_scalar
    (137) non_empty_member_modifiers -> . non_empty_member_modifiers member_modifier
    (138) non_empty_member_modifiers -> . member_modifier
    (363) empty -> .
    (139) member_modifier -> . PUBLIC
    (140) member_modifier -> . PROTECTED
    (141) member_modifier -> . PRIVATE
    (142) member_modifier -> . STATIC
    (143) member_modifier -> . ABSTRACT
    (144) member_modifier -> . FINAL

    RBRACE          shift and go to state 591
    VAR             shift and go to state 595
    CONST           shift and go to state 585
    FUNCTION        reduce using rule 363 (empty -> .)
    PUBLIC          shift and go to state 599
    PROTECTED       shift and go to state 588
    PRIVATE         shift and go to state 592
    STATIC          shift and go to state 589
    ABSTRACT        shift and go to state 586
    FINAL           shift and go to state 590

    variable_modifiers             shift and go to state 596
    class_constant_declaration     shift and go to state 598
    class_statement                shift and go to state 587
    method_modifiers               shift and go to state 597
    non_empty_member_modifiers     shift and go to state 593
    empty                          shift and go to state 594
    member_modifier                shift and go to state 600

state 509

    (117) class_statement_list -> empty .

    RBRACE          reduce using rule 117 (class_statement_list -> empty .)
    VAR             reduce using rule 117 (class_statement_list -> empty .)
    CONST           reduce using rule 117 (class_statement_list -> empty .)
    PUBLIC          reduce using rule 117 (class_statement_list -> empty .)
    PROTECTED       reduce using rule 117 (class_statement_list -> empty .)
    PRIVATE         reduce using rule 117 (class_statement_list -> empty .)
    STATIC          reduce using rule 117 (class_statement_list -> empty .)
    ABSTRACT        reduce using rule 117 (class_statement_list -> empty .)
    FINAL           reduce using rule 117 (class_statement_list -> empty .)
    FUNCTION        reduce using rule 117 (class_statement_list -> empty .)


state 510

    (113) fully_qualified_class_name -> NAMESPACE NS_SEPARATOR . namespace_name
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    STRING          shift and go to state 89

    namespace_name                 shift and go to state 601

state 511

    (112) fully_qualified_class_name -> NS_SEPARATOR namespace_name .
    (349) namespace_name -> namespace_name . NS_SEPARATOR STRING

    COMMA           reduce using rule 112 (fully_qualified_class_name -> NS_SEPARATOR namespace_name .)
    LBRACE          reduce using rule 112 (fully_qualified_class_name -> NS_SEPARATOR namespace_name .)
    VARIABLE        reduce using rule 112 (fully_qualified_class_name -> NS_SEPARATOR namespace_name .)
    IMPLEMENTS      reduce using rule 112 (fully_qualified_class_name -> NS_SEPARATOR namespace_name .)
    NS_SEPARATOR    shift and go to state 178


state 512

    (127) interface_list -> interface_list COMMA . fully_qualified_class_name
    (111) fully_qualified_class_name -> . namespace_name
    (112) fully_qualified_class_name -> . NS_SEPARATOR namespace_name
    (113) fully_qualified_class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    NS_SEPARATOR    shift and go to state 409
    NAMESPACE       shift and go to state 408
    STRING          shift and go to state 89

    fully_qualified_class_name     shift and go to state 602
    namespace_name                 shift and go to state 411

state 513

    (341) static_scalar -> MINUS static_scalar .

    SEMI            reduce using rule 341 (static_scalar -> MINUS static_scalar .)
    COMMA           reduce using rule 341 (static_scalar -> MINUS static_scalar .)
    RPAREN          reduce using rule 341 (static_scalar -> MINUS static_scalar .)
    DOUBLE_ARROW    reduce using rule 341 (static_scalar -> MINUS static_scalar .)


state 514

    (335) static_scalar -> QUOTE QUOTE .

    SEMI            reduce using rule 335 (static_scalar -> QUOTE QUOTE .)
    COMMA           reduce using rule 335 (static_scalar -> QUOTE QUOTE .)
    RPAREN          reduce using rule 335 (static_scalar -> QUOTE QUOTE .)
    DOUBLE_ARROW    reduce using rule 335 (static_scalar -> QUOTE QUOTE .)


state 515

    (336) static_scalar -> QUOTE ENCAPSED_AND_WHITESPACE . QUOTE

    QUOTE           shift and go to state 603


state 516

    (340) static_scalar -> PLUS static_scalar .

    SEMI            reduce using rule 340 (static_scalar -> PLUS static_scalar .)
    COMMA           reduce using rule 340 (static_scalar -> PLUS static_scalar .)
    RPAREN          reduce using rule 340 (static_scalar -> PLUS static_scalar .)
    DOUBLE_ARROW    reduce using rule 340 (static_scalar -> PLUS static_scalar .)


state 517

    (342) static_scalar -> ARRAY LPAREN . static_array_pair_list RPAREN
    (343) static_array_pair_list -> . empty
    (344) static_array_pair_list -> . static_non_empty_array_pair_list possible_comma
    (363) empty -> .
    (345) static_non_empty_array_pair_list -> . static_non_empty_array_pair_list COMMA static_scalar
    (346) static_non_empty_array_pair_list -> . static_scalar
    (347) static_non_empty_array_pair_list -> . static_non_empty_array_pair_list COMMA static_scalar DOUBLE_ARROW static_scalar
    (348) static_non_empty_array_pair_list -> . static_scalar DOUBLE_ARROW static_scalar
    (334) static_scalar -> . common_scalar
    (335) static_scalar -> . QUOTE QUOTE
    (336) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (337) static_scalar -> . namespace_name
    (338) static_scalar -> . NS_SEPARATOR namespace_name
    (339) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (340) static_scalar -> . PLUS static_scalar
    (341) static_scalar -> . MINUS static_scalar
    (342) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    RPAREN          reduce using rule 363 (empty -> .)
    QUOTE           shift and go to state 417
    NS_SEPARATOR    shift and go to state 421
    NAMESPACE       shift and go to state 420
    PLUS            shift and go to state 418
    MINUS           shift and go to state 415
    ARRAY           shift and go to state 419
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89

    static_non_empty_array_pair_list shift and go to state 606
    static_scalar                  shift and go to state 604
    static_array_pair_list         shift and go to state 607
    common_scalar                  shift and go to state 414
    empty                          shift and go to state 605
    namespace_name                 shift and go to state 422

state 518

    (339) static_scalar -> NAMESPACE NS_SEPARATOR . namespace_name
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    STRING          shift and go to state 89

    namespace_name                 shift and go to state 608

state 519

    (338) static_scalar -> NS_SEPARATOR namespace_name .
    (349) namespace_name -> namespace_name . NS_SEPARATOR STRING

    SEMI            reduce using rule 338 (static_scalar -> NS_SEPARATOR namespace_name .)
    COMMA           reduce using rule 338 (static_scalar -> NS_SEPARATOR namespace_name .)
    RPAREN          reduce using rule 338 (static_scalar -> NS_SEPARATOR namespace_name .)
    DOUBLE_ARROW    reduce using rule 338 (static_scalar -> NS_SEPARATOR namespace_name .)
    NS_SEPARATOR    shift and go to state 178


state 520

    (70) non_empty_for_expr -> non_empty_for_expr COMMA expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    COMMA           reduce using rule 70 (non_empty_for_expr -> non_empty_for_expr COMMA expr .)
    RPAREN          reduce using rule 70 (non_empty_for_expr -> non_empty_for_expr COMMA expr .)
    SEMI            reduce using rule 70 (non_empty_for_expr -> non_empty_for_expr COMMA expr .)
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    LOGICAL_AND     shift and go to state 181
    LOGICAL_OR      shift and go to state 202
    LOGICAL_XOR     shift and go to state 200
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188


state 521

    (33) statement -> FOR LPAREN for_expr SEMI for_expr . SEMI for_expr RPAREN for_statement

    SEMI            shift and go to state 609


state 522

    (219) variable_name -> LBRACE expr RBRACE .

    LBRACKET        reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    LBRACE          reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    OBJECT_OPERATOR reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    LPAREN          reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    SEMI            reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    BOOLEAN_AND     reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    BOOLEAN_OR      reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    LOGICAL_AND     reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    LOGICAL_OR      reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    LOGICAL_XOR     reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    AND             reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    OR              reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    XOR             reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    CONCAT          reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    PLUS            reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    MINUS           reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    MUL             reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    DIV             reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    SL              reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    SR              reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    MOD             reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    IS_IDENTICAL    reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    IS_NOT_IDENTICAL reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    IS_EQUAL        reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    IS_NOT_EQUAL    reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    IS_SMALLER      reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    IS_SMALLER_OR_EQUAL reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    IS_GREATER      reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    IS_GREATER_OR_EQUAL reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    INSTANCEOF      reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    QUESTION        reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    COMMA           reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    RPAREN          reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    AS              reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    RBRACE          reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    RBRACKET        reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    DOUBLE_ARROW    reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    COLON           reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    EQUALS          reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    PLUS_EQUAL      reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    MINUS_EQUAL     reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    MUL_EQUAL       reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    DIV_EQUAL       reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    CONCAT_EQUAL    reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    MOD_EQUAL       reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    AND_EQUAL       reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    OR_EQUAL        reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    XOR_EQUAL       reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    SL_EQUAL        reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    SR_EQUAL        reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    INC             reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)
    DEC             reduce using rule 219 (variable_name -> LBRACE expr RBRACE .)


state 523

    (194) method_or_not -> LPAREN function_call_parameter_list . RPAREN
    (235) function_call_parameter_list -> function_call_parameter_list . COMMA function_call_parameter

    RPAREN          shift and go to state 610
    COMMA           shift and go to state 477


state 524

    (197) variable_properties -> empty .

    OBJECT_OPERATOR reduce using rule 197 (variable_properties -> empty .)
    EQUALS          reduce using rule 197 (variable_properties -> empty .)
    PLUS_EQUAL      reduce using rule 197 (variable_properties -> empty .)
    MINUS_EQUAL     reduce using rule 197 (variable_properties -> empty .)
    MUL_EQUAL       reduce using rule 197 (variable_properties -> empty .)
    DIV_EQUAL       reduce using rule 197 (variable_properties -> empty .)
    CONCAT_EQUAL    reduce using rule 197 (variable_properties -> empty .)
    MOD_EQUAL       reduce using rule 197 (variable_properties -> empty .)
    AND_EQUAL       reduce using rule 197 (variable_properties -> empty .)
    OR_EQUAL        reduce using rule 197 (variable_properties -> empty .)
    XOR_EQUAL       reduce using rule 197 (variable_properties -> empty .)
    SL_EQUAL        reduce using rule 197 (variable_properties -> empty .)
    SR_EQUAL        reduce using rule 197 (variable_properties -> empty .)
    INC             reduce using rule 197 (variable_properties -> empty .)
    DEC             reduce using rule 197 (variable_properties -> empty .)
    SEMI            reduce using rule 197 (variable_properties -> empty .)
    BOOLEAN_AND     reduce using rule 197 (variable_properties -> empty .)
    BOOLEAN_OR      reduce using rule 197 (variable_properties -> empty .)
    LOGICAL_AND     reduce using rule 197 (variable_properties -> empty .)
    LOGICAL_OR      reduce using rule 197 (variable_properties -> empty .)
    LOGICAL_XOR     reduce using rule 197 (variable_properties -> empty .)
    AND             reduce using rule 197 (variable_properties -> empty .)
    OR              reduce using rule 197 (variable_properties -> empty .)
    XOR             reduce using rule 197 (variable_properties -> empty .)
    CONCAT          reduce using rule 197 (variable_properties -> empty .)
    PLUS            reduce using rule 197 (variable_properties -> empty .)
    MINUS           reduce using rule 197 (variable_properties -> empty .)
    MUL             reduce using rule 197 (variable_properties -> empty .)
    DIV             reduce using rule 197 (variable_properties -> empty .)
    SL              reduce using rule 197 (variable_properties -> empty .)
    SR              reduce using rule 197 (variable_properties -> empty .)
    MOD             reduce using rule 197 (variable_properties -> empty .)
    IS_IDENTICAL    reduce using rule 197 (variable_properties -> empty .)
    IS_NOT_IDENTICAL reduce using rule 197 (variable_properties -> empty .)
    IS_EQUAL        reduce using rule 197 (variable_properties -> empty .)
    IS_NOT_EQUAL    reduce using rule 197 (variable_properties -> empty .)
    IS_SMALLER      reduce using rule 197 (variable_properties -> empty .)
    IS_SMALLER_OR_EQUAL reduce using rule 197 (variable_properties -> empty .)
    IS_GREATER      reduce using rule 197 (variable_properties -> empty .)
    IS_GREATER_OR_EQUAL reduce using rule 197 (variable_properties -> empty .)
    INSTANCEOF      reduce using rule 197 (variable_properties -> empty .)
    QUESTION        reduce using rule 197 (variable_properties -> empty .)
    COMMA           reduce using rule 197 (variable_properties -> empty .)
    RPAREN          reduce using rule 197 (variable_properties -> empty .)
    AS              reduce using rule 197 (variable_properties -> empty .)
    RBRACE          reduce using rule 197 (variable_properties -> empty .)
    RBRACKET        reduce using rule 197 (variable_properties -> empty .)
    DOUBLE_ARROW    reduce using rule 197 (variable_properties -> empty .)
    COLON           reduce using rule 197 (variable_properties -> empty .)


state 525

    (182) variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .
    (196) variable_properties -> variable_properties . variable_property
    (198) variable_property -> . OBJECT_OPERATOR object_property method_or_not

    EQUALS          reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    PLUS_EQUAL      reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    MINUS_EQUAL     reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    MUL_EQUAL       reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    DIV_EQUAL       reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    CONCAT_EQUAL    reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    MOD_EQUAL       reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    AND_EQUAL       reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    OR_EQUAL        reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    XOR_EQUAL       reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    SL_EQUAL        reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    SR_EQUAL        reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    INC             reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    DEC             reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    AS              reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    BOOLEAN_AND     reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    BOOLEAN_OR      reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    LOGICAL_AND     reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    LOGICAL_OR      reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    LOGICAL_XOR     reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    AND             reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    OR              reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    XOR             reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    CONCAT          reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    PLUS            reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    MINUS           reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    MUL             reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    DIV             reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    SL              reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    SR              reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    MOD             reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    IS_IDENTICAL    reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    IS_NOT_IDENTICAL reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    IS_EQUAL        reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    IS_NOT_EQUAL    reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    IS_SMALLER      reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    IS_SMALLER_OR_EQUAL reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    IS_GREATER      reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    IS_GREATER_OR_EQUAL reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    INSTANCEOF      reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    QUESTION        reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    SEMI            reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    COMMA           reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    RPAREN          reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    RBRACE          reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    RBRACKET        reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    DOUBLE_ARROW    reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    COLON           reduce using rule 182 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    OBJECT_OPERATOR shift and go to state 611

    variable_property              shift and go to state 612

state 526

    (217) object_dim_list -> object_dim_list LBRACE . expr RBRACE
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 613

state 527

    (216) object_dim_list -> object_dim_list LBRACKET . dim_offset RBRACKET
    (211) dim_offset -> . expr
    (212) dim_offset -> . empty
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (363) empty -> .
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    RBRACKET        reduce using rule 363 (empty -> .)
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    empty                          shift and go to state 319
    dim_offset                     shift and go to state 614
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 318

state 528

    (103) function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list . RPAREN LBRACE inner_statement_list RBRACE
    (147) parameter_list -> parameter_list . COMMA parameter

    RPAREN          shift and go to state 615
    COMMA           shift and go to state 534


state 529

    (151) parameter -> class_name VARIABLE .
    (155) parameter -> class_name VARIABLE . EQUALS static_scalar

    RPAREN          reduce using rule 151 (parameter -> class_name VARIABLE .)
    COMMA           reduce using rule 151 (parameter -> class_name VARIABLE .)
    EQUALS          shift and go to state 616


state 530

    (153) parameter -> class_name AND . VARIABLE
    (157) parameter -> class_name AND . VARIABLE EQUALS static_scalar

    VARIABLE        shift and go to state 617


state 531

    (154) parameter -> VARIABLE EQUALS . static_scalar
    (334) static_scalar -> . common_scalar
    (335) static_scalar -> . QUOTE QUOTE
    (336) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (337) static_scalar -> . namespace_name
    (338) static_scalar -> . NS_SEPARATOR namespace_name
    (339) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (340) static_scalar -> . PLUS static_scalar
    (341) static_scalar -> . MINUS static_scalar
    (342) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    QUOTE           shift and go to state 417
    NS_SEPARATOR    shift and go to state 421
    NAMESPACE       shift and go to state 420
    PLUS            shift and go to state 418
    MINUS           shift and go to state 415
    ARRAY           shift and go to state 419
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89

    static_scalar                  shift and go to state 618
    common_scalar                  shift and go to state 414
    namespace_name                 shift and go to state 422

state 532

    (152) parameter -> AND VARIABLE .
    (156) parameter -> AND VARIABLE . EQUALS static_scalar

    RPAREN          reduce using rule 152 (parameter -> AND VARIABLE .)
    COMMA           reduce using rule 152 (parameter -> AND VARIABLE .)
    EQUALS          shift and go to state 619


state 533

    (240) expr -> FUNCTION is_reference LPAREN parameter_list RPAREN . lexical_vars LBRACE inner_statement_list RBRACE
    (241) lexical_vars -> . USE LPAREN lexical_var_list RPAREN
    (242) lexical_vars -> . empty
    (363) empty -> .

    USE             shift and go to state 620
    LBRACE          reduce using rule 363 (empty -> .)

    lexical_vars                   shift and go to state 621
    empty                          shift and go to state 622

state 534

    (147) parameter_list -> parameter_list COMMA . parameter
    (150) parameter -> . VARIABLE
    (151) parameter -> . class_name VARIABLE
    (152) parameter -> . AND VARIABLE
    (153) parameter -> . class_name AND VARIABLE
    (154) parameter -> . VARIABLE EQUALS static_scalar
    (155) parameter -> . class_name VARIABLE EQUALS static_scalar
    (156) parameter -> . AND VARIABLE EQUALS static_scalar
    (157) parameter -> . class_name AND VARIABLE EQUALS static_scalar
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    VARIABLE        shift and go to state 439
    AND             shift and go to state 440
    NS_SEPARATOR    shift and go to state 167
    NAMESPACE       shift and go to state 165
    STATIC          shift and go to state 101
    STRING          shift and go to state 89

    class_name                     shift and go to state 436
    parameter                      shift and go to state 623
    namespace_name                 shift and go to state 169

state 535

    (192) function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list . RPAREN
    (235) function_call_parameter_list -> function_call_parameter_list . COMMA function_call_parameter

    RPAREN          shift and go to state 624
    COMMA           shift and go to state 477


state 536

    (191) function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list . RPAREN
    (235) function_call_parameter_list -> function_call_parameter_list . COMMA function_call_parameter

    RPAREN          shift and go to state 625
    COMMA           shift and go to state 477


state 537

    (49) statement -> TRY LBRACE inner_statement_list RBRACE CATCH . LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches

    LPAREN          shift and go to state 626


state 538

    (27) inner_statement -> HALT_COMPILER LPAREN RPAREN . SEMI

    SEMI            shift and go to state 627


state 539

    (359) encaps_var -> CURLY_OPEN variable RBRACE .

    QUOTE           reduce using rule 359 (encaps_var -> CURLY_OPEN variable RBRACE .)
    ENCAPSED_AND_WHITESPACE reduce using rule 359 (encaps_var -> CURLY_OPEN variable RBRACE .)
    VARIABLE        reduce using rule 359 (encaps_var -> CURLY_OPEN variable RBRACE .)
    DOLLAR_OPEN_CURLY_BRACES reduce using rule 359 (encaps_var -> CURLY_OPEN variable RBRACE .)
    CURLY_OPEN      reduce using rule 359 (encaps_var -> CURLY_OPEN variable RBRACE .)
    END_HEREDOC     reduce using rule 359 (encaps_var -> CURLY_OPEN variable RBRACE .)


state 540

    (356) encaps_var -> VARIABLE OBJECT_OPERATOR STRING .

    QUOTE           reduce using rule 356 (encaps_var -> VARIABLE OBJECT_OPERATOR STRING .)
    ENCAPSED_AND_WHITESPACE reduce using rule 356 (encaps_var -> VARIABLE OBJECT_OPERATOR STRING .)
    VARIABLE        reduce using rule 356 (encaps_var -> VARIABLE OBJECT_OPERATOR STRING .)
    DOLLAR_OPEN_CURLY_BRACES reduce using rule 356 (encaps_var -> VARIABLE OBJECT_OPERATOR STRING .)
    CURLY_OPEN      reduce using rule 356 (encaps_var -> VARIABLE OBJECT_OPERATOR STRING .)
    END_HEREDOC     reduce using rule 356 (encaps_var -> VARIABLE OBJECT_OPERATOR STRING .)


state 541

    (360) encaps_var_offset -> STRING .

    RBRACKET        reduce using rule 360 (encaps_var_offset -> STRING .)


state 542

    (361) encaps_var_offset -> NUM_STRING .

    RBRACKET        reduce using rule 361 (encaps_var_offset -> NUM_STRING .)


state 543

    (362) encaps_var_offset -> VARIABLE .

    RBRACKET        reduce using rule 362 (encaps_var_offset -> VARIABLE .)


state 544

    (355) encaps_var -> VARIABLE LBRACKET encaps_var_offset . RBRACKET

    RBRACKET        shift and go to state 628


state 545

    (357) encaps_var -> DOLLAR_OPEN_CURLY_BRACES expr RBRACE .

    QUOTE           reduce using rule 357 (encaps_var -> DOLLAR_OPEN_CURLY_BRACES expr RBRACE .)
    ENCAPSED_AND_WHITESPACE reduce using rule 357 (encaps_var -> DOLLAR_OPEN_CURLY_BRACES expr RBRACE .)
    VARIABLE        reduce using rule 357 (encaps_var -> DOLLAR_OPEN_CURLY_BRACES expr RBRACE .)
    DOLLAR_OPEN_CURLY_BRACES reduce using rule 357 (encaps_var -> DOLLAR_OPEN_CURLY_BRACES expr RBRACE .)
    CURLY_OPEN      reduce using rule 357 (encaps_var -> DOLLAR_OPEN_CURLY_BRACES expr RBRACE .)
    END_HEREDOC     reduce using rule 357 (encaps_var -> DOLLAR_OPEN_CURLY_BRACES expr RBRACE .)


state 546

    (358) encaps_var -> DOLLAR_OPEN_CURLY_BRACES STRING_VARNAME LBRACKET . expr RBRACKET RBRACE
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 629

state 547

    (114) implements_list -> IMPLEMENTS interface_list .
    (127) interface_list -> interface_list . COMMA fully_qualified_class_name

    LBRACE          reduce using rule 114 (implements_list -> IMPLEMENTS interface_list .)
    COMMA           shift and go to state 512


state 548

    (104) class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE . class_statement_list RBRACE
    (116) class_statement_list -> . class_statement_list class_statement
    (117) class_statement_list -> . empty
    (363) empty -> .

    RBRACE          reduce using rule 363 (empty -> .)
    VAR             reduce using rule 363 (empty -> .)
    CONST           reduce using rule 363 (empty -> .)
    PUBLIC          reduce using rule 363 (empty -> .)
    PROTECTED       reduce using rule 363 (empty -> .)
    PRIVATE         reduce using rule 363 (empty -> .)
    STATIC          reduce using rule 363 (empty -> .)
    ABSTRACT        reduce using rule 363 (empty -> .)
    FINAL           reduce using rule 363 (empty -> .)
    FUNCTION        reduce using rule 363 (empty -> .)

    class_statement_list           shift and go to state 630
    empty                          shift and go to state 509

state 549

    (190) function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list . RPAREN
    (235) function_call_parameter_list -> function_call_parameter_list . COMMA function_call_parameter

    RPAREN          shift and go to state 631
    COMMA           shift and go to state 477


state 550

    (189) function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list . RPAREN
    (235) function_call_parameter_list -> function_call_parameter_list . COMMA function_call_parameter

    RPAREN          shift and go to state 632
    COMMA           shift and go to state 477


state 551

    (93) global_var -> DOLLAR LBRACE expr RBRACE .

    SEMI            reduce using rule 93 (global_var -> DOLLAR LBRACE expr RBRACE .)
    COMMA           reduce using rule 93 (global_var -> DOLLAR LBRACE expr RBRACE .)


state 552

    (31) statement -> WHILE LPAREN expr RPAREN while_statement .

    HALT_COMPILER   reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    NAMESPACE       reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    CONST           reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    USE             reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    LBRACE          reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    IF              reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    WHILE           reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    DO              reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    FOR             reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    FOREACH         reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    SWITCH          reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    BREAK           reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    CONTINUE        reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    RETURN          reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    GLOBAL          reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    STATIC          reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    ECHO            reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    INLINE_HTML     reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    UNSET           reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    SEMI            reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    TRY             reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    THROW           reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    DECLARE         reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    FUNCTION        reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    INTERFACE       reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    NEW             reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    CLONE           reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    LIST            reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    ARRAY           reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    PLUS            reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    MINUS           reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    NOT             reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    BOOLEAN_NOT     reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    INC             reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    DEC             reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    INT_CAST        reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    DOUBLE_CAST     reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    STRING_CAST     reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    ARRAY_CAST      reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    OBJECT_CAST     reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    BOOL_CAST       reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    UNSET_CAST      reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    ISSET           reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    EMPTY           reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    EVAL            reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    INCLUDE         reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    INCLUDE_ONCE    reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    REQUIRE         reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    REQUIRE_ONCE    reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    EXIT            reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    PRINT           reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    AT              reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    LPAREN          reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    CLASS           reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    ABSTRACT        reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    FINAL           reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    QUOTE           reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    START_HEREDOC   reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    STRING_VARNAME  reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    NS_SEPARATOR    reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    LNUMBER         reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    DNUMBER         reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    LINE            reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    FILE            reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    DIR             reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    CLASS_C         reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    METHOD_C        reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    FUNC_C          reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    NS_C            reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    STRING          reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    DOLLAR          reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    VARIABLE        reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    $end            reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    RBRACE          reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    ELSEIF          reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    ELSE            reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    ENDDECLARE      reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    ENDWHILE        reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    ENDIF           reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    ENDFOREACH      reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    CASE            reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    DEFAULT         reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    ENDSWITCH       reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    ENDFOR          reduce using rule 31 (statement -> WHILE LPAREN expr RPAREN while_statement .)


state 553

    (67) while_statement -> COLON . inner_statement_list ENDWHILE SEMI
    (22) inner_statement_list -> . inner_statement_list inner_statement
    (23) inner_statement_list -> . empty
    (363) empty -> .

    ENDWHILE        reduce using rule 363 (empty -> .)
    HALT_COMPILER   reduce using rule 363 (empty -> .)
    LBRACE          reduce using rule 363 (empty -> .)
    IF              reduce using rule 363 (empty -> .)
    WHILE           reduce using rule 363 (empty -> .)
    DO              reduce using rule 363 (empty -> .)
    FOR             reduce using rule 363 (empty -> .)
    FOREACH         reduce using rule 363 (empty -> .)
    SWITCH          reduce using rule 363 (empty -> .)
    BREAK           reduce using rule 363 (empty -> .)
    CONTINUE        reduce using rule 363 (empty -> .)
    RETURN          reduce using rule 363 (empty -> .)
    GLOBAL          reduce using rule 363 (empty -> .)
    STATIC          reduce using rule 363 (empty -> .)
    ECHO            reduce using rule 363 (empty -> .)
    INLINE_HTML     reduce using rule 363 (empty -> .)
    UNSET           reduce using rule 363 (empty -> .)
    SEMI            reduce using rule 363 (empty -> .)
    TRY             reduce using rule 363 (empty -> .)
    THROW           reduce using rule 363 (empty -> .)
    DECLARE         reduce using rule 363 (empty -> .)
    FUNCTION        reduce using rule 363 (empty -> .)
    INTERFACE       reduce using rule 363 (empty -> .)
    NEW             reduce using rule 363 (empty -> .)
    CLONE           reduce using rule 363 (empty -> .)
    LIST            reduce using rule 363 (empty -> .)
    ARRAY           reduce using rule 363 (empty -> .)
    PLUS            reduce using rule 363 (empty -> .)
    MINUS           reduce using rule 363 (empty -> .)
    NOT             reduce using rule 363 (empty -> .)
    BOOLEAN_NOT     reduce using rule 363 (empty -> .)
    INC             reduce using rule 363 (empty -> .)
    DEC             reduce using rule 363 (empty -> .)
    INT_CAST        reduce using rule 363 (empty -> .)
    DOUBLE_CAST     reduce using rule 363 (empty -> .)
    STRING_CAST     reduce using rule 363 (empty -> .)
    ARRAY_CAST      reduce using rule 363 (empty -> .)
    OBJECT_CAST     reduce using rule 363 (empty -> .)
    BOOL_CAST       reduce using rule 363 (empty -> .)
    UNSET_CAST      reduce using rule 363 (empty -> .)
    ISSET           reduce using rule 363 (empty -> .)
    EMPTY           reduce using rule 363 (empty -> .)
    EVAL            reduce using rule 363 (empty -> .)
    INCLUDE         reduce using rule 363 (empty -> .)
    INCLUDE_ONCE    reduce using rule 363 (empty -> .)
    REQUIRE         reduce using rule 363 (empty -> .)
    REQUIRE_ONCE    reduce using rule 363 (empty -> .)
    EXIT            reduce using rule 363 (empty -> .)
    PRINT           reduce using rule 363 (empty -> .)
    AT              reduce using rule 363 (empty -> .)
    LPAREN          reduce using rule 363 (empty -> .)
    CLASS           reduce using rule 363 (empty -> .)
    ABSTRACT        reduce using rule 363 (empty -> .)
    FINAL           reduce using rule 363 (empty -> .)
    QUOTE           reduce using rule 363 (empty -> .)
    START_HEREDOC   reduce using rule 363 (empty -> .)
    STRING_VARNAME  reduce using rule 363 (empty -> .)
    NS_SEPARATOR    reduce using rule 363 (empty -> .)
    NAMESPACE       reduce using rule 363 (empty -> .)
    LNUMBER         reduce using rule 363 (empty -> .)
    DNUMBER         reduce using rule 363 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 363 (empty -> .)
    LINE            reduce using rule 363 (empty -> .)
    FILE            reduce using rule 363 (empty -> .)
    DIR             reduce using rule 363 (empty -> .)
    CLASS_C         reduce using rule 363 (empty -> .)
    METHOD_C        reduce using rule 363 (empty -> .)
    FUNC_C          reduce using rule 363 (empty -> .)
    NS_C            reduce using rule 363 (empty -> .)
    STRING          reduce using rule 363 (empty -> .)
    DOLLAR          reduce using rule 363 (empty -> .)
    VARIABLE        reduce using rule 363 (empty -> .)

    inner_statement_list           shift and go to state 633
    empty                          shift and go to state 148

state 554

    (66) while_statement -> statement .

    HALT_COMPILER   reduce using rule 66 (while_statement -> statement .)
    NAMESPACE       reduce using rule 66 (while_statement -> statement .)
    CONST           reduce using rule 66 (while_statement -> statement .)
    USE             reduce using rule 66 (while_statement -> statement .)
    LBRACE          reduce using rule 66 (while_statement -> statement .)
    IF              reduce using rule 66 (while_statement -> statement .)
    WHILE           reduce using rule 66 (while_statement -> statement .)
    DO              reduce using rule 66 (while_statement -> statement .)
    FOR             reduce using rule 66 (while_statement -> statement .)
    FOREACH         reduce using rule 66 (while_statement -> statement .)
    SWITCH          reduce using rule 66 (while_statement -> statement .)
    BREAK           reduce using rule 66 (while_statement -> statement .)
    CONTINUE        reduce using rule 66 (while_statement -> statement .)
    RETURN          reduce using rule 66 (while_statement -> statement .)
    GLOBAL          reduce using rule 66 (while_statement -> statement .)
    STATIC          reduce using rule 66 (while_statement -> statement .)
    ECHO            reduce using rule 66 (while_statement -> statement .)
    INLINE_HTML     reduce using rule 66 (while_statement -> statement .)
    UNSET           reduce using rule 66 (while_statement -> statement .)
    SEMI            reduce using rule 66 (while_statement -> statement .)
    TRY             reduce using rule 66 (while_statement -> statement .)
    THROW           reduce using rule 66 (while_statement -> statement .)
    DECLARE         reduce using rule 66 (while_statement -> statement .)
    FUNCTION        reduce using rule 66 (while_statement -> statement .)
    INTERFACE       reduce using rule 66 (while_statement -> statement .)
    NEW             reduce using rule 66 (while_statement -> statement .)
    CLONE           reduce using rule 66 (while_statement -> statement .)
    LIST            reduce using rule 66 (while_statement -> statement .)
    ARRAY           reduce using rule 66 (while_statement -> statement .)
    PLUS            reduce using rule 66 (while_statement -> statement .)
    MINUS           reduce using rule 66 (while_statement -> statement .)
    NOT             reduce using rule 66 (while_statement -> statement .)
    BOOLEAN_NOT     reduce using rule 66 (while_statement -> statement .)
    INC             reduce using rule 66 (while_statement -> statement .)
    DEC             reduce using rule 66 (while_statement -> statement .)
    INT_CAST        reduce using rule 66 (while_statement -> statement .)
    DOUBLE_CAST     reduce using rule 66 (while_statement -> statement .)
    STRING_CAST     reduce using rule 66 (while_statement -> statement .)
    ARRAY_CAST      reduce using rule 66 (while_statement -> statement .)
    OBJECT_CAST     reduce using rule 66 (while_statement -> statement .)
    BOOL_CAST       reduce using rule 66 (while_statement -> statement .)
    UNSET_CAST      reduce using rule 66 (while_statement -> statement .)
    ISSET           reduce using rule 66 (while_statement -> statement .)
    EMPTY           reduce using rule 66 (while_statement -> statement .)
    EVAL            reduce using rule 66 (while_statement -> statement .)
    INCLUDE         reduce using rule 66 (while_statement -> statement .)
    INCLUDE_ONCE    reduce using rule 66 (while_statement -> statement .)
    REQUIRE         reduce using rule 66 (while_statement -> statement .)
    REQUIRE_ONCE    reduce using rule 66 (while_statement -> statement .)
    EXIT            reduce using rule 66 (while_statement -> statement .)
    PRINT           reduce using rule 66 (while_statement -> statement .)
    AT              reduce using rule 66 (while_statement -> statement .)
    LPAREN          reduce using rule 66 (while_statement -> statement .)
    CLASS           reduce using rule 66 (while_statement -> statement .)
    ABSTRACT        reduce using rule 66 (while_statement -> statement .)
    FINAL           reduce using rule 66 (while_statement -> statement .)
    QUOTE           reduce using rule 66 (while_statement -> statement .)
    START_HEREDOC   reduce using rule 66 (while_statement -> statement .)
    STRING_VARNAME  reduce using rule 66 (while_statement -> statement .)
    NS_SEPARATOR    reduce using rule 66 (while_statement -> statement .)
    LNUMBER         reduce using rule 66 (while_statement -> statement .)
    DNUMBER         reduce using rule 66 (while_statement -> statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 66 (while_statement -> statement .)
    LINE            reduce using rule 66 (while_statement -> statement .)
    FILE            reduce using rule 66 (while_statement -> statement .)
    DIR             reduce using rule 66 (while_statement -> statement .)
    CLASS_C         reduce using rule 66 (while_statement -> statement .)
    METHOD_C        reduce using rule 66 (while_statement -> statement .)
    FUNC_C          reduce using rule 66 (while_statement -> statement .)
    NS_C            reduce using rule 66 (while_statement -> statement .)
    STRING          reduce using rule 66 (while_statement -> statement .)
    DOLLAR          reduce using rule 66 (while_statement -> statement .)
    VARIABLE        reduce using rule 66 (while_statement -> statement .)
    $end            reduce using rule 66 (while_statement -> statement .)
    RBRACE          reduce using rule 66 (while_statement -> statement .)
    ELSEIF          reduce using rule 66 (while_statement -> statement .)
    ELSE            reduce using rule 66 (while_statement -> statement .)
    ENDDECLARE      reduce using rule 66 (while_statement -> statement .)
    ENDWHILE        reduce using rule 66 (while_statement -> statement .)
    ENDIF           reduce using rule 66 (while_statement -> statement .)
    ENDFOREACH      reduce using rule 66 (while_statement -> statement .)
    CASE            reduce using rule 66 (while_statement -> statement .)
    DEFAULT         reduce using rule 66 (while_statement -> statement .)
    ENDSWITCH       reduce using rule 66 (while_statement -> statement .)
    ENDFOR          reduce using rule 66 (while_statement -> statement .)


state 555

    (168) dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .
    (170) dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties . dynamic_class_name_variable_property
    (172) dynamic_class_name_variable_property -> . OBJECT_OPERATOR object_property

    LPAREN          reduce using rule 168 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    SEMI            reduce using rule 168 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    BOOLEAN_AND     reduce using rule 168 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    BOOLEAN_OR      reduce using rule 168 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    LOGICAL_AND     reduce using rule 168 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    LOGICAL_OR      reduce using rule 168 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    LOGICAL_XOR     reduce using rule 168 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    AND             reduce using rule 168 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    OR              reduce using rule 168 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    XOR             reduce using rule 168 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    CONCAT          reduce using rule 168 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    PLUS            reduce using rule 168 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    MINUS           reduce using rule 168 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    MUL             reduce using rule 168 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    DIV             reduce using rule 168 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    SL              reduce using rule 168 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    SR              reduce using rule 168 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    MOD             reduce using rule 168 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    IS_IDENTICAL    reduce using rule 168 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    IS_NOT_IDENTICAL reduce using rule 168 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    IS_EQUAL        reduce using rule 168 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    IS_NOT_EQUAL    reduce using rule 168 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    IS_SMALLER      reduce using rule 168 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    IS_SMALLER_OR_EQUAL reduce using rule 168 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    IS_GREATER      reduce using rule 168 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    IS_GREATER_OR_EQUAL reduce using rule 168 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    INSTANCEOF      reduce using rule 168 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    QUESTION        reduce using rule 168 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    COMMA           reduce using rule 168 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    RPAREN          reduce using rule 168 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    AS              reduce using rule 168 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    RBRACE          reduce using rule 168 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    RBRACKET        reduce using rule 168 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    DOUBLE_ARROW    reduce using rule 168 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    COLON           reduce using rule 168 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    OBJECT_OPERATOR shift and go to state 635

    dynamic_class_name_variable_property shift and go to state 634

state 556

    (171) dynamic_class_name_variable_properties -> empty .

    OBJECT_OPERATOR reduce using rule 171 (dynamic_class_name_variable_properties -> empty .)
    LPAREN          reduce using rule 171 (dynamic_class_name_variable_properties -> empty .)
    SEMI            reduce using rule 171 (dynamic_class_name_variable_properties -> empty .)
    BOOLEAN_AND     reduce using rule 171 (dynamic_class_name_variable_properties -> empty .)
    BOOLEAN_OR      reduce using rule 171 (dynamic_class_name_variable_properties -> empty .)
    LOGICAL_AND     reduce using rule 171 (dynamic_class_name_variable_properties -> empty .)
    LOGICAL_OR      reduce using rule 171 (dynamic_class_name_variable_properties -> empty .)
    LOGICAL_XOR     reduce using rule 171 (dynamic_class_name_variable_properties -> empty .)
    AND             reduce using rule 171 (dynamic_class_name_variable_properties -> empty .)
    OR              reduce using rule 171 (dynamic_class_name_variable_properties -> empty .)
    XOR             reduce using rule 171 (dynamic_class_name_variable_properties -> empty .)
    CONCAT          reduce using rule 171 (dynamic_class_name_variable_properties -> empty .)
    PLUS            reduce using rule 171 (dynamic_class_name_variable_properties -> empty .)
    MINUS           reduce using rule 171 (dynamic_class_name_variable_properties -> empty .)
    MUL             reduce using rule 171 (dynamic_class_name_variable_properties -> empty .)
    DIV             reduce using rule 171 (dynamic_class_name_variable_properties -> empty .)
    SL              reduce using rule 171 (dynamic_class_name_variable_properties -> empty .)
    SR              reduce using rule 171 (dynamic_class_name_variable_properties -> empty .)
    MOD             reduce using rule 171 (dynamic_class_name_variable_properties -> empty .)
    IS_IDENTICAL    reduce using rule 171 (dynamic_class_name_variable_properties -> empty .)
    IS_NOT_IDENTICAL reduce using rule 171 (dynamic_class_name_variable_properties -> empty .)
    IS_EQUAL        reduce using rule 171 (dynamic_class_name_variable_properties -> empty .)
    IS_NOT_EQUAL    reduce using rule 171 (dynamic_class_name_variable_properties -> empty .)
    IS_SMALLER      reduce using rule 171 (dynamic_class_name_variable_properties -> empty .)
    IS_SMALLER_OR_EQUAL reduce using rule 171 (dynamic_class_name_variable_properties -> empty .)
    IS_GREATER      reduce using rule 171 (dynamic_class_name_variable_properties -> empty .)
    IS_GREATER_OR_EQUAL reduce using rule 171 (dynamic_class_name_variable_properties -> empty .)
    INSTANCEOF      reduce using rule 171 (dynamic_class_name_variable_properties -> empty .)
    QUESTION        reduce using rule 171 (dynamic_class_name_variable_properties -> empty .)
    COMMA           reduce using rule 171 (dynamic_class_name_variable_properties -> empty .)
    RPAREN          reduce using rule 171 (dynamic_class_name_variable_properties -> empty .)
    AS              reduce using rule 171 (dynamic_class_name_variable_properties -> empty .)
    RBRACE          reduce using rule 171 (dynamic_class_name_variable_properties -> empty .)
    RBRACKET        reduce using rule 171 (dynamic_class_name_variable_properties -> empty .)
    DOUBLE_ARROW    reduce using rule 171 (dynamic_class_name_variable_properties -> empty .)
    COLON           reduce using rule 171 (dynamic_class_name_variable_properties -> empty .)


state 557

    (173) ctor_arguments -> LPAREN function_call_parameter_list RPAREN .

    SEMI            reduce using rule 173 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_AND     reduce using rule 173 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_OR      reduce using rule 173 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_AND     reduce using rule 173 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_OR      reduce using rule 173 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_XOR     reduce using rule 173 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    AND             reduce using rule 173 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    OR              reduce using rule 173 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    XOR             reduce using rule 173 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    CONCAT          reduce using rule 173 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    PLUS            reduce using rule 173 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    MINUS           reduce using rule 173 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    MUL             reduce using rule 173 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    DIV             reduce using rule 173 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    SL              reduce using rule 173 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    SR              reduce using rule 173 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    MOD             reduce using rule 173 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    IS_IDENTICAL    reduce using rule 173 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 173 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    IS_EQUAL        reduce using rule 173 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_EQUAL    reduce using rule 173 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER      reduce using rule 173 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 173 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER      reduce using rule 173 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 173 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    INSTANCEOF      reduce using rule 173 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    QUESTION        reduce using rule 173 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    COMMA           reduce using rule 173 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    RPAREN          reduce using rule 173 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    AS              reduce using rule 173 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    RBRACE          reduce using rule 173 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    RBRACKET        reduce using rule 173 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    DOUBLE_ARROW    reduce using rule 173 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    COLON           reduce using rule 173 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)


state 558

    (80) switch_case_list -> LBRACE . case_list RBRACE
    (81) switch_case_list -> LBRACE . SEMI case_list RBRACE
    (84) case_list -> . empty
    (85) case_list -> . case_list CASE expr case_separator inner_statement_list
    (86) case_list -> . case_list DEFAULT case_separator inner_statement_list
    (363) empty -> .

    SEMI            shift and go to state 636
    RBRACE          reduce using rule 363 (empty -> .)
    CASE            reduce using rule 363 (empty -> .)
    DEFAULT         reduce using rule 363 (empty -> .)

    empty                          shift and go to state 638
    case_list                      shift and go to state 637

state 559

    (82) switch_case_list -> COLON . case_list ENDSWITCH SEMI
    (83) switch_case_list -> COLON . SEMI case_list ENDSWITCH SEMI
    (84) case_list -> . empty
    (85) case_list -> . case_list CASE expr case_separator inner_statement_list
    (86) case_list -> . case_list DEFAULT case_separator inner_statement_list
    (363) empty -> .

    SEMI            shift and go to state 639
    ENDSWITCH       reduce using rule 363 (empty -> .)
    CASE            reduce using rule 363 (empty -> .)
    DEFAULT         reduce using rule 363 (empty -> .)

    empty                          shift and go to state 638
    case_list                      shift and go to state 640

state 560

    (35) statement -> SWITCH LPAREN expr RPAREN switch_case_list .

    HALT_COMPILER   reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    NAMESPACE       reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    CONST           reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    USE             reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    LBRACE          reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    IF              reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    WHILE           reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    DO              reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    FOR             reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    FOREACH         reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    SWITCH          reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    BREAK           reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    CONTINUE        reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    RETURN          reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    GLOBAL          reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    STATIC          reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    ECHO            reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    INLINE_HTML     reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    UNSET           reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    SEMI            reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    TRY             reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    THROW           reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    DECLARE         reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    FUNCTION        reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    INTERFACE       reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    NEW             reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    CLONE           reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    LIST            reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    ARRAY           reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    PLUS            reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    MINUS           reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    NOT             reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    BOOLEAN_NOT     reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    INC             reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    DEC             reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    INT_CAST        reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    DOUBLE_CAST     reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    STRING_CAST     reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    ARRAY_CAST      reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    OBJECT_CAST     reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    BOOL_CAST       reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    UNSET_CAST      reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    ISSET           reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    EMPTY           reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    EVAL            reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    INCLUDE         reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    INCLUDE_ONCE    reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    REQUIRE         reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    REQUIRE_ONCE    reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    EXIT            reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    PRINT           reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    AT              reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    LPAREN          reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    CLASS           reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    ABSTRACT        reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    FINAL           reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    QUOTE           reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    START_HEREDOC   reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    STRING_VARNAME  reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    NS_SEPARATOR    reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    LNUMBER         reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    DNUMBER         reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    CONSTANT_ENCAPSED_STRING reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    LINE            reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    FILE            reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    DIR             reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    CLASS_C         reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    METHOD_C        reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    FUNC_C          reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    NS_C            reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    STRING          reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    DOLLAR          reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    VARIABLE        reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    $end            reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    RBRACE          reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    ELSEIF          reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    ELSE            reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    ENDDECLARE      reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    ENDWHILE        reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    ENDIF           reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    ENDFOREACH      reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    CASE            reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    DEFAULT         reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    ENDSWITCH       reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    ENDFOR          reduce using rule 35 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)


state 561

    (232) non_empty_array_pair_list -> expr DOUBLE_ARROW expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    COMMA           reduce using rule 232 (non_empty_array_pair_list -> expr DOUBLE_ARROW expr .)
    RPAREN          reduce using rule 232 (non_empty_array_pair_list -> expr DOUBLE_ARROW expr .)
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    LOGICAL_AND     shift and go to state 181
    LOGICAL_OR      shift and go to state 202
    LOGICAL_XOR     shift and go to state 200
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188


state 562

    (231) non_empty_array_pair_list -> expr DOUBLE_ARROW AND . variable
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NS_SEPARATOR    shift and go to state 129
    NAMESPACE       shift and go to state 128
    DOLLAR          shift and go to state 90
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    VARIABLE        shift and go to state 56

    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    compound_variable              shift and go to state 72
    class_name                     shift and go to state 124
    variable_class_name            shift and go to state 127
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 126
    static_member                  shift and go to state 86
    variable                       shift and go to state 641
    namespace_name                 shift and go to state 130

state 563

    (226) non_empty_array_pair_list -> non_empty_array_pair_list COMMA expr .
    (229) non_empty_array_pair_list -> non_empty_array_pair_list COMMA expr . DOUBLE_ARROW AND variable
    (230) non_empty_array_pair_list -> non_empty_array_pair_list COMMA expr . DOUBLE_ARROW expr
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    COMMA           reduce using rule 226 (non_empty_array_pair_list -> non_empty_array_pair_list COMMA expr .)
    RPAREN          reduce using rule 226 (non_empty_array_pair_list -> non_empty_array_pair_list COMMA expr .)
    DOUBLE_ARROW    shift and go to state 642
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    LOGICAL_AND     shift and go to state 181
    LOGICAL_OR      shift and go to state 202
    LOGICAL_XOR     shift and go to state 200
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188


state 564

    (225) non_empty_array_pair_list -> non_empty_array_pair_list COMMA AND . variable
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NS_SEPARATOR    shift and go to state 129
    NAMESPACE       shift and go to state 128
    DOLLAR          shift and go to state 90
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    VARIABLE        shift and go to state 56

    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    class_name                     shift and go to state 124
    variable_class_name            shift and go to state 127
    compound_variable              shift and go to state 72
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 126
    variable                       shift and go to state 643
    namespace_name                 shift and go to state 130

state 565

    (187) function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .

    OBJECT_OPERATOR reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    EQUALS          reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    PLUS_EQUAL      reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    MINUS_EQUAL     reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    MUL_EQUAL       reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    DIV_EQUAL       reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    CONCAT_EQUAL    reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    MOD_EQUAL       reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    AND_EQUAL       reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    OR_EQUAL        reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    XOR_EQUAL       reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    SL_EQUAL        reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    SR_EQUAL        reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    INC             reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    DEC             reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_AND     reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_OR      reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_AND     reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_OR      reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_XOR     reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    AND             reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    OR              reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    XOR             reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    CONCAT          reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    PLUS            reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    MINUS           reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    MUL             reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    DIV             reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    SL              reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    SR              reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    MOD             reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_IDENTICAL    reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_EQUAL        reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_EQUAL    reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER      reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER      reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    INSTANCEOF      reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    QUESTION        reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    SEMI            reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    COMMA           reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    RPAREN          reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    AS              reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    RBRACE          reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    RBRACKET        reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    DOUBLE_ARROW    reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    COLON           reduce using rule 187 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)


state 566

    (235) function_call_parameter_list -> function_call_parameter_list COMMA function_call_parameter .

    RPAREN          reduce using rule 235 (function_call_parameter_list -> function_call_parameter_list COMMA function_call_parameter .)
    COMMA           reduce using rule 235 (function_call_parameter_list -> function_call_parameter_list COMMA function_call_parameter .)


state 567

    (287) expr -> expr QUESTION expr COLON expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 287 (expr -> expr QUESTION expr COLON expr .)
    LOGICAL_AND     reduce using rule 287 (expr -> expr QUESTION expr COLON expr .)
    LOGICAL_OR      reduce using rule 287 (expr -> expr QUESTION expr COLON expr .)
    LOGICAL_XOR     reduce using rule 287 (expr -> expr QUESTION expr COLON expr .)
    QUESTION        reduce using rule 287 (expr -> expr QUESTION expr COLON expr .)
    SEMI            reduce using rule 287 (expr -> expr QUESTION expr COLON expr .)
    COMMA           reduce using rule 287 (expr -> expr QUESTION expr COLON expr .)
    RPAREN          reduce using rule 287 (expr -> expr QUESTION expr COLON expr .)
    RBRACE          reduce using rule 287 (expr -> expr QUESTION expr COLON expr .)
    RBRACKET        reduce using rule 287 (expr -> expr QUESTION expr COLON expr .)
    DOUBLE_ARROW    reduce using rule 287 (expr -> expr QUESTION expr COLON expr .)
    COLON           reduce using rule 287 (expr -> expr QUESTION expr COLON expr .)
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204

  ! BOOLEAN_AND     [ reduce using rule 287 (expr -> expr QUESTION expr COLON expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 287 (expr -> expr QUESTION expr COLON expr .) ]
  ! AND             [ reduce using rule 287 (expr -> expr QUESTION expr COLON expr .) ]
  ! OR              [ reduce using rule 287 (expr -> expr QUESTION expr COLON expr .) ]
  ! XOR             [ reduce using rule 287 (expr -> expr QUESTION expr COLON expr .) ]
  ! CONCAT          [ reduce using rule 287 (expr -> expr QUESTION expr COLON expr .) ]
  ! PLUS            [ reduce using rule 287 (expr -> expr QUESTION expr COLON expr .) ]
  ! MINUS           [ reduce using rule 287 (expr -> expr QUESTION expr COLON expr .) ]
  ! MUL             [ reduce using rule 287 (expr -> expr QUESTION expr COLON expr .) ]
  ! DIV             [ reduce using rule 287 (expr -> expr QUESTION expr COLON expr .) ]
  ! SL              [ reduce using rule 287 (expr -> expr QUESTION expr COLON expr .) ]
  ! SR              [ reduce using rule 287 (expr -> expr QUESTION expr COLON expr .) ]
  ! MOD             [ reduce using rule 287 (expr -> expr QUESTION expr COLON expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 287 (expr -> expr QUESTION expr COLON expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 287 (expr -> expr QUESTION expr COLON expr .) ]
  ! IS_EQUAL        [ reduce using rule 287 (expr -> expr QUESTION expr COLON expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 287 (expr -> expr QUESTION expr COLON expr .) ]
  ! IS_SMALLER      [ reduce using rule 287 (expr -> expr QUESTION expr COLON expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 287 (expr -> expr QUESTION expr COLON expr .) ]
  ! IS_GREATER      [ reduce using rule 287 (expr -> expr QUESTION expr COLON expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 287 (expr -> expr QUESTION expr COLON expr .) ]
  ! INSTANCEOF      [ reduce using rule 287 (expr -> expr QUESTION expr COLON expr .) ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]
  ! QUESTION        [ shift and go to state 188 ]


state 568

    (181) assignment_list_element -> LIST LPAREN assignment_list . RPAREN
    (177) assignment_list -> assignment_list . COMMA assignment_list_element

    RPAREN          shift and go to state 644
    COMMA           shift and go to state 482


state 569

    (176) expr -> LIST LPAREN assignment_list RPAREN EQUALS . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 645

state 570

    (177) assignment_list -> assignment_list COMMA assignment_list_element .

    RPAREN          reduce using rule 177 (assignment_list -> assignment_list COMMA assignment_list_element .)
    COMMA           reduce using rule 177 (assignment_list -> assignment_list COMMA assignment_list_element .)


state 571

    (32) statement -> DO statement WHILE LPAREN expr . RPAREN SEMI
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    RPAREN          shift and go to state 646
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    LOGICAL_AND     shift and go to state 181
    LOGICAL_OR      shift and go to state 202
    LOGICAL_XOR     shift and go to state 200
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188


state 572

    (18) use_declaration -> NS_SEPARATOR namespace_name AS STRING .

    SEMI            reduce using rule 18 (use_declaration -> NS_SEPARATOR namespace_name AS STRING .)
    COMMA           reduce using rule 18 (use_declaration -> NS_SEPARATOR namespace_name AS STRING .)


state 573

    (47) statement -> UNSET LPAREN unset_variables RPAREN SEMI .

    HALT_COMPILER   reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    NAMESPACE       reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    CONST           reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    USE             reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    LBRACE          reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    IF              reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    WHILE           reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    DO              reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    FOR             reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    FOREACH         reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    SWITCH          reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    BREAK           reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    CONTINUE        reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    RETURN          reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    GLOBAL          reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    STATIC          reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    ECHO            reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    INLINE_HTML     reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    UNSET           reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    SEMI            reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    TRY             reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    THROW           reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    DECLARE         reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    FUNCTION        reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    INTERFACE       reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    NEW             reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    CLONE           reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    LIST            reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    ARRAY           reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    PLUS            reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    MINUS           reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    NOT             reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    BOOLEAN_NOT     reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    INC             reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    DEC             reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    INT_CAST        reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    DOUBLE_CAST     reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    STRING_CAST     reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    ARRAY_CAST      reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    OBJECT_CAST     reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    BOOL_CAST       reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    UNSET_CAST      reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    ISSET           reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    EMPTY           reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    EVAL            reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    INCLUDE         reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    INCLUDE_ONCE    reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    REQUIRE         reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    REQUIRE_ONCE    reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    EXIT            reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    PRINT           reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    AT              reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    LPAREN          reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    CLASS           reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    ABSTRACT        reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    FINAL           reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    QUOTE           reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    START_HEREDOC   reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    STRING_VARNAME  reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    NS_SEPARATOR    reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    LNUMBER         reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    DNUMBER         reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    LINE            reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    FILE            reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    DIR             reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    CLASS_C         reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    METHOD_C        reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    FUNC_C          reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    NS_C            reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    STRING          reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    DOLLAR          reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    VARIABLE        reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    $end            reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    RBRACE          reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    ELSEIF          reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    ELSE            reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    ENDDECLARE      reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    ENDWHILE        reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    ENDIF           reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    ENDFOREACH      reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    CASE            reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    DEFAULT         reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    ENDSWITCH       reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    ENDFOR          reduce using rule 47 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)


state 574

    (100) unset_variables -> unset_variables COMMA unset_variable .

    RPAREN          reduce using rule 100 (unset_variables -> unset_variables COMMA unset_variable .)
    COMMA           reduce using rule 100 (unset_variables -> unset_variables COMMA unset_variable .)


state 575

    (300) isset_variables -> isset_variables COMMA variable .

    RPAREN          reduce using rule 300 (isset_variables -> isset_variables COMMA variable .)
    COMMA           reduce using rule 300 (isset_variables -> isset_variables COMMA variable .)


state 576

    (30) statement -> IF LPAREN expr RPAREN COLON . inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (22) inner_statement_list -> . inner_statement_list inner_statement
    (23) inner_statement_list -> . empty
    (363) empty -> .

    HALT_COMPILER   reduce using rule 363 (empty -> .)
    LBRACE          reduce using rule 363 (empty -> .)
    IF              reduce using rule 363 (empty -> .)
    WHILE           reduce using rule 363 (empty -> .)
    DO              reduce using rule 363 (empty -> .)
    FOR             reduce using rule 363 (empty -> .)
    FOREACH         reduce using rule 363 (empty -> .)
    SWITCH          reduce using rule 363 (empty -> .)
    BREAK           reduce using rule 363 (empty -> .)
    CONTINUE        reduce using rule 363 (empty -> .)
    RETURN          reduce using rule 363 (empty -> .)
    GLOBAL          reduce using rule 363 (empty -> .)
    STATIC          reduce using rule 363 (empty -> .)
    ECHO            reduce using rule 363 (empty -> .)
    INLINE_HTML     reduce using rule 363 (empty -> .)
    UNSET           reduce using rule 363 (empty -> .)
    SEMI            reduce using rule 363 (empty -> .)
    TRY             reduce using rule 363 (empty -> .)
    THROW           reduce using rule 363 (empty -> .)
    DECLARE         reduce using rule 363 (empty -> .)
    FUNCTION        reduce using rule 363 (empty -> .)
    INTERFACE       reduce using rule 363 (empty -> .)
    NEW             reduce using rule 363 (empty -> .)
    CLONE           reduce using rule 363 (empty -> .)
    LIST            reduce using rule 363 (empty -> .)
    ARRAY           reduce using rule 363 (empty -> .)
    PLUS            reduce using rule 363 (empty -> .)
    MINUS           reduce using rule 363 (empty -> .)
    NOT             reduce using rule 363 (empty -> .)
    BOOLEAN_NOT     reduce using rule 363 (empty -> .)
    INC             reduce using rule 363 (empty -> .)
    DEC             reduce using rule 363 (empty -> .)
    INT_CAST        reduce using rule 363 (empty -> .)
    DOUBLE_CAST     reduce using rule 363 (empty -> .)
    STRING_CAST     reduce using rule 363 (empty -> .)
    ARRAY_CAST      reduce using rule 363 (empty -> .)
    OBJECT_CAST     reduce using rule 363 (empty -> .)
    BOOL_CAST       reduce using rule 363 (empty -> .)
    UNSET_CAST      reduce using rule 363 (empty -> .)
    ISSET           reduce using rule 363 (empty -> .)
    EMPTY           reduce using rule 363 (empty -> .)
    EVAL            reduce using rule 363 (empty -> .)
    INCLUDE         reduce using rule 363 (empty -> .)
    INCLUDE_ONCE    reduce using rule 363 (empty -> .)
    REQUIRE         reduce using rule 363 (empty -> .)
    REQUIRE_ONCE    reduce using rule 363 (empty -> .)
    EXIT            reduce using rule 363 (empty -> .)
    PRINT           reduce using rule 363 (empty -> .)
    AT              reduce using rule 363 (empty -> .)
    LPAREN          reduce using rule 363 (empty -> .)
    CLASS           reduce using rule 363 (empty -> .)
    ABSTRACT        reduce using rule 363 (empty -> .)
    FINAL           reduce using rule 363 (empty -> .)
    QUOTE           reduce using rule 363 (empty -> .)
    START_HEREDOC   reduce using rule 363 (empty -> .)
    STRING_VARNAME  reduce using rule 363 (empty -> .)
    NS_SEPARATOR    reduce using rule 363 (empty -> .)
    NAMESPACE       reduce using rule 363 (empty -> .)
    LNUMBER         reduce using rule 363 (empty -> .)
    DNUMBER         reduce using rule 363 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 363 (empty -> .)
    LINE            reduce using rule 363 (empty -> .)
    FILE            reduce using rule 363 (empty -> .)
    DIR             reduce using rule 363 (empty -> .)
    CLASS_C         reduce using rule 363 (empty -> .)
    METHOD_C        reduce using rule 363 (empty -> .)
    FUNC_C          reduce using rule 363 (empty -> .)
    NS_C            reduce using rule 363 (empty -> .)
    STRING          reduce using rule 363 (empty -> .)
    DOLLAR          reduce using rule 363 (empty -> .)
    VARIABLE        reduce using rule 363 (empty -> .)
    ELSEIF          reduce using rule 363 (empty -> .)
    ELSE            reduce using rule 363 (empty -> .)
    ENDIF           reduce using rule 363 (empty -> .)

    inner_statement_list           shift and go to state 647
    empty                          shift and go to state 148

state 577

    (29) statement -> IF LPAREN expr RPAREN statement . elseif_list else_single
    (58) elseif_list -> . empty
    (59) elseif_list -> . elseif_list ELSEIF LPAREN expr RPAREN statement
    (363) empty -> .

    HALT_COMPILER   reduce using rule 363 (empty -> .)
    NAMESPACE       reduce using rule 363 (empty -> .)
    CONST           reduce using rule 363 (empty -> .)
    USE             reduce using rule 363 (empty -> .)
    LBRACE          reduce using rule 363 (empty -> .)
    IF              reduce using rule 363 (empty -> .)
    WHILE           reduce using rule 363 (empty -> .)
    DO              reduce using rule 363 (empty -> .)
    FOR             reduce using rule 363 (empty -> .)
    FOREACH         reduce using rule 363 (empty -> .)
    SWITCH          reduce using rule 363 (empty -> .)
    BREAK           reduce using rule 363 (empty -> .)
    CONTINUE        reduce using rule 363 (empty -> .)
    RETURN          reduce using rule 363 (empty -> .)
    GLOBAL          reduce using rule 363 (empty -> .)
    STATIC          reduce using rule 363 (empty -> .)
    ECHO            reduce using rule 363 (empty -> .)
    INLINE_HTML     reduce using rule 363 (empty -> .)
    UNSET           reduce using rule 363 (empty -> .)
    SEMI            reduce using rule 363 (empty -> .)
    TRY             reduce using rule 363 (empty -> .)
    THROW           reduce using rule 363 (empty -> .)
    DECLARE         reduce using rule 363 (empty -> .)
    FUNCTION        reduce using rule 363 (empty -> .)
    INTERFACE       reduce using rule 363 (empty -> .)
    NEW             reduce using rule 363 (empty -> .)
    CLONE           reduce using rule 363 (empty -> .)
    LIST            reduce using rule 363 (empty -> .)
    ARRAY           reduce using rule 363 (empty -> .)
    PLUS            reduce using rule 363 (empty -> .)
    MINUS           reduce using rule 363 (empty -> .)
    NOT             reduce using rule 363 (empty -> .)
    BOOLEAN_NOT     reduce using rule 363 (empty -> .)
    INC             reduce using rule 363 (empty -> .)
    DEC             reduce using rule 363 (empty -> .)
    INT_CAST        reduce using rule 363 (empty -> .)
    DOUBLE_CAST     reduce using rule 363 (empty -> .)
    STRING_CAST     reduce using rule 363 (empty -> .)
    ARRAY_CAST      reduce using rule 363 (empty -> .)
    OBJECT_CAST     reduce using rule 363 (empty -> .)
    BOOL_CAST       reduce using rule 363 (empty -> .)
    UNSET_CAST      reduce using rule 363 (empty -> .)
    ISSET           reduce using rule 363 (empty -> .)
    EMPTY           reduce using rule 363 (empty -> .)
    EVAL            reduce using rule 363 (empty -> .)
    INCLUDE         reduce using rule 363 (empty -> .)
    INCLUDE_ONCE    reduce using rule 363 (empty -> .)
    REQUIRE         reduce using rule 363 (empty -> .)
    REQUIRE_ONCE    reduce using rule 363 (empty -> .)
    EXIT            reduce using rule 363 (empty -> .)
    PRINT           reduce using rule 363 (empty -> .)
    AT              reduce using rule 363 (empty -> .)
    LPAREN          reduce using rule 363 (empty -> .)
    CLASS           reduce using rule 363 (empty -> .)
    ABSTRACT        reduce using rule 363 (empty -> .)
    FINAL           reduce using rule 363 (empty -> .)
    QUOTE           reduce using rule 363 (empty -> .)
    START_HEREDOC   reduce using rule 363 (empty -> .)
    STRING_VARNAME  reduce using rule 363 (empty -> .)
    NS_SEPARATOR    reduce using rule 363 (empty -> .)
    LNUMBER         reduce using rule 363 (empty -> .)
    DNUMBER         reduce using rule 363 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 363 (empty -> .)
    LINE            reduce using rule 363 (empty -> .)
    FILE            reduce using rule 363 (empty -> .)
    DIR             reduce using rule 363 (empty -> .)
    CLASS_C         reduce using rule 363 (empty -> .)
    METHOD_C        reduce using rule 363 (empty -> .)
    FUNC_C          reduce using rule 363 (empty -> .)
    NS_C            reduce using rule 363 (empty -> .)
    STRING          reduce using rule 363 (empty -> .)
    DOLLAR          reduce using rule 363 (empty -> .)
    VARIABLE        reduce using rule 363 (empty -> .)
    $end            reduce using rule 363 (empty -> .)
    RBRACE          reduce using rule 363 (empty -> .)
    ELSEIF          reduce using rule 363 (empty -> .)
    ELSE            reduce using rule 363 (empty -> .)
    ENDDECLARE      reduce using rule 363 (empty -> .)
    ENDWHILE        reduce using rule 363 (empty -> .)
    ENDIF           reduce using rule 363 (empty -> .)
    ENDFOREACH      reduce using rule 363 (empty -> .)
    CASE            reduce using rule 363 (empty -> .)
    DEFAULT         reduce using rule 363 (empty -> .)
    ENDSWITCH       reduce using rule 363 (empty -> .)
    ENDFOR          reduce using rule 363 (empty -> .)

    empty                          shift and go to state 649
    elseif_list                    shift and go to state 648

state 578

    (188) function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .

    OBJECT_OPERATOR reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    EQUALS          reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    PLUS_EQUAL      reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    MINUS_EQUAL     reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    MUL_EQUAL       reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    DIV_EQUAL       reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    CONCAT_EQUAL    reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    MOD_EQUAL       reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    AND_EQUAL       reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    OR_EQUAL        reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    XOR_EQUAL       reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    SL_EQUAL        reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    SR_EQUAL        reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    INC             reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    DEC             reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_AND     reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_OR      reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_AND     reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_OR      reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_XOR     reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    AND             reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    OR              reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    XOR             reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    CONCAT          reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    PLUS            reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    MINUS           reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    MUL             reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    DIV             reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    SL              reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    SR              reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    MOD             reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_IDENTICAL    reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_EQUAL        reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_EQUAL    reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER      reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER      reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    INSTANCEOF      reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    QUESTION        reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    SEMI            reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    COMMA           reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    RPAREN          reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    AS              reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    RBRACE          reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    RBRACKET        reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    DOUBLE_ARROW    reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    COLON           reduce using rule 188 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)


state 579

    (75) foreach_variable -> AND VARIABLE .

    DOUBLE_ARROW    reduce using rule 75 (foreach_variable -> AND VARIABLE .)
    RPAREN          reduce using rule 75 (foreach_variable -> AND VARIABLE .)


state 580

    (77) foreach_optional_arg -> DOUBLE_ARROW . foreach_variable
    (74) foreach_variable -> . VARIABLE
    (75) foreach_variable -> . AND VARIABLE

    VARIABLE        shift and go to state 502
    AND             shift and go to state 500

    foreach_variable               shift and go to state 650

state 581

    (34) statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg . RPAREN foreach_statement

    RPAREN          shift and go to state 651


state 582

    (76) foreach_optional_arg -> empty .

    RPAREN          reduce using rule 76 (foreach_optional_arg -> empty .)


state 583

    (57) declare_statement -> COLON inner_statement_list . ENDDECLARE SEMI
    (22) inner_statement_list -> inner_statement_list . inner_statement
    (24) inner_statement -> . statement
    (25) inner_statement -> . function_declaration_statement
    (26) inner_statement -> . class_declaration_statement
    (27) inner_statement -> . HALT_COMPILER LPAREN RPAREN SEMI
    (28) statement -> . LBRACE inner_statement_list RBRACE
    (29) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (30) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (31) statement -> . WHILE LPAREN expr RPAREN while_statement
    (32) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (33) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (34) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (35) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (36) statement -> . BREAK SEMI
    (37) statement -> . BREAK expr SEMI
    (38) statement -> . CONTINUE SEMI
    (39) statement -> . CONTINUE expr SEMI
    (40) statement -> . RETURN SEMI
    (41) statement -> . RETURN expr SEMI
    (42) statement -> . GLOBAL global_var_list SEMI
    (43) statement -> . STATIC static_var_list SEMI
    (44) statement -> . ECHO echo_expr_list SEMI
    (45) statement -> . INLINE_HTML
    (46) statement -> . expr SEMI
    (47) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (48) statement -> . SEMI
    (49) statement -> . TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches
    (52) statement -> . THROW expr SEMI
    (53) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (103) function_declaration_statement -> . FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (104) class_declaration_statement -> . class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE
    (105) class_declaration_statement -> . INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (106) class_entry_type -> . CLASS
    (107) class_entry_type -> . ABSTRACT CLASS
    (108) class_entry_type -> . FINAL CLASS
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    ENDDECLARE      shift and go to state 652
    HALT_COMPILER   shift and go to state 285
    LBRACE          shift and go to state 47
    IF              shift and go to state 93
    WHILE           shift and go to state 57
    DO              shift and go to state 76
    FOR             shift and go to state 36
    FOREACH         shift and go to state 13
    SWITCH          shift and go to state 61
    BREAK           shift and go to state 74
    CONTINUE        shift and go to state 48
    RETURN          shift and go to state 23
    GLOBAL          shift and go to state 55
    STATIC          shift and go to state 29
    ECHO            shift and go to state 42
    INLINE_HTML     shift and go to state 88
    UNSET           shift and go to state 83
    SEMI            shift and go to state 85
    TRY             shift and go to state 43
    THROW           shift and go to state 96
    DECLARE         shift and go to state 16
    FUNCTION        shift and go to state 40
    INTERFACE       shift and go to state 21
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    CLASS           shift and go to state 20
    ABSTRACT        shift and go to state 80
    FINAL           shift and go to state 32
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_entry_type               shift and go to state 53
    inner_statement                shift and go to state 286
    class_name                     shift and go to state 54
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    function_call                  shift and go to state 27
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    function_declaration_statement shift and go to state 287
    statement                      shift and go to state 288
    class_constant                 shift and go to state 24
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    class_declaration_statement    shift and go to state 289
    compound_variable              shift and go to state 72
    expr                           shift and go to state 71

state 584

    (55) declare_list -> declare_list COMMA STRING EQUALS . static_scalar
    (334) static_scalar -> . common_scalar
    (335) static_scalar -> . QUOTE QUOTE
    (336) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (337) static_scalar -> . namespace_name
    (338) static_scalar -> . NS_SEPARATOR namespace_name
    (339) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (340) static_scalar -> . PLUS static_scalar
    (341) static_scalar -> . MINUS static_scalar
    (342) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    QUOTE           shift and go to state 417
    NS_SEPARATOR    shift and go to state 421
    NAMESPACE       shift and go to state 420
    PLUS            shift and go to state 418
    MINUS           shift and go to state 415
    ARRAY           shift and go to state 419
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89

    static_scalar                  shift and go to state 653
    common_scalar                  shift and go to state 414
    namespace_name                 shift and go to state 422

state 585

    (126) class_constant_declaration -> CONST . STRING EQUALS static_scalar

    STRING          shift and go to state 654


state 586

    (143) member_modifier -> ABSTRACT .

    PUBLIC          reduce using rule 143 (member_modifier -> ABSTRACT .)
    PROTECTED       reduce using rule 143 (member_modifier -> ABSTRACT .)
    PRIVATE         reduce using rule 143 (member_modifier -> ABSTRACT .)
    STATIC          reduce using rule 143 (member_modifier -> ABSTRACT .)
    ABSTRACT        reduce using rule 143 (member_modifier -> ABSTRACT .)
    FINAL           reduce using rule 143 (member_modifier -> ABSTRACT .)
    FUNCTION        reduce using rule 143 (member_modifier -> ABSTRACT .)
    VARIABLE        reduce using rule 143 (member_modifier -> ABSTRACT .)


state 587

    (116) class_statement_list -> class_statement_list class_statement .

    RBRACE          reduce using rule 116 (class_statement_list -> class_statement_list class_statement .)
    VAR             reduce using rule 116 (class_statement_list -> class_statement_list class_statement .)
    CONST           reduce using rule 116 (class_statement_list -> class_statement_list class_statement .)
    PUBLIC          reduce using rule 116 (class_statement_list -> class_statement_list class_statement .)
    PROTECTED       reduce using rule 116 (class_statement_list -> class_statement_list class_statement .)
    PRIVATE         reduce using rule 116 (class_statement_list -> class_statement_list class_statement .)
    STATIC          reduce using rule 116 (class_statement_list -> class_statement_list class_statement .)
    ABSTRACT        reduce using rule 116 (class_statement_list -> class_statement_list class_statement .)
    FINAL           reduce using rule 116 (class_statement_list -> class_statement_list class_statement .)
    FUNCTION        reduce using rule 116 (class_statement_list -> class_statement_list class_statement .)


state 588

    (140) member_modifier -> PROTECTED .

    PUBLIC          reduce using rule 140 (member_modifier -> PROTECTED .)
    PROTECTED       reduce using rule 140 (member_modifier -> PROTECTED .)
    PRIVATE         reduce using rule 140 (member_modifier -> PROTECTED .)
    STATIC          reduce using rule 140 (member_modifier -> PROTECTED .)
    ABSTRACT        reduce using rule 140 (member_modifier -> PROTECTED .)
    FINAL           reduce using rule 140 (member_modifier -> PROTECTED .)
    FUNCTION        reduce using rule 140 (member_modifier -> PROTECTED .)
    VARIABLE        reduce using rule 140 (member_modifier -> PROTECTED .)


state 589

    (142) member_modifier -> STATIC .

    PUBLIC          reduce using rule 142 (member_modifier -> STATIC .)
    PROTECTED       reduce using rule 142 (member_modifier -> STATIC .)
    PRIVATE         reduce using rule 142 (member_modifier -> STATIC .)
    STATIC          reduce using rule 142 (member_modifier -> STATIC .)
    ABSTRACT        reduce using rule 142 (member_modifier -> STATIC .)
    FINAL           reduce using rule 142 (member_modifier -> STATIC .)
    FUNCTION        reduce using rule 142 (member_modifier -> STATIC .)
    VARIABLE        reduce using rule 142 (member_modifier -> STATIC .)


state 590

    (144) member_modifier -> FINAL .

    PUBLIC          reduce using rule 144 (member_modifier -> FINAL .)
    PROTECTED       reduce using rule 144 (member_modifier -> FINAL .)
    PRIVATE         reduce using rule 144 (member_modifier -> FINAL .)
    STATIC          reduce using rule 144 (member_modifier -> FINAL .)
    ABSTRACT        reduce using rule 144 (member_modifier -> FINAL .)
    FINAL           reduce using rule 144 (member_modifier -> FINAL .)
    FUNCTION        reduce using rule 144 (member_modifier -> FINAL .)
    VARIABLE        reduce using rule 144 (member_modifier -> FINAL .)


state 591

    (105) class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .

    HALT_COMPILER   reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    LBRACE          reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    IF              reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    WHILE           reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    DO              reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    FOR             reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    FOREACH         reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    SWITCH          reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    BREAK           reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    CONTINUE        reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    RETURN          reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    GLOBAL          reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    STATIC          reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    ECHO            reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    INLINE_HTML     reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    UNSET           reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    SEMI            reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    TRY             reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    THROW           reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    DECLARE         reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    FUNCTION        reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    INTERFACE       reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    NEW             reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    CLONE           reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    LIST            reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    ARRAY           reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    PLUS            reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    MINUS           reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    NOT             reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    BOOLEAN_NOT     reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    INC             reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    DEC             reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    INT_CAST        reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    DOUBLE_CAST     reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    STRING_CAST     reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    ARRAY_CAST      reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    OBJECT_CAST     reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    BOOL_CAST       reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    UNSET_CAST      reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    ISSET           reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    EMPTY           reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    EVAL            reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    INCLUDE         reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    INCLUDE_ONCE    reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    REQUIRE         reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    REQUIRE_ONCE    reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    EXIT            reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    PRINT           reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    AT              reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    LPAREN          reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    CLASS           reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    ABSTRACT        reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    FINAL           reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    QUOTE           reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    START_HEREDOC   reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    STRING_VARNAME  reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    NS_SEPARATOR    reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    NAMESPACE       reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    LNUMBER         reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    DNUMBER         reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    CONSTANT_ENCAPSED_STRING reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    LINE            reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    FILE            reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    DIR             reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    CLASS_C         reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    METHOD_C        reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    FUNC_C          reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    NS_C            reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    STRING          reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    DOLLAR          reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    VARIABLE        reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    ENDIF           reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    ENDFOR          reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    ELSEIF          reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    ELSE            reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    RBRACE          reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    CONST           reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    USE             reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    ENDWHILE        reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    CASE            reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    DEFAULT         reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    ENDSWITCH       reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    ENDFOREACH      reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    $end            reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    ENDDECLARE      reduce using rule 105 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)


state 592

    (141) member_modifier -> PRIVATE .

    PUBLIC          reduce using rule 141 (member_modifier -> PRIVATE .)
    PROTECTED       reduce using rule 141 (member_modifier -> PRIVATE .)
    PRIVATE         reduce using rule 141 (member_modifier -> PRIVATE .)
    STATIC          reduce using rule 141 (member_modifier -> PRIVATE .)
    ABSTRACT        reduce using rule 141 (member_modifier -> PRIVATE .)
    FINAL           reduce using rule 141 (member_modifier -> PRIVATE .)
    FUNCTION        reduce using rule 141 (member_modifier -> PRIVATE .)
    VARIABLE        reduce using rule 141 (member_modifier -> PRIVATE .)


state 593

    (133) method_modifiers -> non_empty_member_modifiers .
    (131) variable_modifiers -> non_empty_member_modifiers .
    (137) non_empty_member_modifiers -> non_empty_member_modifiers . member_modifier
    (139) member_modifier -> . PUBLIC
    (140) member_modifier -> . PROTECTED
    (141) member_modifier -> . PRIVATE
    (142) member_modifier -> . STATIC
    (143) member_modifier -> . ABSTRACT
    (144) member_modifier -> . FINAL

    FUNCTION        reduce using rule 133 (method_modifiers -> non_empty_member_modifiers .)
    VARIABLE        reduce using rule 131 (variable_modifiers -> non_empty_member_modifiers .)
    PUBLIC          shift and go to state 599
    PROTECTED       shift and go to state 588
    PRIVATE         shift and go to state 592
    STATIC          shift and go to state 589
    ABSTRACT        shift and go to state 586
    FINAL           shift and go to state 590

    member_modifier                shift and go to state 655

state 594

    (134) method_modifiers -> empty .

    FUNCTION        reduce using rule 134 (method_modifiers -> empty .)


state 595

    (132) variable_modifiers -> VAR .

    VARIABLE        reduce using rule 132 (variable_modifiers -> VAR .)


state 596

    (119) class_statement -> variable_modifiers . class_variable_declaration SEMI
    (121) class_variable_declaration -> . class_variable_declaration COMMA VARIABLE EQUALS static_scalar
    (122) class_variable_declaration -> . VARIABLE EQUALS static_scalar
    (123) class_variable_declaration -> . class_variable_declaration COMMA VARIABLE
    (124) class_variable_declaration -> . VARIABLE

    VARIABLE        shift and go to state 656

    class_variable_declaration     shift and go to state 657

state 597

    (118) class_statement -> method_modifiers . FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body

    FUNCTION        shift and go to state 658


state 598

    (120) class_statement -> class_constant_declaration . SEMI
    (125) class_constant_declaration -> class_constant_declaration . COMMA STRING EQUALS static_scalar

    SEMI            shift and go to state 659
    COMMA           shift and go to state 660


state 599

    (139) member_modifier -> PUBLIC .

    PUBLIC          reduce using rule 139 (member_modifier -> PUBLIC .)
    PROTECTED       reduce using rule 139 (member_modifier -> PUBLIC .)
    PRIVATE         reduce using rule 139 (member_modifier -> PUBLIC .)
    STATIC          reduce using rule 139 (member_modifier -> PUBLIC .)
    ABSTRACT        reduce using rule 139 (member_modifier -> PUBLIC .)
    FINAL           reduce using rule 139 (member_modifier -> PUBLIC .)
    FUNCTION        reduce using rule 139 (member_modifier -> PUBLIC .)
    VARIABLE        reduce using rule 139 (member_modifier -> PUBLIC .)


state 600

    (138) non_empty_member_modifiers -> member_modifier .

    PUBLIC          reduce using rule 138 (non_empty_member_modifiers -> member_modifier .)
    PROTECTED       reduce using rule 138 (non_empty_member_modifiers -> member_modifier .)
    PRIVATE         reduce using rule 138 (non_empty_member_modifiers -> member_modifier .)
    STATIC          reduce using rule 138 (non_empty_member_modifiers -> member_modifier .)
    ABSTRACT        reduce using rule 138 (non_empty_member_modifiers -> member_modifier .)
    FINAL           reduce using rule 138 (non_empty_member_modifiers -> member_modifier .)
    FUNCTION        reduce using rule 138 (non_empty_member_modifiers -> member_modifier .)
    VARIABLE        reduce using rule 138 (non_empty_member_modifiers -> member_modifier .)


state 601

    (113) fully_qualified_class_name -> NAMESPACE NS_SEPARATOR namespace_name .
    (349) namespace_name -> namespace_name . NS_SEPARATOR STRING

    COMMA           reduce using rule 113 (fully_qualified_class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    LBRACE          reduce using rule 113 (fully_qualified_class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    VARIABLE        reduce using rule 113 (fully_qualified_class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    IMPLEMENTS      reduce using rule 113 (fully_qualified_class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    NS_SEPARATOR    shift and go to state 178


state 602

    (127) interface_list -> interface_list COMMA fully_qualified_class_name .

    COMMA           reduce using rule 127 (interface_list -> interface_list COMMA fully_qualified_class_name .)
    LBRACE          reduce using rule 127 (interface_list -> interface_list COMMA fully_qualified_class_name .)


state 603

    (336) static_scalar -> QUOTE ENCAPSED_AND_WHITESPACE QUOTE .

    SEMI            reduce using rule 336 (static_scalar -> QUOTE ENCAPSED_AND_WHITESPACE QUOTE .)
    COMMA           reduce using rule 336 (static_scalar -> QUOTE ENCAPSED_AND_WHITESPACE QUOTE .)
    RPAREN          reduce using rule 336 (static_scalar -> QUOTE ENCAPSED_AND_WHITESPACE QUOTE .)
    DOUBLE_ARROW    reduce using rule 336 (static_scalar -> QUOTE ENCAPSED_AND_WHITESPACE QUOTE .)


state 604

    (346) static_non_empty_array_pair_list -> static_scalar .
    (348) static_non_empty_array_pair_list -> static_scalar . DOUBLE_ARROW static_scalar

    COMMA           reduce using rule 346 (static_non_empty_array_pair_list -> static_scalar .)
    RPAREN          reduce using rule 346 (static_non_empty_array_pair_list -> static_scalar .)
    DOUBLE_ARROW    shift and go to state 661


state 605

    (343) static_array_pair_list -> empty .

    RPAREN          reduce using rule 343 (static_array_pair_list -> empty .)


state 606

    (344) static_array_pair_list -> static_non_empty_array_pair_list . possible_comma
    (345) static_non_empty_array_pair_list -> static_non_empty_array_pair_list . COMMA static_scalar
    (347) static_non_empty_array_pair_list -> static_non_empty_array_pair_list . COMMA static_scalar DOUBLE_ARROW static_scalar
    (233) possible_comma -> . empty
    (234) possible_comma -> . COMMA
    (363) empty -> .

    COMMA           shift and go to state 663
    RPAREN          reduce using rule 363 (empty -> .)

    empty                          shift and go to state 473
    possible_comma                 shift and go to state 662

state 607

    (342) static_scalar -> ARRAY LPAREN static_array_pair_list . RPAREN

    RPAREN          shift and go to state 664


state 608

    (339) static_scalar -> NAMESPACE NS_SEPARATOR namespace_name .
    (349) namespace_name -> namespace_name . NS_SEPARATOR STRING

    SEMI            reduce using rule 339 (static_scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    COMMA           reduce using rule 339 (static_scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    RPAREN          reduce using rule 339 (static_scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    DOUBLE_ARROW    reduce using rule 339 (static_scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    NS_SEPARATOR    shift and go to state 178


state 609

    (33) statement -> FOR LPAREN for_expr SEMI for_expr SEMI . for_expr RPAREN for_statement
    (68) for_expr -> . empty
    (69) for_expr -> . non_empty_for_expr
    (363) empty -> .
    (70) non_empty_for_expr -> . non_empty_for_expr COMMA expr
    (71) non_empty_for_expr -> . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    RPAREN          reduce using rule 363 (empty -> .)
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    non_empty_for_expr             shift and go to state 268
    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    empty                          shift and go to state 269
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 267
    for_expr                       shift and go to state 665

state 610

    (194) method_or_not -> LPAREN function_call_parameter_list RPAREN .

    OBJECT_OPERATOR reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    EQUALS          reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    PLUS_EQUAL      reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    MINUS_EQUAL     reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    MUL_EQUAL       reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    DIV_EQUAL       reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    CONCAT_EQUAL    reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    MOD_EQUAL       reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    AND_EQUAL       reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    OR_EQUAL        reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    XOR_EQUAL       reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    SL_EQUAL        reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    SR_EQUAL        reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    INC             reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    DEC             reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    SEMI            reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_AND     reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_OR      reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_AND     reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_OR      reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_XOR     reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    AND             reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    OR              reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    XOR             reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    CONCAT          reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    PLUS            reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    MINUS           reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    MUL             reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    DIV             reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    SL              reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    SR              reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    MOD             reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    IS_IDENTICAL    reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    IS_EQUAL        reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_EQUAL    reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER      reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER      reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    INSTANCEOF      reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    QUESTION        reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    COMMA           reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    RPAREN          reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    AS              reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    RBRACE          reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    RBRACKET        reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    DOUBLE_ARROW    reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    COLON           reduce using rule 194 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)


state 611

    (198) variable_property -> OBJECT_OPERATOR . object_property method_or_not
    (213) object_property -> . variable_name object_dim_list
    (214) object_property -> . variable_without_objects
    (218) variable_name -> . STRING
    (219) variable_name -> . LBRACE expr RBRACE
    (220) variable_without_objects -> . simple_indirect_reference
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    STRING          shift and go to state 274
    LBRACE          shift and go to state 272
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    variable_without_objects       shift and go to state 271
    object_property                shift and go to state 666
    compound_variable              shift and go to state 72
    reference_variable             shift and go to state 224
    variable_name                  shift and go to state 275
    simple_indirect_reference      shift and go to state 276

state 612

    (196) variable_properties -> variable_properties variable_property .

    OBJECT_OPERATOR reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    EQUALS          reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    PLUS_EQUAL      reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    MINUS_EQUAL     reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    MUL_EQUAL       reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    DIV_EQUAL       reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    CONCAT_EQUAL    reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    MOD_EQUAL       reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    AND_EQUAL       reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    OR_EQUAL        reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    XOR_EQUAL       reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    SL_EQUAL        reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    SR_EQUAL        reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    INC             reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    DEC             reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    SEMI            reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    BOOLEAN_AND     reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    BOOLEAN_OR      reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    LOGICAL_AND     reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    LOGICAL_OR      reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    LOGICAL_XOR     reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    AND             reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    OR              reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    XOR             reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    CONCAT          reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    PLUS            reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    MINUS           reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    MUL             reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    DIV             reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    SL              reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    SR              reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    MOD             reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    IS_IDENTICAL    reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    IS_NOT_IDENTICAL reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    IS_EQUAL        reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    IS_NOT_EQUAL    reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    IS_SMALLER      reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    IS_SMALLER_OR_EQUAL reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    IS_GREATER      reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    IS_GREATER_OR_EQUAL reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    INSTANCEOF      reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    QUESTION        reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    COMMA           reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    RPAREN          reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    AS              reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    RBRACE          reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    RBRACKET        reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    DOUBLE_ARROW    reduce using rule 196 (variable_properties -> variable_properties variable_property .)
    COLON           reduce using rule 196 (variable_properties -> variable_properties variable_property .)


state 613

    (217) object_dim_list -> object_dim_list LBRACE expr . RBRACE
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    RBRACE          shift and go to state 667
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    LOGICAL_AND     shift and go to state 181
    LOGICAL_OR      shift and go to state 202
    LOGICAL_XOR     shift and go to state 200
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188


state 614

    (216) object_dim_list -> object_dim_list LBRACKET dim_offset . RBRACKET

    RBRACKET        shift and go to state 668


state 615

    (103) function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN . LBRACE inner_statement_list RBRACE

    LBRACE          shift and go to state 669


state 616

    (155) parameter -> class_name VARIABLE EQUALS . static_scalar
    (334) static_scalar -> . common_scalar
    (335) static_scalar -> . QUOTE QUOTE
    (336) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (337) static_scalar -> . namespace_name
    (338) static_scalar -> . NS_SEPARATOR namespace_name
    (339) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (340) static_scalar -> . PLUS static_scalar
    (341) static_scalar -> . MINUS static_scalar
    (342) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    QUOTE           shift and go to state 417
    NS_SEPARATOR    shift and go to state 421
    NAMESPACE       shift and go to state 420
    PLUS            shift and go to state 418
    MINUS           shift and go to state 415
    ARRAY           shift and go to state 419
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89

    static_scalar                  shift and go to state 670
    common_scalar                  shift and go to state 414
    namespace_name                 shift and go to state 422

state 617

    (153) parameter -> class_name AND VARIABLE .
    (157) parameter -> class_name AND VARIABLE . EQUALS static_scalar

    RPAREN          reduce using rule 153 (parameter -> class_name AND VARIABLE .)
    COMMA           reduce using rule 153 (parameter -> class_name AND VARIABLE .)
    EQUALS          shift and go to state 671


state 618

    (154) parameter -> VARIABLE EQUALS static_scalar .

    RPAREN          reduce using rule 154 (parameter -> VARIABLE EQUALS static_scalar .)
    COMMA           reduce using rule 154 (parameter -> VARIABLE EQUALS static_scalar .)


state 619

    (156) parameter -> AND VARIABLE EQUALS . static_scalar
    (334) static_scalar -> . common_scalar
    (335) static_scalar -> . QUOTE QUOTE
    (336) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (337) static_scalar -> . namespace_name
    (338) static_scalar -> . NS_SEPARATOR namespace_name
    (339) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (340) static_scalar -> . PLUS static_scalar
    (341) static_scalar -> . MINUS static_scalar
    (342) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    QUOTE           shift and go to state 417
    NS_SEPARATOR    shift and go to state 421
    NAMESPACE       shift and go to state 420
    PLUS            shift and go to state 418
    MINUS           shift and go to state 415
    ARRAY           shift and go to state 419
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89

    static_scalar                  shift and go to state 672
    common_scalar                  shift and go to state 414
    namespace_name                 shift and go to state 422

state 620

    (241) lexical_vars -> USE . LPAREN lexical_var_list RPAREN

    LPAREN          shift and go to state 673


state 621

    (240) expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars . LBRACE inner_statement_list RBRACE

    LBRACE          shift and go to state 674


state 622

    (242) lexical_vars -> empty .

    LBRACE          reduce using rule 242 (lexical_vars -> empty .)


state 623

    (147) parameter_list -> parameter_list COMMA parameter .

    RPAREN          reduce using rule 147 (parameter_list -> parameter_list COMMA parameter .)
    COMMA           reduce using rule 147 (parameter_list -> parameter_list COMMA parameter .)


state 624

    (192) function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .

    OBJECT_OPERATOR reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    EQUALS          reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    PLUS_EQUAL      reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    MINUS_EQUAL     reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    MUL_EQUAL       reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    DIV_EQUAL       reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    CONCAT_EQUAL    reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    MOD_EQUAL       reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    AND_EQUAL       reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    OR_EQUAL        reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    XOR_EQUAL       reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    SL_EQUAL        reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    SR_EQUAL        reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    INC             reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    DEC             reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_AND     reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_OR      reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_AND     reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_OR      reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_XOR     reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    AND             reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    OR              reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    XOR             reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    CONCAT          reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    PLUS            reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    MINUS           reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    MUL             reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    DIV             reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    SL              reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    SR              reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    MOD             reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_IDENTICAL    reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_EQUAL        reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_EQUAL    reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER      reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER      reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    INSTANCEOF      reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    QUESTION        reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    SEMI            reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    COMMA           reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    RPAREN          reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    AS              reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    RBRACE          reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    RBRACKET        reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    DOUBLE_ARROW    reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    COLON           reduce using rule 192 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)


state 625

    (191) function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .

    OBJECT_OPERATOR reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    EQUALS          reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    PLUS_EQUAL      reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    MINUS_EQUAL     reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    MUL_EQUAL       reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    DIV_EQUAL       reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    CONCAT_EQUAL    reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    MOD_EQUAL       reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    AND_EQUAL       reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    OR_EQUAL        reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    XOR_EQUAL       reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    SL_EQUAL        reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    SR_EQUAL        reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    INC             reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    DEC             reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_AND     reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_OR      reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_AND     reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_OR      reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_XOR     reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    AND             reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    OR              reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    XOR             reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    CONCAT          reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    PLUS            reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    MINUS           reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    MUL             reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    DIV             reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    SL              reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    SR              reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    MOD             reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    IS_IDENTICAL    reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    IS_EQUAL        reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_EQUAL    reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER      reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER      reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    INSTANCEOF      reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    QUESTION        reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    SEMI            reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    COMMA           reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    RPAREN          reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    AS              reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    RBRACE          reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    RBRACKET        reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    DOUBLE_ARROW    reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    COLON           reduce using rule 191 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)


state 626

    (49) statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN . fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches
    (111) fully_qualified_class_name -> . namespace_name
    (112) fully_qualified_class_name -> . NS_SEPARATOR namespace_name
    (113) fully_qualified_class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    NS_SEPARATOR    shift and go to state 409
    NAMESPACE       shift and go to state 408
    STRING          shift and go to state 89

    fully_qualified_class_name     shift and go to state 675
    namespace_name                 shift and go to state 411

state 627

    (27) inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .

    ENDDECLARE      reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    HALT_COMPILER   reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    LBRACE          reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    IF              reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    WHILE           reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    DO              reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    FOR             reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    FOREACH         reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    SWITCH          reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    BREAK           reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    CONTINUE        reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    RETURN          reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    GLOBAL          reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    STATIC          reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    ECHO            reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    INLINE_HTML     reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    UNSET           reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    SEMI            reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    TRY             reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    THROW           reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    DECLARE         reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    FUNCTION        reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    INTERFACE       reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    NEW             reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    CLONE           reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    LIST            reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    ARRAY           reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    PLUS            reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    MINUS           reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    NOT             reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    BOOLEAN_NOT     reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    INC             reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    DEC             reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    INT_CAST        reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    DOUBLE_CAST     reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    STRING_CAST     reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    ARRAY_CAST      reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    OBJECT_CAST     reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    BOOL_CAST       reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    UNSET_CAST      reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    ISSET           reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    EMPTY           reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    EVAL            reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    INCLUDE         reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    INCLUDE_ONCE    reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    REQUIRE         reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    REQUIRE_ONCE    reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    EXIT            reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    PRINT           reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    AT              reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    LPAREN          reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    CLASS           reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    ABSTRACT        reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    FINAL           reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    QUOTE           reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    START_HEREDOC   reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    STRING_VARNAME  reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    NS_SEPARATOR    reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    NAMESPACE       reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    LNUMBER         reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    DNUMBER         reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    LINE            reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    FILE            reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    DIR             reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    CLASS_C         reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    METHOD_C        reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    FUNC_C          reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    NS_C            reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    STRING          reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    DOLLAR          reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    VARIABLE        reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    ELSEIF          reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    ELSE            reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    ENDIF           reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    RBRACE          reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    ENDWHILE        reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    CASE            reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    DEFAULT         reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    ENDSWITCH       reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    ENDFOR          reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    ENDFOREACH      reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)


state 628

    (355) encaps_var -> VARIABLE LBRACKET encaps_var_offset RBRACKET .

    QUOTE           reduce using rule 355 (encaps_var -> VARIABLE LBRACKET encaps_var_offset RBRACKET .)
    ENCAPSED_AND_WHITESPACE reduce using rule 355 (encaps_var -> VARIABLE LBRACKET encaps_var_offset RBRACKET .)
    VARIABLE        reduce using rule 355 (encaps_var -> VARIABLE LBRACKET encaps_var_offset RBRACKET .)
    DOLLAR_OPEN_CURLY_BRACES reduce using rule 355 (encaps_var -> VARIABLE LBRACKET encaps_var_offset RBRACKET .)
    CURLY_OPEN      reduce using rule 355 (encaps_var -> VARIABLE LBRACKET encaps_var_offset RBRACKET .)
    END_HEREDOC     reduce using rule 355 (encaps_var -> VARIABLE LBRACKET encaps_var_offset RBRACKET .)


state 629

    (358) encaps_var -> DOLLAR_OPEN_CURLY_BRACES STRING_VARNAME LBRACKET expr . RBRACKET RBRACE
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    RBRACKET        shift and go to state 676
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    LOGICAL_AND     shift and go to state 181
    LOGICAL_OR      shift and go to state 202
    LOGICAL_XOR     shift and go to state 200
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188


state 630

    (104) class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list . RBRACE
    (116) class_statement_list -> class_statement_list . class_statement
    (118) class_statement -> . method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body
    (119) class_statement -> . variable_modifiers class_variable_declaration SEMI
    (120) class_statement -> . class_constant_declaration SEMI
    (133) method_modifiers -> . non_empty_member_modifiers
    (134) method_modifiers -> . empty
    (131) variable_modifiers -> . non_empty_member_modifiers
    (132) variable_modifiers -> . VAR
    (125) class_constant_declaration -> . class_constant_declaration COMMA STRING EQUALS static_scalar
    (126) class_constant_declaration -> . CONST STRING EQUALS static_scalar
    (137) non_empty_member_modifiers -> . non_empty_member_modifiers member_modifier
    (138) non_empty_member_modifiers -> . member_modifier
    (363) empty -> .
    (139) member_modifier -> . PUBLIC
    (140) member_modifier -> . PROTECTED
    (141) member_modifier -> . PRIVATE
    (142) member_modifier -> . STATIC
    (143) member_modifier -> . ABSTRACT
    (144) member_modifier -> . FINAL

    RBRACE          shift and go to state 677
    VAR             shift and go to state 595
    CONST           shift and go to state 585
    FUNCTION        reduce using rule 363 (empty -> .)
    PUBLIC          shift and go to state 599
    PROTECTED       shift and go to state 588
    PRIVATE         shift and go to state 592
    STATIC          shift and go to state 589
    ABSTRACT        shift and go to state 586
    FINAL           shift and go to state 590

    variable_modifiers             shift and go to state 596
    class_constant_declaration     shift and go to state 598
    class_statement                shift and go to state 587
    method_modifiers               shift and go to state 597
    non_empty_member_modifiers     shift and go to state 593
    empty                          shift and go to state 594
    member_modifier                shift and go to state 600

state 631

    (190) function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .

    OBJECT_OPERATOR reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    EQUALS          reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    PLUS_EQUAL      reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    MINUS_EQUAL     reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    MUL_EQUAL       reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    DIV_EQUAL       reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    CONCAT_EQUAL    reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    MOD_EQUAL       reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    AND_EQUAL       reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    OR_EQUAL        reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    XOR_EQUAL       reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    SL_EQUAL        reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    SR_EQUAL        reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    INC             reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    DEC             reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_AND     reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_OR      reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_AND     reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_OR      reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_XOR     reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    AND             reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    OR              reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    XOR             reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    CONCAT          reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    PLUS            reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    MINUS           reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    MUL             reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    DIV             reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    SL              reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    SR              reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    MOD             reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_IDENTICAL    reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_EQUAL        reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_EQUAL    reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER      reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER      reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    INSTANCEOF      reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    QUESTION        reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    SEMI            reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    COMMA           reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    RPAREN          reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    AS              reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    RBRACE          reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    RBRACKET        reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    DOUBLE_ARROW    reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    COLON           reduce using rule 190 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)


state 632

    (189) function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .

    OBJECT_OPERATOR reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    EQUALS          reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    PLUS_EQUAL      reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    MINUS_EQUAL     reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    MUL_EQUAL       reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    DIV_EQUAL       reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    CONCAT_EQUAL    reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    MOD_EQUAL       reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    AND_EQUAL       reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    OR_EQUAL        reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    XOR_EQUAL       reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    SL_EQUAL        reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    SR_EQUAL        reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    INC             reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    DEC             reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_AND     reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_OR      reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_AND     reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_OR      reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_XOR     reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    AND             reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    OR              reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    XOR             reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    CONCAT          reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    PLUS            reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    MINUS           reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    MUL             reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    DIV             reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    SL              reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    SR              reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    MOD             reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    IS_IDENTICAL    reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    IS_EQUAL        reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_EQUAL    reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER      reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER      reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    INSTANCEOF      reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    QUESTION        reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    SEMI            reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    COMMA           reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    RPAREN          reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    AS              reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    RBRACE          reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    RBRACKET        reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    DOUBLE_ARROW    reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    COLON           reduce using rule 189 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)


state 633

    (67) while_statement -> COLON inner_statement_list . ENDWHILE SEMI
    (22) inner_statement_list -> inner_statement_list . inner_statement
    (24) inner_statement -> . statement
    (25) inner_statement -> . function_declaration_statement
    (26) inner_statement -> . class_declaration_statement
    (27) inner_statement -> . HALT_COMPILER LPAREN RPAREN SEMI
    (28) statement -> . LBRACE inner_statement_list RBRACE
    (29) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (30) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (31) statement -> . WHILE LPAREN expr RPAREN while_statement
    (32) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (33) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (34) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (35) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (36) statement -> . BREAK SEMI
    (37) statement -> . BREAK expr SEMI
    (38) statement -> . CONTINUE SEMI
    (39) statement -> . CONTINUE expr SEMI
    (40) statement -> . RETURN SEMI
    (41) statement -> . RETURN expr SEMI
    (42) statement -> . GLOBAL global_var_list SEMI
    (43) statement -> . STATIC static_var_list SEMI
    (44) statement -> . ECHO echo_expr_list SEMI
    (45) statement -> . INLINE_HTML
    (46) statement -> . expr SEMI
    (47) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (48) statement -> . SEMI
    (49) statement -> . TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches
    (52) statement -> . THROW expr SEMI
    (53) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (103) function_declaration_statement -> . FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (104) class_declaration_statement -> . class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE
    (105) class_declaration_statement -> . INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (106) class_entry_type -> . CLASS
    (107) class_entry_type -> . ABSTRACT CLASS
    (108) class_entry_type -> . FINAL CLASS
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    ENDWHILE        shift and go to state 678
    HALT_COMPILER   shift and go to state 285
    LBRACE          shift and go to state 47
    IF              shift and go to state 93
    WHILE           shift and go to state 57
    DO              shift and go to state 76
    FOR             shift and go to state 36
    FOREACH         shift and go to state 13
    SWITCH          shift and go to state 61
    BREAK           shift and go to state 74
    CONTINUE        shift and go to state 48
    RETURN          shift and go to state 23
    GLOBAL          shift and go to state 55
    STATIC          shift and go to state 29
    ECHO            shift and go to state 42
    INLINE_HTML     shift and go to state 88
    UNSET           shift and go to state 83
    SEMI            shift and go to state 85
    TRY             shift and go to state 43
    THROW           shift and go to state 96
    DECLARE         shift and go to state 16
    FUNCTION        shift and go to state 40
    INTERFACE       shift and go to state 21
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    CLASS           shift and go to state 20
    ABSTRACT        shift and go to state 80
    FINAL           shift and go to state 32
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_entry_type               shift and go to state 53
    inner_statement                shift and go to state 286
    class_name                     shift and go to state 54
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    function_call                  shift and go to state 27
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    function_declaration_statement shift and go to state 287
    statement                      shift and go to state 288
    class_constant                 shift and go to state 24
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    class_declaration_statement    shift and go to state 289
    compound_variable              shift and go to state 72
    expr                           shift and go to state 71

state 634

    (170) dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .

    OBJECT_OPERATOR reduce using rule 170 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    LPAREN          reduce using rule 170 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    SEMI            reduce using rule 170 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    BOOLEAN_AND     reduce using rule 170 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    BOOLEAN_OR      reduce using rule 170 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    LOGICAL_AND     reduce using rule 170 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    LOGICAL_OR      reduce using rule 170 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    LOGICAL_XOR     reduce using rule 170 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    AND             reduce using rule 170 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    OR              reduce using rule 170 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    XOR             reduce using rule 170 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    CONCAT          reduce using rule 170 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    PLUS            reduce using rule 170 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    MINUS           reduce using rule 170 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    MUL             reduce using rule 170 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    DIV             reduce using rule 170 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    SL              reduce using rule 170 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    SR              reduce using rule 170 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    MOD             reduce using rule 170 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    IS_IDENTICAL    reduce using rule 170 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    IS_NOT_IDENTICAL reduce using rule 170 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    IS_EQUAL        reduce using rule 170 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    IS_NOT_EQUAL    reduce using rule 170 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    IS_SMALLER      reduce using rule 170 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    IS_SMALLER_OR_EQUAL reduce using rule 170 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    IS_GREATER      reduce using rule 170 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    IS_GREATER_OR_EQUAL reduce using rule 170 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    INSTANCEOF      reduce using rule 170 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    QUESTION        reduce using rule 170 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    COMMA           reduce using rule 170 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    RPAREN          reduce using rule 170 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    AS              reduce using rule 170 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    RBRACE          reduce using rule 170 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    RBRACKET        reduce using rule 170 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    DOUBLE_ARROW    reduce using rule 170 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    COLON           reduce using rule 170 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)


state 635

    (172) dynamic_class_name_variable_property -> OBJECT_OPERATOR . object_property
    (213) object_property -> . variable_name object_dim_list
    (214) object_property -> . variable_without_objects
    (218) variable_name -> . STRING
    (219) variable_name -> . LBRACE expr RBRACE
    (220) variable_without_objects -> . simple_indirect_reference
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    STRING          shift and go to state 274
    LBRACE          shift and go to state 272
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    variable_without_objects       shift and go to state 271
    object_property                shift and go to state 679
    compound_variable              shift and go to state 72
    reference_variable             shift and go to state 224
    variable_name                  shift and go to state 275
    simple_indirect_reference      shift and go to state 276

state 636

    (81) switch_case_list -> LBRACE SEMI . case_list RBRACE
    (84) case_list -> . empty
    (85) case_list -> . case_list CASE expr case_separator inner_statement_list
    (86) case_list -> . case_list DEFAULT case_separator inner_statement_list
    (363) empty -> .

    RBRACE          reduce using rule 363 (empty -> .)
    CASE            reduce using rule 363 (empty -> .)
    DEFAULT         reduce using rule 363 (empty -> .)

    empty                          shift and go to state 638
    case_list                      shift and go to state 680

state 637

    (80) switch_case_list -> LBRACE case_list . RBRACE
    (85) case_list -> case_list . CASE expr case_separator inner_statement_list
    (86) case_list -> case_list . DEFAULT case_separator inner_statement_list

    RBRACE          shift and go to state 682
    CASE            shift and go to state 681
    DEFAULT         shift and go to state 683


state 638

    (84) case_list -> empty .

    ENDSWITCH       reduce using rule 84 (case_list -> empty .)
    CASE            reduce using rule 84 (case_list -> empty .)
    DEFAULT         reduce using rule 84 (case_list -> empty .)
    RBRACE          reduce using rule 84 (case_list -> empty .)


state 639

    (83) switch_case_list -> COLON SEMI . case_list ENDSWITCH SEMI
    (84) case_list -> . empty
    (85) case_list -> . case_list CASE expr case_separator inner_statement_list
    (86) case_list -> . case_list DEFAULT case_separator inner_statement_list
    (363) empty -> .

    ENDSWITCH       reduce using rule 363 (empty -> .)
    CASE            reduce using rule 363 (empty -> .)
    DEFAULT         reduce using rule 363 (empty -> .)

    empty                          shift and go to state 638
    case_list                      shift and go to state 684

state 640

    (82) switch_case_list -> COLON case_list . ENDSWITCH SEMI
    (85) case_list -> case_list . CASE expr case_separator inner_statement_list
    (86) case_list -> case_list . DEFAULT case_separator inner_statement_list

    ENDSWITCH       shift and go to state 685
    CASE            shift and go to state 681
    DEFAULT         shift and go to state 683


state 641

    (231) non_empty_array_pair_list -> expr DOUBLE_ARROW AND variable .

    COMMA           reduce using rule 231 (non_empty_array_pair_list -> expr DOUBLE_ARROW AND variable .)
    RPAREN          reduce using rule 231 (non_empty_array_pair_list -> expr DOUBLE_ARROW AND variable .)


state 642

    (229) non_empty_array_pair_list -> non_empty_array_pair_list COMMA expr DOUBLE_ARROW . AND variable
    (230) non_empty_array_pair_list -> non_empty_array_pair_list COMMA expr DOUBLE_ARROW . expr
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    AND             shift and go to state 687
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 686

state 643

    (225) non_empty_array_pair_list -> non_empty_array_pair_list COMMA AND variable .

    COMMA           reduce using rule 225 (non_empty_array_pair_list -> non_empty_array_pair_list COMMA AND variable .)
    RPAREN          reduce using rule 225 (non_empty_array_pair_list -> non_empty_array_pair_list COMMA AND variable .)


state 644

    (181) assignment_list_element -> LIST LPAREN assignment_list RPAREN .

    RPAREN          reduce using rule 181 (assignment_list_element -> LIST LPAREN assignment_list RPAREN .)
    COMMA           reduce using rule 181 (assignment_list_element -> LIST LPAREN assignment_list RPAREN .)


state 645

    (176) expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    AS              reduce using rule 176 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .)
    LOGICAL_AND     reduce using rule 176 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .)
    LOGICAL_OR      reduce using rule 176 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .)
    LOGICAL_XOR     reduce using rule 176 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .)
    SEMI            reduce using rule 176 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .)
    COMMA           reduce using rule 176 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .)
    RPAREN          reduce using rule 176 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .)
    RBRACE          reduce using rule 176 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .)
    RBRACKET        reduce using rule 176 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .)
    DOUBLE_ARROW    reduce using rule 176 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .)
    COLON           reduce using rule 176 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .)
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188

  ! BOOLEAN_AND     [ reduce using rule 176 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 176 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! AND             [ reduce using rule 176 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! OR              [ reduce using rule 176 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! XOR             [ reduce using rule 176 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! CONCAT          [ reduce using rule 176 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! PLUS            [ reduce using rule 176 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! MINUS           [ reduce using rule 176 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! MUL             [ reduce using rule 176 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! DIV             [ reduce using rule 176 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! SL              [ reduce using rule 176 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! SR              [ reduce using rule 176 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! MOD             [ reduce using rule 176 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 176 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 176 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! IS_EQUAL        [ reduce using rule 176 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 176 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! IS_SMALLER      [ reduce using rule 176 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 176 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! IS_GREATER      [ reduce using rule 176 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 176 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! INSTANCEOF      [ reduce using rule 176 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! QUESTION        [ reduce using rule 176 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! LOGICAL_AND     [ shift and go to state 181 ]
  ! LOGICAL_OR      [ shift and go to state 202 ]
  ! LOGICAL_XOR     [ shift and go to state 200 ]


state 646

    (32) statement -> DO statement WHILE LPAREN expr RPAREN . SEMI

    SEMI            shift and go to state 688


state 647

    (30) statement -> IF LPAREN expr RPAREN COLON inner_statement_list . new_elseif_list new_else_single ENDIF SEMI
    (22) inner_statement_list -> inner_statement_list . inner_statement
    (62) new_elseif_list -> . empty
    (63) new_elseif_list -> . new_elseif_list ELSEIF LPAREN expr RPAREN COLON inner_statement_list
    (24) inner_statement -> . statement
    (25) inner_statement -> . function_declaration_statement
    (26) inner_statement -> . class_declaration_statement
    (27) inner_statement -> . HALT_COMPILER LPAREN RPAREN SEMI
    (363) empty -> .
    (28) statement -> . LBRACE inner_statement_list RBRACE
    (29) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (30) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (31) statement -> . WHILE LPAREN expr RPAREN while_statement
    (32) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (33) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (34) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (35) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (36) statement -> . BREAK SEMI
    (37) statement -> . BREAK expr SEMI
    (38) statement -> . CONTINUE SEMI
    (39) statement -> . CONTINUE expr SEMI
    (40) statement -> . RETURN SEMI
    (41) statement -> . RETURN expr SEMI
    (42) statement -> . GLOBAL global_var_list SEMI
    (43) statement -> . STATIC static_var_list SEMI
    (44) statement -> . ECHO echo_expr_list SEMI
    (45) statement -> . INLINE_HTML
    (46) statement -> . expr SEMI
    (47) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (48) statement -> . SEMI
    (49) statement -> . TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches
    (52) statement -> . THROW expr SEMI
    (53) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (103) function_declaration_statement -> . FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (104) class_declaration_statement -> . class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE
    (105) class_declaration_statement -> . INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (106) class_entry_type -> . CLASS
    (107) class_entry_type -> . ABSTRACT CLASS
    (108) class_entry_type -> . FINAL CLASS
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    HALT_COMPILER   shift and go to state 285
    ELSEIF          reduce using rule 363 (empty -> .)
    ELSE            reduce using rule 363 (empty -> .)
    ENDIF           reduce using rule 363 (empty -> .)
    LBRACE          shift and go to state 47
    IF              shift and go to state 93
    WHILE           shift and go to state 57
    DO              shift and go to state 76
    FOR             shift and go to state 36
    FOREACH         shift and go to state 13
    SWITCH          shift and go to state 61
    BREAK           shift and go to state 74
    CONTINUE        shift and go to state 48
    RETURN          shift and go to state 23
    GLOBAL          shift and go to state 55
    STATIC          shift and go to state 29
    ECHO            shift and go to state 42
    INLINE_HTML     shift and go to state 88
    UNSET           shift and go to state 83
    SEMI            shift and go to state 85
    TRY             shift and go to state 43
    THROW           shift and go to state 96
    DECLARE         shift and go to state 16
    FUNCTION        shift and go to state 40
    INTERFACE       shift and go to state 21
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    CLASS           shift and go to state 20
    ABSTRACT        shift and go to state 80
    FINAL           shift and go to state 32
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_entry_type               shift and go to state 53
    inner_statement                shift and go to state 286
    class_name                     shift and go to state 54
    new_elseif_list                shift and go to state 690
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    function_call                  shift and go to state 27
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    function_declaration_statement shift and go to state 287
    statement                      shift and go to state 288
    class_constant                 shift and go to state 24
    empty                          shift and go to state 689
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    class_declaration_statement    shift and go to state 289
    compound_variable              shift and go to state 72
    expr                           shift and go to state 71

state 648

    (29) statement -> IF LPAREN expr RPAREN statement elseif_list . else_single
    (59) elseif_list -> elseif_list . ELSEIF LPAREN expr RPAREN statement
    (60) else_single -> . empty
    (61) else_single -> . ELSE statement
    (363) empty -> .

  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
    ELSEIF          shift and go to state 693
    ELSE            shift and go to state 692
    HALT_COMPILER   reduce using rule 363 (empty -> .)
    NAMESPACE       reduce using rule 363 (empty -> .)
    CONST           reduce using rule 363 (empty -> .)
    USE             reduce using rule 363 (empty -> .)
    LBRACE          reduce using rule 363 (empty -> .)
    IF              reduce using rule 363 (empty -> .)
    WHILE           reduce using rule 363 (empty -> .)
    DO              reduce using rule 363 (empty -> .)
    FOR             reduce using rule 363 (empty -> .)
    FOREACH         reduce using rule 363 (empty -> .)
    SWITCH          reduce using rule 363 (empty -> .)
    BREAK           reduce using rule 363 (empty -> .)
    CONTINUE        reduce using rule 363 (empty -> .)
    RETURN          reduce using rule 363 (empty -> .)
    GLOBAL          reduce using rule 363 (empty -> .)
    STATIC          reduce using rule 363 (empty -> .)
    ECHO            reduce using rule 363 (empty -> .)
    INLINE_HTML     reduce using rule 363 (empty -> .)
    UNSET           reduce using rule 363 (empty -> .)
    SEMI            reduce using rule 363 (empty -> .)
    TRY             reduce using rule 363 (empty -> .)
    THROW           reduce using rule 363 (empty -> .)
    DECLARE         reduce using rule 363 (empty -> .)
    FUNCTION        reduce using rule 363 (empty -> .)
    INTERFACE       reduce using rule 363 (empty -> .)
    NEW             reduce using rule 363 (empty -> .)
    CLONE           reduce using rule 363 (empty -> .)
    LIST            reduce using rule 363 (empty -> .)
    ARRAY           reduce using rule 363 (empty -> .)
    PLUS            reduce using rule 363 (empty -> .)
    MINUS           reduce using rule 363 (empty -> .)
    NOT             reduce using rule 363 (empty -> .)
    BOOLEAN_NOT     reduce using rule 363 (empty -> .)
    INC             reduce using rule 363 (empty -> .)
    DEC             reduce using rule 363 (empty -> .)
    INT_CAST        reduce using rule 363 (empty -> .)
    DOUBLE_CAST     reduce using rule 363 (empty -> .)
    STRING_CAST     reduce using rule 363 (empty -> .)
    ARRAY_CAST      reduce using rule 363 (empty -> .)
    OBJECT_CAST     reduce using rule 363 (empty -> .)
    BOOL_CAST       reduce using rule 363 (empty -> .)
    UNSET_CAST      reduce using rule 363 (empty -> .)
    ISSET           reduce using rule 363 (empty -> .)
    EMPTY           reduce using rule 363 (empty -> .)
    EVAL            reduce using rule 363 (empty -> .)
    INCLUDE         reduce using rule 363 (empty -> .)
    INCLUDE_ONCE    reduce using rule 363 (empty -> .)
    REQUIRE         reduce using rule 363 (empty -> .)
    REQUIRE_ONCE    reduce using rule 363 (empty -> .)
    EXIT            reduce using rule 363 (empty -> .)
    PRINT           reduce using rule 363 (empty -> .)
    AT              reduce using rule 363 (empty -> .)
    LPAREN          reduce using rule 363 (empty -> .)
    CLASS           reduce using rule 363 (empty -> .)
    ABSTRACT        reduce using rule 363 (empty -> .)
    FINAL           reduce using rule 363 (empty -> .)
    QUOTE           reduce using rule 363 (empty -> .)
    START_HEREDOC   reduce using rule 363 (empty -> .)
    STRING_VARNAME  reduce using rule 363 (empty -> .)
    NS_SEPARATOR    reduce using rule 363 (empty -> .)
    LNUMBER         reduce using rule 363 (empty -> .)
    DNUMBER         reduce using rule 363 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 363 (empty -> .)
    LINE            reduce using rule 363 (empty -> .)
    FILE            reduce using rule 363 (empty -> .)
    DIR             reduce using rule 363 (empty -> .)
    CLASS_C         reduce using rule 363 (empty -> .)
    METHOD_C        reduce using rule 363 (empty -> .)
    FUNC_C          reduce using rule 363 (empty -> .)
    NS_C            reduce using rule 363 (empty -> .)
    STRING          reduce using rule 363 (empty -> .)
    DOLLAR          reduce using rule 363 (empty -> .)
    VARIABLE        reduce using rule 363 (empty -> .)
    $end            reduce using rule 363 (empty -> .)
    RBRACE          reduce using rule 363 (empty -> .)
    ENDDECLARE      reduce using rule 363 (empty -> .)
    ENDWHILE        reduce using rule 363 (empty -> .)
    ENDIF           reduce using rule 363 (empty -> .)
    ENDFOREACH      reduce using rule 363 (empty -> .)
    CASE            reduce using rule 363 (empty -> .)
    DEFAULT         reduce using rule 363 (empty -> .)
    ENDSWITCH       reduce using rule 363 (empty -> .)
    ENDFOR          reduce using rule 363 (empty -> .)

  ! ELSEIF          [ reduce using rule 363 (empty -> .) ]
  ! ELSE            [ reduce using rule 363 (empty -> .) ]

    empty                          shift and go to state 694
    else_single                    shift and go to state 691

state 649

    (58) elseif_list -> empty .

    HALT_COMPILER   reduce using rule 58 (elseif_list -> empty .)
    NAMESPACE       reduce using rule 58 (elseif_list -> empty .)
    CONST           reduce using rule 58 (elseif_list -> empty .)
    USE             reduce using rule 58 (elseif_list -> empty .)
    LBRACE          reduce using rule 58 (elseif_list -> empty .)
    IF              reduce using rule 58 (elseif_list -> empty .)
    WHILE           reduce using rule 58 (elseif_list -> empty .)
    DO              reduce using rule 58 (elseif_list -> empty .)
    FOR             reduce using rule 58 (elseif_list -> empty .)
    FOREACH         reduce using rule 58 (elseif_list -> empty .)
    SWITCH          reduce using rule 58 (elseif_list -> empty .)
    BREAK           reduce using rule 58 (elseif_list -> empty .)
    CONTINUE        reduce using rule 58 (elseif_list -> empty .)
    RETURN          reduce using rule 58 (elseif_list -> empty .)
    GLOBAL          reduce using rule 58 (elseif_list -> empty .)
    STATIC          reduce using rule 58 (elseif_list -> empty .)
    ECHO            reduce using rule 58 (elseif_list -> empty .)
    INLINE_HTML     reduce using rule 58 (elseif_list -> empty .)
    UNSET           reduce using rule 58 (elseif_list -> empty .)
    SEMI            reduce using rule 58 (elseif_list -> empty .)
    TRY             reduce using rule 58 (elseif_list -> empty .)
    THROW           reduce using rule 58 (elseif_list -> empty .)
    DECLARE         reduce using rule 58 (elseif_list -> empty .)
    FUNCTION        reduce using rule 58 (elseif_list -> empty .)
    INTERFACE       reduce using rule 58 (elseif_list -> empty .)
    NEW             reduce using rule 58 (elseif_list -> empty .)
    CLONE           reduce using rule 58 (elseif_list -> empty .)
    LIST            reduce using rule 58 (elseif_list -> empty .)
    ARRAY           reduce using rule 58 (elseif_list -> empty .)
    PLUS            reduce using rule 58 (elseif_list -> empty .)
    MINUS           reduce using rule 58 (elseif_list -> empty .)
    NOT             reduce using rule 58 (elseif_list -> empty .)
    BOOLEAN_NOT     reduce using rule 58 (elseif_list -> empty .)
    INC             reduce using rule 58 (elseif_list -> empty .)
    DEC             reduce using rule 58 (elseif_list -> empty .)
    INT_CAST        reduce using rule 58 (elseif_list -> empty .)
    DOUBLE_CAST     reduce using rule 58 (elseif_list -> empty .)
    STRING_CAST     reduce using rule 58 (elseif_list -> empty .)
    ARRAY_CAST      reduce using rule 58 (elseif_list -> empty .)
    OBJECT_CAST     reduce using rule 58 (elseif_list -> empty .)
    BOOL_CAST       reduce using rule 58 (elseif_list -> empty .)
    UNSET_CAST      reduce using rule 58 (elseif_list -> empty .)
    ISSET           reduce using rule 58 (elseif_list -> empty .)
    EMPTY           reduce using rule 58 (elseif_list -> empty .)
    EVAL            reduce using rule 58 (elseif_list -> empty .)
    INCLUDE         reduce using rule 58 (elseif_list -> empty .)
    INCLUDE_ONCE    reduce using rule 58 (elseif_list -> empty .)
    REQUIRE         reduce using rule 58 (elseif_list -> empty .)
    REQUIRE_ONCE    reduce using rule 58 (elseif_list -> empty .)
    EXIT            reduce using rule 58 (elseif_list -> empty .)
    PRINT           reduce using rule 58 (elseif_list -> empty .)
    AT              reduce using rule 58 (elseif_list -> empty .)
    LPAREN          reduce using rule 58 (elseif_list -> empty .)
    CLASS           reduce using rule 58 (elseif_list -> empty .)
    ABSTRACT        reduce using rule 58 (elseif_list -> empty .)
    FINAL           reduce using rule 58 (elseif_list -> empty .)
    QUOTE           reduce using rule 58 (elseif_list -> empty .)
    START_HEREDOC   reduce using rule 58 (elseif_list -> empty .)
    STRING_VARNAME  reduce using rule 58 (elseif_list -> empty .)
    NS_SEPARATOR    reduce using rule 58 (elseif_list -> empty .)
    LNUMBER         reduce using rule 58 (elseif_list -> empty .)
    DNUMBER         reduce using rule 58 (elseif_list -> empty .)
    CONSTANT_ENCAPSED_STRING reduce using rule 58 (elseif_list -> empty .)
    LINE            reduce using rule 58 (elseif_list -> empty .)
    FILE            reduce using rule 58 (elseif_list -> empty .)
    DIR             reduce using rule 58 (elseif_list -> empty .)
    CLASS_C         reduce using rule 58 (elseif_list -> empty .)
    METHOD_C        reduce using rule 58 (elseif_list -> empty .)
    FUNC_C          reduce using rule 58 (elseif_list -> empty .)
    NS_C            reduce using rule 58 (elseif_list -> empty .)
    STRING          reduce using rule 58 (elseif_list -> empty .)
    DOLLAR          reduce using rule 58 (elseif_list -> empty .)
    VARIABLE        reduce using rule 58 (elseif_list -> empty .)
    $end            reduce using rule 58 (elseif_list -> empty .)
    RBRACE          reduce using rule 58 (elseif_list -> empty .)
    ELSEIF          reduce using rule 58 (elseif_list -> empty .)
    ELSE            reduce using rule 58 (elseif_list -> empty .)
    ENDDECLARE      reduce using rule 58 (elseif_list -> empty .)
    ENDWHILE        reduce using rule 58 (elseif_list -> empty .)
    ENDIF           reduce using rule 58 (elseif_list -> empty .)
    ENDFOREACH      reduce using rule 58 (elseif_list -> empty .)
    CASE            reduce using rule 58 (elseif_list -> empty .)
    DEFAULT         reduce using rule 58 (elseif_list -> empty .)
    ENDSWITCH       reduce using rule 58 (elseif_list -> empty .)
    ENDFOR          reduce using rule 58 (elseif_list -> empty .)


state 650

    (77) foreach_optional_arg -> DOUBLE_ARROW foreach_variable .

    RPAREN          reduce using rule 77 (foreach_optional_arg -> DOUBLE_ARROW foreach_variable .)


state 651

    (34) statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN . foreach_statement
    (78) foreach_statement -> . statement
    (79) foreach_statement -> . COLON inner_statement_list ENDFOREACH SEMI
    (28) statement -> . LBRACE inner_statement_list RBRACE
    (29) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (30) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (31) statement -> . WHILE LPAREN expr RPAREN while_statement
    (32) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (33) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (34) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (35) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (36) statement -> . BREAK SEMI
    (37) statement -> . BREAK expr SEMI
    (38) statement -> . CONTINUE SEMI
    (39) statement -> . CONTINUE expr SEMI
    (40) statement -> . RETURN SEMI
    (41) statement -> . RETURN expr SEMI
    (42) statement -> . GLOBAL global_var_list SEMI
    (43) statement -> . STATIC static_var_list SEMI
    (44) statement -> . ECHO echo_expr_list SEMI
    (45) statement -> . INLINE_HTML
    (46) statement -> . expr SEMI
    (47) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (48) statement -> . SEMI
    (49) statement -> . TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches
    (52) statement -> . THROW expr SEMI
    (53) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    COLON           shift and go to state 695
    LBRACE          shift and go to state 47
    IF              shift and go to state 93
    WHILE           shift and go to state 57
    DO              shift and go to state 76
    FOR             shift and go to state 36
    FOREACH         shift and go to state 13
    SWITCH          shift and go to state 61
    BREAK           shift and go to state 74
    CONTINUE        shift and go to state 48
    RETURN          shift and go to state 23
    GLOBAL          shift and go to state 55
    STATIC          shift and go to state 29
    ECHO            shift and go to state 42
    INLINE_HTML     shift and go to state 88
    UNSET           shift and go to state 83
    SEMI            shift and go to state 85
    TRY             shift and go to state 43
    THROW           shift and go to state 96
    DECLARE         shift and go to state 16
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    foreach_statement              shift and go to state 697
    base_variable                  shift and go to state 44
    class_constant                 shift and go to state 24
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    statement                      shift and go to state 696
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 71

state 652

    (57) declare_statement -> COLON inner_statement_list ENDDECLARE . SEMI

    SEMI            shift and go to state 698


state 653

    (55) declare_list -> declare_list COMMA STRING EQUALS static_scalar .

    RPAREN          reduce using rule 55 (declare_list -> declare_list COMMA STRING EQUALS static_scalar .)
    COMMA           reduce using rule 55 (declare_list -> declare_list COMMA STRING EQUALS static_scalar .)


state 654

    (126) class_constant_declaration -> CONST STRING . EQUALS static_scalar

    EQUALS          shift and go to state 699


state 655

    (137) non_empty_member_modifiers -> non_empty_member_modifiers member_modifier .

    PUBLIC          reduce using rule 137 (non_empty_member_modifiers -> non_empty_member_modifiers member_modifier .)
    PROTECTED       reduce using rule 137 (non_empty_member_modifiers -> non_empty_member_modifiers member_modifier .)
    PRIVATE         reduce using rule 137 (non_empty_member_modifiers -> non_empty_member_modifiers member_modifier .)
    STATIC          reduce using rule 137 (non_empty_member_modifiers -> non_empty_member_modifiers member_modifier .)
    ABSTRACT        reduce using rule 137 (non_empty_member_modifiers -> non_empty_member_modifiers member_modifier .)
    FINAL           reduce using rule 137 (non_empty_member_modifiers -> non_empty_member_modifiers member_modifier .)
    FUNCTION        reduce using rule 137 (non_empty_member_modifiers -> non_empty_member_modifiers member_modifier .)
    VARIABLE        reduce using rule 137 (non_empty_member_modifiers -> non_empty_member_modifiers member_modifier .)


state 656

    (122) class_variable_declaration -> VARIABLE . EQUALS static_scalar
    (124) class_variable_declaration -> VARIABLE .

    EQUALS          shift and go to state 700
    SEMI            reduce using rule 124 (class_variable_declaration -> VARIABLE .)
    COMMA           reduce using rule 124 (class_variable_declaration -> VARIABLE .)


state 657

    (119) class_statement -> variable_modifiers class_variable_declaration . SEMI
    (121) class_variable_declaration -> class_variable_declaration . COMMA VARIABLE EQUALS static_scalar
    (123) class_variable_declaration -> class_variable_declaration . COMMA VARIABLE

    SEMI            shift and go to state 701
    COMMA           shift and go to state 702


state 658

    (118) class_statement -> method_modifiers FUNCTION . is_reference STRING LPAREN parameter_list RPAREN method_body
    (145) is_reference -> . AND
    (146) is_reference -> . empty
    (363) empty -> .

    AND             shift and go to state 138
    STRING          reduce using rule 363 (empty -> .)

    is_reference                   shift and go to state 703
    empty                          shift and go to state 140

state 659

    (120) class_statement -> class_constant_declaration SEMI .

    RBRACE          reduce using rule 120 (class_statement -> class_constant_declaration SEMI .)
    VAR             reduce using rule 120 (class_statement -> class_constant_declaration SEMI .)
    CONST           reduce using rule 120 (class_statement -> class_constant_declaration SEMI .)
    PUBLIC          reduce using rule 120 (class_statement -> class_constant_declaration SEMI .)
    PROTECTED       reduce using rule 120 (class_statement -> class_constant_declaration SEMI .)
    PRIVATE         reduce using rule 120 (class_statement -> class_constant_declaration SEMI .)
    STATIC          reduce using rule 120 (class_statement -> class_constant_declaration SEMI .)
    ABSTRACT        reduce using rule 120 (class_statement -> class_constant_declaration SEMI .)
    FINAL           reduce using rule 120 (class_statement -> class_constant_declaration SEMI .)
    FUNCTION        reduce using rule 120 (class_statement -> class_constant_declaration SEMI .)


state 660

    (125) class_constant_declaration -> class_constant_declaration COMMA . STRING EQUALS static_scalar

    STRING          shift and go to state 704


state 661

    (348) static_non_empty_array_pair_list -> static_scalar DOUBLE_ARROW . static_scalar
    (334) static_scalar -> . common_scalar
    (335) static_scalar -> . QUOTE QUOTE
    (336) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (337) static_scalar -> . namespace_name
    (338) static_scalar -> . NS_SEPARATOR namespace_name
    (339) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (340) static_scalar -> . PLUS static_scalar
    (341) static_scalar -> . MINUS static_scalar
    (342) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    QUOTE           shift and go to state 417
    NS_SEPARATOR    shift and go to state 421
    NAMESPACE       shift and go to state 420
    PLUS            shift and go to state 418
    MINUS           shift and go to state 415
    ARRAY           shift and go to state 419
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89

    static_scalar                  shift and go to state 705
    common_scalar                  shift and go to state 414
    namespace_name                 shift and go to state 422

state 662

    (344) static_array_pair_list -> static_non_empty_array_pair_list possible_comma .

    RPAREN          reduce using rule 344 (static_array_pair_list -> static_non_empty_array_pair_list possible_comma .)


state 663

    (345) static_non_empty_array_pair_list -> static_non_empty_array_pair_list COMMA . static_scalar
    (347) static_non_empty_array_pair_list -> static_non_empty_array_pair_list COMMA . static_scalar DOUBLE_ARROW static_scalar
    (234) possible_comma -> COMMA .
    (334) static_scalar -> . common_scalar
    (335) static_scalar -> . QUOTE QUOTE
    (336) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (337) static_scalar -> . namespace_name
    (338) static_scalar -> . NS_SEPARATOR namespace_name
    (339) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (340) static_scalar -> . PLUS static_scalar
    (341) static_scalar -> . MINUS static_scalar
    (342) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    RPAREN          reduce using rule 234 (possible_comma -> COMMA .)
    QUOTE           shift and go to state 417
    NS_SEPARATOR    shift and go to state 421
    NAMESPACE       shift and go to state 420
    PLUS            shift and go to state 418
    MINUS           shift and go to state 415
    ARRAY           shift and go to state 419
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89

    static_scalar                  shift and go to state 706
    common_scalar                  shift and go to state 414
    namespace_name                 shift and go to state 422

state 664

    (342) static_scalar -> ARRAY LPAREN static_array_pair_list RPAREN .

    SEMI            reduce using rule 342 (static_scalar -> ARRAY LPAREN static_array_pair_list RPAREN .)
    COMMA           reduce using rule 342 (static_scalar -> ARRAY LPAREN static_array_pair_list RPAREN .)
    RPAREN          reduce using rule 342 (static_scalar -> ARRAY LPAREN static_array_pair_list RPAREN .)
    DOUBLE_ARROW    reduce using rule 342 (static_scalar -> ARRAY LPAREN static_array_pair_list RPAREN .)


state 665

    (33) statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr . RPAREN for_statement

    RPAREN          shift and go to state 707


state 666

    (198) variable_property -> OBJECT_OPERATOR object_property . method_or_not
    (194) method_or_not -> . LPAREN function_call_parameter_list RPAREN
    (195) method_or_not -> . empty
    (363) empty -> .

    LPAREN          shift and go to state 431
    OBJECT_OPERATOR reduce using rule 363 (empty -> .)
    EQUALS          reduce using rule 363 (empty -> .)
    PLUS_EQUAL      reduce using rule 363 (empty -> .)
    MINUS_EQUAL     reduce using rule 363 (empty -> .)
    MUL_EQUAL       reduce using rule 363 (empty -> .)
    DIV_EQUAL       reduce using rule 363 (empty -> .)
    CONCAT_EQUAL    reduce using rule 363 (empty -> .)
    MOD_EQUAL       reduce using rule 363 (empty -> .)
    AND_EQUAL       reduce using rule 363 (empty -> .)
    OR_EQUAL        reduce using rule 363 (empty -> .)
    XOR_EQUAL       reduce using rule 363 (empty -> .)
    SL_EQUAL        reduce using rule 363 (empty -> .)
    SR_EQUAL        reduce using rule 363 (empty -> .)
    INC             reduce using rule 363 (empty -> .)
    DEC             reduce using rule 363 (empty -> .)
    SEMI            reduce using rule 363 (empty -> .)
    BOOLEAN_AND     reduce using rule 363 (empty -> .)
    BOOLEAN_OR      reduce using rule 363 (empty -> .)
    LOGICAL_AND     reduce using rule 363 (empty -> .)
    LOGICAL_OR      reduce using rule 363 (empty -> .)
    LOGICAL_XOR     reduce using rule 363 (empty -> .)
    AND             reduce using rule 363 (empty -> .)
    OR              reduce using rule 363 (empty -> .)
    XOR             reduce using rule 363 (empty -> .)
    CONCAT          reduce using rule 363 (empty -> .)
    PLUS            reduce using rule 363 (empty -> .)
    MINUS           reduce using rule 363 (empty -> .)
    MUL             reduce using rule 363 (empty -> .)
    DIV             reduce using rule 363 (empty -> .)
    SL              reduce using rule 363 (empty -> .)
    SR              reduce using rule 363 (empty -> .)
    MOD             reduce using rule 363 (empty -> .)
    IS_IDENTICAL    reduce using rule 363 (empty -> .)
    IS_NOT_IDENTICAL reduce using rule 363 (empty -> .)
    IS_EQUAL        reduce using rule 363 (empty -> .)
    IS_NOT_EQUAL    reduce using rule 363 (empty -> .)
    IS_SMALLER      reduce using rule 363 (empty -> .)
    IS_SMALLER_OR_EQUAL reduce using rule 363 (empty -> .)
    IS_GREATER      reduce using rule 363 (empty -> .)
    IS_GREATER_OR_EQUAL reduce using rule 363 (empty -> .)
    INSTANCEOF      reduce using rule 363 (empty -> .)
    QUESTION        reduce using rule 363 (empty -> .)
    COMMA           reduce using rule 363 (empty -> .)
    RPAREN          reduce using rule 363 (empty -> .)
    AS              reduce using rule 363 (empty -> .)
    RBRACE          reduce using rule 363 (empty -> .)
    RBRACKET        reduce using rule 363 (empty -> .)
    DOUBLE_ARROW    reduce using rule 363 (empty -> .)
    COLON           reduce using rule 363 (empty -> .)

    empty                          shift and go to state 430
    method_or_not                  shift and go to state 708

state 667

    (217) object_dim_list -> object_dim_list LBRACE expr RBRACE .

    LBRACKET        reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    LBRACE          reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    LPAREN          reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    OBJECT_OPERATOR reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    EQUALS          reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    PLUS_EQUAL      reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    MINUS_EQUAL     reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    MUL_EQUAL       reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    DIV_EQUAL       reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    CONCAT_EQUAL    reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    MOD_EQUAL       reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    AND_EQUAL       reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    OR_EQUAL        reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    XOR_EQUAL       reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    SL_EQUAL        reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    SR_EQUAL        reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    INC             reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    DEC             reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    SEMI            reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    BOOLEAN_AND     reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    BOOLEAN_OR      reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    LOGICAL_AND     reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    LOGICAL_OR      reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    LOGICAL_XOR     reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    AND             reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    OR              reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    XOR             reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    CONCAT          reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    PLUS            reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    MINUS           reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    MUL             reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    DIV             reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    SL              reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    SR              reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    MOD             reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    IS_IDENTICAL    reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    IS_NOT_IDENTICAL reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    IS_EQUAL        reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    IS_NOT_EQUAL    reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    IS_SMALLER      reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    IS_SMALLER_OR_EQUAL reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    IS_GREATER      reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    IS_GREATER_OR_EQUAL reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    INSTANCEOF      reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    QUESTION        reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    COMMA           reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    RPAREN          reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    AS              reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    RBRACE          reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    RBRACKET        reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    DOUBLE_ARROW    reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    COLON           reduce using rule 217 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)


state 668

    (216) object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .

    LBRACKET        reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    LBRACE          reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    LPAREN          reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    OBJECT_OPERATOR reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    EQUALS          reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    PLUS_EQUAL      reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    MINUS_EQUAL     reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    MUL_EQUAL       reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    DIV_EQUAL       reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    CONCAT_EQUAL    reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    MOD_EQUAL       reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    AND_EQUAL       reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    OR_EQUAL        reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    XOR_EQUAL       reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    SL_EQUAL        reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    SR_EQUAL        reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    INC             reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    DEC             reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    SEMI            reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    BOOLEAN_AND     reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    BOOLEAN_OR      reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    LOGICAL_AND     reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    LOGICAL_OR      reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    LOGICAL_XOR     reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    AND             reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    OR              reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    XOR             reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    CONCAT          reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    PLUS            reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    MINUS           reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    MUL             reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    DIV             reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    SL              reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    SR              reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    MOD             reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    IS_IDENTICAL    reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    IS_NOT_IDENTICAL reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    IS_EQUAL        reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    IS_NOT_EQUAL    reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    IS_SMALLER      reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    IS_SMALLER_OR_EQUAL reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    IS_GREATER      reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    IS_GREATER_OR_EQUAL reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    INSTANCEOF      reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    QUESTION        reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    COMMA           reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    RPAREN          reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    AS              reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    RBRACE          reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    RBRACKET        reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    DOUBLE_ARROW    reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    COLON           reduce using rule 216 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)


state 669

    (103) function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE . inner_statement_list RBRACE
    (22) inner_statement_list -> . inner_statement_list inner_statement
    (23) inner_statement_list -> . empty
    (363) empty -> .

    RBRACE          reduce using rule 363 (empty -> .)
    HALT_COMPILER   reduce using rule 363 (empty -> .)
    LBRACE          reduce using rule 363 (empty -> .)
    IF              reduce using rule 363 (empty -> .)
    WHILE           reduce using rule 363 (empty -> .)
    DO              reduce using rule 363 (empty -> .)
    FOR             reduce using rule 363 (empty -> .)
    FOREACH         reduce using rule 363 (empty -> .)
    SWITCH          reduce using rule 363 (empty -> .)
    BREAK           reduce using rule 363 (empty -> .)
    CONTINUE        reduce using rule 363 (empty -> .)
    RETURN          reduce using rule 363 (empty -> .)
    GLOBAL          reduce using rule 363 (empty -> .)
    STATIC          reduce using rule 363 (empty -> .)
    ECHO            reduce using rule 363 (empty -> .)
    INLINE_HTML     reduce using rule 363 (empty -> .)
    UNSET           reduce using rule 363 (empty -> .)
    SEMI            reduce using rule 363 (empty -> .)
    TRY             reduce using rule 363 (empty -> .)
    THROW           reduce using rule 363 (empty -> .)
    DECLARE         reduce using rule 363 (empty -> .)
    FUNCTION        reduce using rule 363 (empty -> .)
    INTERFACE       reduce using rule 363 (empty -> .)
    NEW             reduce using rule 363 (empty -> .)
    CLONE           reduce using rule 363 (empty -> .)
    LIST            reduce using rule 363 (empty -> .)
    ARRAY           reduce using rule 363 (empty -> .)
    PLUS            reduce using rule 363 (empty -> .)
    MINUS           reduce using rule 363 (empty -> .)
    NOT             reduce using rule 363 (empty -> .)
    BOOLEAN_NOT     reduce using rule 363 (empty -> .)
    INC             reduce using rule 363 (empty -> .)
    DEC             reduce using rule 363 (empty -> .)
    INT_CAST        reduce using rule 363 (empty -> .)
    DOUBLE_CAST     reduce using rule 363 (empty -> .)
    STRING_CAST     reduce using rule 363 (empty -> .)
    ARRAY_CAST      reduce using rule 363 (empty -> .)
    OBJECT_CAST     reduce using rule 363 (empty -> .)
    BOOL_CAST       reduce using rule 363 (empty -> .)
    UNSET_CAST      reduce using rule 363 (empty -> .)
    ISSET           reduce using rule 363 (empty -> .)
    EMPTY           reduce using rule 363 (empty -> .)
    EVAL            reduce using rule 363 (empty -> .)
    INCLUDE         reduce using rule 363 (empty -> .)
    INCLUDE_ONCE    reduce using rule 363 (empty -> .)
    REQUIRE         reduce using rule 363 (empty -> .)
    REQUIRE_ONCE    reduce using rule 363 (empty -> .)
    EXIT            reduce using rule 363 (empty -> .)
    PRINT           reduce using rule 363 (empty -> .)
    AT              reduce using rule 363 (empty -> .)
    LPAREN          reduce using rule 363 (empty -> .)
    CLASS           reduce using rule 363 (empty -> .)
    ABSTRACT        reduce using rule 363 (empty -> .)
    FINAL           reduce using rule 363 (empty -> .)
    QUOTE           reduce using rule 363 (empty -> .)
    START_HEREDOC   reduce using rule 363 (empty -> .)
    STRING_VARNAME  reduce using rule 363 (empty -> .)
    NS_SEPARATOR    reduce using rule 363 (empty -> .)
    NAMESPACE       reduce using rule 363 (empty -> .)
    LNUMBER         reduce using rule 363 (empty -> .)
    DNUMBER         reduce using rule 363 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 363 (empty -> .)
    LINE            reduce using rule 363 (empty -> .)
    FILE            reduce using rule 363 (empty -> .)
    DIR             reduce using rule 363 (empty -> .)
    CLASS_C         reduce using rule 363 (empty -> .)
    METHOD_C        reduce using rule 363 (empty -> .)
    FUNC_C          reduce using rule 363 (empty -> .)
    NS_C            reduce using rule 363 (empty -> .)
    STRING          reduce using rule 363 (empty -> .)
    DOLLAR          reduce using rule 363 (empty -> .)
    VARIABLE        reduce using rule 363 (empty -> .)

    empty                          shift and go to state 148
    inner_statement_list           shift and go to state 709

state 670

    (155) parameter -> class_name VARIABLE EQUALS static_scalar .

    RPAREN          reduce using rule 155 (parameter -> class_name VARIABLE EQUALS static_scalar .)
    COMMA           reduce using rule 155 (parameter -> class_name VARIABLE EQUALS static_scalar .)


state 671

    (157) parameter -> class_name AND VARIABLE EQUALS . static_scalar
    (334) static_scalar -> . common_scalar
    (335) static_scalar -> . QUOTE QUOTE
    (336) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (337) static_scalar -> . namespace_name
    (338) static_scalar -> . NS_SEPARATOR namespace_name
    (339) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (340) static_scalar -> . PLUS static_scalar
    (341) static_scalar -> . MINUS static_scalar
    (342) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    QUOTE           shift and go to state 417
    NS_SEPARATOR    shift and go to state 421
    NAMESPACE       shift and go to state 420
    PLUS            shift and go to state 418
    MINUS           shift and go to state 415
    ARRAY           shift and go to state 419
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89

    static_scalar                  shift and go to state 710
    common_scalar                  shift and go to state 414
    namespace_name                 shift and go to state 422

state 672

    (156) parameter -> AND VARIABLE EQUALS static_scalar .

    RPAREN          reduce using rule 156 (parameter -> AND VARIABLE EQUALS static_scalar .)
    COMMA           reduce using rule 156 (parameter -> AND VARIABLE EQUALS static_scalar .)


state 673

    (241) lexical_vars -> USE LPAREN . lexical_var_list RPAREN
    (243) lexical_var_list -> . lexical_var_list COMMA AND VARIABLE
    (244) lexical_var_list -> . lexical_var_list COMMA VARIABLE
    (245) lexical_var_list -> . AND VARIABLE
    (246) lexical_var_list -> . VARIABLE

    AND             shift and go to state 711
    VARIABLE        shift and go to state 713

    lexical_var_list               shift and go to state 712

state 674

    (240) expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE . inner_statement_list RBRACE
    (22) inner_statement_list -> . inner_statement_list inner_statement
    (23) inner_statement_list -> . empty
    (363) empty -> .

    RBRACE          reduce using rule 363 (empty -> .)
    HALT_COMPILER   reduce using rule 363 (empty -> .)
    LBRACE          reduce using rule 363 (empty -> .)
    IF              reduce using rule 363 (empty -> .)
    WHILE           reduce using rule 363 (empty -> .)
    DO              reduce using rule 363 (empty -> .)
    FOR             reduce using rule 363 (empty -> .)
    FOREACH         reduce using rule 363 (empty -> .)
    SWITCH          reduce using rule 363 (empty -> .)
    BREAK           reduce using rule 363 (empty -> .)
    CONTINUE        reduce using rule 363 (empty -> .)
    RETURN          reduce using rule 363 (empty -> .)
    GLOBAL          reduce using rule 363 (empty -> .)
    STATIC          reduce using rule 363 (empty -> .)
    ECHO            reduce using rule 363 (empty -> .)
    INLINE_HTML     reduce using rule 363 (empty -> .)
    UNSET           reduce using rule 363 (empty -> .)
    SEMI            reduce using rule 363 (empty -> .)
    TRY             reduce using rule 363 (empty -> .)
    THROW           reduce using rule 363 (empty -> .)
    DECLARE         reduce using rule 363 (empty -> .)
    FUNCTION        reduce using rule 363 (empty -> .)
    INTERFACE       reduce using rule 363 (empty -> .)
    NEW             reduce using rule 363 (empty -> .)
    CLONE           reduce using rule 363 (empty -> .)
    LIST            reduce using rule 363 (empty -> .)
    ARRAY           reduce using rule 363 (empty -> .)
    PLUS            reduce using rule 363 (empty -> .)
    MINUS           reduce using rule 363 (empty -> .)
    NOT             reduce using rule 363 (empty -> .)
    BOOLEAN_NOT     reduce using rule 363 (empty -> .)
    INC             reduce using rule 363 (empty -> .)
    DEC             reduce using rule 363 (empty -> .)
    INT_CAST        reduce using rule 363 (empty -> .)
    DOUBLE_CAST     reduce using rule 363 (empty -> .)
    STRING_CAST     reduce using rule 363 (empty -> .)
    ARRAY_CAST      reduce using rule 363 (empty -> .)
    OBJECT_CAST     reduce using rule 363 (empty -> .)
    BOOL_CAST       reduce using rule 363 (empty -> .)
    UNSET_CAST      reduce using rule 363 (empty -> .)
    ISSET           reduce using rule 363 (empty -> .)
    EMPTY           reduce using rule 363 (empty -> .)
    EVAL            reduce using rule 363 (empty -> .)
    INCLUDE         reduce using rule 363 (empty -> .)
    INCLUDE_ONCE    reduce using rule 363 (empty -> .)
    REQUIRE         reduce using rule 363 (empty -> .)
    REQUIRE_ONCE    reduce using rule 363 (empty -> .)
    EXIT            reduce using rule 363 (empty -> .)
    PRINT           reduce using rule 363 (empty -> .)
    AT              reduce using rule 363 (empty -> .)
    LPAREN          reduce using rule 363 (empty -> .)
    CLASS           reduce using rule 363 (empty -> .)
    ABSTRACT        reduce using rule 363 (empty -> .)
    FINAL           reduce using rule 363 (empty -> .)
    QUOTE           reduce using rule 363 (empty -> .)
    START_HEREDOC   reduce using rule 363 (empty -> .)
    STRING_VARNAME  reduce using rule 363 (empty -> .)
    NS_SEPARATOR    reduce using rule 363 (empty -> .)
    NAMESPACE       reduce using rule 363 (empty -> .)
    LNUMBER         reduce using rule 363 (empty -> .)
    DNUMBER         reduce using rule 363 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 363 (empty -> .)
    LINE            reduce using rule 363 (empty -> .)
    FILE            reduce using rule 363 (empty -> .)
    DIR             reduce using rule 363 (empty -> .)
    CLASS_C         reduce using rule 363 (empty -> .)
    METHOD_C        reduce using rule 363 (empty -> .)
    FUNC_C          reduce using rule 363 (empty -> .)
    NS_C            reduce using rule 363 (empty -> .)
    STRING          reduce using rule 363 (empty -> .)
    DOLLAR          reduce using rule 363 (empty -> .)
    VARIABLE        reduce using rule 363 (empty -> .)

    inner_statement_list           shift and go to state 714
    empty                          shift and go to state 148

state 675

    (49) statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name . VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches

    VARIABLE        shift and go to state 715


state 676

    (358) encaps_var -> DOLLAR_OPEN_CURLY_BRACES STRING_VARNAME LBRACKET expr RBRACKET . RBRACE

    RBRACE          shift and go to state 716


state 677

    (104) class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .

    HALT_COMPILER   reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    LBRACE          reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    IF              reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    WHILE           reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    DO              reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    FOR             reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    FOREACH         reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    SWITCH          reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    BREAK           reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    CONTINUE        reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    RETURN          reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    GLOBAL          reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    STATIC          reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    ECHO            reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    INLINE_HTML     reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    UNSET           reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    SEMI            reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    TRY             reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    THROW           reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    DECLARE         reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    FUNCTION        reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    INTERFACE       reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    NEW             reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    CLONE           reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    LIST            reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    ARRAY           reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    PLUS            reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    MINUS           reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    NOT             reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    BOOLEAN_NOT     reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    INC             reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    DEC             reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    INT_CAST        reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    DOUBLE_CAST     reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    STRING_CAST     reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    ARRAY_CAST      reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    OBJECT_CAST     reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    BOOL_CAST       reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    UNSET_CAST      reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    ISSET           reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    EMPTY           reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    EVAL            reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    INCLUDE         reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    INCLUDE_ONCE    reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    REQUIRE         reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    REQUIRE_ONCE    reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    EXIT            reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    PRINT           reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    AT              reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    LPAREN          reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    CLASS           reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    ABSTRACT        reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    FINAL           reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    QUOTE           reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    START_HEREDOC   reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    STRING_VARNAME  reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    NS_SEPARATOR    reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    NAMESPACE       reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    LNUMBER         reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    DNUMBER         reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    CONSTANT_ENCAPSED_STRING reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    LINE            reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    FILE            reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    DIR             reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    CLASS_C         reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    METHOD_C        reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    FUNC_C          reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    NS_C            reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    STRING          reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    DOLLAR          reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    VARIABLE        reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    ENDIF           reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    ENDFOR          reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    ELSEIF          reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    ELSE            reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    RBRACE          reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    CONST           reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    USE             reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    ENDWHILE        reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    CASE            reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    DEFAULT         reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    ENDSWITCH       reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    ENDFOREACH      reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    $end            reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    ENDDECLARE      reduce using rule 104 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)


state 678

    (67) while_statement -> COLON inner_statement_list ENDWHILE . SEMI

    SEMI            shift and go to state 717


state 679

    (172) dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .

    OBJECT_OPERATOR reduce using rule 172 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    LPAREN          reduce using rule 172 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    SEMI            reduce using rule 172 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    BOOLEAN_AND     reduce using rule 172 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    BOOLEAN_OR      reduce using rule 172 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    LOGICAL_AND     reduce using rule 172 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    LOGICAL_OR      reduce using rule 172 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    LOGICAL_XOR     reduce using rule 172 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    AND             reduce using rule 172 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    OR              reduce using rule 172 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    XOR             reduce using rule 172 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    CONCAT          reduce using rule 172 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    PLUS            reduce using rule 172 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    MINUS           reduce using rule 172 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    MUL             reduce using rule 172 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    DIV             reduce using rule 172 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    SL              reduce using rule 172 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    SR              reduce using rule 172 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    MOD             reduce using rule 172 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    IS_IDENTICAL    reduce using rule 172 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    IS_NOT_IDENTICAL reduce using rule 172 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    IS_EQUAL        reduce using rule 172 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    IS_NOT_EQUAL    reduce using rule 172 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    IS_SMALLER      reduce using rule 172 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    IS_SMALLER_OR_EQUAL reduce using rule 172 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    IS_GREATER      reduce using rule 172 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    IS_GREATER_OR_EQUAL reduce using rule 172 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    INSTANCEOF      reduce using rule 172 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    QUESTION        reduce using rule 172 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    COMMA           reduce using rule 172 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    RPAREN          reduce using rule 172 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    AS              reduce using rule 172 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    RBRACE          reduce using rule 172 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    RBRACKET        reduce using rule 172 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    DOUBLE_ARROW    reduce using rule 172 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    COLON           reduce using rule 172 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)


state 680

    (81) switch_case_list -> LBRACE SEMI case_list . RBRACE
    (85) case_list -> case_list . CASE expr case_separator inner_statement_list
    (86) case_list -> case_list . DEFAULT case_separator inner_statement_list

    RBRACE          shift and go to state 718
    CASE            shift and go to state 681
    DEFAULT         shift and go to state 683


state 681

    (85) case_list -> case_list CASE . expr case_separator inner_statement_list
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    function_call                  shift and go to state 27
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 719

state 682

    (80) switch_case_list -> LBRACE case_list RBRACE .

    HALT_COMPILER   reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    NAMESPACE       reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    CONST           reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    USE             reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    LBRACE          reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    IF              reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    WHILE           reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    DO              reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    FOR             reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    FOREACH         reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    SWITCH          reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    BREAK           reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    CONTINUE        reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    RETURN          reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    GLOBAL          reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    STATIC          reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    ECHO            reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    INLINE_HTML     reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    UNSET           reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    SEMI            reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    TRY             reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    THROW           reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    DECLARE         reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    FUNCTION        reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    INTERFACE       reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    NEW             reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    CLONE           reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    LIST            reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    ARRAY           reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    PLUS            reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    MINUS           reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    NOT             reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    BOOLEAN_NOT     reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    INC             reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    DEC             reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    INT_CAST        reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    DOUBLE_CAST     reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    STRING_CAST     reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    ARRAY_CAST      reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    OBJECT_CAST     reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    BOOL_CAST       reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    UNSET_CAST      reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    ISSET           reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    EMPTY           reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    EVAL            reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    INCLUDE         reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    INCLUDE_ONCE    reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    REQUIRE         reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    REQUIRE_ONCE    reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    EXIT            reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    PRINT           reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    AT              reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    LPAREN          reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    CLASS           reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    ABSTRACT        reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    FINAL           reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    QUOTE           reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    START_HEREDOC   reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    STRING_VARNAME  reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    NS_SEPARATOR    reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    LNUMBER         reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    DNUMBER         reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    CONSTANT_ENCAPSED_STRING reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    LINE            reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    FILE            reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    DIR             reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    CLASS_C         reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    METHOD_C        reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    FUNC_C          reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    NS_C            reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    STRING          reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    DOLLAR          reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    VARIABLE        reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    $end            reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    RBRACE          reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    ELSEIF          reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    ELSE            reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    ENDDECLARE      reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    ENDWHILE        reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    ENDIF           reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    ENDFOREACH      reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    CASE            reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    DEFAULT         reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    ENDSWITCH       reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)
    ENDFOR          reduce using rule 80 (switch_case_list -> LBRACE case_list RBRACE .)


state 683

    (86) case_list -> case_list DEFAULT . case_separator inner_statement_list
    (87) case_separator -> . COLON
    (88) case_separator -> . SEMI

    COLON           shift and go to state 722
    SEMI            shift and go to state 720

    case_separator                 shift and go to state 721

state 684

    (83) switch_case_list -> COLON SEMI case_list . ENDSWITCH SEMI
    (85) case_list -> case_list . CASE expr case_separator inner_statement_list
    (86) case_list -> case_list . DEFAULT case_separator inner_statement_list

    ENDSWITCH       shift and go to state 723
    CASE            shift and go to state 681
    DEFAULT         shift and go to state 683


state 685

    (82) switch_case_list -> COLON case_list ENDSWITCH . SEMI

    SEMI            shift and go to state 724


state 686

    (230) non_empty_array_pair_list -> non_empty_array_pair_list COMMA expr DOUBLE_ARROW expr .
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    COMMA           reduce using rule 230 (non_empty_array_pair_list -> non_empty_array_pair_list COMMA expr DOUBLE_ARROW expr .)
    RPAREN          reduce using rule 230 (non_empty_array_pair_list -> non_empty_array_pair_list COMMA expr DOUBLE_ARROW expr .)
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    LOGICAL_AND     shift and go to state 181
    LOGICAL_OR      shift and go to state 202
    LOGICAL_XOR     shift and go to state 200
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188


state 687

    (229) non_empty_array_pair_list -> non_empty_array_pair_list COMMA expr DOUBLE_ARROW AND . variable
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NS_SEPARATOR    shift and go to state 129
    NAMESPACE       shift and go to state 128
    DOLLAR          shift and go to state 90
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    VARIABLE        shift and go to state 56

    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    class_name                     shift and go to state 124
    variable_class_name            shift and go to state 127
    compound_variable              shift and go to state 72
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 126
    variable                       shift and go to state 725
    namespace_name                 shift and go to state 130

state 688

    (32) statement -> DO statement WHILE LPAREN expr RPAREN SEMI .

    HALT_COMPILER   reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    NAMESPACE       reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    CONST           reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    USE             reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    LBRACE          reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    IF              reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    WHILE           reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    DO              reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    FOR             reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    FOREACH         reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    SWITCH          reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    BREAK           reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    CONTINUE        reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    RETURN          reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    GLOBAL          reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    STATIC          reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    ECHO            reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    INLINE_HTML     reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    UNSET           reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    SEMI            reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    TRY             reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    THROW           reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    DECLARE         reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    FUNCTION        reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    INTERFACE       reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    NEW             reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    CLONE           reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    LIST            reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    ARRAY           reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    PLUS            reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    MINUS           reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    NOT             reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    BOOLEAN_NOT     reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    INC             reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    DEC             reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    INT_CAST        reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    DOUBLE_CAST     reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    STRING_CAST     reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    ARRAY_CAST      reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    OBJECT_CAST     reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    BOOL_CAST       reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    UNSET_CAST      reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    ISSET           reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    EMPTY           reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    EVAL            reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    INCLUDE         reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    INCLUDE_ONCE    reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    REQUIRE         reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    REQUIRE_ONCE    reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    EXIT            reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    PRINT           reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    AT              reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    LPAREN          reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    CLASS           reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    ABSTRACT        reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    FINAL           reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    QUOTE           reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    START_HEREDOC   reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    STRING_VARNAME  reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    NS_SEPARATOR    reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    LNUMBER         reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    DNUMBER         reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    LINE            reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    FILE            reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    DIR             reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    CLASS_C         reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    METHOD_C        reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    FUNC_C          reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    NS_C            reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    STRING          reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    DOLLAR          reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    VARIABLE        reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    $end            reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    RBRACE          reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    ELSEIF          reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    ELSE            reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    ENDDECLARE      reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    ENDWHILE        reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    ENDIF           reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    ENDFOREACH      reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    CASE            reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    DEFAULT         reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    ENDSWITCH       reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    ENDFOR          reduce using rule 32 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)


state 689

    (62) new_elseif_list -> empty .

    ELSEIF          reduce using rule 62 (new_elseif_list -> empty .)
    ELSE            reduce using rule 62 (new_elseif_list -> empty .)
    ENDIF           reduce using rule 62 (new_elseif_list -> empty .)


state 690

    (30) statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list . new_else_single ENDIF SEMI
    (63) new_elseif_list -> new_elseif_list . ELSEIF LPAREN expr RPAREN COLON inner_statement_list
    (64) new_else_single -> . empty
    (65) new_else_single -> . ELSE COLON inner_statement_list
    (363) empty -> .

    ELSEIF          shift and go to state 728
    ELSE            shift and go to state 727
    ENDIF           reduce using rule 363 (empty -> .)

    new_else_single                shift and go to state 726
    empty                          shift and go to state 729

state 691

    (29) statement -> IF LPAREN expr RPAREN statement elseif_list else_single .

    HALT_COMPILER   reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    NAMESPACE       reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    CONST           reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    USE             reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    LBRACE          reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    IF              reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    WHILE           reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    DO              reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    FOR             reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    FOREACH         reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    SWITCH          reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    BREAK           reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    CONTINUE        reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    RETURN          reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    GLOBAL          reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    STATIC          reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    ECHO            reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    INLINE_HTML     reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    UNSET           reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    SEMI            reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    TRY             reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    THROW           reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    DECLARE         reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    FUNCTION        reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    INTERFACE       reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    NEW             reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    CLONE           reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    LIST            reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    ARRAY           reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    PLUS            reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    MINUS           reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    NOT             reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    BOOLEAN_NOT     reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    INC             reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    DEC             reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    INT_CAST        reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    DOUBLE_CAST     reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    STRING_CAST     reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    ARRAY_CAST      reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    OBJECT_CAST     reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    BOOL_CAST       reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    UNSET_CAST      reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    ISSET           reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    EMPTY           reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    EVAL            reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    INCLUDE         reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    INCLUDE_ONCE    reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    REQUIRE         reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    REQUIRE_ONCE    reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    EXIT            reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    PRINT           reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    AT              reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    LPAREN          reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    CLASS           reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    ABSTRACT        reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    FINAL           reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    QUOTE           reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    START_HEREDOC   reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    STRING_VARNAME  reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    NS_SEPARATOR    reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    LNUMBER         reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    DNUMBER         reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    CONSTANT_ENCAPSED_STRING reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    LINE            reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    FILE            reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    DIR             reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    CLASS_C         reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    METHOD_C        reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    FUNC_C          reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    NS_C            reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    STRING          reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    DOLLAR          reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    VARIABLE        reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    $end            reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    RBRACE          reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    ELSEIF          reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    ELSE            reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    ENDDECLARE      reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    ENDWHILE        reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    ENDIF           reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    ENDFOREACH      reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    CASE            reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    DEFAULT         reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    ENDSWITCH       reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    ENDFOR          reduce using rule 29 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)


state 692

    (61) else_single -> ELSE . statement
    (28) statement -> . LBRACE inner_statement_list RBRACE
    (29) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (30) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (31) statement -> . WHILE LPAREN expr RPAREN while_statement
    (32) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (33) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (34) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (35) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (36) statement -> . BREAK SEMI
    (37) statement -> . BREAK expr SEMI
    (38) statement -> . CONTINUE SEMI
    (39) statement -> . CONTINUE expr SEMI
    (40) statement -> . RETURN SEMI
    (41) statement -> . RETURN expr SEMI
    (42) statement -> . GLOBAL global_var_list SEMI
    (43) statement -> . STATIC static_var_list SEMI
    (44) statement -> . ECHO echo_expr_list SEMI
    (45) statement -> . INLINE_HTML
    (46) statement -> . expr SEMI
    (47) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (48) statement -> . SEMI
    (49) statement -> . TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches
    (52) statement -> . THROW expr SEMI
    (53) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LBRACE          shift and go to state 47
    IF              shift and go to state 93
    WHILE           shift and go to state 57
    DO              shift and go to state 76
    FOR             shift and go to state 36
    FOREACH         shift and go to state 13
    SWITCH          shift and go to state 61
    BREAK           shift and go to state 74
    CONTINUE        shift and go to state 48
    RETURN          shift and go to state 23
    GLOBAL          shift and go to state 55
    STATIC          shift and go to state 29
    ECHO            shift and go to state 42
    INLINE_HTML     shift and go to state 88
    UNSET           shift and go to state 83
    SEMI            shift and go to state 85
    TRY             shift and go to state 43
    THROW           shift and go to state 96
    DECLARE         shift and go to state 16
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    class_constant                 shift and go to state 24
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    statement                      shift and go to state 730
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 71

state 693

    (59) elseif_list -> elseif_list ELSEIF . LPAREN expr RPAREN statement

    LPAREN          shift and go to state 731


state 694

    (60) else_single -> empty .

    HALT_COMPILER   reduce using rule 60 (else_single -> empty .)
    NAMESPACE       reduce using rule 60 (else_single -> empty .)
    CONST           reduce using rule 60 (else_single -> empty .)
    USE             reduce using rule 60 (else_single -> empty .)
    LBRACE          reduce using rule 60 (else_single -> empty .)
    IF              reduce using rule 60 (else_single -> empty .)
    WHILE           reduce using rule 60 (else_single -> empty .)
    DO              reduce using rule 60 (else_single -> empty .)
    FOR             reduce using rule 60 (else_single -> empty .)
    FOREACH         reduce using rule 60 (else_single -> empty .)
    SWITCH          reduce using rule 60 (else_single -> empty .)
    BREAK           reduce using rule 60 (else_single -> empty .)
    CONTINUE        reduce using rule 60 (else_single -> empty .)
    RETURN          reduce using rule 60 (else_single -> empty .)
    GLOBAL          reduce using rule 60 (else_single -> empty .)
    STATIC          reduce using rule 60 (else_single -> empty .)
    ECHO            reduce using rule 60 (else_single -> empty .)
    INLINE_HTML     reduce using rule 60 (else_single -> empty .)
    UNSET           reduce using rule 60 (else_single -> empty .)
    SEMI            reduce using rule 60 (else_single -> empty .)
    TRY             reduce using rule 60 (else_single -> empty .)
    THROW           reduce using rule 60 (else_single -> empty .)
    DECLARE         reduce using rule 60 (else_single -> empty .)
    FUNCTION        reduce using rule 60 (else_single -> empty .)
    INTERFACE       reduce using rule 60 (else_single -> empty .)
    NEW             reduce using rule 60 (else_single -> empty .)
    CLONE           reduce using rule 60 (else_single -> empty .)
    LIST            reduce using rule 60 (else_single -> empty .)
    ARRAY           reduce using rule 60 (else_single -> empty .)
    PLUS            reduce using rule 60 (else_single -> empty .)
    MINUS           reduce using rule 60 (else_single -> empty .)
    NOT             reduce using rule 60 (else_single -> empty .)
    BOOLEAN_NOT     reduce using rule 60 (else_single -> empty .)
    INC             reduce using rule 60 (else_single -> empty .)
    DEC             reduce using rule 60 (else_single -> empty .)
    INT_CAST        reduce using rule 60 (else_single -> empty .)
    DOUBLE_CAST     reduce using rule 60 (else_single -> empty .)
    STRING_CAST     reduce using rule 60 (else_single -> empty .)
    ARRAY_CAST      reduce using rule 60 (else_single -> empty .)
    OBJECT_CAST     reduce using rule 60 (else_single -> empty .)
    BOOL_CAST       reduce using rule 60 (else_single -> empty .)
    UNSET_CAST      reduce using rule 60 (else_single -> empty .)
    ISSET           reduce using rule 60 (else_single -> empty .)
    EMPTY           reduce using rule 60 (else_single -> empty .)
    EVAL            reduce using rule 60 (else_single -> empty .)
    INCLUDE         reduce using rule 60 (else_single -> empty .)
    INCLUDE_ONCE    reduce using rule 60 (else_single -> empty .)
    REQUIRE         reduce using rule 60 (else_single -> empty .)
    REQUIRE_ONCE    reduce using rule 60 (else_single -> empty .)
    EXIT            reduce using rule 60 (else_single -> empty .)
    PRINT           reduce using rule 60 (else_single -> empty .)
    AT              reduce using rule 60 (else_single -> empty .)
    LPAREN          reduce using rule 60 (else_single -> empty .)
    CLASS           reduce using rule 60 (else_single -> empty .)
    ABSTRACT        reduce using rule 60 (else_single -> empty .)
    FINAL           reduce using rule 60 (else_single -> empty .)
    QUOTE           reduce using rule 60 (else_single -> empty .)
    START_HEREDOC   reduce using rule 60 (else_single -> empty .)
    STRING_VARNAME  reduce using rule 60 (else_single -> empty .)
    NS_SEPARATOR    reduce using rule 60 (else_single -> empty .)
    LNUMBER         reduce using rule 60 (else_single -> empty .)
    DNUMBER         reduce using rule 60 (else_single -> empty .)
    CONSTANT_ENCAPSED_STRING reduce using rule 60 (else_single -> empty .)
    LINE            reduce using rule 60 (else_single -> empty .)
    FILE            reduce using rule 60 (else_single -> empty .)
    DIR             reduce using rule 60 (else_single -> empty .)
    CLASS_C         reduce using rule 60 (else_single -> empty .)
    METHOD_C        reduce using rule 60 (else_single -> empty .)
    FUNC_C          reduce using rule 60 (else_single -> empty .)
    NS_C            reduce using rule 60 (else_single -> empty .)
    STRING          reduce using rule 60 (else_single -> empty .)
    DOLLAR          reduce using rule 60 (else_single -> empty .)
    VARIABLE        reduce using rule 60 (else_single -> empty .)
    $end            reduce using rule 60 (else_single -> empty .)
    RBRACE          reduce using rule 60 (else_single -> empty .)
    ELSEIF          reduce using rule 60 (else_single -> empty .)
    ELSE            reduce using rule 60 (else_single -> empty .)
    ENDDECLARE      reduce using rule 60 (else_single -> empty .)
    ENDWHILE        reduce using rule 60 (else_single -> empty .)
    ENDIF           reduce using rule 60 (else_single -> empty .)
    ENDFOREACH      reduce using rule 60 (else_single -> empty .)
    CASE            reduce using rule 60 (else_single -> empty .)
    DEFAULT         reduce using rule 60 (else_single -> empty .)
    ENDSWITCH       reduce using rule 60 (else_single -> empty .)
    ENDFOR          reduce using rule 60 (else_single -> empty .)


state 695

    (79) foreach_statement -> COLON . inner_statement_list ENDFOREACH SEMI
    (22) inner_statement_list -> . inner_statement_list inner_statement
    (23) inner_statement_list -> . empty
    (363) empty -> .

    ENDFOREACH      reduce using rule 363 (empty -> .)
    HALT_COMPILER   reduce using rule 363 (empty -> .)
    LBRACE          reduce using rule 363 (empty -> .)
    IF              reduce using rule 363 (empty -> .)
    WHILE           reduce using rule 363 (empty -> .)
    DO              reduce using rule 363 (empty -> .)
    FOR             reduce using rule 363 (empty -> .)
    FOREACH         reduce using rule 363 (empty -> .)
    SWITCH          reduce using rule 363 (empty -> .)
    BREAK           reduce using rule 363 (empty -> .)
    CONTINUE        reduce using rule 363 (empty -> .)
    RETURN          reduce using rule 363 (empty -> .)
    GLOBAL          reduce using rule 363 (empty -> .)
    STATIC          reduce using rule 363 (empty -> .)
    ECHO            reduce using rule 363 (empty -> .)
    INLINE_HTML     reduce using rule 363 (empty -> .)
    UNSET           reduce using rule 363 (empty -> .)
    SEMI            reduce using rule 363 (empty -> .)
    TRY             reduce using rule 363 (empty -> .)
    THROW           reduce using rule 363 (empty -> .)
    DECLARE         reduce using rule 363 (empty -> .)
    FUNCTION        reduce using rule 363 (empty -> .)
    INTERFACE       reduce using rule 363 (empty -> .)
    NEW             reduce using rule 363 (empty -> .)
    CLONE           reduce using rule 363 (empty -> .)
    LIST            reduce using rule 363 (empty -> .)
    ARRAY           reduce using rule 363 (empty -> .)
    PLUS            reduce using rule 363 (empty -> .)
    MINUS           reduce using rule 363 (empty -> .)
    NOT             reduce using rule 363 (empty -> .)
    BOOLEAN_NOT     reduce using rule 363 (empty -> .)
    INC             reduce using rule 363 (empty -> .)
    DEC             reduce using rule 363 (empty -> .)
    INT_CAST        reduce using rule 363 (empty -> .)
    DOUBLE_CAST     reduce using rule 363 (empty -> .)
    STRING_CAST     reduce using rule 363 (empty -> .)
    ARRAY_CAST      reduce using rule 363 (empty -> .)
    OBJECT_CAST     reduce using rule 363 (empty -> .)
    BOOL_CAST       reduce using rule 363 (empty -> .)
    UNSET_CAST      reduce using rule 363 (empty -> .)
    ISSET           reduce using rule 363 (empty -> .)
    EMPTY           reduce using rule 363 (empty -> .)
    EVAL            reduce using rule 363 (empty -> .)
    INCLUDE         reduce using rule 363 (empty -> .)
    INCLUDE_ONCE    reduce using rule 363 (empty -> .)
    REQUIRE         reduce using rule 363 (empty -> .)
    REQUIRE_ONCE    reduce using rule 363 (empty -> .)
    EXIT            reduce using rule 363 (empty -> .)
    PRINT           reduce using rule 363 (empty -> .)
    AT              reduce using rule 363 (empty -> .)
    LPAREN          reduce using rule 363 (empty -> .)
    CLASS           reduce using rule 363 (empty -> .)
    ABSTRACT        reduce using rule 363 (empty -> .)
    FINAL           reduce using rule 363 (empty -> .)
    QUOTE           reduce using rule 363 (empty -> .)
    START_HEREDOC   reduce using rule 363 (empty -> .)
    STRING_VARNAME  reduce using rule 363 (empty -> .)
    NS_SEPARATOR    reduce using rule 363 (empty -> .)
    NAMESPACE       reduce using rule 363 (empty -> .)
    LNUMBER         reduce using rule 363 (empty -> .)
    DNUMBER         reduce using rule 363 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 363 (empty -> .)
    LINE            reduce using rule 363 (empty -> .)
    FILE            reduce using rule 363 (empty -> .)
    DIR             reduce using rule 363 (empty -> .)
    CLASS_C         reduce using rule 363 (empty -> .)
    METHOD_C        reduce using rule 363 (empty -> .)
    FUNC_C          reduce using rule 363 (empty -> .)
    NS_C            reduce using rule 363 (empty -> .)
    STRING          reduce using rule 363 (empty -> .)
    DOLLAR          reduce using rule 363 (empty -> .)
    VARIABLE        reduce using rule 363 (empty -> .)

    inner_statement_list           shift and go to state 732
    empty                          shift and go to state 148

state 696

    (78) foreach_statement -> statement .

    HALT_COMPILER   reduce using rule 78 (foreach_statement -> statement .)
    NAMESPACE       reduce using rule 78 (foreach_statement -> statement .)
    CONST           reduce using rule 78 (foreach_statement -> statement .)
    USE             reduce using rule 78 (foreach_statement -> statement .)
    LBRACE          reduce using rule 78 (foreach_statement -> statement .)
    IF              reduce using rule 78 (foreach_statement -> statement .)
    WHILE           reduce using rule 78 (foreach_statement -> statement .)
    DO              reduce using rule 78 (foreach_statement -> statement .)
    FOR             reduce using rule 78 (foreach_statement -> statement .)
    FOREACH         reduce using rule 78 (foreach_statement -> statement .)
    SWITCH          reduce using rule 78 (foreach_statement -> statement .)
    BREAK           reduce using rule 78 (foreach_statement -> statement .)
    CONTINUE        reduce using rule 78 (foreach_statement -> statement .)
    RETURN          reduce using rule 78 (foreach_statement -> statement .)
    GLOBAL          reduce using rule 78 (foreach_statement -> statement .)
    STATIC          reduce using rule 78 (foreach_statement -> statement .)
    ECHO            reduce using rule 78 (foreach_statement -> statement .)
    INLINE_HTML     reduce using rule 78 (foreach_statement -> statement .)
    UNSET           reduce using rule 78 (foreach_statement -> statement .)
    SEMI            reduce using rule 78 (foreach_statement -> statement .)
    TRY             reduce using rule 78 (foreach_statement -> statement .)
    THROW           reduce using rule 78 (foreach_statement -> statement .)
    DECLARE         reduce using rule 78 (foreach_statement -> statement .)
    FUNCTION        reduce using rule 78 (foreach_statement -> statement .)
    INTERFACE       reduce using rule 78 (foreach_statement -> statement .)
    NEW             reduce using rule 78 (foreach_statement -> statement .)
    CLONE           reduce using rule 78 (foreach_statement -> statement .)
    LIST            reduce using rule 78 (foreach_statement -> statement .)
    ARRAY           reduce using rule 78 (foreach_statement -> statement .)
    PLUS            reduce using rule 78 (foreach_statement -> statement .)
    MINUS           reduce using rule 78 (foreach_statement -> statement .)
    NOT             reduce using rule 78 (foreach_statement -> statement .)
    BOOLEAN_NOT     reduce using rule 78 (foreach_statement -> statement .)
    INC             reduce using rule 78 (foreach_statement -> statement .)
    DEC             reduce using rule 78 (foreach_statement -> statement .)
    INT_CAST        reduce using rule 78 (foreach_statement -> statement .)
    DOUBLE_CAST     reduce using rule 78 (foreach_statement -> statement .)
    STRING_CAST     reduce using rule 78 (foreach_statement -> statement .)
    ARRAY_CAST      reduce using rule 78 (foreach_statement -> statement .)
    OBJECT_CAST     reduce using rule 78 (foreach_statement -> statement .)
    BOOL_CAST       reduce using rule 78 (foreach_statement -> statement .)
    UNSET_CAST      reduce using rule 78 (foreach_statement -> statement .)
    ISSET           reduce using rule 78 (foreach_statement -> statement .)
    EMPTY           reduce using rule 78 (foreach_statement -> statement .)
    EVAL            reduce using rule 78 (foreach_statement -> statement .)
    INCLUDE         reduce using rule 78 (foreach_statement -> statement .)
    INCLUDE_ONCE    reduce using rule 78 (foreach_statement -> statement .)
    REQUIRE         reduce using rule 78 (foreach_statement -> statement .)
    REQUIRE_ONCE    reduce using rule 78 (foreach_statement -> statement .)
    EXIT            reduce using rule 78 (foreach_statement -> statement .)
    PRINT           reduce using rule 78 (foreach_statement -> statement .)
    AT              reduce using rule 78 (foreach_statement -> statement .)
    LPAREN          reduce using rule 78 (foreach_statement -> statement .)
    CLASS           reduce using rule 78 (foreach_statement -> statement .)
    ABSTRACT        reduce using rule 78 (foreach_statement -> statement .)
    FINAL           reduce using rule 78 (foreach_statement -> statement .)
    QUOTE           reduce using rule 78 (foreach_statement -> statement .)
    START_HEREDOC   reduce using rule 78 (foreach_statement -> statement .)
    STRING_VARNAME  reduce using rule 78 (foreach_statement -> statement .)
    NS_SEPARATOR    reduce using rule 78 (foreach_statement -> statement .)
    LNUMBER         reduce using rule 78 (foreach_statement -> statement .)
    DNUMBER         reduce using rule 78 (foreach_statement -> statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 78 (foreach_statement -> statement .)
    LINE            reduce using rule 78 (foreach_statement -> statement .)
    FILE            reduce using rule 78 (foreach_statement -> statement .)
    DIR             reduce using rule 78 (foreach_statement -> statement .)
    CLASS_C         reduce using rule 78 (foreach_statement -> statement .)
    METHOD_C        reduce using rule 78 (foreach_statement -> statement .)
    FUNC_C          reduce using rule 78 (foreach_statement -> statement .)
    NS_C            reduce using rule 78 (foreach_statement -> statement .)
    STRING          reduce using rule 78 (foreach_statement -> statement .)
    DOLLAR          reduce using rule 78 (foreach_statement -> statement .)
    VARIABLE        reduce using rule 78 (foreach_statement -> statement .)
    $end            reduce using rule 78 (foreach_statement -> statement .)
    RBRACE          reduce using rule 78 (foreach_statement -> statement .)
    ELSEIF          reduce using rule 78 (foreach_statement -> statement .)
    ELSE            reduce using rule 78 (foreach_statement -> statement .)
    ENDDECLARE      reduce using rule 78 (foreach_statement -> statement .)
    ENDWHILE        reduce using rule 78 (foreach_statement -> statement .)
    ENDIF           reduce using rule 78 (foreach_statement -> statement .)
    ENDFOREACH      reduce using rule 78 (foreach_statement -> statement .)
    CASE            reduce using rule 78 (foreach_statement -> statement .)
    DEFAULT         reduce using rule 78 (foreach_statement -> statement .)
    ENDSWITCH       reduce using rule 78 (foreach_statement -> statement .)
    ENDFOR          reduce using rule 78 (foreach_statement -> statement .)


state 697

    (34) statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .

    HALT_COMPILER   reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    NAMESPACE       reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    CONST           reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    USE             reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    LBRACE          reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    IF              reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    WHILE           reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    DO              reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    FOR             reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    FOREACH         reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    SWITCH          reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    BREAK           reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    CONTINUE        reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    RETURN          reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    GLOBAL          reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    STATIC          reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    ECHO            reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    INLINE_HTML     reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    UNSET           reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    SEMI            reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    TRY             reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    THROW           reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    DECLARE         reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    FUNCTION        reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    INTERFACE       reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    NEW             reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    CLONE           reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    LIST            reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    ARRAY           reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    PLUS            reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    MINUS           reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    NOT             reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    BOOLEAN_NOT     reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    INC             reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    DEC             reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    INT_CAST        reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    DOUBLE_CAST     reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    STRING_CAST     reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    ARRAY_CAST      reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    OBJECT_CAST     reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    BOOL_CAST       reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    UNSET_CAST      reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    ISSET           reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    EMPTY           reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    EVAL            reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    INCLUDE         reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    INCLUDE_ONCE    reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    REQUIRE         reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    REQUIRE_ONCE    reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    EXIT            reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    PRINT           reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    AT              reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    LPAREN          reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    CLASS           reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    ABSTRACT        reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    FINAL           reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    QUOTE           reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    START_HEREDOC   reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    STRING_VARNAME  reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    NS_SEPARATOR    reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    LNUMBER         reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    DNUMBER         reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    LINE            reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    FILE            reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    DIR             reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    CLASS_C         reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    METHOD_C        reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    FUNC_C          reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    NS_C            reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    STRING          reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    DOLLAR          reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    VARIABLE        reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    $end            reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    RBRACE          reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    ELSEIF          reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    ELSE            reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    ENDDECLARE      reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    ENDWHILE        reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    ENDIF           reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    ENDFOREACH      reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    CASE            reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    DEFAULT         reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    ENDSWITCH       reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    ENDFOR          reduce using rule 34 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)


state 698

    (57) declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .

    HALT_COMPILER   reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    NAMESPACE       reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    CONST           reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    USE             reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    LBRACE          reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    IF              reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    WHILE           reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    DO              reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    FOR             reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    FOREACH         reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    SWITCH          reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    BREAK           reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    CONTINUE        reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    RETURN          reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    GLOBAL          reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    STATIC          reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    ECHO            reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    INLINE_HTML     reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    UNSET           reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    SEMI            reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    TRY             reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    THROW           reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    DECLARE         reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    FUNCTION        reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    INTERFACE       reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    NEW             reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    CLONE           reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    LIST            reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    ARRAY           reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    PLUS            reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    MINUS           reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    NOT             reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    BOOLEAN_NOT     reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    INC             reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    DEC             reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    INT_CAST        reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    DOUBLE_CAST     reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    STRING_CAST     reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    ARRAY_CAST      reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    OBJECT_CAST     reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    BOOL_CAST       reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    UNSET_CAST      reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    ISSET           reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    EMPTY           reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    EVAL            reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    INCLUDE         reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    INCLUDE_ONCE    reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    REQUIRE         reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    REQUIRE_ONCE    reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    EXIT            reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    PRINT           reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    AT              reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    LPAREN          reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    CLASS           reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    ABSTRACT        reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    FINAL           reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    QUOTE           reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    START_HEREDOC   reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    STRING_VARNAME  reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    NS_SEPARATOR    reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    LNUMBER         reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    DNUMBER         reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    LINE            reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    FILE            reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    DIR             reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    CLASS_C         reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    METHOD_C        reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    FUNC_C          reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    NS_C            reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    STRING          reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    DOLLAR          reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    VARIABLE        reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    $end            reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    RBRACE          reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    ELSEIF          reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    ELSE            reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    ENDDECLARE      reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    ENDWHILE        reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    ENDIF           reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    ENDFOREACH      reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    CASE            reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    DEFAULT         reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    ENDSWITCH       reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    ENDFOR          reduce using rule 57 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)


state 699

    (126) class_constant_declaration -> CONST STRING EQUALS . static_scalar
    (334) static_scalar -> . common_scalar
    (335) static_scalar -> . QUOTE QUOTE
    (336) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (337) static_scalar -> . namespace_name
    (338) static_scalar -> . NS_SEPARATOR namespace_name
    (339) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (340) static_scalar -> . PLUS static_scalar
    (341) static_scalar -> . MINUS static_scalar
    (342) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    QUOTE           shift and go to state 417
    NS_SEPARATOR    shift and go to state 421
    NAMESPACE       shift and go to state 420
    PLUS            shift and go to state 418
    MINUS           shift and go to state 415
    ARRAY           shift and go to state 419
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89

    static_scalar                  shift and go to state 733
    common_scalar                  shift and go to state 414
    namespace_name                 shift and go to state 422

state 700

    (122) class_variable_declaration -> VARIABLE EQUALS . static_scalar
    (334) static_scalar -> . common_scalar
    (335) static_scalar -> . QUOTE QUOTE
    (336) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (337) static_scalar -> . namespace_name
    (338) static_scalar -> . NS_SEPARATOR namespace_name
    (339) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (340) static_scalar -> . PLUS static_scalar
    (341) static_scalar -> . MINUS static_scalar
    (342) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    QUOTE           shift and go to state 417
    NS_SEPARATOR    shift and go to state 421
    NAMESPACE       shift and go to state 420
    PLUS            shift and go to state 418
    MINUS           shift and go to state 415
    ARRAY           shift and go to state 419
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89

    static_scalar                  shift and go to state 734
    common_scalar                  shift and go to state 414
    namespace_name                 shift and go to state 422

state 701

    (119) class_statement -> variable_modifiers class_variable_declaration SEMI .

    RBRACE          reduce using rule 119 (class_statement -> variable_modifiers class_variable_declaration SEMI .)
    VAR             reduce using rule 119 (class_statement -> variable_modifiers class_variable_declaration SEMI .)
    CONST           reduce using rule 119 (class_statement -> variable_modifiers class_variable_declaration SEMI .)
    PUBLIC          reduce using rule 119 (class_statement -> variable_modifiers class_variable_declaration SEMI .)
    PROTECTED       reduce using rule 119 (class_statement -> variable_modifiers class_variable_declaration SEMI .)
    PRIVATE         reduce using rule 119 (class_statement -> variable_modifiers class_variable_declaration SEMI .)
    STATIC          reduce using rule 119 (class_statement -> variable_modifiers class_variable_declaration SEMI .)
    ABSTRACT        reduce using rule 119 (class_statement -> variable_modifiers class_variable_declaration SEMI .)
    FINAL           reduce using rule 119 (class_statement -> variable_modifiers class_variable_declaration SEMI .)
    FUNCTION        reduce using rule 119 (class_statement -> variable_modifiers class_variable_declaration SEMI .)


state 702

    (121) class_variable_declaration -> class_variable_declaration COMMA . VARIABLE EQUALS static_scalar
    (123) class_variable_declaration -> class_variable_declaration COMMA . VARIABLE

    VARIABLE        shift and go to state 735


state 703

    (118) class_statement -> method_modifiers FUNCTION is_reference . STRING LPAREN parameter_list RPAREN method_body

    STRING          shift and go to state 736


state 704

    (125) class_constant_declaration -> class_constant_declaration COMMA STRING . EQUALS static_scalar

    EQUALS          shift and go to state 737


state 705

    (348) static_non_empty_array_pair_list -> static_scalar DOUBLE_ARROW static_scalar .

    COMMA           reduce using rule 348 (static_non_empty_array_pair_list -> static_scalar DOUBLE_ARROW static_scalar .)
    RPAREN          reduce using rule 348 (static_non_empty_array_pair_list -> static_scalar DOUBLE_ARROW static_scalar .)


state 706

    (345) static_non_empty_array_pair_list -> static_non_empty_array_pair_list COMMA static_scalar .
    (347) static_non_empty_array_pair_list -> static_non_empty_array_pair_list COMMA static_scalar . DOUBLE_ARROW static_scalar

    COMMA           reduce using rule 345 (static_non_empty_array_pair_list -> static_non_empty_array_pair_list COMMA static_scalar .)
    RPAREN          reduce using rule 345 (static_non_empty_array_pair_list -> static_non_empty_array_pair_list COMMA static_scalar .)
    DOUBLE_ARROW    shift and go to state 738


state 707

    (33) statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN . for_statement
    (72) for_statement -> . statement
    (73) for_statement -> . COLON inner_statement_list ENDFOR SEMI
    (28) statement -> . LBRACE inner_statement_list RBRACE
    (29) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (30) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (31) statement -> . WHILE LPAREN expr RPAREN while_statement
    (32) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (33) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (34) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (35) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (36) statement -> . BREAK SEMI
    (37) statement -> . BREAK expr SEMI
    (38) statement -> . CONTINUE SEMI
    (39) statement -> . CONTINUE expr SEMI
    (40) statement -> . RETURN SEMI
    (41) statement -> . RETURN expr SEMI
    (42) statement -> . GLOBAL global_var_list SEMI
    (43) statement -> . STATIC static_var_list SEMI
    (44) statement -> . ECHO echo_expr_list SEMI
    (45) statement -> . INLINE_HTML
    (46) statement -> . expr SEMI
    (47) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (48) statement -> . SEMI
    (49) statement -> . TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches
    (52) statement -> . THROW expr SEMI
    (53) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    COLON           shift and go to state 740
    LBRACE          shift and go to state 47
    IF              shift and go to state 93
    WHILE           shift and go to state 57
    DO              shift and go to state 76
    FOR             shift and go to state 36
    FOREACH         shift and go to state 13
    SWITCH          shift and go to state 61
    BREAK           shift and go to state 74
    CONTINUE        shift and go to state 48
    RETURN          shift and go to state 23
    GLOBAL          shift and go to state 55
    STATIC          shift and go to state 29
    ECHO            shift and go to state 42
    INLINE_HTML     shift and go to state 88
    UNSET           shift and go to state 83
    SEMI            shift and go to state 85
    TRY             shift and go to state 43
    THROW           shift and go to state 96
    DECLARE         shift and go to state 16
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    class_constant                 shift and go to state 24
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    statement                      shift and go to state 741
    for_statement                  shift and go to state 739
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 71

state 708

    (198) variable_property -> OBJECT_OPERATOR object_property method_or_not .

    OBJECT_OPERATOR reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    EQUALS          reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    PLUS_EQUAL      reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    MINUS_EQUAL     reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    MUL_EQUAL       reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    DIV_EQUAL       reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    CONCAT_EQUAL    reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    MOD_EQUAL       reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    AND_EQUAL       reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    OR_EQUAL        reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    XOR_EQUAL       reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    SL_EQUAL        reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    SR_EQUAL        reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    INC             reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    DEC             reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    SEMI            reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    BOOLEAN_AND     reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    BOOLEAN_OR      reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    LOGICAL_AND     reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    LOGICAL_OR      reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    LOGICAL_XOR     reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    AND             reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    OR              reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    XOR             reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    CONCAT          reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    PLUS            reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    MINUS           reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    MUL             reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    DIV             reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    SL              reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    SR              reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    MOD             reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    IS_IDENTICAL    reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    IS_NOT_IDENTICAL reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    IS_EQUAL        reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    IS_NOT_EQUAL    reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    IS_SMALLER      reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    IS_SMALLER_OR_EQUAL reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    IS_GREATER      reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    IS_GREATER_OR_EQUAL reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    INSTANCEOF      reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    QUESTION        reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    COMMA           reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    RPAREN          reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    AS              reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    RBRACE          reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    RBRACKET        reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    DOUBLE_ARROW    reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    COLON           reduce using rule 198 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)


state 709

    (103) function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list . RBRACE
    (22) inner_statement_list -> inner_statement_list . inner_statement
    (24) inner_statement -> . statement
    (25) inner_statement -> . function_declaration_statement
    (26) inner_statement -> . class_declaration_statement
    (27) inner_statement -> . HALT_COMPILER LPAREN RPAREN SEMI
    (28) statement -> . LBRACE inner_statement_list RBRACE
    (29) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (30) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (31) statement -> . WHILE LPAREN expr RPAREN while_statement
    (32) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (33) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (34) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (35) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (36) statement -> . BREAK SEMI
    (37) statement -> . BREAK expr SEMI
    (38) statement -> . CONTINUE SEMI
    (39) statement -> . CONTINUE expr SEMI
    (40) statement -> . RETURN SEMI
    (41) statement -> . RETURN expr SEMI
    (42) statement -> . GLOBAL global_var_list SEMI
    (43) statement -> . STATIC static_var_list SEMI
    (44) statement -> . ECHO echo_expr_list SEMI
    (45) statement -> . INLINE_HTML
    (46) statement -> . expr SEMI
    (47) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (48) statement -> . SEMI
    (49) statement -> . TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches
    (52) statement -> . THROW expr SEMI
    (53) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (103) function_declaration_statement -> . FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (104) class_declaration_statement -> . class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE
    (105) class_declaration_statement -> . INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (106) class_entry_type -> . CLASS
    (107) class_entry_type -> . ABSTRACT CLASS
    (108) class_entry_type -> . FINAL CLASS
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    RBRACE          shift and go to state 742
    HALT_COMPILER   shift and go to state 285
    LBRACE          shift and go to state 47
    IF              shift and go to state 93
    WHILE           shift and go to state 57
    DO              shift and go to state 76
    FOR             shift and go to state 36
    FOREACH         shift and go to state 13
    SWITCH          shift and go to state 61
    BREAK           shift and go to state 74
    CONTINUE        shift and go to state 48
    RETURN          shift and go to state 23
    GLOBAL          shift and go to state 55
    STATIC          shift and go to state 29
    ECHO            shift and go to state 42
    INLINE_HTML     shift and go to state 88
    UNSET           shift and go to state 83
    SEMI            shift and go to state 85
    TRY             shift and go to state 43
    THROW           shift and go to state 96
    DECLARE         shift and go to state 16
    FUNCTION        shift and go to state 40
    INTERFACE       shift and go to state 21
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    CLASS           shift and go to state 20
    ABSTRACT        shift and go to state 80
    FINAL           shift and go to state 32
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_entry_type               shift and go to state 53
    inner_statement                shift and go to state 286
    class_name                     shift and go to state 54
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    function_call                  shift and go to state 27
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    function_declaration_statement shift and go to state 287
    statement                      shift and go to state 288
    class_constant                 shift and go to state 24
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    class_declaration_statement    shift and go to state 289
    compound_variable              shift and go to state 72
    expr                           shift and go to state 71

state 710

    (157) parameter -> class_name AND VARIABLE EQUALS static_scalar .

    RPAREN          reduce using rule 157 (parameter -> class_name AND VARIABLE EQUALS static_scalar .)
    COMMA           reduce using rule 157 (parameter -> class_name AND VARIABLE EQUALS static_scalar .)


state 711

    (245) lexical_var_list -> AND . VARIABLE

    VARIABLE        shift and go to state 743


state 712

    (241) lexical_vars -> USE LPAREN lexical_var_list . RPAREN
    (243) lexical_var_list -> lexical_var_list . COMMA AND VARIABLE
    (244) lexical_var_list -> lexical_var_list . COMMA VARIABLE

    RPAREN          shift and go to state 744
    COMMA           shift and go to state 745


state 713

    (246) lexical_var_list -> VARIABLE .

    RPAREN          reduce using rule 246 (lexical_var_list -> VARIABLE .)
    COMMA           reduce using rule 246 (lexical_var_list -> VARIABLE .)


state 714

    (240) expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list . RBRACE
    (22) inner_statement_list -> inner_statement_list . inner_statement
    (24) inner_statement -> . statement
    (25) inner_statement -> . function_declaration_statement
    (26) inner_statement -> . class_declaration_statement
    (27) inner_statement -> . HALT_COMPILER LPAREN RPAREN SEMI
    (28) statement -> . LBRACE inner_statement_list RBRACE
    (29) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (30) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (31) statement -> . WHILE LPAREN expr RPAREN while_statement
    (32) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (33) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (34) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (35) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (36) statement -> . BREAK SEMI
    (37) statement -> . BREAK expr SEMI
    (38) statement -> . CONTINUE SEMI
    (39) statement -> . CONTINUE expr SEMI
    (40) statement -> . RETURN SEMI
    (41) statement -> . RETURN expr SEMI
    (42) statement -> . GLOBAL global_var_list SEMI
    (43) statement -> . STATIC static_var_list SEMI
    (44) statement -> . ECHO echo_expr_list SEMI
    (45) statement -> . INLINE_HTML
    (46) statement -> . expr SEMI
    (47) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (48) statement -> . SEMI
    (49) statement -> . TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches
    (52) statement -> . THROW expr SEMI
    (53) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (103) function_declaration_statement -> . FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (104) class_declaration_statement -> . class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE
    (105) class_declaration_statement -> . INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (106) class_entry_type -> . CLASS
    (107) class_entry_type -> . ABSTRACT CLASS
    (108) class_entry_type -> . FINAL CLASS
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    RBRACE          shift and go to state 746
    HALT_COMPILER   shift and go to state 285
    LBRACE          shift and go to state 47
    IF              shift and go to state 93
    WHILE           shift and go to state 57
    DO              shift and go to state 76
    FOR             shift and go to state 36
    FOREACH         shift and go to state 13
    SWITCH          shift and go to state 61
    BREAK           shift and go to state 74
    CONTINUE        shift and go to state 48
    RETURN          shift and go to state 23
    GLOBAL          shift and go to state 55
    STATIC          shift and go to state 29
    ECHO            shift and go to state 42
    INLINE_HTML     shift and go to state 88
    UNSET           shift and go to state 83
    SEMI            shift and go to state 85
    TRY             shift and go to state 43
    THROW           shift and go to state 96
    DECLARE         shift and go to state 16
    FUNCTION        shift and go to state 40
    INTERFACE       shift and go to state 21
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    CLASS           shift and go to state 20
    ABSTRACT        shift and go to state 80
    FINAL           shift and go to state 32
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_entry_type               shift and go to state 53
    inner_statement                shift and go to state 286
    class_name                     shift and go to state 54
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    function_call                  shift and go to state 27
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    function_declaration_statement shift and go to state 287
    statement                      shift and go to state 288
    class_constant                 shift and go to state 24
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    class_declaration_statement    shift and go to state 289
    compound_variable              shift and go to state 72
    expr                           shift and go to state 71

state 715

    (49) statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE . RPAREN LBRACE inner_statement_list RBRACE additional_catches

    RPAREN          shift and go to state 747


state 716

    (358) encaps_var -> DOLLAR_OPEN_CURLY_BRACES STRING_VARNAME LBRACKET expr RBRACKET RBRACE .

    QUOTE           reduce using rule 358 (encaps_var -> DOLLAR_OPEN_CURLY_BRACES STRING_VARNAME LBRACKET expr RBRACKET RBRACE .)
    ENCAPSED_AND_WHITESPACE reduce using rule 358 (encaps_var -> DOLLAR_OPEN_CURLY_BRACES STRING_VARNAME LBRACKET expr RBRACKET RBRACE .)
    VARIABLE        reduce using rule 358 (encaps_var -> DOLLAR_OPEN_CURLY_BRACES STRING_VARNAME LBRACKET expr RBRACKET RBRACE .)
    DOLLAR_OPEN_CURLY_BRACES reduce using rule 358 (encaps_var -> DOLLAR_OPEN_CURLY_BRACES STRING_VARNAME LBRACKET expr RBRACKET RBRACE .)
    CURLY_OPEN      reduce using rule 358 (encaps_var -> DOLLAR_OPEN_CURLY_BRACES STRING_VARNAME LBRACKET expr RBRACKET RBRACE .)
    END_HEREDOC     reduce using rule 358 (encaps_var -> DOLLAR_OPEN_CURLY_BRACES STRING_VARNAME LBRACKET expr RBRACKET RBRACE .)


state 717

    (67) while_statement -> COLON inner_statement_list ENDWHILE SEMI .

    HALT_COMPILER   reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    NAMESPACE       reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    CONST           reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    USE             reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    LBRACE          reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    IF              reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    WHILE           reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    DO              reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    FOR             reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    FOREACH         reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    SWITCH          reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    BREAK           reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    CONTINUE        reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    RETURN          reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    GLOBAL          reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    STATIC          reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    ECHO            reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    INLINE_HTML     reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    UNSET           reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    SEMI            reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    TRY             reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    THROW           reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    DECLARE         reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    FUNCTION        reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    INTERFACE       reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    NEW             reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    CLONE           reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    LIST            reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    ARRAY           reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    PLUS            reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    MINUS           reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    NOT             reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    BOOLEAN_NOT     reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    INC             reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    DEC             reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    INT_CAST        reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    DOUBLE_CAST     reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    STRING_CAST     reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    ARRAY_CAST      reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    OBJECT_CAST     reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    BOOL_CAST       reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    UNSET_CAST      reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    ISSET           reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    EMPTY           reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    EVAL            reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    INCLUDE         reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    INCLUDE_ONCE    reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    REQUIRE         reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    REQUIRE_ONCE    reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    EXIT            reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    PRINT           reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    AT              reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    LPAREN          reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    CLASS           reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    ABSTRACT        reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    FINAL           reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    QUOTE           reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    START_HEREDOC   reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    STRING_VARNAME  reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    NS_SEPARATOR    reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    LNUMBER         reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    DNUMBER         reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    LINE            reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    FILE            reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    DIR             reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    CLASS_C         reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    METHOD_C        reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    FUNC_C          reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    NS_C            reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    STRING          reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    DOLLAR          reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    VARIABLE        reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    $end            reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    RBRACE          reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    ELSEIF          reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    ELSE            reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    ENDDECLARE      reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    ENDWHILE        reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    ENDIF           reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    ENDFOREACH      reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    CASE            reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    DEFAULT         reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    ENDSWITCH       reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    ENDFOR          reduce using rule 67 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)


state 718

    (81) switch_case_list -> LBRACE SEMI case_list RBRACE .

    HALT_COMPILER   reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    NAMESPACE       reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    CONST           reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    USE             reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    LBRACE          reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    IF              reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    WHILE           reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    DO              reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    FOR             reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    FOREACH         reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    SWITCH          reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    BREAK           reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    CONTINUE        reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    RETURN          reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    GLOBAL          reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    STATIC          reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    ECHO            reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    INLINE_HTML     reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    UNSET           reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    SEMI            reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    TRY             reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    THROW           reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    DECLARE         reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    FUNCTION        reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    INTERFACE       reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    NEW             reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    CLONE           reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    LIST            reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    ARRAY           reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    PLUS            reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    MINUS           reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    NOT             reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    BOOLEAN_NOT     reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    INC             reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    DEC             reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    INT_CAST        reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    DOUBLE_CAST     reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    STRING_CAST     reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    ARRAY_CAST      reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    OBJECT_CAST     reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    BOOL_CAST       reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    UNSET_CAST      reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    ISSET           reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    EMPTY           reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    EVAL            reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    INCLUDE         reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    INCLUDE_ONCE    reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    REQUIRE         reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    REQUIRE_ONCE    reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    EXIT            reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    PRINT           reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    AT              reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    LPAREN          reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    CLASS           reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    ABSTRACT        reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    FINAL           reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    QUOTE           reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    START_HEREDOC   reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    STRING_VARNAME  reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    NS_SEPARATOR    reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    LNUMBER         reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    DNUMBER         reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    CONSTANT_ENCAPSED_STRING reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    LINE            reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    FILE            reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    DIR             reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    CLASS_C         reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    METHOD_C        reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    FUNC_C          reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    NS_C            reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    STRING          reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    DOLLAR          reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    VARIABLE        reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    $end            reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    RBRACE          reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    ELSEIF          reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    ELSE            reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    ENDDECLARE      reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    ENDWHILE        reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    ENDIF           reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    ENDFOREACH      reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    CASE            reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    DEFAULT         reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    ENDSWITCH       reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    ENDFOR          reduce using rule 81 (switch_case_list -> LBRACE SEMI case_list RBRACE .)


state 719

    (85) case_list -> case_list CASE expr . case_separator inner_statement_list
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr
    (87) case_separator -> . COLON
    (88) case_separator -> . SEMI

    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    LOGICAL_AND     shift and go to state 181
    LOGICAL_OR      shift and go to state 202
    LOGICAL_XOR     shift and go to state 200
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188
    COLON           shift and go to state 722
    SEMI            shift and go to state 720

    case_separator                 shift and go to state 748

state 720

    (88) case_separator -> SEMI .

    HALT_COMPILER   reduce using rule 88 (case_separator -> SEMI .)
    LBRACE          reduce using rule 88 (case_separator -> SEMI .)
    IF              reduce using rule 88 (case_separator -> SEMI .)
    WHILE           reduce using rule 88 (case_separator -> SEMI .)
    DO              reduce using rule 88 (case_separator -> SEMI .)
    FOR             reduce using rule 88 (case_separator -> SEMI .)
    FOREACH         reduce using rule 88 (case_separator -> SEMI .)
    SWITCH          reduce using rule 88 (case_separator -> SEMI .)
    BREAK           reduce using rule 88 (case_separator -> SEMI .)
    CONTINUE        reduce using rule 88 (case_separator -> SEMI .)
    RETURN          reduce using rule 88 (case_separator -> SEMI .)
    GLOBAL          reduce using rule 88 (case_separator -> SEMI .)
    STATIC          reduce using rule 88 (case_separator -> SEMI .)
    ECHO            reduce using rule 88 (case_separator -> SEMI .)
    INLINE_HTML     reduce using rule 88 (case_separator -> SEMI .)
    UNSET           reduce using rule 88 (case_separator -> SEMI .)
    SEMI            reduce using rule 88 (case_separator -> SEMI .)
    TRY             reduce using rule 88 (case_separator -> SEMI .)
    THROW           reduce using rule 88 (case_separator -> SEMI .)
    DECLARE         reduce using rule 88 (case_separator -> SEMI .)
    FUNCTION        reduce using rule 88 (case_separator -> SEMI .)
    INTERFACE       reduce using rule 88 (case_separator -> SEMI .)
    NEW             reduce using rule 88 (case_separator -> SEMI .)
    CLONE           reduce using rule 88 (case_separator -> SEMI .)
    LIST            reduce using rule 88 (case_separator -> SEMI .)
    ARRAY           reduce using rule 88 (case_separator -> SEMI .)
    PLUS            reduce using rule 88 (case_separator -> SEMI .)
    MINUS           reduce using rule 88 (case_separator -> SEMI .)
    NOT             reduce using rule 88 (case_separator -> SEMI .)
    BOOLEAN_NOT     reduce using rule 88 (case_separator -> SEMI .)
    INC             reduce using rule 88 (case_separator -> SEMI .)
    DEC             reduce using rule 88 (case_separator -> SEMI .)
    INT_CAST        reduce using rule 88 (case_separator -> SEMI .)
    DOUBLE_CAST     reduce using rule 88 (case_separator -> SEMI .)
    STRING_CAST     reduce using rule 88 (case_separator -> SEMI .)
    ARRAY_CAST      reduce using rule 88 (case_separator -> SEMI .)
    OBJECT_CAST     reduce using rule 88 (case_separator -> SEMI .)
    BOOL_CAST       reduce using rule 88 (case_separator -> SEMI .)
    UNSET_CAST      reduce using rule 88 (case_separator -> SEMI .)
    ISSET           reduce using rule 88 (case_separator -> SEMI .)
    EMPTY           reduce using rule 88 (case_separator -> SEMI .)
    EVAL            reduce using rule 88 (case_separator -> SEMI .)
    INCLUDE         reduce using rule 88 (case_separator -> SEMI .)
    INCLUDE_ONCE    reduce using rule 88 (case_separator -> SEMI .)
    REQUIRE         reduce using rule 88 (case_separator -> SEMI .)
    REQUIRE_ONCE    reduce using rule 88 (case_separator -> SEMI .)
    EXIT            reduce using rule 88 (case_separator -> SEMI .)
    PRINT           reduce using rule 88 (case_separator -> SEMI .)
    AT              reduce using rule 88 (case_separator -> SEMI .)
    LPAREN          reduce using rule 88 (case_separator -> SEMI .)
    CLASS           reduce using rule 88 (case_separator -> SEMI .)
    ABSTRACT        reduce using rule 88 (case_separator -> SEMI .)
    FINAL           reduce using rule 88 (case_separator -> SEMI .)
    QUOTE           reduce using rule 88 (case_separator -> SEMI .)
    START_HEREDOC   reduce using rule 88 (case_separator -> SEMI .)
    STRING_VARNAME  reduce using rule 88 (case_separator -> SEMI .)
    NS_SEPARATOR    reduce using rule 88 (case_separator -> SEMI .)
    NAMESPACE       reduce using rule 88 (case_separator -> SEMI .)
    LNUMBER         reduce using rule 88 (case_separator -> SEMI .)
    DNUMBER         reduce using rule 88 (case_separator -> SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 88 (case_separator -> SEMI .)
    LINE            reduce using rule 88 (case_separator -> SEMI .)
    FILE            reduce using rule 88 (case_separator -> SEMI .)
    DIR             reduce using rule 88 (case_separator -> SEMI .)
    CLASS_C         reduce using rule 88 (case_separator -> SEMI .)
    METHOD_C        reduce using rule 88 (case_separator -> SEMI .)
    FUNC_C          reduce using rule 88 (case_separator -> SEMI .)
    NS_C            reduce using rule 88 (case_separator -> SEMI .)
    STRING          reduce using rule 88 (case_separator -> SEMI .)
    DOLLAR          reduce using rule 88 (case_separator -> SEMI .)
    VARIABLE        reduce using rule 88 (case_separator -> SEMI .)
    RBRACE          reduce using rule 88 (case_separator -> SEMI .)
    CASE            reduce using rule 88 (case_separator -> SEMI .)
    DEFAULT         reduce using rule 88 (case_separator -> SEMI .)
    ENDSWITCH       reduce using rule 88 (case_separator -> SEMI .)


state 721

    (86) case_list -> case_list DEFAULT case_separator . inner_statement_list
    (22) inner_statement_list -> . inner_statement_list inner_statement
    (23) inner_statement_list -> . empty
    (363) empty -> .

    HALT_COMPILER   reduce using rule 363 (empty -> .)
    LBRACE          reduce using rule 363 (empty -> .)
    IF              reduce using rule 363 (empty -> .)
    WHILE           reduce using rule 363 (empty -> .)
    DO              reduce using rule 363 (empty -> .)
    FOR             reduce using rule 363 (empty -> .)
    FOREACH         reduce using rule 363 (empty -> .)
    SWITCH          reduce using rule 363 (empty -> .)
    BREAK           reduce using rule 363 (empty -> .)
    CONTINUE        reduce using rule 363 (empty -> .)
    RETURN          reduce using rule 363 (empty -> .)
    GLOBAL          reduce using rule 363 (empty -> .)
    STATIC          reduce using rule 363 (empty -> .)
    ECHO            reduce using rule 363 (empty -> .)
    INLINE_HTML     reduce using rule 363 (empty -> .)
    UNSET           reduce using rule 363 (empty -> .)
    SEMI            reduce using rule 363 (empty -> .)
    TRY             reduce using rule 363 (empty -> .)
    THROW           reduce using rule 363 (empty -> .)
    DECLARE         reduce using rule 363 (empty -> .)
    FUNCTION        reduce using rule 363 (empty -> .)
    INTERFACE       reduce using rule 363 (empty -> .)
    NEW             reduce using rule 363 (empty -> .)
    CLONE           reduce using rule 363 (empty -> .)
    LIST            reduce using rule 363 (empty -> .)
    ARRAY           reduce using rule 363 (empty -> .)
    PLUS            reduce using rule 363 (empty -> .)
    MINUS           reduce using rule 363 (empty -> .)
    NOT             reduce using rule 363 (empty -> .)
    BOOLEAN_NOT     reduce using rule 363 (empty -> .)
    INC             reduce using rule 363 (empty -> .)
    DEC             reduce using rule 363 (empty -> .)
    INT_CAST        reduce using rule 363 (empty -> .)
    DOUBLE_CAST     reduce using rule 363 (empty -> .)
    STRING_CAST     reduce using rule 363 (empty -> .)
    ARRAY_CAST      reduce using rule 363 (empty -> .)
    OBJECT_CAST     reduce using rule 363 (empty -> .)
    BOOL_CAST       reduce using rule 363 (empty -> .)
    UNSET_CAST      reduce using rule 363 (empty -> .)
    ISSET           reduce using rule 363 (empty -> .)
    EMPTY           reduce using rule 363 (empty -> .)
    EVAL            reduce using rule 363 (empty -> .)
    INCLUDE         reduce using rule 363 (empty -> .)
    INCLUDE_ONCE    reduce using rule 363 (empty -> .)
    REQUIRE         reduce using rule 363 (empty -> .)
    REQUIRE_ONCE    reduce using rule 363 (empty -> .)
    EXIT            reduce using rule 363 (empty -> .)
    PRINT           reduce using rule 363 (empty -> .)
    AT              reduce using rule 363 (empty -> .)
    LPAREN          reduce using rule 363 (empty -> .)
    CLASS           reduce using rule 363 (empty -> .)
    ABSTRACT        reduce using rule 363 (empty -> .)
    FINAL           reduce using rule 363 (empty -> .)
    QUOTE           reduce using rule 363 (empty -> .)
    START_HEREDOC   reduce using rule 363 (empty -> .)
    STRING_VARNAME  reduce using rule 363 (empty -> .)
    NS_SEPARATOR    reduce using rule 363 (empty -> .)
    NAMESPACE       reduce using rule 363 (empty -> .)
    LNUMBER         reduce using rule 363 (empty -> .)
    DNUMBER         reduce using rule 363 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 363 (empty -> .)
    LINE            reduce using rule 363 (empty -> .)
    FILE            reduce using rule 363 (empty -> .)
    DIR             reduce using rule 363 (empty -> .)
    CLASS_C         reduce using rule 363 (empty -> .)
    METHOD_C        reduce using rule 363 (empty -> .)
    FUNC_C          reduce using rule 363 (empty -> .)
    NS_C            reduce using rule 363 (empty -> .)
    STRING          reduce using rule 363 (empty -> .)
    DOLLAR          reduce using rule 363 (empty -> .)
    VARIABLE        reduce using rule 363 (empty -> .)
    RBRACE          reduce using rule 363 (empty -> .)
    CASE            reduce using rule 363 (empty -> .)
    DEFAULT         reduce using rule 363 (empty -> .)
    ENDSWITCH       reduce using rule 363 (empty -> .)

    empty                          shift and go to state 148
    inner_statement_list           shift and go to state 749

state 722

    (87) case_separator -> COLON .

    HALT_COMPILER   reduce using rule 87 (case_separator -> COLON .)
    LBRACE          reduce using rule 87 (case_separator -> COLON .)
    IF              reduce using rule 87 (case_separator -> COLON .)
    WHILE           reduce using rule 87 (case_separator -> COLON .)
    DO              reduce using rule 87 (case_separator -> COLON .)
    FOR             reduce using rule 87 (case_separator -> COLON .)
    FOREACH         reduce using rule 87 (case_separator -> COLON .)
    SWITCH          reduce using rule 87 (case_separator -> COLON .)
    BREAK           reduce using rule 87 (case_separator -> COLON .)
    CONTINUE        reduce using rule 87 (case_separator -> COLON .)
    RETURN          reduce using rule 87 (case_separator -> COLON .)
    GLOBAL          reduce using rule 87 (case_separator -> COLON .)
    STATIC          reduce using rule 87 (case_separator -> COLON .)
    ECHO            reduce using rule 87 (case_separator -> COLON .)
    INLINE_HTML     reduce using rule 87 (case_separator -> COLON .)
    UNSET           reduce using rule 87 (case_separator -> COLON .)
    SEMI            reduce using rule 87 (case_separator -> COLON .)
    TRY             reduce using rule 87 (case_separator -> COLON .)
    THROW           reduce using rule 87 (case_separator -> COLON .)
    DECLARE         reduce using rule 87 (case_separator -> COLON .)
    FUNCTION        reduce using rule 87 (case_separator -> COLON .)
    INTERFACE       reduce using rule 87 (case_separator -> COLON .)
    NEW             reduce using rule 87 (case_separator -> COLON .)
    CLONE           reduce using rule 87 (case_separator -> COLON .)
    LIST            reduce using rule 87 (case_separator -> COLON .)
    ARRAY           reduce using rule 87 (case_separator -> COLON .)
    PLUS            reduce using rule 87 (case_separator -> COLON .)
    MINUS           reduce using rule 87 (case_separator -> COLON .)
    NOT             reduce using rule 87 (case_separator -> COLON .)
    BOOLEAN_NOT     reduce using rule 87 (case_separator -> COLON .)
    INC             reduce using rule 87 (case_separator -> COLON .)
    DEC             reduce using rule 87 (case_separator -> COLON .)
    INT_CAST        reduce using rule 87 (case_separator -> COLON .)
    DOUBLE_CAST     reduce using rule 87 (case_separator -> COLON .)
    STRING_CAST     reduce using rule 87 (case_separator -> COLON .)
    ARRAY_CAST      reduce using rule 87 (case_separator -> COLON .)
    OBJECT_CAST     reduce using rule 87 (case_separator -> COLON .)
    BOOL_CAST       reduce using rule 87 (case_separator -> COLON .)
    UNSET_CAST      reduce using rule 87 (case_separator -> COLON .)
    ISSET           reduce using rule 87 (case_separator -> COLON .)
    EMPTY           reduce using rule 87 (case_separator -> COLON .)
    EVAL            reduce using rule 87 (case_separator -> COLON .)
    INCLUDE         reduce using rule 87 (case_separator -> COLON .)
    INCLUDE_ONCE    reduce using rule 87 (case_separator -> COLON .)
    REQUIRE         reduce using rule 87 (case_separator -> COLON .)
    REQUIRE_ONCE    reduce using rule 87 (case_separator -> COLON .)
    EXIT            reduce using rule 87 (case_separator -> COLON .)
    PRINT           reduce using rule 87 (case_separator -> COLON .)
    AT              reduce using rule 87 (case_separator -> COLON .)
    LPAREN          reduce using rule 87 (case_separator -> COLON .)
    CLASS           reduce using rule 87 (case_separator -> COLON .)
    ABSTRACT        reduce using rule 87 (case_separator -> COLON .)
    FINAL           reduce using rule 87 (case_separator -> COLON .)
    QUOTE           reduce using rule 87 (case_separator -> COLON .)
    START_HEREDOC   reduce using rule 87 (case_separator -> COLON .)
    STRING_VARNAME  reduce using rule 87 (case_separator -> COLON .)
    NS_SEPARATOR    reduce using rule 87 (case_separator -> COLON .)
    NAMESPACE       reduce using rule 87 (case_separator -> COLON .)
    LNUMBER         reduce using rule 87 (case_separator -> COLON .)
    DNUMBER         reduce using rule 87 (case_separator -> COLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 87 (case_separator -> COLON .)
    LINE            reduce using rule 87 (case_separator -> COLON .)
    FILE            reduce using rule 87 (case_separator -> COLON .)
    DIR             reduce using rule 87 (case_separator -> COLON .)
    CLASS_C         reduce using rule 87 (case_separator -> COLON .)
    METHOD_C        reduce using rule 87 (case_separator -> COLON .)
    FUNC_C          reduce using rule 87 (case_separator -> COLON .)
    NS_C            reduce using rule 87 (case_separator -> COLON .)
    STRING          reduce using rule 87 (case_separator -> COLON .)
    DOLLAR          reduce using rule 87 (case_separator -> COLON .)
    VARIABLE        reduce using rule 87 (case_separator -> COLON .)
    RBRACE          reduce using rule 87 (case_separator -> COLON .)
    CASE            reduce using rule 87 (case_separator -> COLON .)
    DEFAULT         reduce using rule 87 (case_separator -> COLON .)
    ENDSWITCH       reduce using rule 87 (case_separator -> COLON .)


state 723

    (83) switch_case_list -> COLON SEMI case_list ENDSWITCH . SEMI

    SEMI            shift and go to state 750


state 724

    (82) switch_case_list -> COLON case_list ENDSWITCH SEMI .

    HALT_COMPILER   reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    NAMESPACE       reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    CONST           reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    USE             reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    LBRACE          reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    IF              reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    WHILE           reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    DO              reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    FOR             reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    FOREACH         reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    SWITCH          reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    BREAK           reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    CONTINUE        reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    RETURN          reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    GLOBAL          reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    STATIC          reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    ECHO            reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    INLINE_HTML     reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    UNSET           reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    SEMI            reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    TRY             reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    THROW           reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    DECLARE         reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    FUNCTION        reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    INTERFACE       reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    NEW             reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    CLONE           reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    LIST            reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    ARRAY           reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    PLUS            reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    MINUS           reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    NOT             reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    BOOLEAN_NOT     reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    INC             reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    DEC             reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    INT_CAST        reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    DOUBLE_CAST     reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    STRING_CAST     reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    ARRAY_CAST      reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    OBJECT_CAST     reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    BOOL_CAST       reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    UNSET_CAST      reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    ISSET           reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    EMPTY           reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    EVAL            reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    INCLUDE         reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    INCLUDE_ONCE    reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    REQUIRE         reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    REQUIRE_ONCE    reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    EXIT            reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    PRINT           reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    AT              reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    LPAREN          reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    CLASS           reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    ABSTRACT        reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    FINAL           reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    QUOTE           reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    START_HEREDOC   reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    STRING_VARNAME  reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    NS_SEPARATOR    reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    LNUMBER         reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    DNUMBER         reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    LINE            reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    FILE            reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    DIR             reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    CLASS_C         reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    METHOD_C        reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    FUNC_C          reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    NS_C            reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    STRING          reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    DOLLAR          reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    VARIABLE        reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    $end            reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    RBRACE          reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    ELSEIF          reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    ELSE            reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    ENDDECLARE      reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    ENDWHILE        reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    ENDIF           reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    ENDFOREACH      reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    CASE            reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    DEFAULT         reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    ENDSWITCH       reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    ENDFOR          reduce using rule 82 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)


state 725

    (229) non_empty_array_pair_list -> non_empty_array_pair_list COMMA expr DOUBLE_ARROW AND variable .

    COMMA           reduce using rule 229 (non_empty_array_pair_list -> non_empty_array_pair_list COMMA expr DOUBLE_ARROW AND variable .)
    RPAREN          reduce using rule 229 (non_empty_array_pair_list -> non_empty_array_pair_list COMMA expr DOUBLE_ARROW AND variable .)


state 726

    (30) statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single . ENDIF SEMI

    ENDIF           shift and go to state 751


state 727

    (65) new_else_single -> ELSE . COLON inner_statement_list

    COLON           shift and go to state 752


state 728

    (63) new_elseif_list -> new_elseif_list ELSEIF . LPAREN expr RPAREN COLON inner_statement_list

    LPAREN          shift and go to state 753


state 729

    (64) new_else_single -> empty .

    ENDIF           reduce using rule 64 (new_else_single -> empty .)


state 730

    (61) else_single -> ELSE statement .

    HALT_COMPILER   reduce using rule 61 (else_single -> ELSE statement .)
    NAMESPACE       reduce using rule 61 (else_single -> ELSE statement .)
    CONST           reduce using rule 61 (else_single -> ELSE statement .)
    USE             reduce using rule 61 (else_single -> ELSE statement .)
    LBRACE          reduce using rule 61 (else_single -> ELSE statement .)
    IF              reduce using rule 61 (else_single -> ELSE statement .)
    WHILE           reduce using rule 61 (else_single -> ELSE statement .)
    DO              reduce using rule 61 (else_single -> ELSE statement .)
    FOR             reduce using rule 61 (else_single -> ELSE statement .)
    FOREACH         reduce using rule 61 (else_single -> ELSE statement .)
    SWITCH          reduce using rule 61 (else_single -> ELSE statement .)
    BREAK           reduce using rule 61 (else_single -> ELSE statement .)
    CONTINUE        reduce using rule 61 (else_single -> ELSE statement .)
    RETURN          reduce using rule 61 (else_single -> ELSE statement .)
    GLOBAL          reduce using rule 61 (else_single -> ELSE statement .)
    STATIC          reduce using rule 61 (else_single -> ELSE statement .)
    ECHO            reduce using rule 61 (else_single -> ELSE statement .)
    INLINE_HTML     reduce using rule 61 (else_single -> ELSE statement .)
    UNSET           reduce using rule 61 (else_single -> ELSE statement .)
    SEMI            reduce using rule 61 (else_single -> ELSE statement .)
    TRY             reduce using rule 61 (else_single -> ELSE statement .)
    THROW           reduce using rule 61 (else_single -> ELSE statement .)
    DECLARE         reduce using rule 61 (else_single -> ELSE statement .)
    FUNCTION        reduce using rule 61 (else_single -> ELSE statement .)
    INTERFACE       reduce using rule 61 (else_single -> ELSE statement .)
    NEW             reduce using rule 61 (else_single -> ELSE statement .)
    CLONE           reduce using rule 61 (else_single -> ELSE statement .)
    LIST            reduce using rule 61 (else_single -> ELSE statement .)
    ARRAY           reduce using rule 61 (else_single -> ELSE statement .)
    PLUS            reduce using rule 61 (else_single -> ELSE statement .)
    MINUS           reduce using rule 61 (else_single -> ELSE statement .)
    NOT             reduce using rule 61 (else_single -> ELSE statement .)
    BOOLEAN_NOT     reduce using rule 61 (else_single -> ELSE statement .)
    INC             reduce using rule 61 (else_single -> ELSE statement .)
    DEC             reduce using rule 61 (else_single -> ELSE statement .)
    INT_CAST        reduce using rule 61 (else_single -> ELSE statement .)
    DOUBLE_CAST     reduce using rule 61 (else_single -> ELSE statement .)
    STRING_CAST     reduce using rule 61 (else_single -> ELSE statement .)
    ARRAY_CAST      reduce using rule 61 (else_single -> ELSE statement .)
    OBJECT_CAST     reduce using rule 61 (else_single -> ELSE statement .)
    BOOL_CAST       reduce using rule 61 (else_single -> ELSE statement .)
    UNSET_CAST      reduce using rule 61 (else_single -> ELSE statement .)
    ISSET           reduce using rule 61 (else_single -> ELSE statement .)
    EMPTY           reduce using rule 61 (else_single -> ELSE statement .)
    EVAL            reduce using rule 61 (else_single -> ELSE statement .)
    INCLUDE         reduce using rule 61 (else_single -> ELSE statement .)
    INCLUDE_ONCE    reduce using rule 61 (else_single -> ELSE statement .)
    REQUIRE         reduce using rule 61 (else_single -> ELSE statement .)
    REQUIRE_ONCE    reduce using rule 61 (else_single -> ELSE statement .)
    EXIT            reduce using rule 61 (else_single -> ELSE statement .)
    PRINT           reduce using rule 61 (else_single -> ELSE statement .)
    AT              reduce using rule 61 (else_single -> ELSE statement .)
    LPAREN          reduce using rule 61 (else_single -> ELSE statement .)
    CLASS           reduce using rule 61 (else_single -> ELSE statement .)
    ABSTRACT        reduce using rule 61 (else_single -> ELSE statement .)
    FINAL           reduce using rule 61 (else_single -> ELSE statement .)
    QUOTE           reduce using rule 61 (else_single -> ELSE statement .)
    START_HEREDOC   reduce using rule 61 (else_single -> ELSE statement .)
    STRING_VARNAME  reduce using rule 61 (else_single -> ELSE statement .)
    NS_SEPARATOR    reduce using rule 61 (else_single -> ELSE statement .)
    LNUMBER         reduce using rule 61 (else_single -> ELSE statement .)
    DNUMBER         reduce using rule 61 (else_single -> ELSE statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 61 (else_single -> ELSE statement .)
    LINE            reduce using rule 61 (else_single -> ELSE statement .)
    FILE            reduce using rule 61 (else_single -> ELSE statement .)
    DIR             reduce using rule 61 (else_single -> ELSE statement .)
    CLASS_C         reduce using rule 61 (else_single -> ELSE statement .)
    METHOD_C        reduce using rule 61 (else_single -> ELSE statement .)
    FUNC_C          reduce using rule 61 (else_single -> ELSE statement .)
    NS_C            reduce using rule 61 (else_single -> ELSE statement .)
    STRING          reduce using rule 61 (else_single -> ELSE statement .)
    DOLLAR          reduce using rule 61 (else_single -> ELSE statement .)
    VARIABLE        reduce using rule 61 (else_single -> ELSE statement .)
    $end            reduce using rule 61 (else_single -> ELSE statement .)
    RBRACE          reduce using rule 61 (else_single -> ELSE statement .)
    ELSEIF          reduce using rule 61 (else_single -> ELSE statement .)
    ELSE            reduce using rule 61 (else_single -> ELSE statement .)
    ENDDECLARE      reduce using rule 61 (else_single -> ELSE statement .)
    ENDWHILE        reduce using rule 61 (else_single -> ELSE statement .)
    ENDIF           reduce using rule 61 (else_single -> ELSE statement .)
    ENDFOREACH      reduce using rule 61 (else_single -> ELSE statement .)
    CASE            reduce using rule 61 (else_single -> ELSE statement .)
    DEFAULT         reduce using rule 61 (else_single -> ELSE statement .)
    ENDSWITCH       reduce using rule 61 (else_single -> ELSE statement .)
    ENDFOR          reduce using rule 61 (else_single -> ELSE statement .)


state 731

    (59) elseif_list -> elseif_list ELSEIF LPAREN . expr RPAREN statement
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 754

state 732

    (79) foreach_statement -> COLON inner_statement_list . ENDFOREACH SEMI
    (22) inner_statement_list -> inner_statement_list . inner_statement
    (24) inner_statement -> . statement
    (25) inner_statement -> . function_declaration_statement
    (26) inner_statement -> . class_declaration_statement
    (27) inner_statement -> . HALT_COMPILER LPAREN RPAREN SEMI
    (28) statement -> . LBRACE inner_statement_list RBRACE
    (29) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (30) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (31) statement -> . WHILE LPAREN expr RPAREN while_statement
    (32) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (33) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (34) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (35) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (36) statement -> . BREAK SEMI
    (37) statement -> . BREAK expr SEMI
    (38) statement -> . CONTINUE SEMI
    (39) statement -> . CONTINUE expr SEMI
    (40) statement -> . RETURN SEMI
    (41) statement -> . RETURN expr SEMI
    (42) statement -> . GLOBAL global_var_list SEMI
    (43) statement -> . STATIC static_var_list SEMI
    (44) statement -> . ECHO echo_expr_list SEMI
    (45) statement -> . INLINE_HTML
    (46) statement -> . expr SEMI
    (47) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (48) statement -> . SEMI
    (49) statement -> . TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches
    (52) statement -> . THROW expr SEMI
    (53) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (103) function_declaration_statement -> . FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (104) class_declaration_statement -> . class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE
    (105) class_declaration_statement -> . INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (106) class_entry_type -> . CLASS
    (107) class_entry_type -> . ABSTRACT CLASS
    (108) class_entry_type -> . FINAL CLASS
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    ENDFOREACH      shift and go to state 755
    HALT_COMPILER   shift and go to state 285
    LBRACE          shift and go to state 47
    IF              shift and go to state 93
    WHILE           shift and go to state 57
    DO              shift and go to state 76
    FOR             shift and go to state 36
    FOREACH         shift and go to state 13
    SWITCH          shift and go to state 61
    BREAK           shift and go to state 74
    CONTINUE        shift and go to state 48
    RETURN          shift and go to state 23
    GLOBAL          shift and go to state 55
    STATIC          shift and go to state 29
    ECHO            shift and go to state 42
    INLINE_HTML     shift and go to state 88
    UNSET           shift and go to state 83
    SEMI            shift and go to state 85
    TRY             shift and go to state 43
    THROW           shift and go to state 96
    DECLARE         shift and go to state 16
    FUNCTION        shift and go to state 40
    INTERFACE       shift and go to state 21
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    CLASS           shift and go to state 20
    ABSTRACT        shift and go to state 80
    FINAL           shift and go to state 32
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_entry_type               shift and go to state 53
    inner_statement                shift and go to state 286
    class_name                     shift and go to state 54
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    function_call                  shift and go to state 27
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    function_declaration_statement shift and go to state 287
    statement                      shift and go to state 288
    class_constant                 shift and go to state 24
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    class_declaration_statement    shift and go to state 289
    compound_variable              shift and go to state 72
    expr                           shift and go to state 71

state 733

    (126) class_constant_declaration -> CONST STRING EQUALS static_scalar .

    SEMI            reduce using rule 126 (class_constant_declaration -> CONST STRING EQUALS static_scalar .)
    COMMA           reduce using rule 126 (class_constant_declaration -> CONST STRING EQUALS static_scalar .)


state 734

    (122) class_variable_declaration -> VARIABLE EQUALS static_scalar .

    SEMI            reduce using rule 122 (class_variable_declaration -> VARIABLE EQUALS static_scalar .)
    COMMA           reduce using rule 122 (class_variable_declaration -> VARIABLE EQUALS static_scalar .)


state 735

    (121) class_variable_declaration -> class_variable_declaration COMMA VARIABLE . EQUALS static_scalar
    (123) class_variable_declaration -> class_variable_declaration COMMA VARIABLE .

    EQUALS          shift and go to state 756
    SEMI            reduce using rule 123 (class_variable_declaration -> class_variable_declaration COMMA VARIABLE .)
    COMMA           reduce using rule 123 (class_variable_declaration -> class_variable_declaration COMMA VARIABLE .)


state 736

    (118) class_statement -> method_modifiers FUNCTION is_reference STRING . LPAREN parameter_list RPAREN method_body

    LPAREN          shift and go to state 757


state 737

    (125) class_constant_declaration -> class_constant_declaration COMMA STRING EQUALS . static_scalar
    (334) static_scalar -> . common_scalar
    (335) static_scalar -> . QUOTE QUOTE
    (336) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (337) static_scalar -> . namespace_name
    (338) static_scalar -> . NS_SEPARATOR namespace_name
    (339) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (340) static_scalar -> . PLUS static_scalar
    (341) static_scalar -> . MINUS static_scalar
    (342) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    QUOTE           shift and go to state 417
    NS_SEPARATOR    shift and go to state 421
    NAMESPACE       shift and go to state 420
    PLUS            shift and go to state 418
    MINUS           shift and go to state 415
    ARRAY           shift and go to state 419
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89

    static_scalar                  shift and go to state 758
    common_scalar                  shift and go to state 414
    namespace_name                 shift and go to state 422

state 738

    (347) static_non_empty_array_pair_list -> static_non_empty_array_pair_list COMMA static_scalar DOUBLE_ARROW . static_scalar
    (334) static_scalar -> . common_scalar
    (335) static_scalar -> . QUOTE QUOTE
    (336) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (337) static_scalar -> . namespace_name
    (338) static_scalar -> . NS_SEPARATOR namespace_name
    (339) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (340) static_scalar -> . PLUS static_scalar
    (341) static_scalar -> . MINUS static_scalar
    (342) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    QUOTE           shift and go to state 417
    NS_SEPARATOR    shift and go to state 421
    NAMESPACE       shift and go to state 420
    PLUS            shift and go to state 418
    MINUS           shift and go to state 415
    ARRAY           shift and go to state 419
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89

    static_scalar                  shift and go to state 759
    common_scalar                  shift and go to state 414
    namespace_name                 shift and go to state 422

state 739

    (33) statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .

    HALT_COMPILER   reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    NAMESPACE       reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    CONST           reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    USE             reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    LBRACE          reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    IF              reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    WHILE           reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    DO              reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    FOR             reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    FOREACH         reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    SWITCH          reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    BREAK           reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    CONTINUE        reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    RETURN          reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    GLOBAL          reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    STATIC          reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    ECHO            reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    INLINE_HTML     reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    UNSET           reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    SEMI            reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    TRY             reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    THROW           reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    DECLARE         reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    FUNCTION        reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    INTERFACE       reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    NEW             reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    CLONE           reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    LIST            reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    ARRAY           reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    PLUS            reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    MINUS           reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    NOT             reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    BOOLEAN_NOT     reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    INC             reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    DEC             reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    INT_CAST        reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    DOUBLE_CAST     reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    STRING_CAST     reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    ARRAY_CAST      reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    OBJECT_CAST     reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    BOOL_CAST       reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    UNSET_CAST      reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    ISSET           reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    EMPTY           reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    EVAL            reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    INCLUDE         reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    INCLUDE_ONCE    reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    REQUIRE         reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    REQUIRE_ONCE    reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    EXIT            reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    PRINT           reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    AT              reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    LPAREN          reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    CLASS           reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    ABSTRACT        reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    FINAL           reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    QUOTE           reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    START_HEREDOC   reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    STRING_VARNAME  reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    NS_SEPARATOR    reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    LNUMBER         reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    DNUMBER         reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    LINE            reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    FILE            reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    DIR             reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    CLASS_C         reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    METHOD_C        reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    FUNC_C          reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    NS_C            reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    STRING          reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    DOLLAR          reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    VARIABLE        reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    $end            reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    RBRACE          reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    ELSEIF          reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    ELSE            reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    ENDDECLARE      reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    ENDWHILE        reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    ENDIF           reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    ENDFOREACH      reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    CASE            reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    DEFAULT         reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    ENDSWITCH       reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    ENDFOR          reduce using rule 33 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)


state 740

    (73) for_statement -> COLON . inner_statement_list ENDFOR SEMI
    (22) inner_statement_list -> . inner_statement_list inner_statement
    (23) inner_statement_list -> . empty
    (363) empty -> .

    ENDFOR          reduce using rule 363 (empty -> .)
    HALT_COMPILER   reduce using rule 363 (empty -> .)
    LBRACE          reduce using rule 363 (empty -> .)
    IF              reduce using rule 363 (empty -> .)
    WHILE           reduce using rule 363 (empty -> .)
    DO              reduce using rule 363 (empty -> .)
    FOR             reduce using rule 363 (empty -> .)
    FOREACH         reduce using rule 363 (empty -> .)
    SWITCH          reduce using rule 363 (empty -> .)
    BREAK           reduce using rule 363 (empty -> .)
    CONTINUE        reduce using rule 363 (empty -> .)
    RETURN          reduce using rule 363 (empty -> .)
    GLOBAL          reduce using rule 363 (empty -> .)
    STATIC          reduce using rule 363 (empty -> .)
    ECHO            reduce using rule 363 (empty -> .)
    INLINE_HTML     reduce using rule 363 (empty -> .)
    UNSET           reduce using rule 363 (empty -> .)
    SEMI            reduce using rule 363 (empty -> .)
    TRY             reduce using rule 363 (empty -> .)
    THROW           reduce using rule 363 (empty -> .)
    DECLARE         reduce using rule 363 (empty -> .)
    FUNCTION        reduce using rule 363 (empty -> .)
    INTERFACE       reduce using rule 363 (empty -> .)
    NEW             reduce using rule 363 (empty -> .)
    CLONE           reduce using rule 363 (empty -> .)
    LIST            reduce using rule 363 (empty -> .)
    ARRAY           reduce using rule 363 (empty -> .)
    PLUS            reduce using rule 363 (empty -> .)
    MINUS           reduce using rule 363 (empty -> .)
    NOT             reduce using rule 363 (empty -> .)
    BOOLEAN_NOT     reduce using rule 363 (empty -> .)
    INC             reduce using rule 363 (empty -> .)
    DEC             reduce using rule 363 (empty -> .)
    INT_CAST        reduce using rule 363 (empty -> .)
    DOUBLE_CAST     reduce using rule 363 (empty -> .)
    STRING_CAST     reduce using rule 363 (empty -> .)
    ARRAY_CAST      reduce using rule 363 (empty -> .)
    OBJECT_CAST     reduce using rule 363 (empty -> .)
    BOOL_CAST       reduce using rule 363 (empty -> .)
    UNSET_CAST      reduce using rule 363 (empty -> .)
    ISSET           reduce using rule 363 (empty -> .)
    EMPTY           reduce using rule 363 (empty -> .)
    EVAL            reduce using rule 363 (empty -> .)
    INCLUDE         reduce using rule 363 (empty -> .)
    INCLUDE_ONCE    reduce using rule 363 (empty -> .)
    REQUIRE         reduce using rule 363 (empty -> .)
    REQUIRE_ONCE    reduce using rule 363 (empty -> .)
    EXIT            reduce using rule 363 (empty -> .)
    PRINT           reduce using rule 363 (empty -> .)
    AT              reduce using rule 363 (empty -> .)
    LPAREN          reduce using rule 363 (empty -> .)
    CLASS           reduce using rule 363 (empty -> .)
    ABSTRACT        reduce using rule 363 (empty -> .)
    FINAL           reduce using rule 363 (empty -> .)
    QUOTE           reduce using rule 363 (empty -> .)
    START_HEREDOC   reduce using rule 363 (empty -> .)
    STRING_VARNAME  reduce using rule 363 (empty -> .)
    NS_SEPARATOR    reduce using rule 363 (empty -> .)
    NAMESPACE       reduce using rule 363 (empty -> .)
    LNUMBER         reduce using rule 363 (empty -> .)
    DNUMBER         reduce using rule 363 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 363 (empty -> .)
    LINE            reduce using rule 363 (empty -> .)
    FILE            reduce using rule 363 (empty -> .)
    DIR             reduce using rule 363 (empty -> .)
    CLASS_C         reduce using rule 363 (empty -> .)
    METHOD_C        reduce using rule 363 (empty -> .)
    FUNC_C          reduce using rule 363 (empty -> .)
    NS_C            reduce using rule 363 (empty -> .)
    STRING          reduce using rule 363 (empty -> .)
    DOLLAR          reduce using rule 363 (empty -> .)
    VARIABLE        reduce using rule 363 (empty -> .)

    inner_statement_list           shift and go to state 760
    empty                          shift and go to state 148

state 741

    (72) for_statement -> statement .

    HALT_COMPILER   reduce using rule 72 (for_statement -> statement .)
    NAMESPACE       reduce using rule 72 (for_statement -> statement .)
    CONST           reduce using rule 72 (for_statement -> statement .)
    USE             reduce using rule 72 (for_statement -> statement .)
    LBRACE          reduce using rule 72 (for_statement -> statement .)
    IF              reduce using rule 72 (for_statement -> statement .)
    WHILE           reduce using rule 72 (for_statement -> statement .)
    DO              reduce using rule 72 (for_statement -> statement .)
    FOR             reduce using rule 72 (for_statement -> statement .)
    FOREACH         reduce using rule 72 (for_statement -> statement .)
    SWITCH          reduce using rule 72 (for_statement -> statement .)
    BREAK           reduce using rule 72 (for_statement -> statement .)
    CONTINUE        reduce using rule 72 (for_statement -> statement .)
    RETURN          reduce using rule 72 (for_statement -> statement .)
    GLOBAL          reduce using rule 72 (for_statement -> statement .)
    STATIC          reduce using rule 72 (for_statement -> statement .)
    ECHO            reduce using rule 72 (for_statement -> statement .)
    INLINE_HTML     reduce using rule 72 (for_statement -> statement .)
    UNSET           reduce using rule 72 (for_statement -> statement .)
    SEMI            reduce using rule 72 (for_statement -> statement .)
    TRY             reduce using rule 72 (for_statement -> statement .)
    THROW           reduce using rule 72 (for_statement -> statement .)
    DECLARE         reduce using rule 72 (for_statement -> statement .)
    FUNCTION        reduce using rule 72 (for_statement -> statement .)
    INTERFACE       reduce using rule 72 (for_statement -> statement .)
    NEW             reduce using rule 72 (for_statement -> statement .)
    CLONE           reduce using rule 72 (for_statement -> statement .)
    LIST            reduce using rule 72 (for_statement -> statement .)
    ARRAY           reduce using rule 72 (for_statement -> statement .)
    PLUS            reduce using rule 72 (for_statement -> statement .)
    MINUS           reduce using rule 72 (for_statement -> statement .)
    NOT             reduce using rule 72 (for_statement -> statement .)
    BOOLEAN_NOT     reduce using rule 72 (for_statement -> statement .)
    INC             reduce using rule 72 (for_statement -> statement .)
    DEC             reduce using rule 72 (for_statement -> statement .)
    INT_CAST        reduce using rule 72 (for_statement -> statement .)
    DOUBLE_CAST     reduce using rule 72 (for_statement -> statement .)
    STRING_CAST     reduce using rule 72 (for_statement -> statement .)
    ARRAY_CAST      reduce using rule 72 (for_statement -> statement .)
    OBJECT_CAST     reduce using rule 72 (for_statement -> statement .)
    BOOL_CAST       reduce using rule 72 (for_statement -> statement .)
    UNSET_CAST      reduce using rule 72 (for_statement -> statement .)
    ISSET           reduce using rule 72 (for_statement -> statement .)
    EMPTY           reduce using rule 72 (for_statement -> statement .)
    EVAL            reduce using rule 72 (for_statement -> statement .)
    INCLUDE         reduce using rule 72 (for_statement -> statement .)
    INCLUDE_ONCE    reduce using rule 72 (for_statement -> statement .)
    REQUIRE         reduce using rule 72 (for_statement -> statement .)
    REQUIRE_ONCE    reduce using rule 72 (for_statement -> statement .)
    EXIT            reduce using rule 72 (for_statement -> statement .)
    PRINT           reduce using rule 72 (for_statement -> statement .)
    AT              reduce using rule 72 (for_statement -> statement .)
    LPAREN          reduce using rule 72 (for_statement -> statement .)
    CLASS           reduce using rule 72 (for_statement -> statement .)
    ABSTRACT        reduce using rule 72 (for_statement -> statement .)
    FINAL           reduce using rule 72 (for_statement -> statement .)
    QUOTE           reduce using rule 72 (for_statement -> statement .)
    START_HEREDOC   reduce using rule 72 (for_statement -> statement .)
    STRING_VARNAME  reduce using rule 72 (for_statement -> statement .)
    NS_SEPARATOR    reduce using rule 72 (for_statement -> statement .)
    LNUMBER         reduce using rule 72 (for_statement -> statement .)
    DNUMBER         reduce using rule 72 (for_statement -> statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 72 (for_statement -> statement .)
    LINE            reduce using rule 72 (for_statement -> statement .)
    FILE            reduce using rule 72 (for_statement -> statement .)
    DIR             reduce using rule 72 (for_statement -> statement .)
    CLASS_C         reduce using rule 72 (for_statement -> statement .)
    METHOD_C        reduce using rule 72 (for_statement -> statement .)
    FUNC_C          reduce using rule 72 (for_statement -> statement .)
    NS_C            reduce using rule 72 (for_statement -> statement .)
    STRING          reduce using rule 72 (for_statement -> statement .)
    DOLLAR          reduce using rule 72 (for_statement -> statement .)
    VARIABLE        reduce using rule 72 (for_statement -> statement .)
    $end            reduce using rule 72 (for_statement -> statement .)
    RBRACE          reduce using rule 72 (for_statement -> statement .)
    ELSEIF          reduce using rule 72 (for_statement -> statement .)
    ELSE            reduce using rule 72 (for_statement -> statement .)
    ENDDECLARE      reduce using rule 72 (for_statement -> statement .)
    ENDWHILE        reduce using rule 72 (for_statement -> statement .)
    ENDIF           reduce using rule 72 (for_statement -> statement .)
    ENDFOREACH      reduce using rule 72 (for_statement -> statement .)
    CASE            reduce using rule 72 (for_statement -> statement .)
    DEFAULT         reduce using rule 72 (for_statement -> statement .)
    ENDSWITCH       reduce using rule 72 (for_statement -> statement .)
    ENDFOR          reduce using rule 72 (for_statement -> statement .)


state 742

    (103) function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .

    RBRACE          reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    HALT_COMPILER   reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    LBRACE          reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    IF              reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    WHILE           reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    DO              reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    FOR             reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    FOREACH         reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    SWITCH          reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    BREAK           reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    CONTINUE        reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    RETURN          reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    GLOBAL          reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    STATIC          reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    ECHO            reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    INLINE_HTML     reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    UNSET           reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    SEMI            reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    TRY             reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    THROW           reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    DECLARE         reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    FUNCTION        reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    INTERFACE       reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    NEW             reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    CLONE           reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    LIST            reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    ARRAY           reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    PLUS            reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    MINUS           reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    NOT             reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    BOOLEAN_NOT     reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    INC             reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    DEC             reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    INT_CAST        reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    DOUBLE_CAST     reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    STRING_CAST     reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    ARRAY_CAST      reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    OBJECT_CAST     reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    BOOL_CAST       reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    UNSET_CAST      reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    ISSET           reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    EMPTY           reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    EVAL            reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    INCLUDE         reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    INCLUDE_ONCE    reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    REQUIRE         reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    REQUIRE_ONCE    reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    EXIT            reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    PRINT           reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    AT              reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    LPAREN          reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    CLASS           reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    ABSTRACT        reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    FINAL           reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    QUOTE           reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    START_HEREDOC   reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    STRING_VARNAME  reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    NS_SEPARATOR    reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    NAMESPACE       reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    LNUMBER         reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    DNUMBER         reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    CONSTANT_ENCAPSED_STRING reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    LINE            reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    FILE            reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    DIR             reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    CLASS_C         reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    METHOD_C        reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    FUNC_C          reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    NS_C            reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    STRING          reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    DOLLAR          reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    VARIABLE        reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    ENDFOR          reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    CONST           reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    USE             reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    $end            reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    ENDDECLARE      reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    ENDWHILE        reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    ELSEIF          reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    ELSE            reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    ENDIF           reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    ENDFOREACH      reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    CASE            reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    DEFAULT         reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    ENDSWITCH       reduce using rule 103 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)


state 743

    (245) lexical_var_list -> AND VARIABLE .

    RPAREN          reduce using rule 245 (lexical_var_list -> AND VARIABLE .)
    COMMA           reduce using rule 245 (lexical_var_list -> AND VARIABLE .)


state 744

    (241) lexical_vars -> USE LPAREN lexical_var_list RPAREN .

    LBRACE          reduce using rule 241 (lexical_vars -> USE LPAREN lexical_var_list RPAREN .)


state 745

    (243) lexical_var_list -> lexical_var_list COMMA . AND VARIABLE
    (244) lexical_var_list -> lexical_var_list COMMA . VARIABLE

    AND             shift and go to state 761
    VARIABLE        shift and go to state 762


state 746

    (240) expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .

    AS              reduce using rule 240 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    BOOLEAN_AND     reduce using rule 240 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    BOOLEAN_OR      reduce using rule 240 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    LOGICAL_AND     reduce using rule 240 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    LOGICAL_OR      reduce using rule 240 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    LOGICAL_XOR     reduce using rule 240 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    AND             reduce using rule 240 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    OR              reduce using rule 240 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    XOR             reduce using rule 240 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    CONCAT          reduce using rule 240 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    PLUS            reduce using rule 240 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    MINUS           reduce using rule 240 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    MUL             reduce using rule 240 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    DIV             reduce using rule 240 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    SL              reduce using rule 240 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    SR              reduce using rule 240 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    MOD             reduce using rule 240 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    IS_IDENTICAL    reduce using rule 240 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    IS_NOT_IDENTICAL reduce using rule 240 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    IS_EQUAL        reduce using rule 240 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    IS_NOT_EQUAL    reduce using rule 240 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    IS_SMALLER      reduce using rule 240 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    IS_SMALLER_OR_EQUAL reduce using rule 240 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    IS_GREATER      reduce using rule 240 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    IS_GREATER_OR_EQUAL reduce using rule 240 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    INSTANCEOF      reduce using rule 240 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    QUESTION        reduce using rule 240 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    SEMI            reduce using rule 240 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    COMMA           reduce using rule 240 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    RPAREN          reduce using rule 240 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    RBRACE          reduce using rule 240 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    RBRACKET        reduce using rule 240 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    DOUBLE_ARROW    reduce using rule 240 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    COLON           reduce using rule 240 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)


state 747

    (49) statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN . LBRACE inner_statement_list RBRACE additional_catches

    LBRACE          shift and go to state 763


state 748

    (85) case_list -> case_list CASE expr case_separator . inner_statement_list
    (22) inner_statement_list -> . inner_statement_list inner_statement
    (23) inner_statement_list -> . empty
    (363) empty -> .

    HALT_COMPILER   reduce using rule 363 (empty -> .)
    LBRACE          reduce using rule 363 (empty -> .)
    IF              reduce using rule 363 (empty -> .)
    WHILE           reduce using rule 363 (empty -> .)
    DO              reduce using rule 363 (empty -> .)
    FOR             reduce using rule 363 (empty -> .)
    FOREACH         reduce using rule 363 (empty -> .)
    SWITCH          reduce using rule 363 (empty -> .)
    BREAK           reduce using rule 363 (empty -> .)
    CONTINUE        reduce using rule 363 (empty -> .)
    RETURN          reduce using rule 363 (empty -> .)
    GLOBAL          reduce using rule 363 (empty -> .)
    STATIC          reduce using rule 363 (empty -> .)
    ECHO            reduce using rule 363 (empty -> .)
    INLINE_HTML     reduce using rule 363 (empty -> .)
    UNSET           reduce using rule 363 (empty -> .)
    SEMI            reduce using rule 363 (empty -> .)
    TRY             reduce using rule 363 (empty -> .)
    THROW           reduce using rule 363 (empty -> .)
    DECLARE         reduce using rule 363 (empty -> .)
    FUNCTION        reduce using rule 363 (empty -> .)
    INTERFACE       reduce using rule 363 (empty -> .)
    NEW             reduce using rule 363 (empty -> .)
    CLONE           reduce using rule 363 (empty -> .)
    LIST            reduce using rule 363 (empty -> .)
    ARRAY           reduce using rule 363 (empty -> .)
    PLUS            reduce using rule 363 (empty -> .)
    MINUS           reduce using rule 363 (empty -> .)
    NOT             reduce using rule 363 (empty -> .)
    BOOLEAN_NOT     reduce using rule 363 (empty -> .)
    INC             reduce using rule 363 (empty -> .)
    DEC             reduce using rule 363 (empty -> .)
    INT_CAST        reduce using rule 363 (empty -> .)
    DOUBLE_CAST     reduce using rule 363 (empty -> .)
    STRING_CAST     reduce using rule 363 (empty -> .)
    ARRAY_CAST      reduce using rule 363 (empty -> .)
    OBJECT_CAST     reduce using rule 363 (empty -> .)
    BOOL_CAST       reduce using rule 363 (empty -> .)
    UNSET_CAST      reduce using rule 363 (empty -> .)
    ISSET           reduce using rule 363 (empty -> .)
    EMPTY           reduce using rule 363 (empty -> .)
    EVAL            reduce using rule 363 (empty -> .)
    INCLUDE         reduce using rule 363 (empty -> .)
    INCLUDE_ONCE    reduce using rule 363 (empty -> .)
    REQUIRE         reduce using rule 363 (empty -> .)
    REQUIRE_ONCE    reduce using rule 363 (empty -> .)
    EXIT            reduce using rule 363 (empty -> .)
    PRINT           reduce using rule 363 (empty -> .)
    AT              reduce using rule 363 (empty -> .)
    LPAREN          reduce using rule 363 (empty -> .)
    CLASS           reduce using rule 363 (empty -> .)
    ABSTRACT        reduce using rule 363 (empty -> .)
    FINAL           reduce using rule 363 (empty -> .)
    QUOTE           reduce using rule 363 (empty -> .)
    START_HEREDOC   reduce using rule 363 (empty -> .)
    STRING_VARNAME  reduce using rule 363 (empty -> .)
    NS_SEPARATOR    reduce using rule 363 (empty -> .)
    NAMESPACE       reduce using rule 363 (empty -> .)
    LNUMBER         reduce using rule 363 (empty -> .)
    DNUMBER         reduce using rule 363 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 363 (empty -> .)
    LINE            reduce using rule 363 (empty -> .)
    FILE            reduce using rule 363 (empty -> .)
    DIR             reduce using rule 363 (empty -> .)
    CLASS_C         reduce using rule 363 (empty -> .)
    METHOD_C        reduce using rule 363 (empty -> .)
    FUNC_C          reduce using rule 363 (empty -> .)
    NS_C            reduce using rule 363 (empty -> .)
    STRING          reduce using rule 363 (empty -> .)
    DOLLAR          reduce using rule 363 (empty -> .)
    VARIABLE        reduce using rule 363 (empty -> .)
    RBRACE          reduce using rule 363 (empty -> .)
    CASE            reduce using rule 363 (empty -> .)
    DEFAULT         reduce using rule 363 (empty -> .)
    ENDSWITCH       reduce using rule 363 (empty -> .)

    inner_statement_list           shift and go to state 764
    empty                          shift and go to state 148

state 749

    (86) case_list -> case_list DEFAULT case_separator inner_statement_list .
    (22) inner_statement_list -> inner_statement_list . inner_statement
    (24) inner_statement -> . statement
    (25) inner_statement -> . function_declaration_statement
    (26) inner_statement -> . class_declaration_statement
    (27) inner_statement -> . HALT_COMPILER LPAREN RPAREN SEMI
    (28) statement -> . LBRACE inner_statement_list RBRACE
    (29) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (30) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (31) statement -> . WHILE LPAREN expr RPAREN while_statement
    (32) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (33) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (34) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (35) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (36) statement -> . BREAK SEMI
    (37) statement -> . BREAK expr SEMI
    (38) statement -> . CONTINUE SEMI
    (39) statement -> . CONTINUE expr SEMI
    (40) statement -> . RETURN SEMI
    (41) statement -> . RETURN expr SEMI
    (42) statement -> . GLOBAL global_var_list SEMI
    (43) statement -> . STATIC static_var_list SEMI
    (44) statement -> . ECHO echo_expr_list SEMI
    (45) statement -> . INLINE_HTML
    (46) statement -> . expr SEMI
    (47) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (48) statement -> . SEMI
    (49) statement -> . TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches
    (52) statement -> . THROW expr SEMI
    (53) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (103) function_declaration_statement -> . FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (104) class_declaration_statement -> . class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE
    (105) class_declaration_statement -> . INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (106) class_entry_type -> . CLASS
    (107) class_entry_type -> . ABSTRACT CLASS
    (108) class_entry_type -> . FINAL CLASS
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    ENDSWITCH       reduce using rule 86 (case_list -> case_list DEFAULT case_separator inner_statement_list .)
    CASE            reduce using rule 86 (case_list -> case_list DEFAULT case_separator inner_statement_list .)
    DEFAULT         reduce using rule 86 (case_list -> case_list DEFAULT case_separator inner_statement_list .)
    RBRACE          reduce using rule 86 (case_list -> case_list DEFAULT case_separator inner_statement_list .)
    HALT_COMPILER   shift and go to state 285
    LBRACE          shift and go to state 47
    IF              shift and go to state 93
    WHILE           shift and go to state 57
    DO              shift and go to state 76
    FOR             shift and go to state 36
    FOREACH         shift and go to state 13
    SWITCH          shift and go to state 61
    BREAK           shift and go to state 74
    CONTINUE        shift and go to state 48
    RETURN          shift and go to state 23
    GLOBAL          shift and go to state 55
    STATIC          shift and go to state 29
    ECHO            shift and go to state 42
    INLINE_HTML     shift and go to state 88
    UNSET           shift and go to state 83
    SEMI            shift and go to state 85
    TRY             shift and go to state 43
    THROW           shift and go to state 96
    DECLARE         shift and go to state 16
    FUNCTION        shift and go to state 40
    INTERFACE       shift and go to state 21
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    CLASS           shift and go to state 20
    ABSTRACT        shift and go to state 80
    FINAL           shift and go to state 32
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_entry_type               shift and go to state 53
    inner_statement                shift and go to state 286
    class_name                     shift and go to state 54
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    function_call                  shift and go to state 27
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    function_declaration_statement shift and go to state 287
    statement                      shift and go to state 288
    class_constant                 shift and go to state 24
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    class_declaration_statement    shift and go to state 289
    compound_variable              shift and go to state 72
    expr                           shift and go to state 71

state 750

    (83) switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .

    HALT_COMPILER   reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    NAMESPACE       reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    CONST           reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    USE             reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    LBRACE          reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    IF              reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    WHILE           reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    DO              reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    FOR             reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    FOREACH         reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    SWITCH          reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    BREAK           reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    CONTINUE        reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    RETURN          reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    GLOBAL          reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    STATIC          reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    ECHO            reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    INLINE_HTML     reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    UNSET           reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    SEMI            reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    TRY             reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    THROW           reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    DECLARE         reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    FUNCTION        reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    INTERFACE       reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    NEW             reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    CLONE           reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    LIST            reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    ARRAY           reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    PLUS            reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    MINUS           reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    NOT             reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    BOOLEAN_NOT     reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    INC             reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    DEC             reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    INT_CAST        reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    DOUBLE_CAST     reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    STRING_CAST     reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    ARRAY_CAST      reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    OBJECT_CAST     reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    BOOL_CAST       reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    UNSET_CAST      reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    ISSET           reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    EMPTY           reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    EVAL            reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    INCLUDE         reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    INCLUDE_ONCE    reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    REQUIRE         reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    REQUIRE_ONCE    reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    EXIT            reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    PRINT           reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    AT              reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    LPAREN          reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    CLASS           reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    ABSTRACT        reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    FINAL           reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    QUOTE           reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    START_HEREDOC   reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    STRING_VARNAME  reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    NS_SEPARATOR    reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    LNUMBER         reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    DNUMBER         reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    LINE            reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    FILE            reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    DIR             reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    CLASS_C         reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    METHOD_C        reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    FUNC_C          reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    NS_C            reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    STRING          reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    DOLLAR          reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    VARIABLE        reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    $end            reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    RBRACE          reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    ELSEIF          reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    ELSE            reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    ENDDECLARE      reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    ENDWHILE        reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    ENDIF           reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    ENDFOREACH      reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    CASE            reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    DEFAULT         reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    ENDSWITCH       reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    ENDFOR          reduce using rule 83 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)


state 751

    (30) statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF . SEMI

    SEMI            shift and go to state 765


state 752

    (65) new_else_single -> ELSE COLON . inner_statement_list
    (22) inner_statement_list -> . inner_statement_list inner_statement
    (23) inner_statement_list -> . empty
    (363) empty -> .

    HALT_COMPILER   reduce using rule 363 (empty -> .)
    LBRACE          reduce using rule 363 (empty -> .)
    IF              reduce using rule 363 (empty -> .)
    WHILE           reduce using rule 363 (empty -> .)
    DO              reduce using rule 363 (empty -> .)
    FOR             reduce using rule 363 (empty -> .)
    FOREACH         reduce using rule 363 (empty -> .)
    SWITCH          reduce using rule 363 (empty -> .)
    BREAK           reduce using rule 363 (empty -> .)
    CONTINUE        reduce using rule 363 (empty -> .)
    RETURN          reduce using rule 363 (empty -> .)
    GLOBAL          reduce using rule 363 (empty -> .)
    STATIC          reduce using rule 363 (empty -> .)
    ECHO            reduce using rule 363 (empty -> .)
    INLINE_HTML     reduce using rule 363 (empty -> .)
    UNSET           reduce using rule 363 (empty -> .)
    SEMI            reduce using rule 363 (empty -> .)
    TRY             reduce using rule 363 (empty -> .)
    THROW           reduce using rule 363 (empty -> .)
    DECLARE         reduce using rule 363 (empty -> .)
    FUNCTION        reduce using rule 363 (empty -> .)
    INTERFACE       reduce using rule 363 (empty -> .)
    NEW             reduce using rule 363 (empty -> .)
    CLONE           reduce using rule 363 (empty -> .)
    LIST            reduce using rule 363 (empty -> .)
    ARRAY           reduce using rule 363 (empty -> .)
    PLUS            reduce using rule 363 (empty -> .)
    MINUS           reduce using rule 363 (empty -> .)
    NOT             reduce using rule 363 (empty -> .)
    BOOLEAN_NOT     reduce using rule 363 (empty -> .)
    INC             reduce using rule 363 (empty -> .)
    DEC             reduce using rule 363 (empty -> .)
    INT_CAST        reduce using rule 363 (empty -> .)
    DOUBLE_CAST     reduce using rule 363 (empty -> .)
    STRING_CAST     reduce using rule 363 (empty -> .)
    ARRAY_CAST      reduce using rule 363 (empty -> .)
    OBJECT_CAST     reduce using rule 363 (empty -> .)
    BOOL_CAST       reduce using rule 363 (empty -> .)
    UNSET_CAST      reduce using rule 363 (empty -> .)
    ISSET           reduce using rule 363 (empty -> .)
    EMPTY           reduce using rule 363 (empty -> .)
    EVAL            reduce using rule 363 (empty -> .)
    INCLUDE         reduce using rule 363 (empty -> .)
    INCLUDE_ONCE    reduce using rule 363 (empty -> .)
    REQUIRE         reduce using rule 363 (empty -> .)
    REQUIRE_ONCE    reduce using rule 363 (empty -> .)
    EXIT            reduce using rule 363 (empty -> .)
    PRINT           reduce using rule 363 (empty -> .)
    AT              reduce using rule 363 (empty -> .)
    LPAREN          reduce using rule 363 (empty -> .)
    CLASS           reduce using rule 363 (empty -> .)
    ABSTRACT        reduce using rule 363 (empty -> .)
    FINAL           reduce using rule 363 (empty -> .)
    QUOTE           reduce using rule 363 (empty -> .)
    START_HEREDOC   reduce using rule 363 (empty -> .)
    STRING_VARNAME  reduce using rule 363 (empty -> .)
    NS_SEPARATOR    reduce using rule 363 (empty -> .)
    NAMESPACE       reduce using rule 363 (empty -> .)
    LNUMBER         reduce using rule 363 (empty -> .)
    DNUMBER         reduce using rule 363 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 363 (empty -> .)
    LINE            reduce using rule 363 (empty -> .)
    FILE            reduce using rule 363 (empty -> .)
    DIR             reduce using rule 363 (empty -> .)
    CLASS_C         reduce using rule 363 (empty -> .)
    METHOD_C        reduce using rule 363 (empty -> .)
    FUNC_C          reduce using rule 363 (empty -> .)
    NS_C            reduce using rule 363 (empty -> .)
    STRING          reduce using rule 363 (empty -> .)
    DOLLAR          reduce using rule 363 (empty -> .)
    VARIABLE        reduce using rule 363 (empty -> .)
    ENDIF           reduce using rule 363 (empty -> .)

    inner_statement_list           shift and go to state 766
    empty                          shift and go to state 148

state 753

    (63) new_elseif_list -> new_elseif_list ELSEIF LPAREN . expr RPAREN COLON inner_statement_list
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    STATIC          shift and go to state 101
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    class_constant                 shift and go to state 24
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 767

state 754

    (59) elseif_list -> elseif_list ELSEIF LPAREN expr . RPAREN statement
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    RPAREN          shift and go to state 768
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    LOGICAL_AND     shift and go to state 181
    LOGICAL_OR      shift and go to state 202
    LOGICAL_XOR     shift and go to state 200
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188


state 755

    (79) foreach_statement -> COLON inner_statement_list ENDFOREACH . SEMI

    SEMI            shift and go to state 769


state 756

    (121) class_variable_declaration -> class_variable_declaration COMMA VARIABLE EQUALS . static_scalar
    (334) static_scalar -> . common_scalar
    (335) static_scalar -> . QUOTE QUOTE
    (336) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (337) static_scalar -> . namespace_name
    (338) static_scalar -> . NS_SEPARATOR namespace_name
    (339) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (340) static_scalar -> . PLUS static_scalar
    (341) static_scalar -> . MINUS static_scalar
    (342) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    QUOTE           shift and go to state 417
    NS_SEPARATOR    shift and go to state 421
    NAMESPACE       shift and go to state 420
    PLUS            shift and go to state 418
    MINUS           shift and go to state 415
    ARRAY           shift and go to state 419
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89

    static_scalar                  shift and go to state 770
    common_scalar                  shift and go to state 414
    namespace_name                 shift and go to state 422

state 757

    (118) class_statement -> method_modifiers FUNCTION is_reference STRING LPAREN . parameter_list RPAREN method_body
    (147) parameter_list -> . parameter_list COMMA parameter
    (148) parameter_list -> . parameter
    (149) parameter_list -> . empty
    (150) parameter -> . VARIABLE
    (151) parameter -> . class_name VARIABLE
    (152) parameter -> . AND VARIABLE
    (153) parameter -> . class_name AND VARIABLE
    (154) parameter -> . VARIABLE EQUALS static_scalar
    (155) parameter -> . class_name VARIABLE EQUALS static_scalar
    (156) parameter -> . AND VARIABLE EQUALS static_scalar
    (157) parameter -> . class_name AND VARIABLE EQUALS static_scalar
    (363) empty -> .
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    VARIABLE        shift and go to state 439
    AND             shift and go to state 440
    RPAREN          reduce using rule 363 (empty -> .)
    COMMA           reduce using rule 363 (empty -> .)
    NS_SEPARATOR    shift and go to state 167
    NAMESPACE       shift and go to state 165
    STATIC          shift and go to state 101
    STRING          shift and go to state 89

    parameter_list                 shift and go to state 771
    class_name                     shift and go to state 436
    parameter                      shift and go to state 437
    empty                          shift and go to state 438
    namespace_name                 shift and go to state 169

state 758

    (125) class_constant_declaration -> class_constant_declaration COMMA STRING EQUALS static_scalar .

    SEMI            reduce using rule 125 (class_constant_declaration -> class_constant_declaration COMMA STRING EQUALS static_scalar .)
    COMMA           reduce using rule 125 (class_constant_declaration -> class_constant_declaration COMMA STRING EQUALS static_scalar .)


state 759

    (347) static_non_empty_array_pair_list -> static_non_empty_array_pair_list COMMA static_scalar DOUBLE_ARROW static_scalar .

    COMMA           reduce using rule 347 (static_non_empty_array_pair_list -> static_non_empty_array_pair_list COMMA static_scalar DOUBLE_ARROW static_scalar .)
    RPAREN          reduce using rule 347 (static_non_empty_array_pair_list -> static_non_empty_array_pair_list COMMA static_scalar DOUBLE_ARROW static_scalar .)


state 760

    (73) for_statement -> COLON inner_statement_list . ENDFOR SEMI
    (22) inner_statement_list -> inner_statement_list . inner_statement
    (24) inner_statement -> . statement
    (25) inner_statement -> . function_declaration_statement
    (26) inner_statement -> . class_declaration_statement
    (27) inner_statement -> . HALT_COMPILER LPAREN RPAREN SEMI
    (28) statement -> . LBRACE inner_statement_list RBRACE
    (29) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (30) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (31) statement -> . WHILE LPAREN expr RPAREN while_statement
    (32) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (33) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (34) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (35) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (36) statement -> . BREAK SEMI
    (37) statement -> . BREAK expr SEMI
    (38) statement -> . CONTINUE SEMI
    (39) statement -> . CONTINUE expr SEMI
    (40) statement -> . RETURN SEMI
    (41) statement -> . RETURN expr SEMI
    (42) statement -> . GLOBAL global_var_list SEMI
    (43) statement -> . STATIC static_var_list SEMI
    (44) statement -> . ECHO echo_expr_list SEMI
    (45) statement -> . INLINE_HTML
    (46) statement -> . expr SEMI
    (47) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (48) statement -> . SEMI
    (49) statement -> . TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches
    (52) statement -> . THROW expr SEMI
    (53) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (103) function_declaration_statement -> . FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (104) class_declaration_statement -> . class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE
    (105) class_declaration_statement -> . INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (106) class_entry_type -> . CLASS
    (107) class_entry_type -> . ABSTRACT CLASS
    (108) class_entry_type -> . FINAL CLASS
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    ENDFOR          shift and go to state 772
    HALT_COMPILER   shift and go to state 285
    LBRACE          shift and go to state 47
    IF              shift and go to state 93
    WHILE           shift and go to state 57
    DO              shift and go to state 76
    FOR             shift and go to state 36
    FOREACH         shift and go to state 13
    SWITCH          shift and go to state 61
    BREAK           shift and go to state 74
    CONTINUE        shift and go to state 48
    RETURN          shift and go to state 23
    GLOBAL          shift and go to state 55
    STATIC          shift and go to state 29
    ECHO            shift and go to state 42
    INLINE_HTML     shift and go to state 88
    UNSET           shift and go to state 83
    SEMI            shift and go to state 85
    TRY             shift and go to state 43
    THROW           shift and go to state 96
    DECLARE         shift and go to state 16
    FUNCTION        shift and go to state 40
    INTERFACE       shift and go to state 21
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    CLASS           shift and go to state 20
    ABSTRACT        shift and go to state 80
    FINAL           shift and go to state 32
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_entry_type               shift and go to state 53
    inner_statement                shift and go to state 286
    class_name                     shift and go to state 54
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    function_call                  shift and go to state 27
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    function_declaration_statement shift and go to state 287
    statement                      shift and go to state 288
    class_constant                 shift and go to state 24
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    class_declaration_statement    shift and go to state 289
    compound_variable              shift and go to state 72
    expr                           shift and go to state 71

state 761

    (243) lexical_var_list -> lexical_var_list COMMA AND . VARIABLE

    VARIABLE        shift and go to state 773


state 762

    (244) lexical_var_list -> lexical_var_list COMMA VARIABLE .

    RPAREN          reduce using rule 244 (lexical_var_list -> lexical_var_list COMMA VARIABLE .)
    COMMA           reduce using rule 244 (lexical_var_list -> lexical_var_list COMMA VARIABLE .)


state 763

    (49) statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE . inner_statement_list RBRACE additional_catches
    (22) inner_statement_list -> . inner_statement_list inner_statement
    (23) inner_statement_list -> . empty
    (363) empty -> .

    RBRACE          reduce using rule 363 (empty -> .)
    HALT_COMPILER   reduce using rule 363 (empty -> .)
    LBRACE          reduce using rule 363 (empty -> .)
    IF              reduce using rule 363 (empty -> .)
    WHILE           reduce using rule 363 (empty -> .)
    DO              reduce using rule 363 (empty -> .)
    FOR             reduce using rule 363 (empty -> .)
    FOREACH         reduce using rule 363 (empty -> .)
    SWITCH          reduce using rule 363 (empty -> .)
    BREAK           reduce using rule 363 (empty -> .)
    CONTINUE        reduce using rule 363 (empty -> .)
    RETURN          reduce using rule 363 (empty -> .)
    GLOBAL          reduce using rule 363 (empty -> .)
    STATIC          reduce using rule 363 (empty -> .)
    ECHO            reduce using rule 363 (empty -> .)
    INLINE_HTML     reduce using rule 363 (empty -> .)
    UNSET           reduce using rule 363 (empty -> .)
    SEMI            reduce using rule 363 (empty -> .)
    TRY             reduce using rule 363 (empty -> .)
    THROW           reduce using rule 363 (empty -> .)
    DECLARE         reduce using rule 363 (empty -> .)
    FUNCTION        reduce using rule 363 (empty -> .)
    INTERFACE       reduce using rule 363 (empty -> .)
    NEW             reduce using rule 363 (empty -> .)
    CLONE           reduce using rule 363 (empty -> .)
    LIST            reduce using rule 363 (empty -> .)
    ARRAY           reduce using rule 363 (empty -> .)
    PLUS            reduce using rule 363 (empty -> .)
    MINUS           reduce using rule 363 (empty -> .)
    NOT             reduce using rule 363 (empty -> .)
    BOOLEAN_NOT     reduce using rule 363 (empty -> .)
    INC             reduce using rule 363 (empty -> .)
    DEC             reduce using rule 363 (empty -> .)
    INT_CAST        reduce using rule 363 (empty -> .)
    DOUBLE_CAST     reduce using rule 363 (empty -> .)
    STRING_CAST     reduce using rule 363 (empty -> .)
    ARRAY_CAST      reduce using rule 363 (empty -> .)
    OBJECT_CAST     reduce using rule 363 (empty -> .)
    BOOL_CAST       reduce using rule 363 (empty -> .)
    UNSET_CAST      reduce using rule 363 (empty -> .)
    ISSET           reduce using rule 363 (empty -> .)
    EMPTY           reduce using rule 363 (empty -> .)
    EVAL            reduce using rule 363 (empty -> .)
    INCLUDE         reduce using rule 363 (empty -> .)
    INCLUDE_ONCE    reduce using rule 363 (empty -> .)
    REQUIRE         reduce using rule 363 (empty -> .)
    REQUIRE_ONCE    reduce using rule 363 (empty -> .)
    EXIT            reduce using rule 363 (empty -> .)
    PRINT           reduce using rule 363 (empty -> .)
    AT              reduce using rule 363 (empty -> .)
    LPAREN          reduce using rule 363 (empty -> .)
    CLASS           reduce using rule 363 (empty -> .)
    ABSTRACT        reduce using rule 363 (empty -> .)
    FINAL           reduce using rule 363 (empty -> .)
    QUOTE           reduce using rule 363 (empty -> .)
    START_HEREDOC   reduce using rule 363 (empty -> .)
    STRING_VARNAME  reduce using rule 363 (empty -> .)
    NS_SEPARATOR    reduce using rule 363 (empty -> .)
    NAMESPACE       reduce using rule 363 (empty -> .)
    LNUMBER         reduce using rule 363 (empty -> .)
    DNUMBER         reduce using rule 363 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 363 (empty -> .)
    LINE            reduce using rule 363 (empty -> .)
    FILE            reduce using rule 363 (empty -> .)
    DIR             reduce using rule 363 (empty -> .)
    CLASS_C         reduce using rule 363 (empty -> .)
    METHOD_C        reduce using rule 363 (empty -> .)
    FUNC_C          reduce using rule 363 (empty -> .)
    NS_C            reduce using rule 363 (empty -> .)
    STRING          reduce using rule 363 (empty -> .)
    DOLLAR          reduce using rule 363 (empty -> .)
    VARIABLE        reduce using rule 363 (empty -> .)

    inner_statement_list           shift and go to state 774
    empty                          shift and go to state 148

state 764

    (85) case_list -> case_list CASE expr case_separator inner_statement_list .
    (22) inner_statement_list -> inner_statement_list . inner_statement
    (24) inner_statement -> . statement
    (25) inner_statement -> . function_declaration_statement
    (26) inner_statement -> . class_declaration_statement
    (27) inner_statement -> . HALT_COMPILER LPAREN RPAREN SEMI
    (28) statement -> . LBRACE inner_statement_list RBRACE
    (29) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (30) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (31) statement -> . WHILE LPAREN expr RPAREN while_statement
    (32) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (33) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (34) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (35) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (36) statement -> . BREAK SEMI
    (37) statement -> . BREAK expr SEMI
    (38) statement -> . CONTINUE SEMI
    (39) statement -> . CONTINUE expr SEMI
    (40) statement -> . RETURN SEMI
    (41) statement -> . RETURN expr SEMI
    (42) statement -> . GLOBAL global_var_list SEMI
    (43) statement -> . STATIC static_var_list SEMI
    (44) statement -> . ECHO echo_expr_list SEMI
    (45) statement -> . INLINE_HTML
    (46) statement -> . expr SEMI
    (47) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (48) statement -> . SEMI
    (49) statement -> . TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches
    (52) statement -> . THROW expr SEMI
    (53) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (103) function_declaration_statement -> . FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (104) class_declaration_statement -> . class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE
    (105) class_declaration_statement -> . INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (106) class_entry_type -> . CLASS
    (107) class_entry_type -> . ABSTRACT CLASS
    (108) class_entry_type -> . FINAL CLASS
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    ENDSWITCH       reduce using rule 85 (case_list -> case_list CASE expr case_separator inner_statement_list .)
    CASE            reduce using rule 85 (case_list -> case_list CASE expr case_separator inner_statement_list .)
    DEFAULT         reduce using rule 85 (case_list -> case_list CASE expr case_separator inner_statement_list .)
    RBRACE          reduce using rule 85 (case_list -> case_list CASE expr case_separator inner_statement_list .)
    HALT_COMPILER   shift and go to state 285
    LBRACE          shift and go to state 47
    IF              shift and go to state 93
    WHILE           shift and go to state 57
    DO              shift and go to state 76
    FOR             shift and go to state 36
    FOREACH         shift and go to state 13
    SWITCH          shift and go to state 61
    BREAK           shift and go to state 74
    CONTINUE        shift and go to state 48
    RETURN          shift and go to state 23
    GLOBAL          shift and go to state 55
    STATIC          shift and go to state 29
    ECHO            shift and go to state 42
    INLINE_HTML     shift and go to state 88
    UNSET           shift and go to state 83
    SEMI            shift and go to state 85
    TRY             shift and go to state 43
    THROW           shift and go to state 96
    DECLARE         shift and go to state 16
    FUNCTION        shift and go to state 40
    INTERFACE       shift and go to state 21
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    CLASS           shift and go to state 20
    ABSTRACT        shift and go to state 80
    FINAL           shift and go to state 32
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_entry_type               shift and go to state 53
    inner_statement                shift and go to state 286
    class_name                     shift and go to state 54
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    function_call                  shift and go to state 27
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    function_declaration_statement shift and go to state 287
    statement                      shift and go to state 288
    class_constant                 shift and go to state 24
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    class_declaration_statement    shift and go to state 289
    compound_variable              shift and go to state 72
    expr                           shift and go to state 71

state 765

    (30) statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .

    HALT_COMPILER   reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    NAMESPACE       reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    CONST           reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    USE             reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    LBRACE          reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    IF              reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    WHILE           reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    DO              reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    FOR             reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    FOREACH         reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    SWITCH          reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    BREAK           reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    CONTINUE        reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    RETURN          reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    GLOBAL          reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    STATIC          reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    ECHO            reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    INLINE_HTML     reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    UNSET           reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    SEMI            reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    TRY             reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    THROW           reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    DECLARE         reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    FUNCTION        reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    INTERFACE       reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    NEW             reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    CLONE           reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    LIST            reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    ARRAY           reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    PLUS            reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    MINUS           reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    NOT             reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    BOOLEAN_NOT     reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    INC             reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    DEC             reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    INT_CAST        reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    DOUBLE_CAST     reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    STRING_CAST     reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    ARRAY_CAST      reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    OBJECT_CAST     reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    BOOL_CAST       reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    UNSET_CAST      reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    ISSET           reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    EMPTY           reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    EVAL            reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    INCLUDE         reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    INCLUDE_ONCE    reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    REQUIRE         reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    REQUIRE_ONCE    reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    EXIT            reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    PRINT           reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    AT              reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    LPAREN          reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    CLASS           reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    ABSTRACT        reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    FINAL           reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    QUOTE           reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    START_HEREDOC   reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    STRING_VARNAME  reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    NS_SEPARATOR    reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    LNUMBER         reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    DNUMBER         reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    LINE            reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    FILE            reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    DIR             reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    CLASS_C         reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    METHOD_C        reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    FUNC_C          reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    NS_C            reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    STRING          reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    DOLLAR          reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    VARIABLE        reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    $end            reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    RBRACE          reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    ELSEIF          reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    ELSE            reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    ENDDECLARE      reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    ENDWHILE        reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    ENDIF           reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    ENDFOREACH      reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    CASE            reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    DEFAULT         reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    ENDSWITCH       reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    ENDFOR          reduce using rule 30 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)


state 766

    (65) new_else_single -> ELSE COLON inner_statement_list .
    (22) inner_statement_list -> inner_statement_list . inner_statement
    (24) inner_statement -> . statement
    (25) inner_statement -> . function_declaration_statement
    (26) inner_statement -> . class_declaration_statement
    (27) inner_statement -> . HALT_COMPILER LPAREN RPAREN SEMI
    (28) statement -> . LBRACE inner_statement_list RBRACE
    (29) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (30) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (31) statement -> . WHILE LPAREN expr RPAREN while_statement
    (32) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (33) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (34) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (35) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (36) statement -> . BREAK SEMI
    (37) statement -> . BREAK expr SEMI
    (38) statement -> . CONTINUE SEMI
    (39) statement -> . CONTINUE expr SEMI
    (40) statement -> . RETURN SEMI
    (41) statement -> . RETURN expr SEMI
    (42) statement -> . GLOBAL global_var_list SEMI
    (43) statement -> . STATIC static_var_list SEMI
    (44) statement -> . ECHO echo_expr_list SEMI
    (45) statement -> . INLINE_HTML
    (46) statement -> . expr SEMI
    (47) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (48) statement -> . SEMI
    (49) statement -> . TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches
    (52) statement -> . THROW expr SEMI
    (53) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (103) function_declaration_statement -> . FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (104) class_declaration_statement -> . class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE
    (105) class_declaration_statement -> . INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (106) class_entry_type -> . CLASS
    (107) class_entry_type -> . ABSTRACT CLASS
    (108) class_entry_type -> . FINAL CLASS
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    ENDIF           reduce using rule 65 (new_else_single -> ELSE COLON inner_statement_list .)
    HALT_COMPILER   shift and go to state 285
    LBRACE          shift and go to state 47
    IF              shift and go to state 93
    WHILE           shift and go to state 57
    DO              shift and go to state 76
    FOR             shift and go to state 36
    FOREACH         shift and go to state 13
    SWITCH          shift and go to state 61
    BREAK           shift and go to state 74
    CONTINUE        shift and go to state 48
    RETURN          shift and go to state 23
    GLOBAL          shift and go to state 55
    STATIC          shift and go to state 29
    ECHO            shift and go to state 42
    INLINE_HTML     shift and go to state 88
    UNSET           shift and go to state 83
    SEMI            shift and go to state 85
    TRY             shift and go to state 43
    THROW           shift and go to state 96
    DECLARE         shift and go to state 16
    FUNCTION        shift and go to state 40
    INTERFACE       shift and go to state 21
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    CLASS           shift and go to state 20
    ABSTRACT        shift and go to state 80
    FINAL           shift and go to state 32
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_entry_type               shift and go to state 53
    inner_statement                shift and go to state 286
    class_name                     shift and go to state 54
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    function_call                  shift and go to state 27
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    function_declaration_statement shift and go to state 287
    statement                      shift and go to state 288
    class_constant                 shift and go to state 24
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    class_declaration_statement    shift and go to state 289
    compound_variable              shift and go to state 72
    expr                           shift and go to state 71

state 767

    (63) new_elseif_list -> new_elseif_list ELSEIF LPAREN expr . RPAREN COLON inner_statement_list
    (258) expr -> expr . BOOLEAN_AND expr
    (259) expr -> expr . BOOLEAN_OR expr
    (260) expr -> expr . LOGICAL_AND expr
    (261) expr -> expr . LOGICAL_OR expr
    (262) expr -> expr . LOGICAL_XOR expr
    (263) expr -> expr . AND expr
    (264) expr -> expr . OR expr
    (265) expr -> expr . XOR expr
    (266) expr -> expr . CONCAT expr
    (267) expr -> expr . PLUS expr
    (268) expr -> expr . MINUS expr
    (269) expr -> expr . MUL expr
    (270) expr -> expr . DIV expr
    (271) expr -> expr . SL expr
    (272) expr -> expr . SR expr
    (273) expr -> expr . MOD expr
    (274) expr -> expr . IS_IDENTICAL expr
    (275) expr -> expr . IS_NOT_IDENTICAL expr
    (276) expr -> expr . IS_EQUAL expr
    (277) expr -> expr . IS_NOT_EQUAL expr
    (278) expr -> expr . IS_SMALLER expr
    (279) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (280) expr -> expr . IS_GREATER expr
    (281) expr -> expr . IS_GREATER_OR_EQUAL expr
    (282) expr -> expr . INSTANCEOF expr
    (287) expr -> expr . QUESTION expr COLON expr

    RPAREN          shift and go to state 775
    BOOLEAN_AND     shift and go to state 196
    BOOLEAN_OR      shift and go to state 194
    LOGICAL_AND     shift and go to state 181
    LOGICAL_OR      shift and go to state 202
    LOGICAL_XOR     shift and go to state 200
    AND             shift and go to state 191
    OR              shift and go to state 205
    XOR             shift and go to state 193
    CONCAT          shift and go to state 186
    PLUS            shift and go to state 190
    MINUS           shift and go to state 185
    MUL             shift and go to state 183
    DIV             shift and go to state 184
    SL              shift and go to state 203
    SR              shift and go to state 199
    MOD             shift and go to state 206
    IS_IDENTICAL    shift and go to state 201
    IS_NOT_IDENTICAL shift and go to state 198
    IS_EQUAL        shift and go to state 189
    IS_NOT_EQUAL    shift and go to state 195
    IS_SMALLER      shift and go to state 192
    IS_SMALLER_OR_EQUAL shift and go to state 197
    IS_GREATER      shift and go to state 182
    IS_GREATER_OR_EQUAL shift and go to state 180
    INSTANCEOF      shift and go to state 204
    QUESTION        shift and go to state 188


state 768

    (59) elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN . statement
    (28) statement -> . LBRACE inner_statement_list RBRACE
    (29) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (30) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (31) statement -> . WHILE LPAREN expr RPAREN while_statement
    (32) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (33) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (34) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (35) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (36) statement -> . BREAK SEMI
    (37) statement -> . BREAK expr SEMI
    (38) statement -> . CONTINUE SEMI
    (39) statement -> . CONTINUE expr SEMI
    (40) statement -> . RETURN SEMI
    (41) statement -> . RETURN expr SEMI
    (42) statement -> . GLOBAL global_var_list SEMI
    (43) statement -> . STATIC static_var_list SEMI
    (44) statement -> . ECHO echo_expr_list SEMI
    (45) statement -> . INLINE_HTML
    (46) statement -> . expr SEMI
    (47) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (48) statement -> . SEMI
    (49) statement -> . TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches
    (52) statement -> . THROW expr SEMI
    (53) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LBRACE          shift and go to state 47
    IF              shift and go to state 93
    WHILE           shift and go to state 57
    DO              shift and go to state 76
    FOR             shift and go to state 36
    FOREACH         shift and go to state 13
    SWITCH          shift and go to state 61
    BREAK           shift and go to state 74
    CONTINUE        shift and go to state 48
    RETURN          shift and go to state 23
    GLOBAL          shift and go to state 55
    STATIC          shift and go to state 29
    ECHO            shift and go to state 42
    INLINE_HTML     shift and go to state 88
    UNSET           shift and go to state 83
    SEMI            shift and go to state 85
    TRY             shift and go to state 43
    THROW           shift and go to state 96
    DECLARE         shift and go to state 16
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    FUNCTION        shift and go to state 100
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_name                     shift and go to state 54
    function_call                  shift and go to state 27
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    class_constant                 shift and go to state 24
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    statement                      shift and go to state 776
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    compound_variable              shift and go to state 72
    expr                           shift and go to state 71

state 769

    (79) foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .

    HALT_COMPILER   reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    NAMESPACE       reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    CONST           reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    USE             reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    LBRACE          reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    IF              reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    WHILE           reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    DO              reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    FOR             reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    FOREACH         reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    SWITCH          reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    BREAK           reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    CONTINUE        reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    RETURN          reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    GLOBAL          reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    STATIC          reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    ECHO            reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    INLINE_HTML     reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    UNSET           reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    SEMI            reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    TRY             reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    THROW           reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    DECLARE         reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    FUNCTION        reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    INTERFACE       reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    NEW             reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    CLONE           reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    LIST            reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    ARRAY           reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    PLUS            reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    MINUS           reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    NOT             reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    BOOLEAN_NOT     reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    INC             reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    DEC             reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    INT_CAST        reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    DOUBLE_CAST     reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    STRING_CAST     reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    ARRAY_CAST      reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    OBJECT_CAST     reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    BOOL_CAST       reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    UNSET_CAST      reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    ISSET           reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    EMPTY           reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    EVAL            reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    INCLUDE         reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    INCLUDE_ONCE    reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    REQUIRE         reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    REQUIRE_ONCE    reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    EXIT            reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    PRINT           reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    AT              reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    LPAREN          reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    CLASS           reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    ABSTRACT        reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    FINAL           reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    QUOTE           reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    START_HEREDOC   reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    STRING_VARNAME  reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    NS_SEPARATOR    reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    LNUMBER         reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    DNUMBER         reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    LINE            reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    FILE            reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    DIR             reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    CLASS_C         reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    METHOD_C        reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    FUNC_C          reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    NS_C            reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    STRING          reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    DOLLAR          reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    VARIABLE        reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    $end            reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    RBRACE          reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    ELSEIF          reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    ELSE            reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    ENDDECLARE      reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    ENDWHILE        reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    ENDIF           reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    ENDFOREACH      reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    CASE            reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    DEFAULT         reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    ENDSWITCH       reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    ENDFOR          reduce using rule 79 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)


state 770

    (121) class_variable_declaration -> class_variable_declaration COMMA VARIABLE EQUALS static_scalar .

    SEMI            reduce using rule 121 (class_variable_declaration -> class_variable_declaration COMMA VARIABLE EQUALS static_scalar .)
    COMMA           reduce using rule 121 (class_variable_declaration -> class_variable_declaration COMMA VARIABLE EQUALS static_scalar .)


state 771

    (118) class_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list . RPAREN method_body
    (147) parameter_list -> parameter_list . COMMA parameter

    RPAREN          shift and go to state 777
    COMMA           shift and go to state 534


state 772

    (73) for_statement -> COLON inner_statement_list ENDFOR . SEMI

    SEMI            shift and go to state 778


state 773

    (243) lexical_var_list -> lexical_var_list COMMA AND VARIABLE .

    RPAREN          reduce using rule 243 (lexical_var_list -> lexical_var_list COMMA AND VARIABLE .)
    COMMA           reduce using rule 243 (lexical_var_list -> lexical_var_list COMMA AND VARIABLE .)


state 774

    (49) statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list . RBRACE additional_catches
    (22) inner_statement_list -> inner_statement_list . inner_statement
    (24) inner_statement -> . statement
    (25) inner_statement -> . function_declaration_statement
    (26) inner_statement -> . class_declaration_statement
    (27) inner_statement -> . HALT_COMPILER LPAREN RPAREN SEMI
    (28) statement -> . LBRACE inner_statement_list RBRACE
    (29) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (30) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (31) statement -> . WHILE LPAREN expr RPAREN while_statement
    (32) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (33) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (34) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (35) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (36) statement -> . BREAK SEMI
    (37) statement -> . BREAK expr SEMI
    (38) statement -> . CONTINUE SEMI
    (39) statement -> . CONTINUE expr SEMI
    (40) statement -> . RETURN SEMI
    (41) statement -> . RETURN expr SEMI
    (42) statement -> . GLOBAL global_var_list SEMI
    (43) statement -> . STATIC static_var_list SEMI
    (44) statement -> . ECHO echo_expr_list SEMI
    (45) statement -> . INLINE_HTML
    (46) statement -> . expr SEMI
    (47) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (48) statement -> . SEMI
    (49) statement -> . TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches
    (52) statement -> . THROW expr SEMI
    (53) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (103) function_declaration_statement -> . FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (104) class_declaration_statement -> . class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE
    (105) class_declaration_statement -> . INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (106) class_entry_type -> . CLASS
    (107) class_entry_type -> . ABSTRACT CLASS
    (108) class_entry_type -> . FINAL CLASS
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    RBRACE          shift and go to state 779
    HALT_COMPILER   shift and go to state 285
    LBRACE          shift and go to state 47
    IF              shift and go to state 93
    WHILE           shift and go to state 57
    DO              shift and go to state 76
    FOR             shift and go to state 36
    FOREACH         shift and go to state 13
    SWITCH          shift and go to state 61
    BREAK           shift and go to state 74
    CONTINUE        shift and go to state 48
    RETURN          shift and go to state 23
    GLOBAL          shift and go to state 55
    STATIC          shift and go to state 29
    ECHO            shift and go to state 42
    INLINE_HTML     shift and go to state 88
    UNSET           shift and go to state 83
    SEMI            shift and go to state 85
    TRY             shift and go to state 43
    THROW           shift and go to state 96
    DECLARE         shift and go to state 16
    FUNCTION        shift and go to state 40
    INTERFACE       shift and go to state 21
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    CLASS           shift and go to state 20
    ABSTRACT        shift and go to state 80
    FINAL           shift and go to state 32
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_entry_type               shift and go to state 53
    inner_statement                shift and go to state 286
    class_name                     shift and go to state 54
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    function_call                  shift and go to state 27
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    function_declaration_statement shift and go to state 287
    statement                      shift and go to state 288
    class_constant                 shift and go to state 24
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    class_declaration_statement    shift and go to state 289
    compound_variable              shift and go to state 72
    expr                           shift and go to state 71

state 775

    (63) new_elseif_list -> new_elseif_list ELSEIF LPAREN expr RPAREN . COLON inner_statement_list

    COLON           shift and go to state 780


state 776

    (59) elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .

    HALT_COMPILER   reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    NAMESPACE       reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    CONST           reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    USE             reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    LBRACE          reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    IF              reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    WHILE           reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    DO              reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    FOR             reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    FOREACH         reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    SWITCH          reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    BREAK           reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    CONTINUE        reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    RETURN          reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    GLOBAL          reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    STATIC          reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    ECHO            reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    INLINE_HTML     reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    UNSET           reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    SEMI            reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    TRY             reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    THROW           reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    DECLARE         reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    FUNCTION        reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    INTERFACE       reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    NEW             reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    CLONE           reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    LIST            reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    ARRAY           reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    PLUS            reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    MINUS           reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    NOT             reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    BOOLEAN_NOT     reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    INC             reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    DEC             reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    INT_CAST        reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    DOUBLE_CAST     reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    STRING_CAST     reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    ARRAY_CAST      reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    OBJECT_CAST     reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    BOOL_CAST       reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    UNSET_CAST      reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    ISSET           reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    EMPTY           reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    EVAL            reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    INCLUDE         reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    INCLUDE_ONCE    reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    REQUIRE         reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    REQUIRE_ONCE    reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    EXIT            reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    PRINT           reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    AT              reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    LPAREN          reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    CLASS           reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    ABSTRACT        reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    FINAL           reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    QUOTE           reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    START_HEREDOC   reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    STRING_VARNAME  reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    NS_SEPARATOR    reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    LNUMBER         reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    DNUMBER         reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    LINE            reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    FILE            reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    DIR             reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    CLASS_C         reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    METHOD_C        reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    FUNC_C          reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    NS_C            reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    STRING          reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    DOLLAR          reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    VARIABLE        reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    $end            reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    RBRACE          reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    ELSEIF          reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    ELSE            reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    ENDDECLARE      reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    ENDWHILE        reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    ENDIF           reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    ENDFOREACH      reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    CASE            reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    DEFAULT         reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    ENDSWITCH       reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    ENDFOR          reduce using rule 59 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)


state 777

    (118) class_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN . method_body
    (135) method_body -> . LBRACE inner_statement_list RBRACE
    (136) method_body -> . SEMI

    LBRACE          shift and go to state 781
    SEMI            shift and go to state 782

    method_body                    shift and go to state 783

state 778

    (73) for_statement -> COLON inner_statement_list ENDFOR SEMI .

    HALT_COMPILER   reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    NAMESPACE       reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    CONST           reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    USE             reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    LBRACE          reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    IF              reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    WHILE           reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    DO              reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    FOR             reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    FOREACH         reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    SWITCH          reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    BREAK           reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    CONTINUE        reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    RETURN          reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    GLOBAL          reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    STATIC          reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    ECHO            reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    INLINE_HTML     reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    UNSET           reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    SEMI            reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    TRY             reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    THROW           reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    DECLARE         reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    FUNCTION        reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    INTERFACE       reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    NEW             reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    CLONE           reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    LIST            reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    ARRAY           reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    PLUS            reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    MINUS           reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    NOT             reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    BOOLEAN_NOT     reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    INC             reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    DEC             reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    INT_CAST        reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    DOUBLE_CAST     reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    STRING_CAST     reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    ARRAY_CAST      reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    OBJECT_CAST     reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    BOOL_CAST       reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    UNSET_CAST      reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    ISSET           reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    EMPTY           reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    EVAL            reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    INCLUDE         reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    INCLUDE_ONCE    reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    REQUIRE         reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    REQUIRE_ONCE    reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    EXIT            reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    PRINT           reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    AT              reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    LPAREN          reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    CLASS           reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    ABSTRACT        reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    FINAL           reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    QUOTE           reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    START_HEREDOC   reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    STRING_VARNAME  reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    NS_SEPARATOR    reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    LNUMBER         reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    DNUMBER         reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    LINE            reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    FILE            reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    DIR             reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    CLASS_C         reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    METHOD_C        reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    FUNC_C          reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    NS_C            reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    STRING          reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    DOLLAR          reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    VARIABLE        reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    $end            reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    RBRACE          reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    ELSEIF          reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    ELSE            reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    ENDDECLARE      reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    ENDWHILE        reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    ENDIF           reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    ENDFOREACH      reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    CASE            reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    DEFAULT         reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    ENDSWITCH       reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    ENDFOR          reduce using rule 73 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)


state 779

    (49) statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE . additional_catches
    (50) additional_catches -> . additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE
    (51) additional_catches -> . empty
    (363) empty -> .

    CATCH           reduce using rule 363 (empty -> .)
    HALT_COMPILER   reduce using rule 363 (empty -> .)
    NAMESPACE       reduce using rule 363 (empty -> .)
    CONST           reduce using rule 363 (empty -> .)
    USE             reduce using rule 363 (empty -> .)
    LBRACE          reduce using rule 363 (empty -> .)
    IF              reduce using rule 363 (empty -> .)
    WHILE           reduce using rule 363 (empty -> .)
    DO              reduce using rule 363 (empty -> .)
    FOR             reduce using rule 363 (empty -> .)
    FOREACH         reduce using rule 363 (empty -> .)
    SWITCH          reduce using rule 363 (empty -> .)
    BREAK           reduce using rule 363 (empty -> .)
    CONTINUE        reduce using rule 363 (empty -> .)
    RETURN          reduce using rule 363 (empty -> .)
    GLOBAL          reduce using rule 363 (empty -> .)
    STATIC          reduce using rule 363 (empty -> .)
    ECHO            reduce using rule 363 (empty -> .)
    INLINE_HTML     reduce using rule 363 (empty -> .)
    UNSET           reduce using rule 363 (empty -> .)
    SEMI            reduce using rule 363 (empty -> .)
    TRY             reduce using rule 363 (empty -> .)
    THROW           reduce using rule 363 (empty -> .)
    DECLARE         reduce using rule 363 (empty -> .)
    FUNCTION        reduce using rule 363 (empty -> .)
    INTERFACE       reduce using rule 363 (empty -> .)
    NEW             reduce using rule 363 (empty -> .)
    CLONE           reduce using rule 363 (empty -> .)
    LIST            reduce using rule 363 (empty -> .)
    ARRAY           reduce using rule 363 (empty -> .)
    PLUS            reduce using rule 363 (empty -> .)
    MINUS           reduce using rule 363 (empty -> .)
    NOT             reduce using rule 363 (empty -> .)
    BOOLEAN_NOT     reduce using rule 363 (empty -> .)
    INC             reduce using rule 363 (empty -> .)
    DEC             reduce using rule 363 (empty -> .)
    INT_CAST        reduce using rule 363 (empty -> .)
    DOUBLE_CAST     reduce using rule 363 (empty -> .)
    STRING_CAST     reduce using rule 363 (empty -> .)
    ARRAY_CAST      reduce using rule 363 (empty -> .)
    OBJECT_CAST     reduce using rule 363 (empty -> .)
    BOOL_CAST       reduce using rule 363 (empty -> .)
    UNSET_CAST      reduce using rule 363 (empty -> .)
    ISSET           reduce using rule 363 (empty -> .)
    EMPTY           reduce using rule 363 (empty -> .)
    EVAL            reduce using rule 363 (empty -> .)
    INCLUDE         reduce using rule 363 (empty -> .)
    INCLUDE_ONCE    reduce using rule 363 (empty -> .)
    REQUIRE         reduce using rule 363 (empty -> .)
    REQUIRE_ONCE    reduce using rule 363 (empty -> .)
    EXIT            reduce using rule 363 (empty -> .)
    PRINT           reduce using rule 363 (empty -> .)
    AT              reduce using rule 363 (empty -> .)
    LPAREN          reduce using rule 363 (empty -> .)
    CLASS           reduce using rule 363 (empty -> .)
    ABSTRACT        reduce using rule 363 (empty -> .)
    FINAL           reduce using rule 363 (empty -> .)
    QUOTE           reduce using rule 363 (empty -> .)
    START_HEREDOC   reduce using rule 363 (empty -> .)
    STRING_VARNAME  reduce using rule 363 (empty -> .)
    NS_SEPARATOR    reduce using rule 363 (empty -> .)
    LNUMBER         reduce using rule 363 (empty -> .)
    DNUMBER         reduce using rule 363 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 363 (empty -> .)
    LINE            reduce using rule 363 (empty -> .)
    FILE            reduce using rule 363 (empty -> .)
    DIR             reduce using rule 363 (empty -> .)
    CLASS_C         reduce using rule 363 (empty -> .)
    METHOD_C        reduce using rule 363 (empty -> .)
    FUNC_C          reduce using rule 363 (empty -> .)
    NS_C            reduce using rule 363 (empty -> .)
    STRING          reduce using rule 363 (empty -> .)
    DOLLAR          reduce using rule 363 (empty -> .)
    VARIABLE        reduce using rule 363 (empty -> .)
    $end            reduce using rule 363 (empty -> .)
    RBRACE          reduce using rule 363 (empty -> .)
    ELSEIF          reduce using rule 363 (empty -> .)
    ELSE            reduce using rule 363 (empty -> .)
    ENDDECLARE      reduce using rule 363 (empty -> .)
    ENDWHILE        reduce using rule 363 (empty -> .)
    ENDIF           reduce using rule 363 (empty -> .)
    ENDFOREACH      reduce using rule 363 (empty -> .)
    CASE            reduce using rule 363 (empty -> .)
    DEFAULT         reduce using rule 363 (empty -> .)
    ENDSWITCH       reduce using rule 363 (empty -> .)
    ENDFOR          reduce using rule 363 (empty -> .)

    empty                          shift and go to state 785
    additional_catches             shift and go to state 784

state 780

    (63) new_elseif_list -> new_elseif_list ELSEIF LPAREN expr RPAREN COLON . inner_statement_list
    (22) inner_statement_list -> . inner_statement_list inner_statement
    (23) inner_statement_list -> . empty
    (363) empty -> .

    HALT_COMPILER   reduce using rule 363 (empty -> .)
    LBRACE          reduce using rule 363 (empty -> .)
    IF              reduce using rule 363 (empty -> .)
    WHILE           reduce using rule 363 (empty -> .)
    DO              reduce using rule 363 (empty -> .)
    FOR             reduce using rule 363 (empty -> .)
    FOREACH         reduce using rule 363 (empty -> .)
    SWITCH          reduce using rule 363 (empty -> .)
    BREAK           reduce using rule 363 (empty -> .)
    CONTINUE        reduce using rule 363 (empty -> .)
    RETURN          reduce using rule 363 (empty -> .)
    GLOBAL          reduce using rule 363 (empty -> .)
    STATIC          reduce using rule 363 (empty -> .)
    ECHO            reduce using rule 363 (empty -> .)
    INLINE_HTML     reduce using rule 363 (empty -> .)
    UNSET           reduce using rule 363 (empty -> .)
    SEMI            reduce using rule 363 (empty -> .)
    TRY             reduce using rule 363 (empty -> .)
    THROW           reduce using rule 363 (empty -> .)
    DECLARE         reduce using rule 363 (empty -> .)
    FUNCTION        reduce using rule 363 (empty -> .)
    INTERFACE       reduce using rule 363 (empty -> .)
    NEW             reduce using rule 363 (empty -> .)
    CLONE           reduce using rule 363 (empty -> .)
    LIST            reduce using rule 363 (empty -> .)
    ARRAY           reduce using rule 363 (empty -> .)
    PLUS            reduce using rule 363 (empty -> .)
    MINUS           reduce using rule 363 (empty -> .)
    NOT             reduce using rule 363 (empty -> .)
    BOOLEAN_NOT     reduce using rule 363 (empty -> .)
    INC             reduce using rule 363 (empty -> .)
    DEC             reduce using rule 363 (empty -> .)
    INT_CAST        reduce using rule 363 (empty -> .)
    DOUBLE_CAST     reduce using rule 363 (empty -> .)
    STRING_CAST     reduce using rule 363 (empty -> .)
    ARRAY_CAST      reduce using rule 363 (empty -> .)
    OBJECT_CAST     reduce using rule 363 (empty -> .)
    BOOL_CAST       reduce using rule 363 (empty -> .)
    UNSET_CAST      reduce using rule 363 (empty -> .)
    ISSET           reduce using rule 363 (empty -> .)
    EMPTY           reduce using rule 363 (empty -> .)
    EVAL            reduce using rule 363 (empty -> .)
    INCLUDE         reduce using rule 363 (empty -> .)
    INCLUDE_ONCE    reduce using rule 363 (empty -> .)
    REQUIRE         reduce using rule 363 (empty -> .)
    REQUIRE_ONCE    reduce using rule 363 (empty -> .)
    EXIT            reduce using rule 363 (empty -> .)
    PRINT           reduce using rule 363 (empty -> .)
    AT              reduce using rule 363 (empty -> .)
    LPAREN          reduce using rule 363 (empty -> .)
    CLASS           reduce using rule 363 (empty -> .)
    ABSTRACT        reduce using rule 363 (empty -> .)
    FINAL           reduce using rule 363 (empty -> .)
    QUOTE           reduce using rule 363 (empty -> .)
    START_HEREDOC   reduce using rule 363 (empty -> .)
    STRING_VARNAME  reduce using rule 363 (empty -> .)
    NS_SEPARATOR    reduce using rule 363 (empty -> .)
    NAMESPACE       reduce using rule 363 (empty -> .)
    LNUMBER         reduce using rule 363 (empty -> .)
    DNUMBER         reduce using rule 363 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 363 (empty -> .)
    LINE            reduce using rule 363 (empty -> .)
    FILE            reduce using rule 363 (empty -> .)
    DIR             reduce using rule 363 (empty -> .)
    CLASS_C         reduce using rule 363 (empty -> .)
    METHOD_C        reduce using rule 363 (empty -> .)
    FUNC_C          reduce using rule 363 (empty -> .)
    NS_C            reduce using rule 363 (empty -> .)
    STRING          reduce using rule 363 (empty -> .)
    DOLLAR          reduce using rule 363 (empty -> .)
    VARIABLE        reduce using rule 363 (empty -> .)
    ELSEIF          reduce using rule 363 (empty -> .)
    ELSE            reduce using rule 363 (empty -> .)
    ENDIF           reduce using rule 363 (empty -> .)

    inner_statement_list           shift and go to state 786
    empty                          shift and go to state 148

state 781

    (135) method_body -> LBRACE . inner_statement_list RBRACE
    (22) inner_statement_list -> . inner_statement_list inner_statement
    (23) inner_statement_list -> . empty
    (363) empty -> .

    RBRACE          reduce using rule 363 (empty -> .)
    HALT_COMPILER   reduce using rule 363 (empty -> .)
    LBRACE          reduce using rule 363 (empty -> .)
    IF              reduce using rule 363 (empty -> .)
    WHILE           reduce using rule 363 (empty -> .)
    DO              reduce using rule 363 (empty -> .)
    FOR             reduce using rule 363 (empty -> .)
    FOREACH         reduce using rule 363 (empty -> .)
    SWITCH          reduce using rule 363 (empty -> .)
    BREAK           reduce using rule 363 (empty -> .)
    CONTINUE        reduce using rule 363 (empty -> .)
    RETURN          reduce using rule 363 (empty -> .)
    GLOBAL          reduce using rule 363 (empty -> .)
    STATIC          reduce using rule 363 (empty -> .)
    ECHO            reduce using rule 363 (empty -> .)
    INLINE_HTML     reduce using rule 363 (empty -> .)
    UNSET           reduce using rule 363 (empty -> .)
    SEMI            reduce using rule 363 (empty -> .)
    TRY             reduce using rule 363 (empty -> .)
    THROW           reduce using rule 363 (empty -> .)
    DECLARE         reduce using rule 363 (empty -> .)
    FUNCTION        reduce using rule 363 (empty -> .)
    INTERFACE       reduce using rule 363 (empty -> .)
    NEW             reduce using rule 363 (empty -> .)
    CLONE           reduce using rule 363 (empty -> .)
    LIST            reduce using rule 363 (empty -> .)
    ARRAY           reduce using rule 363 (empty -> .)
    PLUS            reduce using rule 363 (empty -> .)
    MINUS           reduce using rule 363 (empty -> .)
    NOT             reduce using rule 363 (empty -> .)
    BOOLEAN_NOT     reduce using rule 363 (empty -> .)
    INC             reduce using rule 363 (empty -> .)
    DEC             reduce using rule 363 (empty -> .)
    INT_CAST        reduce using rule 363 (empty -> .)
    DOUBLE_CAST     reduce using rule 363 (empty -> .)
    STRING_CAST     reduce using rule 363 (empty -> .)
    ARRAY_CAST      reduce using rule 363 (empty -> .)
    OBJECT_CAST     reduce using rule 363 (empty -> .)
    BOOL_CAST       reduce using rule 363 (empty -> .)
    UNSET_CAST      reduce using rule 363 (empty -> .)
    ISSET           reduce using rule 363 (empty -> .)
    EMPTY           reduce using rule 363 (empty -> .)
    EVAL            reduce using rule 363 (empty -> .)
    INCLUDE         reduce using rule 363 (empty -> .)
    INCLUDE_ONCE    reduce using rule 363 (empty -> .)
    REQUIRE         reduce using rule 363 (empty -> .)
    REQUIRE_ONCE    reduce using rule 363 (empty -> .)
    EXIT            reduce using rule 363 (empty -> .)
    PRINT           reduce using rule 363 (empty -> .)
    AT              reduce using rule 363 (empty -> .)
    LPAREN          reduce using rule 363 (empty -> .)
    CLASS           reduce using rule 363 (empty -> .)
    ABSTRACT        reduce using rule 363 (empty -> .)
    FINAL           reduce using rule 363 (empty -> .)
    QUOTE           reduce using rule 363 (empty -> .)
    START_HEREDOC   reduce using rule 363 (empty -> .)
    STRING_VARNAME  reduce using rule 363 (empty -> .)
    NS_SEPARATOR    reduce using rule 363 (empty -> .)
    NAMESPACE       reduce using rule 363 (empty -> .)
    LNUMBER         reduce using rule 363 (empty -> .)
    DNUMBER         reduce using rule 363 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 363 (empty -> .)
    LINE            reduce using rule 363 (empty -> .)
    FILE            reduce using rule 363 (empty -> .)
    DIR             reduce using rule 363 (empty -> .)
    CLASS_C         reduce using rule 363 (empty -> .)
    METHOD_C        reduce using rule 363 (empty -> .)
    FUNC_C          reduce using rule 363 (empty -> .)
    NS_C            reduce using rule 363 (empty -> .)
    STRING          reduce using rule 363 (empty -> .)
    DOLLAR          reduce using rule 363 (empty -> .)
    VARIABLE        reduce using rule 363 (empty -> .)

    inner_statement_list           shift and go to state 787
    empty                          shift and go to state 148

state 782

    (136) method_body -> SEMI .

    RBRACE          reduce using rule 136 (method_body -> SEMI .)
    VAR             reduce using rule 136 (method_body -> SEMI .)
    CONST           reduce using rule 136 (method_body -> SEMI .)
    PUBLIC          reduce using rule 136 (method_body -> SEMI .)
    PROTECTED       reduce using rule 136 (method_body -> SEMI .)
    PRIVATE         reduce using rule 136 (method_body -> SEMI .)
    STATIC          reduce using rule 136 (method_body -> SEMI .)
    ABSTRACT        reduce using rule 136 (method_body -> SEMI .)
    FINAL           reduce using rule 136 (method_body -> SEMI .)
    FUNCTION        reduce using rule 136 (method_body -> SEMI .)


state 783

    (118) class_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body .

    RBRACE          reduce using rule 118 (class_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body .)
    VAR             reduce using rule 118 (class_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body .)
    CONST           reduce using rule 118 (class_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body .)
    PUBLIC          reduce using rule 118 (class_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body .)
    PROTECTED       reduce using rule 118 (class_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body .)
    PRIVATE         reduce using rule 118 (class_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body .)
    STATIC          reduce using rule 118 (class_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body .)
    ABSTRACT        reduce using rule 118 (class_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body .)
    FINAL           reduce using rule 118 (class_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body .)
    FUNCTION        reduce using rule 118 (class_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body .)


state 784

    (49) statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .
    (50) additional_catches -> additional_catches . CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE

    HALT_COMPILER   reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    NAMESPACE       reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    CONST           reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    USE             reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    LBRACE          reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    IF              reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    WHILE           reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    DO              reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    FOR             reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    FOREACH         reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    SWITCH          reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    BREAK           reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    CONTINUE        reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    RETURN          reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    GLOBAL          reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    STATIC          reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    ECHO            reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    INLINE_HTML     reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    UNSET           reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    SEMI            reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    TRY             reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    THROW           reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    DECLARE         reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    FUNCTION        reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    INTERFACE       reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    NEW             reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    CLONE           reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    LIST            reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    ARRAY           reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    PLUS            reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    MINUS           reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    NOT             reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    BOOLEAN_NOT     reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    INC             reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    DEC             reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    INT_CAST        reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    DOUBLE_CAST     reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    STRING_CAST     reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    ARRAY_CAST      reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    OBJECT_CAST     reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    BOOL_CAST       reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    UNSET_CAST      reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    ISSET           reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    EMPTY           reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    EVAL            reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    INCLUDE         reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    INCLUDE_ONCE    reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    REQUIRE         reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    REQUIRE_ONCE    reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    EXIT            reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    PRINT           reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    AT              reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    LPAREN          reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    CLASS           reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    ABSTRACT        reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    FINAL           reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    QUOTE           reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    START_HEREDOC   reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    STRING_VARNAME  reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    NS_SEPARATOR    reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    LNUMBER         reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    DNUMBER         reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    CONSTANT_ENCAPSED_STRING reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    LINE            reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    FILE            reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    DIR             reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    CLASS_C         reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    METHOD_C        reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    FUNC_C          reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    NS_C            reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    STRING          reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    DOLLAR          reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    VARIABLE        reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    $end            reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    RBRACE          reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    ELSEIF          reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    ELSE            reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    ENDDECLARE      reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    ENDWHILE        reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    ENDIF           reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    ENDFOREACH      reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    CASE            reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    DEFAULT         reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    ENDSWITCH       reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    ENDFOR          reduce using rule 49 (statement -> TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches .)
    CATCH           shift and go to state 788


state 785

    (51) additional_catches -> empty .

    CATCH           reduce using rule 51 (additional_catches -> empty .)
    HALT_COMPILER   reduce using rule 51 (additional_catches -> empty .)
    NAMESPACE       reduce using rule 51 (additional_catches -> empty .)
    CONST           reduce using rule 51 (additional_catches -> empty .)
    USE             reduce using rule 51 (additional_catches -> empty .)
    LBRACE          reduce using rule 51 (additional_catches -> empty .)
    IF              reduce using rule 51 (additional_catches -> empty .)
    WHILE           reduce using rule 51 (additional_catches -> empty .)
    DO              reduce using rule 51 (additional_catches -> empty .)
    FOR             reduce using rule 51 (additional_catches -> empty .)
    FOREACH         reduce using rule 51 (additional_catches -> empty .)
    SWITCH          reduce using rule 51 (additional_catches -> empty .)
    BREAK           reduce using rule 51 (additional_catches -> empty .)
    CONTINUE        reduce using rule 51 (additional_catches -> empty .)
    RETURN          reduce using rule 51 (additional_catches -> empty .)
    GLOBAL          reduce using rule 51 (additional_catches -> empty .)
    STATIC          reduce using rule 51 (additional_catches -> empty .)
    ECHO            reduce using rule 51 (additional_catches -> empty .)
    INLINE_HTML     reduce using rule 51 (additional_catches -> empty .)
    UNSET           reduce using rule 51 (additional_catches -> empty .)
    SEMI            reduce using rule 51 (additional_catches -> empty .)
    TRY             reduce using rule 51 (additional_catches -> empty .)
    THROW           reduce using rule 51 (additional_catches -> empty .)
    DECLARE         reduce using rule 51 (additional_catches -> empty .)
    FUNCTION        reduce using rule 51 (additional_catches -> empty .)
    INTERFACE       reduce using rule 51 (additional_catches -> empty .)
    NEW             reduce using rule 51 (additional_catches -> empty .)
    CLONE           reduce using rule 51 (additional_catches -> empty .)
    LIST            reduce using rule 51 (additional_catches -> empty .)
    ARRAY           reduce using rule 51 (additional_catches -> empty .)
    PLUS            reduce using rule 51 (additional_catches -> empty .)
    MINUS           reduce using rule 51 (additional_catches -> empty .)
    NOT             reduce using rule 51 (additional_catches -> empty .)
    BOOLEAN_NOT     reduce using rule 51 (additional_catches -> empty .)
    INC             reduce using rule 51 (additional_catches -> empty .)
    DEC             reduce using rule 51 (additional_catches -> empty .)
    INT_CAST        reduce using rule 51 (additional_catches -> empty .)
    DOUBLE_CAST     reduce using rule 51 (additional_catches -> empty .)
    STRING_CAST     reduce using rule 51 (additional_catches -> empty .)
    ARRAY_CAST      reduce using rule 51 (additional_catches -> empty .)
    OBJECT_CAST     reduce using rule 51 (additional_catches -> empty .)
    BOOL_CAST       reduce using rule 51 (additional_catches -> empty .)
    UNSET_CAST      reduce using rule 51 (additional_catches -> empty .)
    ISSET           reduce using rule 51 (additional_catches -> empty .)
    EMPTY           reduce using rule 51 (additional_catches -> empty .)
    EVAL            reduce using rule 51 (additional_catches -> empty .)
    INCLUDE         reduce using rule 51 (additional_catches -> empty .)
    INCLUDE_ONCE    reduce using rule 51 (additional_catches -> empty .)
    REQUIRE         reduce using rule 51 (additional_catches -> empty .)
    REQUIRE_ONCE    reduce using rule 51 (additional_catches -> empty .)
    EXIT            reduce using rule 51 (additional_catches -> empty .)
    PRINT           reduce using rule 51 (additional_catches -> empty .)
    AT              reduce using rule 51 (additional_catches -> empty .)
    LPAREN          reduce using rule 51 (additional_catches -> empty .)
    CLASS           reduce using rule 51 (additional_catches -> empty .)
    ABSTRACT        reduce using rule 51 (additional_catches -> empty .)
    FINAL           reduce using rule 51 (additional_catches -> empty .)
    QUOTE           reduce using rule 51 (additional_catches -> empty .)
    START_HEREDOC   reduce using rule 51 (additional_catches -> empty .)
    STRING_VARNAME  reduce using rule 51 (additional_catches -> empty .)
    NS_SEPARATOR    reduce using rule 51 (additional_catches -> empty .)
    LNUMBER         reduce using rule 51 (additional_catches -> empty .)
    DNUMBER         reduce using rule 51 (additional_catches -> empty .)
    CONSTANT_ENCAPSED_STRING reduce using rule 51 (additional_catches -> empty .)
    LINE            reduce using rule 51 (additional_catches -> empty .)
    FILE            reduce using rule 51 (additional_catches -> empty .)
    DIR             reduce using rule 51 (additional_catches -> empty .)
    CLASS_C         reduce using rule 51 (additional_catches -> empty .)
    METHOD_C        reduce using rule 51 (additional_catches -> empty .)
    FUNC_C          reduce using rule 51 (additional_catches -> empty .)
    NS_C            reduce using rule 51 (additional_catches -> empty .)
    STRING          reduce using rule 51 (additional_catches -> empty .)
    DOLLAR          reduce using rule 51 (additional_catches -> empty .)
    VARIABLE        reduce using rule 51 (additional_catches -> empty .)
    $end            reduce using rule 51 (additional_catches -> empty .)
    RBRACE          reduce using rule 51 (additional_catches -> empty .)
    ELSEIF          reduce using rule 51 (additional_catches -> empty .)
    ELSE            reduce using rule 51 (additional_catches -> empty .)
    ENDDECLARE      reduce using rule 51 (additional_catches -> empty .)
    ENDWHILE        reduce using rule 51 (additional_catches -> empty .)
    ENDIF           reduce using rule 51 (additional_catches -> empty .)
    ENDFOREACH      reduce using rule 51 (additional_catches -> empty .)
    CASE            reduce using rule 51 (additional_catches -> empty .)
    DEFAULT         reduce using rule 51 (additional_catches -> empty .)
    ENDSWITCH       reduce using rule 51 (additional_catches -> empty .)
    ENDFOR          reduce using rule 51 (additional_catches -> empty .)


state 786

    (63) new_elseif_list -> new_elseif_list ELSEIF LPAREN expr RPAREN COLON inner_statement_list .
    (22) inner_statement_list -> inner_statement_list . inner_statement
    (24) inner_statement -> . statement
    (25) inner_statement -> . function_declaration_statement
    (26) inner_statement -> . class_declaration_statement
    (27) inner_statement -> . HALT_COMPILER LPAREN RPAREN SEMI
    (28) statement -> . LBRACE inner_statement_list RBRACE
    (29) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (30) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (31) statement -> . WHILE LPAREN expr RPAREN while_statement
    (32) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (33) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (34) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (35) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (36) statement -> . BREAK SEMI
    (37) statement -> . BREAK expr SEMI
    (38) statement -> . CONTINUE SEMI
    (39) statement -> . CONTINUE expr SEMI
    (40) statement -> . RETURN SEMI
    (41) statement -> . RETURN expr SEMI
    (42) statement -> . GLOBAL global_var_list SEMI
    (43) statement -> . STATIC static_var_list SEMI
    (44) statement -> . ECHO echo_expr_list SEMI
    (45) statement -> . INLINE_HTML
    (46) statement -> . expr SEMI
    (47) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (48) statement -> . SEMI
    (49) statement -> . TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches
    (52) statement -> . THROW expr SEMI
    (53) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (103) function_declaration_statement -> . FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (104) class_declaration_statement -> . class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE
    (105) class_declaration_statement -> . INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (106) class_entry_type -> . CLASS
    (107) class_entry_type -> . ABSTRACT CLASS
    (108) class_entry_type -> . FINAL CLASS
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    ELSEIF          reduce using rule 63 (new_elseif_list -> new_elseif_list ELSEIF LPAREN expr RPAREN COLON inner_statement_list .)
    ELSE            reduce using rule 63 (new_elseif_list -> new_elseif_list ELSEIF LPAREN expr RPAREN COLON inner_statement_list .)
    ENDIF           reduce using rule 63 (new_elseif_list -> new_elseif_list ELSEIF LPAREN expr RPAREN COLON inner_statement_list .)
    HALT_COMPILER   shift and go to state 285
    LBRACE          shift and go to state 47
    IF              shift and go to state 93
    WHILE           shift and go to state 57
    DO              shift and go to state 76
    FOR             shift and go to state 36
    FOREACH         shift and go to state 13
    SWITCH          shift and go to state 61
    BREAK           shift and go to state 74
    CONTINUE        shift and go to state 48
    RETURN          shift and go to state 23
    GLOBAL          shift and go to state 55
    STATIC          shift and go to state 29
    ECHO            shift and go to state 42
    INLINE_HTML     shift and go to state 88
    UNSET           shift and go to state 83
    SEMI            shift and go to state 85
    TRY             shift and go to state 43
    THROW           shift and go to state 96
    DECLARE         shift and go to state 16
    FUNCTION        shift and go to state 40
    INTERFACE       shift and go to state 21
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    CLASS           shift and go to state 20
    ABSTRACT        shift and go to state 80
    FINAL           shift and go to state 32
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_entry_type               shift and go to state 53
    inner_statement                shift and go to state 286
    class_name                     shift and go to state 54
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    function_call                  shift and go to state 27
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    function_declaration_statement shift and go to state 287
    statement                      shift and go to state 288
    class_constant                 shift and go to state 24
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    class_declaration_statement    shift and go to state 289
    compound_variable              shift and go to state 72
    expr                           shift and go to state 71

state 787

    (135) method_body -> LBRACE inner_statement_list . RBRACE
    (22) inner_statement_list -> inner_statement_list . inner_statement
    (24) inner_statement -> . statement
    (25) inner_statement -> . function_declaration_statement
    (26) inner_statement -> . class_declaration_statement
    (27) inner_statement -> . HALT_COMPILER LPAREN RPAREN SEMI
    (28) statement -> . LBRACE inner_statement_list RBRACE
    (29) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (30) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (31) statement -> . WHILE LPAREN expr RPAREN while_statement
    (32) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (33) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (34) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (35) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (36) statement -> . BREAK SEMI
    (37) statement -> . BREAK expr SEMI
    (38) statement -> . CONTINUE SEMI
    (39) statement -> . CONTINUE expr SEMI
    (40) statement -> . RETURN SEMI
    (41) statement -> . RETURN expr SEMI
    (42) statement -> . GLOBAL global_var_list SEMI
    (43) statement -> . STATIC static_var_list SEMI
    (44) statement -> . ECHO echo_expr_list SEMI
    (45) statement -> . INLINE_HTML
    (46) statement -> . expr SEMI
    (47) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (48) statement -> . SEMI
    (49) statement -> . TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches
    (52) statement -> . THROW expr SEMI
    (53) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (103) function_declaration_statement -> . FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (104) class_declaration_statement -> . class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE
    (105) class_declaration_statement -> . INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (106) class_entry_type -> . CLASS
    (107) class_entry_type -> . ABSTRACT CLASS
    (108) class_entry_type -> . FINAL CLASS
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    RBRACE          shift and go to state 789
    HALT_COMPILER   shift and go to state 285
    LBRACE          shift and go to state 47
    IF              shift and go to state 93
    WHILE           shift and go to state 57
    DO              shift and go to state 76
    FOR             shift and go to state 36
    FOREACH         shift and go to state 13
    SWITCH          shift and go to state 61
    BREAK           shift and go to state 74
    CONTINUE        shift and go to state 48
    RETURN          shift and go to state 23
    GLOBAL          shift and go to state 55
    STATIC          shift and go to state 29
    ECHO            shift and go to state 42
    INLINE_HTML     shift and go to state 88
    UNSET           shift and go to state 83
    SEMI            shift and go to state 85
    TRY             shift and go to state 43
    THROW           shift and go to state 96
    DECLARE         shift and go to state 16
    FUNCTION        shift and go to state 40
    INTERFACE       shift and go to state 21
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    CLASS           shift and go to state 20
    ABSTRACT        shift and go to state 80
    FINAL           shift and go to state 32
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_entry_type               shift and go to state 53
    inner_statement                shift and go to state 286
    class_name                     shift and go to state 54
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    function_call                  shift and go to state 27
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    function_declaration_statement shift and go to state 287
    statement                      shift and go to state 288
    class_constant                 shift and go to state 24
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    class_declaration_statement    shift and go to state 289
    compound_variable              shift and go to state 72
    expr                           shift and go to state 71

state 788

    (50) additional_catches -> additional_catches CATCH . LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE

    LPAREN          shift and go to state 790


state 789

    (135) method_body -> LBRACE inner_statement_list RBRACE .

    RBRACE          reduce using rule 135 (method_body -> LBRACE inner_statement_list RBRACE .)
    VAR             reduce using rule 135 (method_body -> LBRACE inner_statement_list RBRACE .)
    CONST           reduce using rule 135 (method_body -> LBRACE inner_statement_list RBRACE .)
    PUBLIC          reduce using rule 135 (method_body -> LBRACE inner_statement_list RBRACE .)
    PROTECTED       reduce using rule 135 (method_body -> LBRACE inner_statement_list RBRACE .)
    PRIVATE         reduce using rule 135 (method_body -> LBRACE inner_statement_list RBRACE .)
    STATIC          reduce using rule 135 (method_body -> LBRACE inner_statement_list RBRACE .)
    ABSTRACT        reduce using rule 135 (method_body -> LBRACE inner_statement_list RBRACE .)
    FINAL           reduce using rule 135 (method_body -> LBRACE inner_statement_list RBRACE .)
    FUNCTION        reduce using rule 135 (method_body -> LBRACE inner_statement_list RBRACE .)


state 790

    (50) additional_catches -> additional_catches CATCH LPAREN . fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE
    (111) fully_qualified_class_name -> . namespace_name
    (112) fully_qualified_class_name -> . NS_SEPARATOR namespace_name
    (113) fully_qualified_class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING

    NS_SEPARATOR    shift and go to state 409
    NAMESPACE       shift and go to state 408
    STRING          shift and go to state 89

    fully_qualified_class_name     shift and go to state 791
    namespace_name                 shift and go to state 411

state 791

    (50) additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name . VARIABLE RPAREN LBRACE inner_statement_list RBRACE

    VARIABLE        shift and go to state 792


state 792

    (50) additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE . RPAREN LBRACE inner_statement_list RBRACE

    RPAREN          shift and go to state 793


state 793

    (50) additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN . LBRACE inner_statement_list RBRACE

    LBRACE          shift and go to state 794


state 794

    (50) additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE . inner_statement_list RBRACE
    (22) inner_statement_list -> . inner_statement_list inner_statement
    (23) inner_statement_list -> . empty
    (363) empty -> .

    RBRACE          reduce using rule 363 (empty -> .)
    HALT_COMPILER   reduce using rule 363 (empty -> .)
    LBRACE          reduce using rule 363 (empty -> .)
    IF              reduce using rule 363 (empty -> .)
    WHILE           reduce using rule 363 (empty -> .)
    DO              reduce using rule 363 (empty -> .)
    FOR             reduce using rule 363 (empty -> .)
    FOREACH         reduce using rule 363 (empty -> .)
    SWITCH          reduce using rule 363 (empty -> .)
    BREAK           reduce using rule 363 (empty -> .)
    CONTINUE        reduce using rule 363 (empty -> .)
    RETURN          reduce using rule 363 (empty -> .)
    GLOBAL          reduce using rule 363 (empty -> .)
    STATIC          reduce using rule 363 (empty -> .)
    ECHO            reduce using rule 363 (empty -> .)
    INLINE_HTML     reduce using rule 363 (empty -> .)
    UNSET           reduce using rule 363 (empty -> .)
    SEMI            reduce using rule 363 (empty -> .)
    TRY             reduce using rule 363 (empty -> .)
    THROW           reduce using rule 363 (empty -> .)
    DECLARE         reduce using rule 363 (empty -> .)
    FUNCTION        reduce using rule 363 (empty -> .)
    INTERFACE       reduce using rule 363 (empty -> .)
    NEW             reduce using rule 363 (empty -> .)
    CLONE           reduce using rule 363 (empty -> .)
    LIST            reduce using rule 363 (empty -> .)
    ARRAY           reduce using rule 363 (empty -> .)
    PLUS            reduce using rule 363 (empty -> .)
    MINUS           reduce using rule 363 (empty -> .)
    NOT             reduce using rule 363 (empty -> .)
    BOOLEAN_NOT     reduce using rule 363 (empty -> .)
    INC             reduce using rule 363 (empty -> .)
    DEC             reduce using rule 363 (empty -> .)
    INT_CAST        reduce using rule 363 (empty -> .)
    DOUBLE_CAST     reduce using rule 363 (empty -> .)
    STRING_CAST     reduce using rule 363 (empty -> .)
    ARRAY_CAST      reduce using rule 363 (empty -> .)
    OBJECT_CAST     reduce using rule 363 (empty -> .)
    BOOL_CAST       reduce using rule 363 (empty -> .)
    UNSET_CAST      reduce using rule 363 (empty -> .)
    ISSET           reduce using rule 363 (empty -> .)
    EMPTY           reduce using rule 363 (empty -> .)
    EVAL            reduce using rule 363 (empty -> .)
    INCLUDE         reduce using rule 363 (empty -> .)
    INCLUDE_ONCE    reduce using rule 363 (empty -> .)
    REQUIRE         reduce using rule 363 (empty -> .)
    REQUIRE_ONCE    reduce using rule 363 (empty -> .)
    EXIT            reduce using rule 363 (empty -> .)
    PRINT           reduce using rule 363 (empty -> .)
    AT              reduce using rule 363 (empty -> .)
    LPAREN          reduce using rule 363 (empty -> .)
    CLASS           reduce using rule 363 (empty -> .)
    ABSTRACT        reduce using rule 363 (empty -> .)
    FINAL           reduce using rule 363 (empty -> .)
    QUOTE           reduce using rule 363 (empty -> .)
    START_HEREDOC   reduce using rule 363 (empty -> .)
    STRING_VARNAME  reduce using rule 363 (empty -> .)
    NS_SEPARATOR    reduce using rule 363 (empty -> .)
    NAMESPACE       reduce using rule 363 (empty -> .)
    LNUMBER         reduce using rule 363 (empty -> .)
    DNUMBER         reduce using rule 363 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 363 (empty -> .)
    LINE            reduce using rule 363 (empty -> .)
    FILE            reduce using rule 363 (empty -> .)
    DIR             reduce using rule 363 (empty -> .)
    CLASS_C         reduce using rule 363 (empty -> .)
    METHOD_C        reduce using rule 363 (empty -> .)
    FUNC_C          reduce using rule 363 (empty -> .)
    NS_C            reduce using rule 363 (empty -> .)
    STRING          reduce using rule 363 (empty -> .)
    DOLLAR          reduce using rule 363 (empty -> .)
    VARIABLE        reduce using rule 363 (empty -> .)

    empty                          shift and go to state 148
    inner_statement_list           shift and go to state 795

state 795

    (50) additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list . RBRACE
    (22) inner_statement_list -> inner_statement_list . inner_statement
    (24) inner_statement -> . statement
    (25) inner_statement -> . function_declaration_statement
    (26) inner_statement -> . class_declaration_statement
    (27) inner_statement -> . HALT_COMPILER LPAREN RPAREN SEMI
    (28) statement -> . LBRACE inner_statement_list RBRACE
    (29) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (30) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (31) statement -> . WHILE LPAREN expr RPAREN while_statement
    (32) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (33) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (34) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (35) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (36) statement -> . BREAK SEMI
    (37) statement -> . BREAK expr SEMI
    (38) statement -> . CONTINUE SEMI
    (39) statement -> . CONTINUE expr SEMI
    (40) statement -> . RETURN SEMI
    (41) statement -> . RETURN expr SEMI
    (42) statement -> . GLOBAL global_var_list SEMI
    (43) statement -> . STATIC static_var_list SEMI
    (44) statement -> . ECHO echo_expr_list SEMI
    (45) statement -> . INLINE_HTML
    (46) statement -> . expr SEMI
    (47) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (48) statement -> . SEMI
    (49) statement -> . TRY LBRACE inner_statement_list RBRACE CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE additional_catches
    (52) statement -> . THROW expr SEMI
    (53) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (103) function_declaration_statement -> . FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (104) class_declaration_statement -> . class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE
    (105) class_declaration_statement -> . INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE
    (158) expr -> . variable
    (159) expr -> . variable EQUALS expr
    (160) expr -> . variable EQUALS AND expr
    (161) expr -> . NEW class_name_reference ctor_arguments
    (175) expr -> . CLONE expr
    (176) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (221) expr -> . scalar
    (222) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (240) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (247) expr -> . variable PLUS_EQUAL expr
    (248) expr -> . variable MINUS_EQUAL expr
    (249) expr -> . variable MUL_EQUAL expr
    (250) expr -> . variable DIV_EQUAL expr
    (251) expr -> . variable CONCAT_EQUAL expr
    (252) expr -> . variable MOD_EQUAL expr
    (253) expr -> . variable AND_EQUAL expr
    (254) expr -> . variable OR_EQUAL expr
    (255) expr -> . variable XOR_EQUAL expr
    (256) expr -> . variable SL_EQUAL expr
    (257) expr -> . variable SR_EQUAL expr
    (258) expr -> . expr BOOLEAN_AND expr
    (259) expr -> . expr BOOLEAN_OR expr
    (260) expr -> . expr LOGICAL_AND expr
    (261) expr -> . expr LOGICAL_OR expr
    (262) expr -> . expr LOGICAL_XOR expr
    (263) expr -> . expr AND expr
    (264) expr -> . expr OR expr
    (265) expr -> . expr XOR expr
    (266) expr -> . expr CONCAT expr
    (267) expr -> . expr PLUS expr
    (268) expr -> . expr MINUS expr
    (269) expr -> . expr MUL expr
    (270) expr -> . expr DIV expr
    (271) expr -> . expr SL expr
    (272) expr -> . expr SR expr
    (273) expr -> . expr MOD expr
    (274) expr -> . expr IS_IDENTICAL expr
    (275) expr -> . expr IS_NOT_IDENTICAL expr
    (276) expr -> . expr IS_EQUAL expr
    (277) expr -> . expr IS_NOT_EQUAL expr
    (278) expr -> . expr IS_SMALLER expr
    (279) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (280) expr -> . expr IS_GREATER expr
    (281) expr -> . expr IS_GREATER_OR_EQUAL expr
    (282) expr -> . expr INSTANCEOF expr
    (283) expr -> . PLUS expr
    (284) expr -> . MINUS expr
    (285) expr -> . NOT expr
    (286) expr -> . BOOLEAN_NOT expr
    (287) expr -> . expr QUESTION expr COLON expr
    (288) expr -> . INC variable
    (289) expr -> . DEC variable
    (290) expr -> . variable INC
    (291) expr -> . variable DEC
    (292) expr -> . INT_CAST expr
    (293) expr -> . DOUBLE_CAST expr
    (294) expr -> . STRING_CAST expr
    (295) expr -> . ARRAY_CAST expr
    (296) expr -> . OBJECT_CAST expr
    (297) expr -> . BOOL_CAST expr
    (298) expr -> . UNSET_CAST expr
    (299) expr -> . ISSET LPAREN isset_variables RPAREN
    (302) expr -> . EMPTY LPAREN expr RPAREN
    (303) expr -> . EVAL LPAREN expr RPAREN
    (304) expr -> . INCLUDE expr
    (305) expr -> . INCLUDE_ONCE expr
    (306) expr -> . REQUIRE expr
    (307) expr -> . REQUIRE_ONCE expr
    (308) expr -> . EXIT
    (309) expr -> . EXIT LPAREN RPAREN
    (310) expr -> . EXIT LPAREN expr RPAREN
    (311) expr -> . PRINT expr
    (312) expr -> . AT expr
    (313) expr -> . LPAREN expr RPAREN
    (106) class_entry_type -> . CLASS
    (107) class_entry_type -> . ABSTRACT CLASS
    (108) class_entry_type -> . FINAL CLASS
    (182) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (183) variable -> . base_variable_with_function_calls
    (314) scalar -> . class_constant
    (315) scalar -> . common_scalar
    (316) scalar -> . QUOTE encaps_list QUOTE
    (317) scalar -> . START_HEREDOC encaps_list END_HEREDOC
    (318) scalar -> . STRING_VARNAME
    (319) scalar -> . namespace_name
    (320) scalar -> . NS_SEPARATOR namespace_name
    (321) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (184) base_variable_with_function_calls -> . base_variable
    (185) base_variable_with_function_calls -> . function_call
    (322) class_constant -> . class_name DOUBLE_COLON STRING
    (323) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (324) common_scalar -> . LNUMBER
    (325) common_scalar -> . DNUMBER
    (326) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (327) common_scalar -> . LINE
    (328) common_scalar -> . FILE
    (329) common_scalar -> . DIR
    (330) common_scalar -> . CLASS_C
    (331) common_scalar -> . METHOD_C
    (332) common_scalar -> . FUNC_C
    (333) common_scalar -> . NS_C
    (349) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (350) namespace_name -> . STRING
    (199) base_variable -> . simple_indirect_reference
    (200) base_variable -> . static_member
    (186) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (187) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (188) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (190) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (191) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (192) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (193) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (164) class_name -> . namespace_name
    (165) class_name -> . NS_SEPARATOR namespace_name
    (166) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (167) class_name -> . STATIC
    (205) variable_class_name -> . reference_variable
    (201) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (202) simple_indirect_reference -> . reference_variable
    (203) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (204) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (220) variable_without_objects -> . simple_indirect_reference
    (206) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (207) reference_variable -> . reference_variable LBRACE expr RBRACE
    (208) reference_variable -> . compound_variable
    (209) compound_variable -> . VARIABLE
    (210) compound_variable -> . DOLLAR LBRACE expr RBRACE

    RBRACE          shift and go to state 796
    HALT_COMPILER   shift and go to state 285
    LBRACE          shift and go to state 47
    IF              shift and go to state 93
    WHILE           shift and go to state 57
    DO              shift and go to state 76
    FOR             shift and go to state 36
    FOREACH         shift and go to state 13
    SWITCH          shift and go to state 61
    BREAK           shift and go to state 74
    CONTINUE        shift and go to state 48
    RETURN          shift and go to state 23
    GLOBAL          shift and go to state 55
    STATIC          shift and go to state 29
    ECHO            shift and go to state 42
    INLINE_HTML     shift and go to state 88
    UNSET           shift and go to state 83
    SEMI            shift and go to state 85
    TRY             shift and go to state 43
    THROW           shift and go to state 96
    DECLARE         shift and go to state 16
    FUNCTION        shift and go to state 40
    INTERFACE       shift and go to state 21
    NEW             shift and go to state 58
    CLONE           shift and go to state 19
    LIST            shift and go to state 73
    ARRAY           shift and go to state 65
    PLUS            shift and go to state 10
    MINUS           shift and go to state 8
    NOT             shift and go to state 51
    BOOLEAN_NOT     shift and go to state 28
    INC             shift and go to state 60
    DEC             shift and go to state 31
    INT_CAST        shift and go to state 94
    DOUBLE_CAST     shift and go to state 4
    STRING_CAST     shift and go to state 34
    ARRAY_CAST      shift and go to state 97
    OBJECT_CAST     shift and go to state 37
    BOOL_CAST       shift and go to state 26
    UNSET_CAST      shift and go to state 9
    ISSET           shift and go to state 87
    EMPTY           shift and go to state 33
    EVAL            shift and go to state 14
    INCLUDE         shift and go to state 45
    INCLUDE_ONCE    shift and go to state 18
    REQUIRE         shift and go to state 25
    REQUIRE_ONCE    shift and go to state 46
    EXIT            shift and go to state 75
    PRINT           shift and go to state 30
    AT              shift and go to state 39
    LPAREN          shift and go to state 91
    CLASS           shift and go to state 20
    ABSTRACT        shift and go to state 80
    FINAL           shift and go to state 32
    QUOTE           shift and go to state 50
    START_HEREDOC   shift and go to state 59
    STRING_VARNAME  shift and go to state 66
    NS_SEPARATOR    shift and go to state 68
    NAMESPACE       shift and go to state 98
    LNUMBER         shift and go to state 95
    DNUMBER         shift and go to state 11
    CONSTANT_ENCAPSED_STRING shift and go to state 35
    LINE            shift and go to state 7
    FILE            shift and go to state 6
    DIR             shift and go to state 49
    CLASS_C         shift and go to state 17
    METHOD_C        shift and go to state 79
    FUNC_C          shift and go to state 81
    NS_C            shift and go to state 15
    STRING          shift and go to state 89
    DOLLAR          shift and go to state 90
    VARIABLE        shift and go to state 56

    class_entry_type               shift and go to state 53
    inner_statement                shift and go to state 286
    class_name                     shift and go to state 54
    simple_indirect_reference      shift and go to state 69
    scalar                         shift and go to state 5
    common_scalar                  shift and go to state 82
    function_call                  shift and go to state 27
    variable_without_objects       shift and go to state 84
    base_variable                  shift and go to state 44
    static_member                  shift and go to state 86
    base_variable_with_function_calls shift and go to state 38
    reference_variable             shift and go to state 64
    function_declaration_statement shift and go to state 287
    statement                      shift and go to state 288
    class_constant                 shift and go to state 24
    variable_class_name            shift and go to state 41
    variable                       shift and go to state 92
    namespace_name                 shift and go to state 70
    class_declaration_statement    shift and go to state 289
    compound_variable              shift and go to state 72
    expr                           shift and go to state 71

state 796

    (50) additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .

    CATCH           reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    HALT_COMPILER   reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    NAMESPACE       reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    CONST           reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    USE             reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    LBRACE          reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    IF              reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    WHILE           reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    DO              reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    FOR             reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    FOREACH         reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    SWITCH          reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    BREAK           reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    CONTINUE        reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    RETURN          reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    GLOBAL          reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    STATIC          reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    ECHO            reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    INLINE_HTML     reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    UNSET           reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    SEMI            reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    TRY             reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    THROW           reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    DECLARE         reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    FUNCTION        reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    INTERFACE       reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    NEW             reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    CLONE           reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    LIST            reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    ARRAY           reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    PLUS            reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    MINUS           reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    NOT             reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    BOOLEAN_NOT     reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    INC             reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    DEC             reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    INT_CAST        reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    DOUBLE_CAST     reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    STRING_CAST     reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    ARRAY_CAST      reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    OBJECT_CAST     reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    BOOL_CAST       reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    UNSET_CAST      reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    ISSET           reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    EMPTY           reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    EVAL            reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    INCLUDE         reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    INCLUDE_ONCE    reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    REQUIRE         reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    REQUIRE_ONCE    reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    EXIT            reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    PRINT           reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    AT              reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    LPAREN          reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    CLASS           reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    ABSTRACT        reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    FINAL           reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    QUOTE           reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    START_HEREDOC   reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    STRING_VARNAME  reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    NS_SEPARATOR    reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    LNUMBER         reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    DNUMBER         reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    CONSTANT_ENCAPSED_STRING reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    LINE            reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    FILE            reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    DIR             reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    CLASS_C         reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    METHOD_C        reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    FUNC_C          reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    NS_C            reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    STRING          reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    DOLLAR          reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    VARIABLE        reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    $end            reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    RBRACE          reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    ELSEIF          reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    ELSE            reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    ENDDECLARE      reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    ENDWHILE        reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    ENDIF           reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    ENDFOREACH      reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    CASE            reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    DEFAULT         reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    ENDSWITCH       reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    ENDFOR          reduce using rule 50 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSEIF in state 648 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 648 resolved as shift
