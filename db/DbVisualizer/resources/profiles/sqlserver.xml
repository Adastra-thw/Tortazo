<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE DatabaseProfile SYSTEM "dbvis-defs.dtd">

<!--
   Copyright (c) DbVis Software AB. All Rights Reserved.
-->

<DatabaseProfile
        desc="Profile for SQL Server"
        version="$Revision: 17693 $"
        date="$Date: 2014-06-11 12:08:45 +0200 (Wed, 11 Jun 2014) $"
        minver="9.1"
        extends="generic">

   <!--
    Profile Notes
    =============
      None

    Change Log
    ==========
      2007-09-11:
        - Now show Columns and Indexes as child objects for Table objects
      2006-09-18:
        - Added "Empty Table" action for table nodes
      2006-07-25:
        - Added support for "Function" objects
   -->

   <!-- =================================================================== -->
   <!-- Definition of the commands -->
   <!-- =================================================================== -->

   <Commands extends="true">

      <!--
        The "getTableNamesFor" command is used by Database getTableNamesFor().
        It must return table names for the catalog and schema named by
        the ${table_catalog} and ${table_catalog} variables in the first
        column.
      -->
      <Command id="sqlserver.getTableNamesFor">
        <SQL>
          <![CDATA[
select TABLE_NAME
from INFORMATION_SCHEMA.TABLES
where TABLE_CATALOG = '${table_catalog}' and TABLE_SCHEMA = '${table_schema}'
order by TABLE_NAME
            ]]>
        </SQL>   
      </Command>

      <!--
        The "getColumnNamesFor" command is used by Database getColumnNamesFor().
        It must return column names for the catalog, schema and table named by
        the ${table_catalog}, ${table_catalog} and ${table_name} variables in
        the first column.
      -->
      <Command id="sqlserver.getColumnNamesFor">
        <SQL>
          <![CDATA[
select COLUMN_NAME
from INFORMATION_SCHEMA.COLUMNS
where TABLE_CATALOG = '${table_catalog}' and TABLE_SCHEMA = '${table_schema}'
and TABLE_NAME = '${table_name}'
order by COLUMN_NAME
            ]]>
        </SQL>   
      </Command>

      <Command id="sqlserver.getObjects">
         <If test="#dm.getDatabaseMajorVersion() gte 9">
           <SQL>
              <![CDATA[
select owner = schema_name(schema_id), name, create_date "Creation Date"
from [${database}].sys.objects where type in (${type}) order by owner, name
              ]]>
           </SQL>
         </If>
         <Else>
           <SQL>
              <![CDATA[
select owner = user_name(uid), name, crdate "Creation Date"
from [${database}].dbo.sysobjects where type in (${type}) order by owner, name
              ]]>
           </SQL>
         </Else>
      </Command>
<!--
      <Command id="sqlserver.getObjectSource">
         <SQL>
            <![CDATA[
select text from [${database}].dbo.syscomments c, [${database}].dbo.sysobjects s
where s.id = c.id and s.name = '${name}'
            ]]>
         </SQL>
      </Command>
-->
      <Command id="sqlserver.getIndexes">
         <If test="#dm.getDatabaseMajorVersion() gte 9">
            <SQL>
               <![CDATA[
select schema_name(o.schema_id) owner, o.name table_name, i.name index_name
from [${database}].sys.objects o join [${database}].sys.indexes i on i.object_id = o.object_id
where i.index_id != 0 
and i.is_primary_key != 1
and i.is_unique_constraint != 1
and i.is_hypothetical != 1
and schema_name(o.schema_id) like '${schema}'
and o.name like '${table}'
order by owner, o.name, i.name
            ]]>
            </SQL>
         </If>
         <Else>
            <SQL>
               <![CDATA[
select user_name(o.uid) db, o.name table_name, i.name index_name
from [${database}].dbo.sysobjects o join [${database}].dbo.sysindexes i on i.id = o.id
where i.indid between 1 and 254
and objectproperty(o.id, 'IsUserTable') = 1
and indexproperty(o.id, i.name, 'IsStatistics') = 0
and indexproperty(o.id, i.name, 'IsHypothetical') = 0
and i.name not in
  (select o.name from [${database}].dbo.sysobjects o
   where o.parent_obj = i.id
   and objectproperty(o.id, N'isConstraint') = 1.0)
order by db, o.name, i.name
            ]]>
            </SQL>
         </Else>
      </Command>

      <Command id="sqlserver.getTriggers">
         <If test="#dm.getDatabaseMajorVersion() gte 9">
           <SQL>
              <![CDATA[
SELECT
   schema_name(s1.schema_id) 'trigger_owner',
   s1.name 'trigger_name',
   s3.name 'table_owner',
   s2.name 'table_name',
   s4.is_disabled 'is_disabled'
FROM
   [${database}].sys.objects s1,
   [${database}].sys.objects s2,
   [${database}].sys.schemas s3,
   [${database}].sys.triggers s4
WHERE
   s1.parent_object_id = s2.object_id
   AND s2.schema_id = s3.schema_id
   AND s1.object_id = s4.object_id
   AND s1.type ='TR'
   AND s2.name like '${tableNamePattern}'
ORDER BY 2;
              ]]>
           </SQL>
         </If>
         <Else>
           <SQL>
              <![CDATA[
SELECT
   'trigger_owner' = user_name(s1.uid),
   s1.name 'trigger_name',
   s3.name 'table_owner',
   s2.name 'table_name'
FROM
   [${database}].dbo.sysobjects s1,
   [${database}].dbo.sysobjects s2,
   [${database}].dbo.sysusers s3
WHERE
   s1.parent_obj = s2.id
   AND s2.uid = s3.uid
   AND s1.type ='TR'
   AND s2.name like '${tableNamePattern}'
ORDER BY 2;
              ]]>
           </SQL>
         </Else>
      </Command>

      <Command id="sqlserver.getTableTriggers">
         <If test="#dm.getDatabaseMajorVersion() gte 9">
           <SQL>
              <![CDATA[
SELECT DISTINCT
   schema_name(s1.schema_id) 'trigger_owner',
   s1.name 'trigger_name',
   s3.name 'table_owner',
   s2.name 'table_name',
   s5.is_disabled 'is_disabled'
FROM
   [${database}].sys.objects s1,
   [${database}].sys.objects s2,
   [${database}].sys.schemas s3,
   [${database}].sys.triggers s5
WHERE
   s1.parent_object_id = s2.object_id
   AND s2.schema_id = s3.schema_id
   AND s1.object_id = s5.object_id
   AND s1.type ='TR'
   AND s2.name = '${name}'
   AND s3.name = '${owner}'
ORDER BY 2;
              ]]>
           </SQL>
         </If>
         <Else>
           <SQL>
              <![CDATA[
SELECT DISTINCT
   'trigger_owner' = user_name(s1.uid),
   s1.name 'trigger_name',
   s3.name 'table_owner',
   s2.name 'table_name'
FROM
   [${database}].dbo.sysobjects s1,
   [${database}].dbo.sysobjects s2,
   [${database}].dbo.sysusers s3
WHERE
   s1.parent_obj = s2.id
   AND s2.uid = s3.uid
   AND s1.type ='TR'
   AND s2.name = '${name}'
   AND s3.name = '${owner}'
ORDER BY 2;
              ]]>
           </SQL>
         </Else>
      </Command>

      <Command id="sqlserver.getSequences">
         <SQL>
            <![CDATA[
SELECT SEQUENCE_CATALOG,
       SEQUENCE_SCHEMA,
       SEQUENCE_NAME,
       DATA_TYPE,
       NUMERIC_PRECISION,
       NUMERIC_PRECISION_RADIX,
       NUMERIC_SCALE,
       convert(BIGINT, START_VALUE) AS START_VALUE,
       convert(BIGINT, MINIMUM_VALUE) AS MINIMUM_VALUE,
       convert(BIGINT, MAXIMUM_VALUE) AS MAXIMUM_VALUE,
       convert(BIGINT, INCREMENT) AS INCREMENT,
       CYCLE_OPTION,
       DECLARED_DATA_TYPE,
       DECLARED_NUMERIC_PRECISION,
       DECLARED_NUMERIC_SCALE
FROM   INFORMATION_SCHEMA.SEQUENCES
ORDER BY SEQUENCE_NAME
            ]]>
         </SQL>
      </Command>

      <Command id="sqlserver.getSynonyms">
         <If test="#dm.getDatabaseMajorVersion() gte 9">
           <SQL>
              <![CDATA[
select owner = schema_name(schema_id), name, create_date "Creation Date", base_object_name "Base Object"
from [${database}].sys.synonyms order by name
              ]]>
           </SQL>
         </If>
         <Else>
           <SQL>
              <![CDATA[
select owner = schema_name(schema_id), name, create_date "Creation Date", base_object_name "Base Object"
from [${database}].dbo.synonyms order by name
              ]]>
           </SQL>
         </Else>
      </Command>

      <Command id="sqlserver.getUsers">
         <SQL>
            <![CDATA[
exec [${database}].dbo.sp_helpuser
            ]]>
         </SQL>
      </Command>

      <Command id="sqlserver.getRoles">
         <SQL>
            <![CDATA[
exec [${database}].dbo.sp_helprole
            ]]>
         </SQL>
      </Command>

      <Command id="sqlserver.getRoleMembers">
         <SQL>
            <![CDATA[
 exec [${database}].dbo.sp_helprolemember '${name}'
           ]]>
         </SQL>
      </Command>

      <Command id="sqlserver.getUserTypes">
         <SQL>
            <![CDATA[
select t.name 'Data Type', p.name 'System Type', b.name 'Creator',
t.allownulls 'Allow Nulls', t.length 'Length', t.prec 'Precision', t.scale 'Scale'
from [${database}].dbo.systypes t, [${database}].dbo.sysusers b, [${database}].dbo.systypes p
where t.uid = b.uid and t.usertype >= 100 and t.type = p.type and p.usertype =
(select min(usertype) from [${database}].dbo.systypes where type = t.type)
            ]]>
         </SQL>
      </Command>

      <!-- ================================================================= -->
      <!-- DBA related commands requiring certain privileges in the database -->
      <!-- ================================================================= -->

      <Command id="sqlserver.getLogins">
         <SQL>
            <![CDATA[
SELECT
    loginname 'Login ID Name',
    dbname 'Default Database',
    language 'Default Language',
    CASE
        WHEN isntname = 1
        THEN 'NT Account'
        ELSE 'SQL Login'
    END 'Account Type',
    CASE
        WHEN isntgroup = 1
        THEN 'Yes'
        ELSE ' '
    END 'Group Account',
    CASE
        WHEN isntuser = 1
        THEN 'Yes'
        ELSE ' '
    END 'User Account',
    CASE
        WHEN sysadmin = 1
        THEN 'X'
        ELSE ' '
    END 'SysAdmin Member',
    CASE
        WHEN securityadmin = 1
        THEN 'X'
        ELSE ' '
    END 'SecurityAdmin Member',
    CASE
        WHEN serveradmin = 1
        THEN 'X'
        ELSE ' '
    END 'ServerAdmin Member',
    CASE
        WHEN setupadmin = 1
        THEN 'X'
        ELSE ' '
    END 'SetupAdmin Member',
    CASE
        WHEN processadmin = 1
        THEN 'X'
        ELSE ' '
    END 'ProcessAdmin Member',
    CASE
        WHEN diskadmin = 1
        THEN 'X'
        ELSE ' '
    END 'DiskAdmin Member',
    CASE
        WHEN dbcreator = 1
        THEN 'X'
        ELSE ' '
    END 'DbCreator Member'
FROM
    master.dbo.syslogins
            ]]>
         </SQL>
      </Command>

      <Command id="sqlserver.getLoginDatabases">
         <SQL>
            <![CDATA[
select a.name "Name", sum(c.size / 512) "Size (MB)"
from master.dbo.sysdatabases a, master.dbo.syslogins b, master.dbo.sysusages c
where (a.suid = b.suid) and (b.suid = ${suid}) and a.dbid = c.dbid group by a.name
            ]]>
         </SQL>
      </Command>

      <Command id="sqlserver.getLoginRoles">
         <SQL>
            <![CDATA[
select role_name(lr.srid) "Name", lr.status "Status"
from master.dbo.sysloginroles lr, master.dbo.syslogins l
where lr.suid = l.suid AND l.name = '${login}' AND lr.status = 1
            ]]>
         </SQL>
      </Command>

      <Command id="sqlserver.getServerRoles">
         <SQL>
            <![CDATA[
exec sp_helpsrvrole
            ]]>
         </SQL>
      </Command>

      <Command id="sqlserver.getServerRoleMembers">
         <SQL>
            <![CDATA[
 exec sp_helpsrvrolemember '${name}'
           ]]>
         </SQL>
      </Command>

      <Command id="sqlserver.getDevices">
         <SQL>
            <![CDATA[
select * from master.dbo.sysdevices
            ]]>
         </SQL>
      </Command>

      <Command id="sqlserver.getDeviceDatabases">
         <SQL>
            <![CDATA[
select a.name "Name", sum(b.size) / 512 "Size (MB)",
  (select l.name from master.dbo.syslogins l where l.suid=a.suid) "Creator"
from master.dbo.sysdatabases a, master.dbo.sysusages b, master.dbo.sysdevices c
where (a.dbid=b.dbid) and (b.vstart <= c.high) and
(b.vstart >= c.low) and (c.name = '${name}') group by a.name
            ]]>
         </SQL>
      </Command>

      <Command id="sqlserver.serverInfo">
         <SQL>
            <![CDATA[
exec sp_server_info
            ]]>
         </SQL>
      </Command>

      <Command id="sqlserver.getRemoteServers">
         <SQL>
            <![CDATA[
select * from master.dbo.sysservers
            ]]>
         </SQL>
      </Command>

      <Command id="sqlserver.getCaches">
         <SQL>
            <![CDATA[
select a.name, a.status, a.value,
(select b.value from master.dbo.syscurconfigs b where b.config = a.config and b.comment = a.name)
from master.dbo.sysconfigures a where parent = 19 and config = parent order by 2
            ]]>
         </SQL>
      </Command>

      <Command id="sqlserver.getProcesses">
         <SQL>
            <![CDATA[
select * from master.dbo.sysprocesses order by 1
            ]]>
         </SQL>
      </Command>

      <Command id="sqlserver.getLocks">
         <SQL>
            <![CDATA[
exec sp_lock
            ]]>
         </SQL>
      </Command>

   </Commands>

   <!-- =================================================================== -->
   <!-- Definition of the object actions that are used by the tree and views -->
   <!-- =================================================================== -->

   <ObjectsActionDef extends="false">

      <ActionGroup type="Catalog">
         <Action id="sqlserver-catalog-rename" label="Rename Database" reload="true" icon="rename">
            <Input label="Database" style="text" editable="false">
               <Default>${catalog}</Default>
            </Input>
            <Input label="New Database Name" name="newDatabase" style="text"/>
            <Command>
               <SQL><![CDATA[exec sp_renamedb "${catalog}", "${newDatabase}"]]></SQL>
            </Command>
            <Confirm>
               Confirm rename of ${catalog} to ${newDatabase}?
            </Confirm>
            <Result>
               Table ${catalog} renamed to ${newDatabase}!
            </Result>
         </Action>
         <Action id="sqlserver-schema-export" label="Export Database"
                 icon="export" reload="false"
                 class="schemaExport"
                 doclink="http://www.dbvis.com/doclink/export-schema"/>
      </ActionGroup>

      <ActionGroup type="Tables">
         <Action id="sqlserver-tables-create-table" label="Create Table"
                 icon="add" reload="true"
                 class="tableCreateOrAlter"
                 classargs="create"
                 doclink="http://www.dbvis.com/doclink/create-table"/>
         <Action id="sqlserver-new-table-import-data"
                 label="Import Table Data"
                 icon="import"
                 class="tableDataImport"
                 doclink="http://www.dbvis.com/doclink/import-table"/>
      </ActionGroup>

      <ActionGroup type="Table">
         <Action id="sqlserver-tables-alter-table" label="Alter Table"
                 icon="edit" reload="true"
                 class="tableCreateOrAlter"
                 classargs="alter"
                 doclink="http://www.dbvis.com/doclink/alter-table"/>

         <Action id="sqlserver-table-rename" label="Rename Table" reload="true" icon="rename">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Table" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="New Table Name" name="newTable" style="text"/>
            <Command>
               <SQL><![CDATA[exec sp_rename "${objectname}", "${newTable}"]]></SQL>
            </Command>
            <Confirm>
               Confirm rename of ${schema}.${objectname} to ${newTable}?
            </Confirm>
            <Result>
               Table ${schema}.${objectname} renamed to ${newTable}!
            </Result>
         </Action>

         <Action id="sqlserver-table-clear" label="Empty Table" reload="true">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Table" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="Use Command" name="useCommand" style="radio">
               <Values>TRUNCATE|DELETE</Values>
               <Default>TRUNCATE</Default>
            </Input>

            <SetVar name="_command" value="#useCommand.equals('TRUNCATE') ? 'truncate table' : 'delete from'"/>

            <Command>
               <SQL><![CDATA[${_command} "${schema}"."${objectname}"]]></SQL>
            </Command>
            <Confirm>
               Really remove all rows in table ${schema}.${objectname}?
            </Confirm>
            <Result>
               All rows in table ${schema}.${objectname} has been removed!
            </Result>
         </Action>

         <Action id="sqlserver-table-drop" label="Drop Table" reload="true" icon="remove">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Table" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command><SQL><![CDATA[drop table "${schema}"."${objectname}"]]></SQL></Command>
            <Confirm>
               Really drop table ${schema}.${objectname}?
            </Confirm>
            <Result>
               Table ${schema}.${objectname} has been dropped!
            </Result>
         </Action>

         <Action id="sqlserver-table-import-data" label="Import Table Data" icon="import"
                 class="tableDataImport"
                 doclink="http://www.dbvis.com/doclink/import-table"/>

         <Action id="sqlserver-table-export" label="Export Table" icon="export"
                 class="tableExport"
                 doclink="http://www.dbvis.com/doclink/export-table"/>

         <Separator/>
      
         <Action id="sqlserver-table-create-index" label="Create Index" reload="true">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Table" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="Index Name" name="indexname" style="text"/>
            <Input label="Unique" name="unique" style="check">
               <Values>unique</Values>
            </Input>

            <Input label="Columns" style="separator"/>

            <Input name="columns" style="grid">
               <Arg name="output" value='"${columnname}"${_sortorder}'/>
               <Arg name="newline" value=", "/>

               <Input name="columnname" label="Column Name" style="list">
                  <Values column="4">
                     <Command idref="getColumnNamesFor">
                        <Input name="table_catalog" value="${catalog}"/>
                        <Input name="table_schema" value="${schema}"/>
                        <Input name="table_name" value="${objectname}"/>
                     </Command>
                  </Values>
                  <Default>${0}</Default>
               </Input>
               <Input name="sortorder" label="Sort Order" style="radio">
                  <Labels>ASC|DESC|Default</Labels>
                  <Values>ASC|DESC|</Values>
                  <Default>ASC</Default>
               </Input>
               <SetVar name="_sortorder" value='#sortorder.equals("") ? "" : " " + #sortorder'/>
            </Input>

            <SetVar name="_unique" value='#unique.equals("") ? "" : " " + #unique'/>
            <SetVar name="_columns" value='#columns.trim().equals("") ? "" : "(" + #columns + ")"'/>
            <SetVar name="_indexname" value='#indexname.trim().equals("") ? "" : " \"" + #indexname + "\""'/>

            <Command>
               <SQL>
                  <![CDATA[create${_unique} index${_indexname} on "${schema}"."${objectname}" ${_columns}]]>
               </SQL>
            </Command>
            <Confirm>
               <![CDATA[Create index "${indexname}"?]]>
            </Confirm>
            <Result>
               <![CDATA[Index "${indexname}" created!]]>
            </Result>
         </Action>
         
         <Action id="sqlserver-tabletrigger-create" label="Create Trigger" icon="add" reload="true"
                 doclink="http://www.dbvis.com/doclink/create-trigger">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Trigger" name="triggerName" style="text"/>
            <Input label="Trigger Time" name="triggerTime" style="radio">
               <Values>FOR|AFTER|INSTEAD OF</Values>
               <Default>AFTER</Default>
            </Input>
            <Input label="Trigger Event" name="eventDelete" style="check" linebreak="false">
               <Values>DELETE</Values>
               <Labels>DELETE</Labels>
            </Input>
            <Input label="" name="eventInsert" style="check">
               <Values>INSERT</Values>
               <Labels>INSERT</Labels>
               <Default>INSERT</Default>
            </Input>
            <Input label="" name="eventUpdate" style="check" linebreak="true">
               <Values>UPDATE</Values>
               <Labels>UPDATE</Labels>
            </Input>
            <Input label="Table" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="Source" style="separator"/>
            <Input name="source" style="text-editor">
               <Default><![CDATA[
--
--  Insert your own trigger code here
--
    insert into anotherTable (col1, col2) values(val1, val2);]]>
               </Default>
            </Input>

            <SetVar name="_triggerEvent" value='#eventDelete'/>
            <SetVar name="_triggerEvent" value='#_triggerEvent.length() > 0 and #eventInsert.length() > 0 ?
                                                #_triggerEvent + ", " + #eventInsert :
                                                #_triggerEvent + #eventInsert'/>
            <SetVar name="_triggerEvent" value='#_triggerEvent.length() > 0 and #eventUpdate.length() > 0 ?
                                                #_triggerEvent + ", " + #eventUpdate :
                                                #_triggerEvent + #eventUpdate'/>

            <Command parsesql="false">
               <SQL><![CDATA[
create trigger "${schema}"."${triggerName}"
  on "${schema}"."${objectname}"
  ${triggerTime} ${_triggerEvent}
  as 
begin
${source}
end;]]>
               </SQL>
            </Command>
            <Result>
               <![CDATA[Trigger <b>${schema}.${triggerName}</b> created.]]>
            </Result>
         </Action>

         <Separator/>

         <Action id="sqlserver-table-script" label="Script Table" icon="scriptObject"
                 class="sqlBuilder"
                 classargs="script-dialog,SELECT,SELECT *,INSERT,UPDATE,DELETE,CREATE,DROP"/>

      </ActionGroup>

      <ActionGroup type="SystemTable">
         <Action id="sqlserver-systemtable-script" label="Script System Table" icon="scriptObject"
                 class="sqlBuilder"
                 classargs="script-dialog,SELECT,SELECT *"/>
      </ActionGroup>

      <ActionGroup type="View">
         <Action id="sqlserver-view-drop" label="Drop View" reload="true" icon="remove">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="View" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command><SQL><![CDATA[drop view "${schema}"."${objectname}"]]></SQL></Command>
            <Confirm>
               Really drop view ${schema}.${objectname}?
            </Confirm>
            <Result>
               View ${schema}.${objectname} has been dropped!
            </Result>
         </Action>

         <Action id="sqlserver-view-export" label="Export View" icon="export"
                 class="viewExport"
                 doclink="http://www.dbvis.com/doclink/export-view"/>

         <Separator/>
         
         <Action id="sqlserver-viewtrigger-create" label="Create Trigger" icon="add" reload="true">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Trigger" name="triggerName" style="text"/>
            <Input label="Trigger Time" name="triggerTime" style="radio">
               <Values>FOR|AFTER|INSTEAD OF</Values>
               <Default>AFTER</Default>
            </Input>
            <Input label="Trigger Event" name="eventDelete" style="check" linebreak="false">
               <Values>DELETE</Values>
               <Labels>DELETE</Labels>
            </Input>
            <Input label="" name="eventInsert" style="check">
               <Values>INSERT</Values>
               <Labels>INSERT</Labels>
               <Default>INSERT</Default>
            </Input>
            <Input label="" name="eventUpdate" style="check" linebreak="true">
               <Values>UPDATE</Values>
               <Labels>UPDATE</Labels>
            </Input>
            <Input label="View" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="Source" style="separator"/>
            <Input name="source" style="text-editor">
               <Default><![CDATA[
--
--  Insert your own trigger code here
--
    insert into anotherTable (col1, col2) values(val1, val2);]]>
               </Default>
            </Input>

            <SetVar name="_triggerEvent" value='#eventDelete'/>
            <SetVar name="_triggerEvent" value='#_triggerEvent.length() > 0 and #eventInsert.length() > 0 ?
                                                #_triggerEvent + ", " + #eventInsert :
                                                #_triggerEvent + #eventInsert'/>
            <SetVar name="_triggerEvent" value='#_triggerEvent.length() > 0 and #eventUpdate.length() > 0 ?
                                                #_triggerEvent + ", " + #eventUpdate :
                                                #_triggerEvent + #eventUpdate'/>

            <Command parsesql="false">
               <SQL><![CDATA[
create trigger "${schema}"."${triggerName}"
  on "${schema}"."${objectname}"
  ${triggerTime} ${_triggerEvent}
  as 
begin
${source}
end;]]>
               </SQL>
            </Command>
            <Result>
               <![CDATA[Trigger <b>${schema}.${triggerName}</b> created.]]>
            </Result>
         </Action>

         <Separator/>
      
         <Action id="sqlserver-view-script" label="Script View" icon="scriptObject"
                 class="sqlBuilder"
                 classargs="script-dialog,SELECT,SELECT *,INSERT,UPDATE,DELETE,CREATE,DROP"/>

      </ActionGroup>

      <ActionGroup type="Index">
         <Action id="sqlserver-index-drop" label="Drop Index" reload="true" icon="remove">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Table" style="text" editable="false">
               <Default>${sqlserver.getIndexes.TABLE_NAME}</Default>
            </Input>
            <Input label="Index" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command><SQL><![CDATA[drop index "${objectname}" on "${schema}"."${sqlserver.getIndexes.TABLE_NAME}"]]></SQL></Command>
            <Confirm>
               Really drop index ${objectname} for table ${sqlserver.getIndexes.TABLE_NAME}?
            </Confirm>
            <Result>
               Index ${sqlserver.getIndexes.TABLE_NAME}.${objectname} dropped!
            </Result>
         </Action>

         <Action id="sqlserver-index-rename" label="Rename Index" reload="true" icon="rename">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Table" style="text" editable="false">
               <Default>${sqlserver.getIndexes.TABLE_NAME}</Default>
            </Input>
            <Input label="Index" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="New Index Name" name="newIndex" style="text"/>
            <Command>
               <SQL><![CDATA[exec sp_rename "${schema}.${sqlserver.getIndexes.TABLE_NAME}.${objectname}", "${newIndex}"]]></SQL>
            </Command>
            <Confirm>
               Confirm rename of index ${objectname} to ${newIndex}?
            </Confirm>
            <Result>
               Index ${objectname} for table ${sqlserver.getIndexes.TABLE_NAME} renamed to ${newIndex}!
            </Result>
         </Action>

         <If test="#dm.getDatabaseMajorVersion() gte 9">
            <Action id="sqlserver-index-rebuild" label="Rebuild Index">
               <Input label="Schema" style="text" editable="false">
                  <Default>${sqlserver.getIndexes.OWNER}</Default>
               </Input>
               <Input label="Index" style="text" editable="false">
                  <Default>${objectname}</Default>
               </Input>
               <Command>
                  <SQL><![CDATA[alter index "${objectname}" on "${sqlserver.getIndexes.OWNER}"."${sqlserver.getIndexes.TABLE_NAME}" rebuild]]></SQL>
               </Command>
               <Confirm>
                  Confirm rebuild of index ${sqlserver.getIndexes.OWNER}.${objectname}?
               </Confirm>
               <Result>Index ${sqlserver.getIndexes.OWNER}.${objectname} rebuilt!</Result>
            </Action>
         </If>
      </ActionGroup>

      <ActionGroup type="Trigger">
         <Action id="sqlserver-trigger-drop" label="Drop Trigger" reload="true" icon="remove">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Trigger" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command><SQL><![CDATA[drop trigger "${schema}"."${objectname}"]]></SQL></Command>
            <Confirm>
               Really drop trigger ${schema}.${objectname}?
            </Confirm>
            <Result>
               Trigger ${schema}.${objectname} dropped!
            </Result>
         </Action>

         <Action id="sqlserver-trigger-enable" label="Enable Trigger" reload="true" icon="enable">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Trigger" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command><SQL><![CDATA[enable trigger "${schema}"."${objectname}" on "${table_owner}"."${table_name}"]]></SQL></Command>
            <Confirm>
               Really enable trigger ${schema}.${objectname}?
            </Confirm>
            <Result>
               Trigger ${schema}.${objectname} enabled!
            </Result>
         </Action>

         <Action id="sqlserver-trigger-disable" label="Disable Trigger" reload="true" icon="disable">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Trigger" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command><SQL><![CDATA[disable trigger "${schema}"."${objectname}" on "${table_owner}"."${table_name}"]]></SQL></Command>
            <Confirm>
               Really disable trigger ${schema}.${objectname}?
            </Confirm>
            <Result>
               Trigger ${schema}.${objectname} disabled!
            </Result>
         </Action>

         <Action id="sqlserver-trigger-export" label="Export Trigger" icon="export"
                 class="triggerExport"
                 doclink="http://www.dbvis.com/doclink/export-code-object"/>
      </ActionGroup>
      
      <ActionGroup type="Procedures">
         <Action id="sqlserver-procedures-create" label="Create Procedure" reload="true" icon="add"
                 doclink="http://www.dbvis.com/doclink/create-procedure">
            <Input label="Procedure Name" name="procedureName" style="text"/>

            <Input label="Parameters" style="separator"/>

            <Input name="parameters" style="grid">
               <Arg name="output" value="${name} ${type} ${direction}"/>
               <Arg name="newline" value=", "/>

               <Input name="name" label="Name" style="text">
                  <Default>@parm</Default>
               </Input>
               <Input name="direction" label="Direction" style="list">
                  <Values>|OUTPUT</Values>
                  <Default></Default>
               </Input>
               <Input name="type" label="Type" style="text">
                  <Default>VARCHAR(20)</Default>
               </Input>
            </Input>

            <SetVar name="_parameters" value='#parameters.trim().equals("") ? "" : #parameters'/>
            <Command parsesql="false">
               <SQL>
                  <![CDATA[
CREATE PROCEDURE ${procedureName}
${_parameters}
AS
/* Procedure body */
                  ]]>
               </SQL>
            </Command>
            <Confirm>
               Create procedure ${procedureName}?
            </Confirm>
            <Result>
               Procedure ${procedureName} created!
            </Result>
         </Action>
      </ActionGroup>
      
      <ActionGroup type="Procedure">
         <Action id="sqlserver-procedure-drop" label="Drop Procedure" reload="true" icon="remove">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Procedure" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command><SQL><![CDATA[drop procedure "${schema}"."${objectname}"]]></SQL></Command>
            <Confirm>
               Really drop procedure ${schema}.${objectname}?
            </Confirm>
            <Result>
               Procedure ${schema}.${objectname} dropped!
            </Result>
         </Action>

         <Action id="sqlserver-procedure-export" label="Export Procedure" icon="export"
                 class="procedureExport"
                 doclink="http://www.dbvis.com/doclink/export-code-object"/>

         <Separator/>

         <Action id="sqlserver-procedure-script" label="Script Procedure" icon="scriptObject"
                 class="sqlBuilder"
                 classargs="script-dialog,CALL,CREATE,DROP"/>
      </ActionGroup>

      <ActionGroup type="Functions">
         <Action id="sqlserver-functions-create" label="Create Function" reload="true" icon="add"
                 doclink="http://www.dbvis.com/doclink/create-function">
            <Input label="Function Name" name="functionName" style="text"/>
            <Input label="Return Data Type" name="returns" style="text">
               <Default>VARCHAR(20)</Default>
            </Input>

            <Input label="Parameters" style="separator"/>

            <Input name="parameters" style="grid">
               <Arg name="output" value="${name} ${type}"/>
               <Arg name="newline" value=", "/>

               <Input name="name" label="Name" style="text">
                  <Default>@parm</Default>
               </Input>
               <Input name="type" label="Type" style="text">
                  <Default>VARCHAR(20)</Default>
               </Input>
            </Input>

            <SetVar name="_parameters" value='#parameters.trim().equals("()") ? "" : "(" + #parameters + ")"'/>
            <Command parsesql="false">
               <SQL>
                  <![CDATA[
CREATE FUNCTION ${functionName}
${_parameters}
RETURNS ${returns}
AS
BEGIN
  /* Function body */
  RETURN NULL
END
                  ]]>
               </SQL>
            </Command>
            <Confirm>
               Create function ${functionName}?
            </Confirm>
            <Result>
               Function ${functionName} created!
            </Result>
         </Action>
      </ActionGroup>
       
      <ActionGroup type="Function">
         <Action id="sqlserver-function-drop" label="Drop Function" reload="true" icon="remove">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Function" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command><SQL><![CDATA[drop function "${schema}"."${objectname}"]]></SQL></Command>
            <Confirm>
               Really drop function ${schema}.${objectname}?
            </Confirm>
            <Result>
               Function ${schema}.${objectname} dropped!
            </Result>
         </Action>

         <Action id="sqlserver-function-export" label="Export Function" icon="export"
                 class="functionExport"
                 doclink="http://www.dbvis.com/doclink/export-code-object"/>

         <Separator/>

         <Action id="sqlserver-function-script" label="Script Function" icon="scriptObject"
                 class="sqlBuilder"
                 classargs="script-dialog,CALL,CREATE,DROP"/>
      </ActionGroup>
      
      <ActionGroup type="Sequences">
         <Action id="sqlserver-sequences-create" label="Create Sequence" reload="true" icon="add">
            <Input label="Sequence Owner" name="owner" style="list">
               <Values>
                  <Command>
                     <SQL>
                        <![CDATA[select distinct schema_name from information_schema.schemata order by 1]]></SQL>
                  </Command>
               </Values>
               <Default>${#db.loginschema}</Default>
            </Input>
            <Input label="Sequence Name" name="sequenceName" style="text"/>
            <Input label="Start With" name="startWith" style="text">
               <Default>1</Default>
            </Input>
            <Input label="Type" name="type" style="list">
               <Values>tinyint|smallint|int|bigint|decimal</Values>
               <Default>bigint</Default>
            </Input>
            <Input label="Start With" name="startWith" style="text">
               <Default>1</Default>
            </Input>
            <Input label="Increment By" name="increment" style="text">
               <Default>1</Default>
            </Input>
            <Input label="Cycle" name="cycle" style="radio">
               <Values>cycle|no cycle</Values>
               <Labels>Cycle|No Cycle</Labels>
               <Default>no cycle</Default>
            </Input>
            <Input label="Cached Values" name="cache" style="text">
               <Default>20</Default>
            </Input>
            <Command>
               <SQL>
                  <![CDATA[create sequence "${owner}"."${sequenceName}" as ${type} start with ${startWith} increment by ${increment} no maxvalue no minvalue ${cycle} cache ${cache}]]></SQL>
            </Command>
            <Result>
               Sequence ${schema}.${sequenceName} created!
            </Result>
         </Action>
      </ActionGroup>

      <ActionGroup type="Sequence">
         <Action id="sqlserver-sequence-drop" label="Drop Sequence" reload="true" icon="remove">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Sequence" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command>
               <SQL><![CDATA[drop sequence "${schema}"."${objectname}"]]></SQL>
            </Command>
            <Confirm>
               Really drop sequence ${schema}.${objectname}?
            </Confirm>
            <Result>
               Sequence ${schema}.${objectname} dropped!
            </Result>
         </Action>
      </ActionGroup>

      <ActionGroup type="Synonyms">
         <Action id="sqlserver-synonyms-create" label="Create Synonym" reload="true" icon="add">
            <Input label="Synonym Owner" name="synOwner" style="list">
               <Values>
                  <Command idref="getSchemas"/>
               </Values>
               <Default>${schema}</Default>
            </Input>
            <Input label="Synonym Name" name="synObject" style="text"/>
            <Input label="Target Object Owner" name="targetOwner" style="list">
               <Values>
                  <Command idref="getSchemas"/>
               </Values>
               <Default>${schema}</Default>
            </Input>
            <Input label="Target Object Name" name="targetObject" style="text"/>

            <Command>
               <SQL>
                  <![CDATA[create synonym "${synOwner}"."${synObject}" for "${targetOwner}"."${targetObject}"]]>
               </SQL>
            </Command>
            <Result>
               Synonym ${synOwner}.${synObject} created!
            </Result>
         </Action>
      </ActionGroup>

      <ActionGroup type="Synonym">
         <Action id="sqlserver-synonym-drop" label="Drop Synonym" reload="true" icon="remove">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Synonym" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command>
               <SQL>
                  <![CDATA[drop synonym "${schema}"."${objectname}"]]></SQL>
            </Command>
            <Confirm>
               Really drop synonym ${schema}.${objectname}?
            </Confirm>
            <Result>
               Synonym ${schema}.${objectname} has been dropped!
            </Result>
         </Action>
      </ActionGroup>
   </ObjectsActionDef>

   <!-- =================================================================== -->
   <!-- Definition of the database objects tree structure -->
   <!-- =================================================================== -->

   <ObjectsTreeDef extends="false">

      <GroupNode type="Databases" label="Databases">
         <DataNode type="Catalog" label="${getCatalogs.TABLE_CAT}">
            <SetVar name="catalog" value="${getCatalogs.TABLE_CAT}"/>
            <Command idref="getCatalogs">
               <Filter type="Catalog" name="Database">
                  <Column index="TABLE_CAT" name="Name"/>
               </Filter>
            </Command>

            <GroupNode type="Tables" label="Tables">
               <DataNode type="Table" label="${getTables.TABLE_SCHEM}.${getTables.TABLE_NAME}">
                  <SetVar name="schema" value="${getTables.TABLE_SCHEM}"/>
                  <SetVar name="objectname" value="${getTables.TABLE_NAME}"/>
                  <SetVar name="rowcount" value="true"/>
                  <SetVar name="acceptInQB" value="true"/>
                  <Command idref="getTables">
                     <Input name="catalog" value="${catalog}"/>
                     <Input name="objectname" value="%"/>
                     <Input name="tableType" value="TABLE"/>
                     <Filter type="Table" name="Table">
                        <Column index="TABLE_NAME" name="Name"/>
                        <Column index="TABLE_SCHEM" name="Schema"/>
                     </Filter>
                  </Command>

                  <!-- Need to keep the objectname for the current table in
                       a new variable so that the viewers will be able to pick up
                       the correct input to display -->
                  <SetVar name="theTableName" value="${objectname}"/>
                  <SetVar name="theSchemaName" value="${schema}"/>

                  <GroupNode type="Columns" label="Columns">
                     <DataNode type="Column" label="${getColumns.COLUMN_NAME}   (${getColumns.TYPE_NAME})" isLeaf="true">
                        <SetVar name="objectname" value="${getColumns.COLUMN_NAME}"/>
                        <Command idref="getColumns">
                           <Input name="catalog" value="${catalog}"/>
                           <Input name="objectname" value="${objectname}"/>
                        </Command>
                     </DataNode>
                  </GroupNode>

                  <GroupNode type="Indexes" label="Indexes">
                     <DataNode type="Index" label="${sqlserver.getIndexes.OWNER}.${sqlserver.getIndexes.INDEX_NAME}   (${sqlserver.getIndexes.OWNER}.${sqlserver.getIndexes.TABLE_NAME})" isLeaf="true">
                        <SetVar name="objectname" value="${sqlserver.getIndexes.INDEX_NAME}"/>
                        <Command idref="sqlserver.getIndexes">
                           <Input name="database" value="${catalog}"/>
                           <Input name="schema" value="${theSchemaName}"/>
                           <Input name="table" value="${theTableName}"/>
                           <Output id="sqlserver.getIndexes.OWNER" index="1"/>
                           <Output id="sqlserver.getIndexes.TABLE_NAME" index="2"/>
                           <Output id="sqlserver.getIndexes.INDEX_NAME" index="3"/>
                           <Output modelaction="removeisnullrows" index="INDEX_NAME"/>
                        </Command>
                     </DataNode>
                  </GroupNode>
                  
                  <GroupNode type="Triggers" label="Triggers">
                     <DataNode type="Trigger" label="${sqlserver.getTableTriggers.trigger_name}   (${sqlserver.getTableTriggers.table_owner}.${sqlserver.getTableTriggers.table_name})" isLeaf="true" warnstate="#dataMap.get('sqlserver.getTableTriggers.is_disabled').equals(true)">
                        <SetVar name="schema" value="${sqlserver.getTableTriggers.trigger_owner}"/>
                        <SetVar name="objectname" value="${sqlserver.getTableTriggers.trigger_name}"/>
                        <SetVar name="table_owner" value="${sqlserver.getTableTriggers.table_owner}"/>
                        <SetVar name="table_name" value="${sqlserver.getTableTriggers.table_name}"/>
                        <Command idref="sqlserver.getTableTriggers">
                           <Input name="database" value="${catalog}"/>
                           <Input name="owner" value="${theSchemaName}"/>
                           <Input name="name" value="${theTableName}"/>
                        </Command>
                     </DataNode>
                  </GroupNode>
               </DataNode>
            </GroupNode>

            <GroupNode type="SystemTables" label="System Tables">
               <DataNode type="SystemTable" label="${getTables.TABLE_SCHEM}.${getTables.TABLE_NAME}" isLeaf="true">
                  <SetVar name="schema" value="${getTables.TABLE_SCHEM}"/>
                  <SetVar name="objectname" value="${getTables.TABLE_NAME}"/>
                  <SetVar name="rowcount" value="true"/>
                  <SetVar name="acceptInQB" value="true"/>
                  <Command idref="getTables">
                     <Input name="catalog" value="${catalog}"/>
                     <Input name="objectname" value="%"/>
                     <Input name="tableType" value="SYSTEM TABLE"/>
                     <Filter type="SystemTable" name="System Table">
                        <Column index="TABLE_NAME" name="Name"/>
                        <Column index="TABLE_SCHEM" name="Schema"/>
                     </Filter>
                  </Command>
               </DataNode>
            </GroupNode>

            <GroupNode type="Views" label="Views">
               <DataNode type="View" label="${getTables.TABLE_SCHEM}.${getTables.TABLE_NAME}">
                  <SetVar name="schema" value="${getTables.TABLE_SCHEM}"/>
                  <SetVar name="objectname" value="${getTables.TABLE_NAME}"/>
                  <SetVar name="rowcount" value="true"/>
                  <SetVar name="acceptInQB" value="true"/>
                  <Command idref="getTables">
                     <Input name="catalog" value="${catalog}"/>
                     <Input name="objectname" value="%"/>
                     <Input name="tableType" value="VIEW"/>
                     <Filter type="View" name="View Table">
                        <Column index="TABLE_NAME" name="Name"/>
                        <Column index="TABLE_SCHEM" name="Schema"/>
                     </Filter>
                  </Command>
                  
                  <!-- Need to keep the objectname for the current view in
                       a new variable so that the viewers will be able to pick up
                       the correct input to display -->
                  <SetVar name="theTableName" value="${objectname}"/>
                  <SetVar name="theSchemaName" value="${schema}"/>
                  
                  <GroupNode type="Triggers" label="Triggers">
                     <DataNode type="Trigger" label="${sqlserver.getTriggers.trigger_name}   (${sqlserver.getTriggers.table_owner}.${sqlserver.getTriggers.table_name})" isLeaf="true" warnstate="#dataMap.get('sqlserver.getTriggers.is_disabled').equals(true)">
                        <SetVar name="schema" value="${sqlserver.getTriggers.trigger_owner}"/>
                        <SetVar name="objectname" value="${sqlserver.getTriggers.trigger_name}"/>
                        <SetVar name="table_owner" value="${sqlserver.getTriggers.table_owner}"/>
                        <SetVar name="table_name" value="${sqlserver.getTriggers.table_name}"/>
                        <Command idref="sqlserver.getTriggers">
                           <Input name="database" value="${catalog}"/>
                           <Input name="tableNamePattern" value="${theTableName}"/>
                        </Command>
                     </DataNode>
                  </GroupNode>
                  
               </DataNode>
            </GroupNode>

            <GroupNode type="Synonyms" label="Synonyms">
               <DataNode type="Synonym" label="${sqlserver.getSynonyms.owner}.${sqlserver.getSynonyms.name}" isLeaf="true">
                  <SetVar name="schema" value="${sqlserver.getSynonyms.owner}"/>
                  <SetVar name="objectname" value="${sqlserver.getSynonyms.name}"/>
                  <SetVar name="rowcount" value="true"/>
                  <Command idref="sqlserver.getSynonyms">
                     <Input name="database" value="${catalog}"/>
                     <Filter type="Synonym" name="Synonym">
                        <Column index="name" name="Name"/>
                        <Column index="owner" name="Schema"/>
                     </Filter>
                  </Command>
               </DataNode>
            </GroupNode>

            <SetVar name="theTableName" value="%"/>
            <SetVar name="theSchemaName" value="%"/>

            <GroupNode type="Indexes" label="Indexes">
               <DataNode type="Index" label="${sqlserver.getIndexes.OWNER}.${sqlserver.getIndexes.INDEX_NAME}   (${sqlserver.getIndexes.OWNER}.${sqlserver.getIndexes.TABLE_NAME})" isLeaf="true">
                  <SetVar name="schema" value="${sqlserver.getIndexes.OWNER}"/>
                  <SetVar name="objectname" value="${sqlserver.getIndexes.INDEX_NAME}"/>
                  <Command idref="sqlserver.getIndexes">
                     <Input name="database" value="${catalog}"/>
                     <Input name="table" value="%"/>
                     <Input name="schema" value="%"/>
                     <Output id="sqlserver.getIndexes.OWNER" index="1"/>
                     <Output id="sqlserver.getIndexes.TABLE_NAME" index="2"/>
                     <Output id="sqlserver.getIndexes.INDEX_NAME" index="3"/>
                  </Command>
               </DataNode>
            </GroupNode>
            
            <If test="#dm.getDatabaseMajorVersion() gte 11">
               <GroupNode type="Sequences" label="Sequences">
                  <DataNode type="Sequence" label="${sqlserver.getSequences.SEQUENCE_NAME}" isLeaf="true">
                     <SetVar name="objectname" value="${sqlserver.getSequences.SEQUENCE_NAME}"/>
                     <SetVar name="schema" value="${sqlserver.getSequences.SEQUENCE_SCHEMA}"/>
                     <Command idref="sqlserver.getSequences">
                        <Filter type="Sequence" name="Sequence">
                           <Column index="SEQUENCE_NAME" name="Name"/>
                        </Filter>
                     </Command>
                  </DataNode>
               </GroupNode>
            </If>

            <GroupNode type="Users" label="Users" isLeaf="true"/>

            <GroupNode type="Roles" label="Database Roles">
               <DataNode type="Role" label="${sqlserver.getRoles.RoleName}" isLeaf="true">
                  <SetVar name="objectname" value="${sqlserver.getRoles.RoleName}"/>
                  <Command idref="sqlserver.getRoles">
                     <Input name="database" value="${catalog}"/>
                  </Command>
               </DataNode>
            </GroupNode>

            <GroupNode type="Types" label="User Defined Data Types" isLeaf="true"/>

            <SetVar name="theTableName" value="%"/>
            <GroupNode type="Triggers" label="Triggers">
               <DataNode type="Trigger" label="${sqlserver.getTriggers.trigger_name}   (${sqlserver.getTriggers.table_owner}.${sqlserver.getTriggers.table_name})" isLeaf="true" warnstate="#dataMap.get('sqlserver.getTriggers.is_disabled').equals(true)">
                  <SetVar name="schema" value="${sqlserver.getTriggers.trigger_owner}"/>
                  <SetVar name="objectname" value="${sqlserver.getTriggers.trigger_name}"/>
                  <SetVar name="table_owner" value="${sqlserver.getTriggers.table_owner}"/>
                  <SetVar name="table_name" value="${sqlserver.getTriggers.table_name}"/>
                  <Command idref="sqlserver.getTriggers">
                     <Input name="database" value="${catalog}"/>
                     <Input name="tableNamePattern" value="${theTableName}"/>
                  </Command>
               </DataNode>
            </GroupNode>

            <GroupNode type="Procedures" label="Stored Procedures">
               <DataNode type="Procedure" label="${sqlserver.getObjects.owner}.${sqlserver.getObjects.name}" isLeaf="true">
                  <SetVar name="schema" value="${sqlserver.getObjects.owner}"/>
                  <SetVar name="objectname" value="${sqlserver.getObjects.name}"/>
                  <Command idref="sqlserver.getObjects">
                     <Input name="database" value="${catalog}"/>
                     <Input name="type" value="'P'"/>
                     <Filter type="Procedure" name="Procedure">
                        <Column index="name" name="Name"/>
                        <Column index="owner" name="Schema"/>
                     </Filter>
                  </Command>
               </DataNode>
            </GroupNode>

            <GroupNode type="Functions" label="Functions">
               <DataNode type="Function" label="${sqlserver.getObjects.owner}.${sqlserver.getObjects.name}" isLeaf="true">
                  <SetVar name="schema" value="${sqlserver.getObjects.owner}"/>
                  <SetVar name="objectname" value="${sqlserver.getObjects.name}"/>
                  <Command idref="sqlserver.getObjects">
                     <Input name="database" value="${catalog}"/>
                     <Input name="type" value="'FN', 'IF', 'TF'"/>
                     <Filter type="Function" name="Function">
                        <Column index="name" name="Name"/>
                        <Column index="owner" name="Schema"/>
                     </Filter>
                  </Command>
               </DataNode>
            </GroupNode>

         </DataNode>
      </GroupNode>

      <!-- ================================================================= -->
      <!-- DBA Nodes -->
      <!-- ================================================================= -->

      <GroupNode type="DBA" label="DBA Views">
         <GroupNode type="ServerInfo" label="Server Info" isLeaf="true"/>

         <GroupNode type="Logins" label="Logins" isLeaf="true"/>

         <GroupNode type="Devices" label="Database Devices" isLeaf="true"/>

         <GroupNode type="RemoteServers" label="Remote Servers" isLeaf="true"/>

         <GroupNode type="Processes" label="Processes" isLeaf="true"/>

         <GroupNode type="ServerRoles" label="Server Roles" isLeaf="false">
            <DataNode type="ServerRole" label="${sqlserver.getServerRoles.ServerRole}" isLeaf="true">
               <SetVar name="objectname" value="${sqlserver.getServerRoles.ServerRole}"/>
               <Command idref="sqlserver.getServerRoles">
                  <Input name="database" value="${catalog}"/>
               </Command>
            </DataNode>
         </GroupNode>

         <GroupNode type="Locks" label="Locks" isLeaf="true"/>

      </GroupNode>

   </ObjectsTreeDef>

   <!-- =================================================================== -->
   <!-- Definition of the database objects views -->
   <!-- =================================================================== -->

   <ObjectsViewDef extends="true">

      <ObjectView type="Catalog">
         <DataView id="generic-catalog-tables" action="drop"/>
         <DataView id="generic-catalog-references" action="drop"/>
      </ObjectView>

      <ObjectView type="Tables">
         <DataView id="generic-tables-tables" action="drop"/>
         <DataView id="generic-tables-references" action="drop"/>

         <DataView id="sqlserver-tables-tables" icon="Tables" label="Tables" viewer="grid">
            <Input name="menuItem" value="Open in New Tab...">
               <Input name="action" value="open-object-in-new-tab-command ${schema||TABLE_SCHEM}${object||TABLE_NAME}"/>
            </Input>
            <Input name="menuItem" value="Open in Floating Tab...">
               <Input name="action" value="open-object-in-floating-tab-command ${schema||TABLE_SCHEM}${object||TABLE_NAME}"/>
            </Input>
            <Input name="menuItem" value="Script: SELECT ALL">
               <Input name="command" value="select * from ${schema||TABLE_SCHEM}${object||TABLE_NAME}"/>
            </Input>
            <Input name="menuItem" value="Script: DROP TABLE">
               <Input name="command" value="drop table ${schema||TABLE_SCHEM}${object||TABLE_NAME}"/>
            </Input>
            <Command idref="getTables">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="objectname" value="%"/>
               <Input name="tableType" value="TABLE"/>
            </Command>
         </DataView>
         <DataView id="sqlserver-tables-references" icon="References" label="References" viewer="tables-refs"
                   doclink="http://www.dbvis.com/doclink/show-references">
            <Command idref="getTables">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="objectname" value="%"/>
               <Input name="tableType" value="TABLE"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Table">
         <DataView id="sqlserver-table-ddl" icon="Source" label="DDL" viewer="ddl">
            <Input name="formatSQL" value="true"/>
         </DataView>
         <DataView id="sqlserver-table-triggers" icon="Trigger" label="Triggers" viewer="form">
            <Command idref="sqlserver.getTableTriggers">
               <Input name="database" value="${catalog}"/>
               <Input name="owner" value="${schema}"/>
               <Input name="name" value="${objectname}"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="SystemTables">
         <DataView id="sqlserver-systemtables-systemtables" icon="SystemTables" label="SystemTables" viewer="grid">
            <Input name="menuItem" value="Open in New Tab...">
               <Input name="action" value="open-object-in-new-tab-command ${schema||TABLE_SCHEM}${object||TABLE_NAME}"/>
            </Input>
            <Input name="menuItem" value="Open in Floating Tab...">
               <Input name="action" value="open-object-in-floating-tab-command ${schema||TABLE_SCHEM}${object||TABLE_NAME}"/>
            </Input>
            <Input name="menuItem" value="Script: SELECT ALL">
               <Input name="command" value="select * from ${schema||TABLE_SCHEM}${object||TABLE_NAME}"/>
            </Input>
            <Command idref="getTables">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="objectname" value="%"/>
               <Input name="tableType" value="SYSTEM TABLE"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="SystemTable">
         <DataView id="sqlserver-systemtable-info" icon="Info" label="Info" viewer="node-form"/>
         <DataView id="sqlserver-systemtable-columns" icon="Columns" label="Columns" viewer="grid">
            <Command idref="getColumns">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="objectname" value="${objectname}"/>
            </Command>
         </DataView>
         <DataView id="sqlserver-systemtable-data" icon="Data" label="Data" viewer="table-data">
            <Message>
               <![CDATA[
<html>
Note: This is a system table. Do not edit unless you are really sure what you're
doing!
</html>
               ]]>
            </Message>
         </DataView>
         <DataView id="sqlserver-systemtable-rowcount" icon="RowCount" label="Row Count" viewer="table-rowcount"/>
      </ObjectView>

      <ObjectView type="Views">
         <DataView id="sqlserver-views-views" icon="Views" label="Views" viewer="grid">
            <Input name="menuItem" value="Open in New Tab...">
               <Input name="action" value="open-object-in-new-tab-command ${schema||TABLE_SCHEM}${object||TABLE_NAME}"/>
            </Input>
            <Input name="menuItem" value="Open in Floating Tab...">
               <Input name="action" value="open-object-in-floating-tab-command ${schema||TABLE_SCHEM}${object||TABLE_NAME}"/>
            </Input>
            <Input name="menuItem" value="Script: SELECT ALL">
               <Input name="command" value="select * from ${schema||TABLE_SCHEM}${object||TABLE_NAME}"/>
            </Input>
            <Input name="menuItem" value="Script: DROP VIEW">
               <Input name="command" value="drop view ${schema||TABLE_SCHEM}${object||TABLE_NAME}"/>
            </Input>

            <Command idref="getTables">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="objectname" value="%"/>
               <Input name="tableType" value="VIEW"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="View">
         <DataView id="sqlserver-view-info" icon="Info" label="Info" viewer="node-form"/>
         <DataView id="sqlserver-view-columns" icon="Columns" label="Columns" viewer="grid">
            <Command idref="getColumns">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="objectname" value="${objectname}"/>
            </Command>
         </DataView>
         <DataView id="sqlserver-view-data" icon="Data" label="Data" viewer="table-data"/>
         <DataView id="sqlserver-view-rowcount" icon="RowCount" label="Row Count" viewer="table-rowcount"/>
         <DataView id="sqlserver-view-indexes" icon="Index" label="Indexes" viewer="grid">
            <Command idref="getIndexes">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="objectname" value="${objectname}"/>
            </Command>
         </DataView>
         <DataView id="sqlserver-view-ddl" icon="Source" label="DDL" viewer="ddl">
            <Input name="objectType" value="View"/>
            <Input name="formatSQL" value="true"/>
         </DataView>
      </ObjectView>

      <ObjectView type="Indexes">
         <DataView id="generic-indexes-indexes" action="drop"/>

         <DataView id="sqlserver-indexes-indexes" icon="Indexes" label="Indexes" viewer="grid">
            <Command idref="sqlserver.getIndexes">
               <Input name="database" value="${catalog}"/>
               <Input name="schema" value="${theSchemaName}"/>
               <Input name="table" value="${theTableName}"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Sequences">
         <DataView id="sqlserver-sequences-sequences" icon="Sequences" label="Sequences" viewer="grid">
            <Command idref="sqlserver.getSequences"/>
            <Input name="menuItem" value="Script: DROP SEQUENCE">
               <Input name="command" value="drop sequence ${schema||SEQUENCE_SCHEMA}${object||SEQUENCE_NAME}"/>
            </Input>
         </DataView>
      </ObjectView>

      <ObjectView type="Sequence">
         <DataView id="sqlserver-sequence-info" icon="Info" label="Info" viewer="node-form"/>
      </ObjectView>

      <ObjectView type="Synonyms">
         <DataView id="sqlserver-synonyms-synonyms" icon="Synonyms" label="Synonyms" viewer="grid">
            <Command idref="sqlserver.getSynonyms">
               <Input name="database" value="${catalog}"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Synonym">
         <DataView id="sqlserver-synonym-info" icon="Info" label="Info" viewer="node-form"/>
      </ObjectView>

      <ObjectView type="Users">
         <DataView id="sqlserver-users-users" icon="Users" label="Users" viewer="grid">
            <Command idref="sqlserver.getUsers">
               <Input name="database" value="${catalog}"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Roles">
         <DataView id="sqlserver-roles-roles" icon="Roles" label="Roles" viewer="grid">
            <Command idref="sqlserver.getRoles">
               <Input name="database" value="${catalog}"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Role">
         <DataView id="sqlserver-role-info" icon="Info" label="Info" viewer="node-form"/>
         <DataView id="sqlserver-role-users" icon="Users" label="Users" viewer="grid">
            <Command idref="sqlserver.getRoleMembers">
               <Input name="database" value="${catalog}"/>
               <Input name="name" value="${objectname}"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Triggers">
         <DataView id="sqlserver-triggers-triggers" icon="Triggers" label="Triggers" viewer="grid">
            <Command idref="sqlserver.getTriggers">
               <Input name="database" value="${catalog}"/>
               <Input name="tableNamePattern" value="${theTableName}"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Trigger">
         <DataView classargs="TRIGGER" id="sqlserver-trigger-triggereditor" icon="SourceEditor" label="Trigger Editor" viewer="ProcedureViewer"
                   doclink="http://www.dbvis.com/doclink/edit-code-object"/>
         <DataView id="sqlserver-trigger-info" icon="Info" label="Info" viewer="node-form"/>
         <!--
         <DataView type="Source" label="Source" viewer="text">
            <Input name="formatSQL" value="true"/>

            <Command idref="sqlserver.getObjectSource">
               <Input name="database" value="${catalog}"/>
               <Input name="owner" value="${schema}"/>
               <Input name="name" value="${objectname}"/>
            </Command>
         </DataView>
         -->
      </ObjectView>

      <ObjectView type="Types">
         <DataView id="sqlserver-types-userdefineddatatypes" icon="Types" label="User Defined Data Types" viewer="grid">
            <Command idref="sqlserver.getUserTypes">
               <Input name="database" value="${catalog}"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Procedures">
         <DataView id="generic-procedures-procedures" action="drop"/>

         <DataView id="sqlserver-procedures-procedures" icon="Procedures" label="Procedures" viewer="grid">
            <Command idref="sqlserver.getObjects">
               <Input name="database" value="${catalog}"/>
               <Input name="type" value="'P'"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Procedure">
         <DataView id="generic-procedure-columns" action="drop"/>

         <DataView classargs="PROCEDURE" id="sqlserver-procedure-procedureeditor" icon="SourceEditor" label="Procedure Editor" viewer="ProcedureViewer"
                   doclink="http://www.dbvis.com/doclink/edit-code-object"/>
         <DataView id="sqlserver-procedure-interface" icon="Interface" label="Interface" viewer="form">
            <Command idref="getProcedureColumns">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="objectname" value="${objectname}"/>
            </Command>
         </DataView>
         <!--
         <DataView type="Source" label="Source" viewer="text">
            <Command idref="sqlserver.getObjectSource">
               <Input name="database" value="${catalog}"/>
               <Input name="owner" value="${schema}"/>
               <Input name="name" value="${objectname}"/>
            </Command>
         </DataView>
-->         
      </ObjectView>

      <ObjectView type="Functions">
         <DataView id="sqlserver-functions-functions" icon="Functions" label="Functions" viewer="grid">
            <Command idref="sqlserver.getObjects">
               <Input name="database" value="${catalog}"/>
               <Input name="type" value="'FN', 'IF', 'TF'"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Function">
         <DataView classargs="FUNCTION" id="sqlserver-function-functioneditor" icon="SourceEditor" label="Function Editor" viewer="ProcedureViewer"
                   doclink="http://www.dbvis.com/doclink/edit-code-object"/>
         <DataView id="sqlserver-function-interface" icon="Interface" label="Interface" viewer="form">
            <Command idref="getProcedureColumns">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="objectname" value="${objectname}"/>
            </Command>
         </DataView>
         <!--
         <DataView type="Source" label="Source" viewer="text">
            <Command idref="sqlserver.getObjectSource">
               <Input name="database" value="${catalog}"/>
               <Input name="owner" value="${schema}"/>
               <Input name="name" value="${objectname}"/>
            </Command>
         </DataView>
-->         
      </ObjectView>

      <!-- ================================================================= -->
      <!-- DBA Views -->
      <!-- ================================================================= -->

      <ObjectView type="ServerInfo">
         <DataView id="sqlserver-serverinfo-serverinfo" icon="Info" label="Server Info" viewer="grid">
            <Command idref="sqlserver.serverInfo"/>
         </DataView>
      </ObjectView>


      <ObjectView type="Logins">
         <DataView id="sqlserver-logins-logins" icon="Logins" label="Logins" viewer="grid">
            <Command idref="sqlserver.getLogins"/>
         </DataView>
      </ObjectView>

      <ObjectView type="Devices">
         <DataView id="sqlserver-devices-databasedevices" icon="Devices" label="Database Devices" viewer="grid">
            <Command idref="sqlserver.getDevices"/>
         </DataView>
      </ObjectView>

      <ObjectView type="RemoteServers">
         <DataView id="sqlserver-remoteservers-remoteservers" icon="RemoteServers" label="Remote Servers" viewer="grid">
            <Command idref="sqlserver.getRemoteServers"/>
         </DataView>
      </ObjectView>

      <ObjectView type="ServerRoles">
         <DataView id="sqlserver-serverroles-roles" icon="ServerRoles" label="Roles" viewer="grid">
            <Command idref="sqlserver.getServerRoles"/>
         </DataView>
      </ObjectView>

      <ObjectView type="ServerRole">
         <DataView id="sqlserver-serverrole-info" icon="Info" label="Info" viewer="node-form"/>
         <DataView id="sqlserver-serverrole-users" icon="Users" label="Users" viewer="grid">
            <Command idref="sqlserver.getServerRoleMembers">
               <Input name="database" value="${catalog}"/>
               <Input name="name" value="${objectname}"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Processes">
         <DataView id="sqlserver-processes-processes" icon="Processes" label="Processes" viewer="grid">
            <Command idref="sqlserver.getProcesses"/>
         </DataView>
      </ObjectView>

      <ObjectView type="Locks">
         <DataView id="sqlserver-locks-locks" icon="Locks" label="Locks" viewer="grid">
            <Command idref="sqlserver.getLocks"/>
         </DataView>
      </ObjectView>

   </ObjectsViewDef>

</DatabaseProfile>
