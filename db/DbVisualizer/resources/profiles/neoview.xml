<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE DatabaseProfile SYSTEM "dbvis-defs.dtd">

<!--
   Created by Hewlett-Packard Development Company, L.P.,
   exclusively for DbVisualizer
-->

<DatabaseProfile
        desc="Profile for HP Neoview"
        version="$Revision: 17463 $"
        date="$Date: 2014-04-01 12:31:27 +0200 (Tue, 01 Apr 2014) $"
        minver="9.1"
        extends="generic">

   <!--
    Change Log
    ==========
      2009-08-21:
        - Modified to use the new <InitCommands> feature. This to get rid of the
          METACAT driver property requirement
        - Commands modified to support UCS2 Neoview Configuration
        - Actions added for the majority of all object types
   -->

   <!-- =================================================================== -->
   <!-- Definition of initialization commands                               -->
   <!-- =================================================================== -->

   <InitCommands extends="true">

      <!--
         Note: The reason for the getDbVersion command is because the
         Neoview JDBC driver always return Major.Minor version as 3.5
         independent if accessing a 2.2, 2.3, 2.4 system.
         The JDBC team at HP have confirmed the Major.Minor version will
         reflect the actual DB server version in the upcoming 2.4.1 driver.
         Once that version has been widely deployed then remove the
         neoview.getDbVersion and modify the condition check for DB version
         using the JDBC drivers DatabaseMetaData accessors.
         (Using DatabaseMetaData to check DB server version is recommended
         as it doesn't imply a roundtrip to the DB server which the current
         solution does).
      -->
      <Command id="neoview.getDbVersion" method="runBeforeConditionsEval">
         <!--
            DBVERSION will be set to "2300" for 2.3 system,
            "2400" for 2.4 system and so on
         -->
         <SQL>
            <![CDATA[
SELECT SUBSTRING(SYSTEM_VERSION FROM 10)
FROM (GET VERSION OF SYSTEM) V(SYSTEM_VERSION)
            ]]>
         </SQL>
         <Output id="DBVERSION" index="1"/>
      </Command>

      <Command id="neoview.getMaster">
         <If test="#DBVERSION gte 2400">
            <!--
               For 2400 and later the information about the master segement
               is stored in the database. The following query will find out
               the segment name (ex: NONSTOP_SQLMX_ATC0402) and store it in the
               METACAT variable.
            -->
            <SQL>
               <![CDATA[
SELECT MIN(SYSTEM_CATALOGS) AS MASTER_CAT
FROM (GET SYSTEM CATALOGS) V(SYSTEM_CATALOGS)
WHERE SYSTEM_CATALOGS LIKE _ISO88591'NONSTOP_SQLMX_%'
              ]]>
            </SQL>
         </If>
         <Else>
            <!--
               For 2300 and earlier the user must manually set the METACAT
               property in the Connection Properties->Driver Properties. For
               backward compatibility enter the master segment name without the
               first "NONSTOP_SQLMX_" part i.e. METACAT should just include
               for ex: "ATC0402". The final result (ex: NONSTOP_SQLMX_ATC0402)
               is stored in the METACAT variable.
            -->
            <SQL>
               <![CDATA[
SELECT 'NONSTOP_SQLMX_${#dp.METACAT}'
FROM (VALUES(1)) AS T1
              ]]>
            </SQL>
         </Else>
         <Output id="METACAT" index="1"/>
      </Command>

   </InitCommands>

   <!-- =================================================================== -->
   <!-- Definition of the commands                                          -->
   <!-- =================================================================== -->

   <Commands extends="true">

      <!-- =================================================================== -->
      <!-- Commands used by the database objects tree -->
      <!-- =================================================================== -->

      <!--
         NOTE: You can edit the getCatalogs and getSchemas commands below to
         show/hide additional catalogs as desired.
      -->

      <Command id="neoview.getCatalogs">
         <SQL>
            <![CDATA[
SELECT
    TRIM(CAT_NAME) AS CATALOG_NAME
FROM
${METACAT}.SYSTEM_SCHEMA.CATSYS C
WHERE
    CAT_NAME     NOT LIKE _ISO88591'NONSTOP_SQLMX_%'
    AND CAT_NAME NOT IN (_ISO88591'NSMWEB', _ISO88591'NVSCRIPT', _ISO88591'METRIC', _ISO88591'MATRIX', _ISO88591'GENUSCAT', _ISO88591'MANAGEABILITY')
ORDER BY
    CATALOG_NAME
FOR READ UNCOMMITTED ACCESS
            ]]>
         </SQL>
      </Command>

      <Command id="neoview.getSchemas">
         <SQL>
            <![CDATA[
SELECT
    TRIM(SCHEMA_NAME) AS SCHEMA_NAME,
    CAST(SCHEMA_VERSION AS VARCHAR(12)) AS SCHEMA_VERSION
FROM
    ${METACAT}.SYSTEM_SCHEMA.CATSYS C,
    ${METACAT}.SYSTEM_SCHEMA.SCHEMATA S
WHERE
    C.CAT_UID = S.CAT_UID
    AND CAT_NAME = _ISO88591'${catalog}' 
    AND (CHAR_LENGTH(_ISO88591'${#dp.DISPLAYED_SCHEMA}') = 0 OR _ISO88591'${#dp.DISPLAYED_SCHEMA}' = _ISO88591'(null)')
    AND SCHEMA_NAME NOT LIKE _ISO88591'DEFINITION_SCHEMA_VERSION_%'
    AND SCHEMA_NAME NOT LIKE _ISO88591'VOLATILE_SCHEMA_%'
    AND SCHEMA_NAME NOT LIKE _ISO88591'HP_%'
    AND SCHEMA_NAME NOT IN (_ISO88591'@MAINTAIN_SCHEMA@')
FOR READ UNCOMMITTED ACCESS
 
UNION
 
SELECT
    TRIM(SCHEMA_NAME) AS SCHEMA_NAME,
    CAST(SCHEMA_VERSION AS VARCHAR(12)) AS SCHEMA_VERSION
FROM
    ${METACAT}.SYSTEM_SCHEMA.CATSYS C,
    ${METACAT}.SYSTEM_SCHEMA.SCHEMATA S
WHERE
    C.CAT_UID = S.CAT_UID
    AND CAT_NAME = _ISO88591'${catalog}' 
    AND CHAR_LENGTH(_ISO88591'${#dp.DISPLAYED_SCHEMA}') > 0 
    AND _ISO88591'${#dp.DISPLAYED_SCHEMA}' <> _ISO88591'(null)'
    AND SCHEMA_NAME = _ISO88591'${#dp.DISPLAYED_SCHEMA}'
FOR READ UNCOMMITTED ACCESS

ORDER BY SCHEMA_NAME 
            ]]>
         </SQL>
      </Command>

      <Command id="neoview.getTables">
         <SQL>
            <![CDATA[
SELECT
    TRIM(CAT_NAME)    AS CAT_NAME,
    TRIM(SCHEMA_NAME) AS SCHEMA_NAME,
    TRIM(OBJECT_NAME) AS TABLE_NAME,
    OBJECT_UID	      AS TABLE_UID
FROM
    ${METACAT}.SYSTEM_SCHEMA.CATSYS C,
    ${METACAT}.SYSTEM_SCHEMA.SCHEMATA S,
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.OBJECTS O

WHERE
    C.CAT_UID                 = S.CAT_UID
    AND O.SCHEMA_UID          = S.SCHEMA_UID
    AND OBJECT_NAME_SPACE     = _ISO88591'TA'
    AND OBJECT_TYPE           = _ISO88591'BT'
    AND OBJECT_SECURITY_CLASS = _ISO88591'UT'
    AND CAT_NAME              = _ISO88591'${catalog}'
    AND SCHEMA_NAME           = _ISO88591'${schema}'

ORDER BY
    TABLE_NAME
FOR READ UNCOMMITTED ACCESS
            ]]>
         </SQL>
      </Command>

      <Command id="neoview.getViews">
         <SQL>
            <![CDATA[
SELECT
    TRIM(CAT_NAME)    AS CAT_NAME,
    TRIM(SCHEMA_NAME) AS SCHEMA_NAME,
    TRIM(OBJECT_NAME) AS VIEW_NAME,
    OBJECT_UID	      AS VIEW_UID
FROM
    ${METACAT}.SYSTEM_SCHEMA.CATSYS C,
    ${METACAT}.SYSTEM_SCHEMA.SCHEMATA S,
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.OBJECTS O
WHERE
    C.CAT_UID                 = S.CAT_UID
    AND O.SCHEMA_UID          = S.SCHEMA_UID
    AND OBJECT_NAME_SPACE     = _ISO88591'TA'
    AND OBJECT_TYPE           = _ISO88591'VI'
    AND OBJECT_SECURITY_CLASS = _ISO88591'UT'
    AND CAT_NAME              = _ISO88591'${catalog}'
    AND SCHEMA_NAME           = _ISO88591'${schema}'
ORDER BY
    VIEW_NAME
FOR READ UNCOMMITTED ACCESS
            ]]>
         </SQL>
      </Command>

      <Command id="neoview.getMaterializedViews">
         <SQL>
            <![CDATA[
SELECT
    TRIM(CAT_NAME)    AS CAT_NAME,
    TRIM(SCHEMA_NAME) AS SCHEMA_NAME,
    TRIM(OBJECT_NAME) AS MATERIALIZED_VIEW_NAME,
    OBJECT_UID	      AS MATERIALIZED_VIEW_UID
FROM
    ${METACAT}.SYSTEM_SCHEMA.CATSYS C,
    ${METACAT}.SYSTEM_SCHEMA.SCHEMATA S,
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.OBJECTS O
WHERE
    C.CAT_UID                 = S.CAT_UID
    AND O.SCHEMA_UID          = S.SCHEMA_UID
    AND OBJECT_NAME_SPACE     = _ISO88591'TA'
    AND OBJECT_TYPE           = _ISO88591'MV'
    AND OBJECT_SECURITY_CLASS = _ISO88591'UT'
    AND CAT_NAME              = _ISO88591'${catalog}'
    AND SCHEMA_NAME           = _ISO88591'${schema}'
ORDER BY
    MATERIALIZED_VIEW_NAME
FOR READ UNCOMMITTED ACCESS
            ]]>
         </SQL>
      </Command>

      <Command id="neoview.getMaterializedViewGroups">
         <SQL>
            <![CDATA[
SELECT
    TRIM(CAT_NAME)    AS CAT_NAME,
    TRIM(SCHEMA_NAME) AS SCHEMA_NAME,
    TRIM(OBJECT_NAME) AS MATERIALIZED_VIEW_GROUP_NAME,
    OBJECT_UID	      AS MATERIALIZED_VIEW_GROUP_UID
FROM
    ${METACAT}.SYSTEM_SCHEMA.CATSYS C,
    ${METACAT}.SYSTEM_SCHEMA.SCHEMATA S,
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.OBJECTS O
WHERE
    C.CAT_UID                 = S.CAT_UID
    AND O.SCHEMA_UID          = S.SCHEMA_UID
    AND OBJECT_NAME_SPACE     = _ISO88591'RG'
    AND OBJECT_TYPE           = _ISO88591'RG'
    AND OBJECT_SECURITY_CLASS = _ISO88591'UT'
    AND CAT_NAME              = _ISO88591'${catalog}'
    AND SCHEMA_NAME           = _ISO88591'${schema}'
ORDER BY
    MATERIALIZED_VIEW_GROUP_NAME
FOR READ UNCOMMITTED ACCESS
            ]]>
         </SQL>
      </Command>

      <Command id="neoview.getIndexes">
         <SQL>
            <![CDATA[
SELECT
    TRIM(CAT_NAME)    AS CAT_NAME,
    TRIM(SCHEMA_NAME) AS SCHEMA_NAME,
    TRIM(OBJECT_NAME) AS INDEX_NAME,
    OBJECT_UID	      AS INDEX_UID
FROM
    ${METACAT}.SYSTEM_SCHEMA.CATSYS C,
    ${METACAT}.SYSTEM_SCHEMA.SCHEMATA S,
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.OBJECTS O
WHERE
    C.CAT_UID                 = S.CAT_UID
    AND O.SCHEMA_UID          = S.SCHEMA_UID
    AND OBJECT_NAME_SPACE     = _ISO88591'IX'
    AND OBJECT_TYPE           = _ISO88591'IX'
    AND OBJECT_SECURITY_CLASS = _ISO88591'UT'
    AND CAT_NAME              = _ISO88591'${catalog}'
    AND SCHEMA_NAME           = _ISO88591'${schema}'
ORDER BY
    INDEX_NAME
FOR READ UNCOMMITTED ACCESS
            ]]>
         </SQL>
      </Command>

      <Command id="neoview.getTriggers">
         <SQL>
            <![CDATA[
SELECT
    TRIM(CAT_NAME)    AS CAT_NAME,
    TRIM(SCHEMA_NAME) AS SCHEMA_NAME,
    TRIM(OBJECT_NAME) AS TRIGGER_NAME,
    OBJECT_UID	      AS TRIGGER_UID
FROM
    ${METACAT}.SYSTEM_SCHEMA.CATSYS C,
    ${METACAT}.SYSTEM_SCHEMA.SCHEMATA S,
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.OBJECTS O
WHERE
    C.CAT_UID                 = S.CAT_UID
    AND O.SCHEMA_UID          = S.SCHEMA_UID
    AND OBJECT_NAME_SPACE     = _ISO88591'TR'
    AND OBJECT_TYPE           = _ISO88591'TR'
    AND OBJECT_SECURITY_CLASS = _ISO88591'UT'
    AND CAT_NAME              = _ISO88591'${catalog}'
    AND SCHEMA_NAME           = _ISO88591'${schema}'
ORDER BY
    TRIGGER_NAME
FOR READ UNCOMMITTED ACCESS
            ]]>
         </SQL>
      </Command>

      <Command id="neoview.getSynonyms">
         <SQL>
            <![CDATA[
SELECT
    TRIM(CAT_NAME)    AS CAT_NAME,
    TRIM(SCHEMA_NAME) AS SCHEMA_NAME,
    TRIM(OBJECT_NAME) AS SYNONYM_NAME,
    OBJECT_UID	      AS SYNONYM_UID
FROM
    ${METACAT}.SYSTEM_SCHEMA.CATSYS C,
    ${METACAT}.SYSTEM_SCHEMA.SCHEMATA S,
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.OBJECTS O
WHERE
    C.CAT_UID                 = S.CAT_UID
    AND O.SCHEMA_UID          = S.SCHEMA_UID
    AND OBJECT_NAME_SPACE     = _ISO88591'TA'
    AND OBJECT_TYPE           = _ISO88591'SY'
    AND OBJECT_SECURITY_CLASS = _ISO88591'UT'
    AND CAT_NAME              = _ISO88591'${catalog}'
    AND SCHEMA_NAME           = _ISO88591'${schema}'
ORDER BY
    SYNONYM_NAME
FOR READ UNCOMMITTED ACCESS
            ]]>
         </SQL>
      </Command>

      <!-- =================================================================== -->
      <!-- Commands used by the database objects views -->
      <!-- =================================================================== -->

      <!--
         NOTE: The queries below assume that dependent objects can cross schema
               but not catalog boundaries. For example, it is assumed that
               no triggers will be defined outside the catalog of the subject
               table. This is a reasonable assumption for the Neoview platform.
      -->

      <Command id="neoview.getTableInfo">
         <SQL>
            <![CDATA[
SELECT
    TRIM(O.OBJECT_NAME)                                            AS TABLE_NAME,
    CAST(AP.RECORD_SIZE AS VARCHAR(64)) || ' bytes'                AS RECORD_SIZE,
    (
       SELECT
          CASE
             WHEN MAX(STATS_TIME) IS NULL THEN 'NEVER'
             ELSE CAST(MAX(STATS_TIME) AS VARCHAR(64)) || ' GMT'
	  END              
       FROM
          "${catalog}"."${schema}".HISTOGRAMS
       WHERE
          TABLE_UID = O.OBJECT_UID
       FOR READ UNCOMMITTED ACCESS
    )                                                              AS LAST_STATISTICS_UPDATE_TIME,
    CAST(CONVERTTIMESTAMP(O.CREATE_TIME) AS VARCHAR(64)) || ' GMT' AS CREATION_TIME,
    CAST(CONVERTTIMESTAMP(O.REDEF_TIME) AS VARCHAR(64)) || ' GMT'  AS REDEFINITION_TIME
FROM
    ${METACAT}.SYSTEM_SCHEMA.CATSYS C,
    ${METACAT}.SYSTEM_SCHEMA.SCHEMATA S,    
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.OBJECTS O,
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.ACCESS_PATHS AP
WHERE
    C.CAT_NAME              = _ISO88591'${catalog}'
    AND S.SCHEMA_NAME       = _ISO88591'${schema}'   
    AND S.CAT_UID           = C.CAT_UID
    AND O.SCHEMA_UID        = S.SCHEMA_UID    
    AND O.OBJECT_NAME       = _ISO88591'${table_name}'
    AND O.OBJECT_NAME_SPACE = _ISO88591'TA'
    AND AP.ACCESS_PATH_UID  = O.OBJECT_UID
FOR READ UNCOMMITTED ACCESS
            ]]>
         </SQL>
      </Command>

      <Command id="neoview.getViewInfo">
         <SQL>
            <![CDATA[
SELECT
    TRIM(O.OBJECT_NAME)                                            AS VIEW_NAME,
    CASE 
       TRIM(V.CHECK_OPTION)
          WHEN _ISO88591'C' THEN 'CASCADE'
          WHEN _ISO88591'L' THEN 'LOCAL'
          WHEN _ISO88591'N' THEN 'NONE'
          ELSE 'UNKNOWN'
    END				                                   AS CHECK_OPTION,
    CASE 
       TRIM(V.IS_UPDATABLE)
          WHEN _ISO88591'Y' THEN 'YES'
          WHEN _ISO88591'N' THEN 'NO'
          ELSE 'UNKNOWN'
    END                                                            AS UPDATABLE,
    CASE
       TRIM(V.IS_INSERTABLE)                    
          WHEN _ISO88591'Y' THEN 'YES'
          WHEN _ISO88591'N' THEN 'NO'
          ELSE 'UNKNOWN'
    END				                                   AS INSERTABLE,    
    CAST(CONVERTTIMESTAMP(O.CREATE_TIME) AS VARCHAR(64)) || ' GMT' AS CREATION_TIME,
    CAST(CONVERTTIMESTAMP(O.REDEF_TIME) AS VARCHAR(64)) || ' GMT'  AS REDEFINITION_TIME    
FROM
    ${METACAT}.SYSTEM_SCHEMA.CATSYS C,
    ${METACAT}.SYSTEM_SCHEMA.SCHEMATA S,    
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.OBJECTS O,
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.VWS V
WHERE
    C.CAT_NAME              = _ISO88591'${catalog}'
    AND S.SCHEMA_NAME       = _ISO88591'${schema}'   
    AND S.CAT_UID           = C.CAT_UID
    AND O.SCHEMA_UID        = S.SCHEMA_UID    
    AND O.OBJECT_NAME       = _ISO88591'${view_name}'
    AND O.OBJECT_NAME_SPACE = _ISO88591'TA'
    AND V.OBJECT_UID        = O.OBJECT_UID
FOR READ UNCOMMITTED ACCESS
            ]]>
         </SQL>
      </Command>

      <Command id="neoview.getMaterializedViewInfo">
         <SQL>
            <![CDATA[
SELECT
    TRIM(O.OBJECT_NAME)                                            AS MATERIALIZED_VIEW_NAME,
    CASE 
       TRIM(MV.MV_TYPE)
          WHEN _ISO88591'J' THEN 'MATERIALIZED JOIN VIEW'
          WHEN _ISO88591'A' THEN 'MATERIALIZED AGGREGATE VIEW'
          WHEN _ISO88591'X' THEN 'MATERIALIZED AGGREGATE VIEW ON EXPLICIT JOIN'
          WHEN _ISO88591'O' THEN 'OTHER'
          ELSE 'UNKNOWN'
    END				                                   AS TYPE,
    CASE 
       TRIM(MV.CREATION_REFRESH_TYPE)
          WHEN _ISO88591'S' THEN 'ON-STATEMENT'
          WHEN _ISO88591'R' THEN 'ON-REQUEST'    
          WHEN _ISO88591'C' THEN 'RE-COMPUTE'    
          ELSE 'UNKNOWN'
    END                                                            AS REFRESH_POLICY,
    CASE
       TRIM(MV.INCREMENTALY_MAINTAINABLE)                    
          WHEN _ISO88591'Y' THEN 'YES'
          WHEN _ISO88591'N' THEN 'NO'
          ELSE 'UNKNOWN'
    END				                                   AS INCREMENTALY_MAINTAINABLE,
    CAST(MV.COMMIT_REFRESH_EACH AS VARCHAR(64)) || ' ROWS'         AS COMMIT_REFRESH_EACH,
    CASE 
       TRIM(MV.MVSTATUS)
          WHEN _ISO88591'Y' THEN 'INITIALIZED'
          WHEN _ISO88591'N' THEN 'NOT INITIALIZED'
          WHEN _ISO88591'U' THEN 'UNAVAILABLE'
          ELSE 'UNKNOWN'
    END				                                   AS STATUS,
    CASE 
       WHEN MV.REFRESHED_AT = 0 THEN 'NEVER'
       ELSE CAST(CONVERTTIMESTAMP(MV.REFRESHED_AT) AS VARCHAR(64)) || ' GMT'
    END	                                                           AS LAST_REFRESH_TIME,
    CAST(CONVERTTIMESTAMP(O.CREATE_TIME) AS VARCHAR(64)) || ' GMT' AS CREATION_TIME,
    CAST(CONVERTTIMESTAMP(O.REDEF_TIME) AS VARCHAR(64)) || ' GMT'  AS REDEFINITION_TIME
FROM
    ${METACAT}.SYSTEM_SCHEMA.CATSYS C,
    ${METACAT}.SYSTEM_SCHEMA.SCHEMATA S,    
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.OBJECTS O,
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.MVS MV
WHERE
    C.CAT_NAME              = _ISO88591'${catalog}'
    AND S.SCHEMA_NAME       = _ISO88591'${schema}'   
    AND S.CAT_UID           = C.CAT_UID
    AND O.SCHEMA_UID        = S.SCHEMA_UID    
    AND O.OBJECT_NAME       = _ISO88591'${materialized_view_name}'
    AND O.OBJECT_NAME_SPACE = _ISO88591'TA'
    AND MV.MV_UID           = O.OBJECT_UID
FOR READ UNCOMMITTED ACCESS
            ]]>
         </SQL>
      </Command>

      <Command id="neoview.getMaterializedViewGroupInfo">
         <SQL>
            <![CDATA[
SELECT
    TRIM(O.OBJECT_NAME)                                            AS MATERIALIZED_VIEW_GROUP_NAME,
    CAST(CONVERTTIMESTAMP(O.CREATE_TIME) AS VARCHAR(64)) || ' GMT' AS CREATION_TIME,
    CAST(CONVERTTIMESTAMP(O.REDEF_TIME) AS VARCHAR(64)) || ' GMT'  AS REDEFINITION_TIME
FROM
    ${METACAT}.SYSTEM_SCHEMA.CATSYS C,
    ${METACAT}.SYSTEM_SCHEMA.SCHEMATA S, 
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.OBJECTS O
WHERE
    C.CAT_NAME              = _ISO88591'${catalog}'
    AND S.SCHEMA_NAME       = _ISO88591'${schema}'   
    AND S.CAT_UID           = C.CAT_UID
    AND O.SCHEMA_UID        = S.SCHEMA_UID    
    AND O.OBJECT_NAME       = _ISO88591'${materialized_view_group_name}'
    AND O.OBJECT_NAME_SPACE = _ISO88591'RG'
FOR READ UNCOMMITTED ACCESS
            ]]>
         </SQL>
      </Command>

      <Command id="neoview.getIndexInfo">
         <SQL>
            <![CDATA[
SELECT
    TRIM(O.OBJECT_NAME)                                            AS INDEX_NAME,
    (
       SELECT
          TRIM(SCH.SCHEMA_NAME) || _ISO88591'.' || TRIM(OBJ.OBJECT_NAME)
       FROM
          ${METACAT}.SYSTEM_SCHEMA.CATSYS CAT,
          ${METACAT}.SYSTEM_SCHEMA.SCHEMATA SCH,        
          "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.OBJECTS OBJ
       WHERE
          OBJ.OBJECT_NAME_SPACE = _ISO88591'TA'
          AND OBJ.OBJECT_UID    = AP.TABLE_UID
          AND SCH.SCHEMA_UID    = OBJ.SCHEMA_UID
          AND SCH.CAT_UID       = CAT.CAT_UID
          AND CAT.CAT_NAME      = _ISO88591'${catalog}'  
       FOR READ UNCOMMITTED ACCESS
    )                                                              AS BASE_TABLE,
    CASE
       TRIM(AP.UNIQUES)                    
          WHEN _ISO88591'Y' THEN 'YES'
          WHEN _ISO88591'N' THEN 'NO'
          ELSE 'UNKNOWN'
    END				                                   AS UNIQUE_INDEX,   
    CASE 
       TRIM(AP.EXPLICIT)
          WHEN _ISO88591'Y' THEN 'USER'
          WHEN _ISO88591'N' THEN 'SYSTEM'
	  ELSE 'UNKNOWN'
    END                                                            AS CREATED_BY,	
    CASE
       TRIM(AP.VALID_DATA)                    
          WHEN _ISO88591'Y' THEN 'POPULATED'
          WHEN _ISO88591'N' THEN 'NOT POPULATED'
          ELSE 'UNKNOWN'
    END				                                   AS STATUS,
    CAST(CONVERTTIMESTAMP(O.CREATE_TIME) AS VARCHAR(64)) || ' GMT' AS CREATION_TIME    
FROM
    ${METACAT}.SYSTEM_SCHEMA.CATSYS C,
    ${METACAT}.SYSTEM_SCHEMA.SCHEMATA S,
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.OBJECTS O,
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.ACCESS_PATHS AP
WHERE
    C.CAT_NAME              = _ISO88591'${catalog}'
    AND S.SCHEMA_NAME       = _ISO88591'${schema}'   
    AND S.CAT_UID           = C.CAT_UID
    AND O.SCHEMA_UID        = S.SCHEMA_UID    
    AND O.OBJECT_NAME       = _ISO88591'${index_name}'
    AND O.OBJECT_NAME_SPACE = _ISO88591'IX'
    AND AP.ACCESS_PATH_UID  = O.OBJECT_UID
FOR READ UNCOMMITTED ACCESS
            ]]>
         </SQL>
      </Command>

      <Command id="neoview.getTriggerInfo">
         <SQL>
            <![CDATA[
SELECT
    '${trigger_name}'                                                  AS TRIGGER_NAME,
    TRIM(S.SCHEMA_NAME) || _ISO88591'.' || TRIM(O.OBJECT_NAME)                  AS SUBJECT_TABLE,
    CASE 
       TRIM(T.ACTIVATION_TIME)
          WHEN _ISO88591'B' THEN 'BEFORE'
          WHEN _ISO88591'A' THEN 'AFTER'
          ELSE 'UNKNOWN'
    END				                                       AS ACTIVATION_TIME,
    CASE
       TRIM(T.OPERATION)                    
          WHEN _ISO88591'I' THEN 'INSERT'
          WHEN _ISO88591'D' THEN 'DELETE'
          WHEN _ISO88591'U' THEN 'UPDATE'
          ELSE 'UNKNOWN'
    END				                                       AS OPERATION,
    CASE 
       TRIM(T.GRANULARITY)
          WHEN _ISO88591'R' THEN 'ROW'
          WHEN _ISO88591'S' THEN 'STATEMENT'
          ELSE 'UNKNOWN'
    END				                                       AS GRANULARITY,
    CASE 
       TRIM(T.ENABLED)
          WHEN _ISO88591'Y' THEN 'YES'
          WHEN _ISO88591'N' THEN 'NO'
          ELSE 'UNKNOWN'
    END				                                       AS ENABLED,
    CAST(CONVERTTIMESTAMP(T.TRIGGER_CREATED) AS VARCHAR(64)) || ' GMT' AS CREATION_TIME
FROM
    ${METACAT}.SYSTEM_SCHEMA.SCHEMATA S,
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.OBJECTS O,
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.TRIGGERS T
WHERE
    T.TRIGGER_UID           = ${trigger_uid}
    AND O.OBJECT_NAME_SPACE = _ISO88591'TA'
    AND O.OBJECT_UID        = T.SUBJECT_UID
    AND O.SCHEMA_UID        = T.SUBJECT_SCHEMA_UID
    AND S.SCHEMA_UID        = T.SUBJECT_SCHEMA_UID
    AND S.CAT_UID           = T.SUBJECT_CATALOG_UID
FOR READ UNCOMMITTED ACCESS
            ]]>
         </SQL>
      </Command>

      <Command id="neoview.getSynonymInfo">
         <SQL>
            <![CDATA[
SELECT
    '${synonym_name}'                                 AS SYNONYM_NAME,
    TRIM(S.SCHEMA_NAME) || _ISO88591'.' || TRIM(O.OBJECT_NAME) AS REFERENCED_OBJECT,
    CASE
       TRIM(O.OBJECT_TYPE)                    
          WHEN _ISO88591'BT' THEN 'TABLE'
          WHEN _ISO88591'VI' THEN 'VIEW'
          WHEN _ISO88591'MV' THEN 'MATERIALIZED VIEW'
          ELSE 'UNKNOWN'
    END 	                                      AS REFERENCED_OBJECT_TYPE,    
    (
       SELECT
          CAST(CONVERTTIMESTAMP(OBJ.CREATE_TIME) AS VARCHAR(64)) || ' GMT'
       FROM
          ${METACAT}.SYSTEM_SCHEMA.CATSYS CAT,
          ${METACAT}.SYSTEM_SCHEMA.SCHEMATA SCH,        
          "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.OBJECTS OBJ
       WHERE
          CAT.CAT_NAME              = _ISO88591'${catalog}'
	  AND SCH.SCHEMA_NAME       = _ISO88591'${schema}'   
	  AND SCH.CAT_UID           = CAT.CAT_UID
	  AND OBJ.SCHEMA_UID        = SCH.SCHEMA_UID    
	  AND OBJ.OBJECT_NAME       = _ISO88591'${synonym_name}'
          AND OBJ.OBJECT_NAME_SPACE = _ISO88591'TA'
       FOR READ UNCOMMITTED ACCESS
    )                                                 AS CREATION_TIME
FROM
    ${METACAT}.SYSTEM_SCHEMA.SCHEMATA S,
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.OBJECTS O,
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.SYNONYM_USAGE SU
WHERE
    SU.OBJECT_UID           = ${synonym_uid}
    AND SU.USAGE_TYPE       = -1
    AND O.OBJECT_NAME_SPACE = _ISO88591'TA'
    AND O.OBJECT_UID        = SU.UNDERLYING_OBJ_UID
    AND O.SCHEMA_UID        = SU.UNDERLYING_SCH_UID
    AND S.SCHEMA_UID        = SU.UNDERLYING_SCH_UID
    AND S.CAT_UID           = SU.UNDERLYING_CAT_UID
FOR READ UNCOMMITTED ACCESS
            ]]>
         </SQL>
      </Command>

      <Command id="neoview.getRowCount">
         <SQL>
            <![CDATA[
SELECT  COUNT(*) AS NUMBER_OF_ROWS
FROM  "${catalog}"."${schema}"."${objectname}"
FOR READ UNCOMMITTED ACCESS
            ]]>
         </SQL>
      </Command>

      <Command id="neoview.getRows">
         <SQL>
            <![CDATA[
SELECT  *
    FROM  "${catalog}"."${schema}"."${objectname}"
    FOR READ UNCOMMITTED ACCESS
            ]]>
         </SQL>
      </Command>

      <Command id="neoview.getPartitionInfo">
         <SQL>
            <![CDATA[
SELECT
    COUNT(*) AS NUMBER_OF_PARTITIONS, 
    CASE
       WHEN SUM((PRI_EXT + (SEC_EXT * (MAX_EXT - 1))) * 2048) > 1099511627776
          THEN 
            CAST(CAST(ROUND((SUM((PRI_EXT + (SEC_EXT * (MAX_EXT - 1))) * 2048) / 1099511627776), 2) AS NUMERIC(16,2)) AS VARCHAR(64)) || ' terabytes'
            
       WHEN SUM((PRI_EXT + (SEC_EXT * (MAX_EXT - 1))) * 2048) > 1073741824
          THEN 
            CAST(CAST(ROUND((SUM((PRI_EXT + (SEC_EXT * (MAX_EXT - 1))) * 2048) / 1073741824), 2) AS NUMERIC(16,2)) AS VARCHAR(64)) || ' gigabytes'
       
       WHEN SUM((PRI_EXT + (SEC_EXT * (MAX_EXT - 1))) * 2048) > 1048576
          THEN 
            CAST(CAST(ROUND((SUM((PRI_EXT + (SEC_EXT * (MAX_EXT - 1))) * 2048) / 1048576), 2) AS NUMERIC(16,2)) AS VARCHAR(64)) || ' megabytes'
       
       WHEN SUM((PRI_EXT + (SEC_EXT * (MAX_EXT - 1))) * 2048) > 1024
          THEN 
            CAST(CAST(ROUND((SUM((PRI_EXT + (SEC_EXT * (MAX_EXT - 1))) * 2048) / 1024), 2) AS NUMERIC(16,2)) AS VARCHAR(64)) || ' kilobytes'       
       
       ELSE CAST(CAST(ROUND((SUM((PRI_EXT + (SEC_EXT * (MAX_EXT - 1))) * 2048)), 2) AS NUMERIC(16,2)) AS VARCHAR(64)) || ' bytes' 
    END      AS TOTAL_MAXIMUM_SIZE,
    CASE
       WHEN SUM(EOF) > 1099511627776
          THEN 
            CAST(CAST(ROUND((SUM(EOF) / 1099511627776), 2) AS NUMERIC(16,2)) AS VARCHAR(64)) || ' terabytes'
            
       WHEN SUM(EOF) > 1073741824
          THEN 
            CAST(CAST(ROUND((SUM(EOF) / 1073741824), 2) AS NUMERIC(16,2)) AS VARCHAR(64)) || ' gigabytes'
       
       WHEN SUM(EOF) > 1048576
          THEN 
            CAST(CAST(ROUND((SUM(EOF) / 1048576), 2) AS NUMERIC(16,2)) AS VARCHAR(64)) || ' megabytes'
       
       WHEN SUM(EOF) > 1024
          THEN 
            CAST(CAST(ROUND((SUM(EOF) / 1024), 2) AS NUMERIC(16,2)) AS VARCHAR(64)) || ' kilobytes'       
       
       ELSE CAST(CAST(ROUND((SUM(EOF)), 2) AS NUMERIC(16,2)) AS VARCHAR(64)) || ' bytes' 
    END      AS TOTAL_CURRENT_EOF    
FROM
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.PARTITIONS
WHERE
    OBJECT_UID = ${object_uid}
FOR READ UNCOMMITTED ACCESS
            ]]>
         </SQL>
      </Command>

      <Command id="neoview.getPartitionInfoWithoutEOF">
         <SQL>
            <![CDATA[
SELECT
    COUNT(*) AS NUMBER_OF_PARTITIONS, 
    CASE
       WHEN SUM((PRI_EXT + (SEC_EXT * (MAX_EXT - 1))) * 2048) > 1099511627776
          THEN 
            CAST(CAST(ROUND((SUM((PRI_EXT + (SEC_EXT * (MAX_EXT - 1))) * 2048) / 1099511627776), 2) AS NUMERIC(16,2)) AS VARCHAR(64)) || ' terabytes'
            
       WHEN SUM((PRI_EXT + (SEC_EXT * (MAX_EXT - 1))) * 2048) > 1073741824
          THEN 
            CAST(CAST(ROUND((SUM((PRI_EXT + (SEC_EXT * (MAX_EXT - 1))) * 2048) / 1073741824), 2) AS NUMERIC(16,2)) AS VARCHAR(64)) || ' gigabytes'
       
       WHEN SUM((PRI_EXT + (SEC_EXT * (MAX_EXT - 1))) * 2048) > 1048576
          THEN 
            CAST(CAST(ROUND((SUM((PRI_EXT + (SEC_EXT * (MAX_EXT - 1))) * 2048) / 1048576), 2) AS NUMERIC(16,2)) AS VARCHAR(64)) || ' megabytes'
       
       WHEN SUM((PRI_EXT + (SEC_EXT * (MAX_EXT - 1))) * 2048) > 1024
          THEN 
            CAST(CAST(ROUND((SUM((PRI_EXT + (SEC_EXT * (MAX_EXT - 1))) * 2048) / 1024), 2) AS NUMERIC(16,2)) AS VARCHAR(64)) || ' kilobytes'       
       
       ELSE CAST(CAST(ROUND((SUM((PRI_EXT + (SEC_EXT * (MAX_EXT - 1))) * 2048)), 2) AS NUMERIC(16,2)) AS VARCHAR(64)) || ' bytes' 
    END      AS TOTAL_MAXIMUM_SIZE
FROM
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.PARTITIONS
WHERE
    OBJECT_UID = ${object_uid}
FOR READ UNCOMMITTED ACCESS
            ]]>
         </SQL>
      </Command>

      <Command id="neoview.getTableColumns">
         <SQL>
            <![CDATA[
SELECT COLUMN_NAME,OBJECT_UID,COLUMN_NUMBER,DIRECTION,COLUMN_CLASS,COLUMN_SIZE,
SQL_DATA_TYPE,CHARACTER_SET,ENCODING,COLLATION_SEQUENCE,FS_DATA_TYPE,COL_SCALE,COL_PRECISION,
UPSHIFTED,NULL_HEADER_SIZE,VARLEN_HEADER_SIZE,
DEFAULT_CLASS,LOGGABLE,DATETIME_START_FIELD,DATETIME_END_FIELD,DATETIME_LEADING_PRECISION,
DATETIME_TRAILING_PRECISION,DATETIME_QUALIFIER,DEFAULT_VALUE,HEADING_TEXT,PICTURE_TEXT,
COLUMN_VALUE_DRIFT_PER_DAY,DATE_DISPLAY_FORMAT,CASE_SENSITIVE_COMPARISON,DISPLAY_DATA_TYPE
FROM
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.COLS C
WHERE
    C.OBJECT_UID = ${table_uid}
FOR READ UNCOMMITTED ACCESS
            ]]>
         </SQL>
      </Command>

      <Command id="neoview.getViewColumns">
         <SQL>
            <![CDATA[
SELECT COLUMN_NAME,OBJECT_UID,COLUMN_NUMBER,DIRECTION,COLUMN_CLASS,COLUMN_SIZE,
SQL_DATA_TYPE,CHARACTER_SET,ENCODING,COLLATION_SEQUENCE,FS_DATA_TYPE,COL_SCALE,COL_PRECISION,
UPSHIFTED,NULL_HEADER_SIZE,VARLEN_HEADER_SIZE,
DEFAULT_CLASS,LOGGABLE,DATETIME_START_FIELD,DATETIME_END_FIELD,DATETIME_LEADING_PRECISION,
DATETIME_TRAILING_PRECISION,DATETIME_QUALIFIER,DEFAULT_VALUE,HEADING_TEXT,PICTURE_TEXT,
COLUMN_VALUE_DRIFT_PER_DAY,DATE_DISPLAY_FORMAT,CASE_SENSITIVE_COMPARISON,DISPLAY_DATA_TYPE
FROM
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.COLS C
WHERE
    C.OBJECT_UID = ${view_uid}
FOR READ UNCOMMITTED ACCESS
            ]]>
         </SQL>
      </Command>

      <Command id="neoview.getMaterializedViewColumns">
         <SQL>
            <![CDATA[
SELECT COLUMN_NAME,OBJECT_UID,COLUMN_NUMBER,DIRECTION,COLUMN_CLASS,COLUMN_SIZE,
SQL_DATA_TYPE,CHARACTER_SET,ENCODING,COLLATION_SEQUENCE,FS_DATA_TYPE,COL_SCALE,COL_PRECISION,
UPSHIFTED,NULL_HEADER_SIZE,VARLEN_HEADER_SIZE,
DEFAULT_CLASS,LOGGABLE,DATETIME_START_FIELD,DATETIME_END_FIELD,DATETIME_LEADING_PRECISION,
DATETIME_TRAILING_PRECISION,DATETIME_QUALIFIER,DEFAULT_VALUE,HEADING_TEXT,PICTURE_TEXT,
COLUMN_VALUE_DRIFT_PER_DAY,DATE_DISPLAY_FORMAT,CASE_SENSITIVE_COMPARISON,DISPLAY_DATA_TYPE
FROM
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.COLS C
WHERE
    C.OBJECT_UID = ${materialized_view_uid}
FOR READ UNCOMMITTED ACCESS
            ]]>
         </SQL>
      </Command>

      <Command id="neoview.getIndexColumns">
         <SQL>
            <![CDATA[
SELECT
    TRIM(C.COLUMN_NAME)                               AS COLUMN_NAME,
    CASE 
       TRIM(APC.ORDERING)
          WHEN _ISO88591'A' THEN 'ASCENDING'
          WHEN _ISO88591'D' THEN 'DESCENDING'
          ELSE 'UNKNOWN'
    END                                               AS SORT_ORDER,
    CASE 
       TRIM(APC.SYSTEM_ADDED_COLUMN)
          WHEN _ISO88591'Y' THEN 'SYSTEM'
          WHEN _ISO88591'N' THEN 'USER'
          ELSE 'UNKNOWN'
    END                                               AS ADDED_BY
FROM
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.ACCESS_PATHS AP,
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.ACCESS_PATH_COLS APC,
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.COLS C
WHERE
    AP.ACCESS_PATH_UID      = ${index_uid}
    AND APC.ACCESS_PATH_UID = AP.ACCESS_PATH_UID
    AND C.OBJECT_UID        = AP.TABLE_UID
    AND C.COLUMN_NUMBER     = APC.COLUMN_NUMBER
ORDER BY
    APC.POSITION_IN_ROW
FOR READ UNCOMMITTED ACCESS
            ]]>
         </SQL>
      </Command>

      <Command id="neoview.getTablePrimaryKey">
         <SQL>
            <![CDATA[
SELECT
    TRIM(C.COLUMN_NAME)              AS COLUMN_NAME,
    CASE 
       TRIM(APC.ORDERING)
          WHEN _ISO88591'A' THEN 'ASCENDING'
          WHEN _ISO88591'D' THEN 'DESCENDING'
          ELSE 'UNKNOWN'
    END                              AS SORT_ORDER,
    CASE 
       TRIM(APC.SYSTEM_ADDED_COLUMN)
          WHEN _ISO88591'Y' THEN 'SYSTEM'
          WHEN _ISO88591'N' THEN 'USER'
          ELSE 'UNKNOWN'
    END                              AS ADDED_BY    
FROM
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.COLS C,
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.KEY_COL_USAGE K,
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.TBL_CONSTRAINTS TC,
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.ACCESS_PATH_COLS APC
WHERE
    TC.TABLE_UID                 = ${table_uid}
    AND TRIM(TC.CONSTRAINT_TYPE) = _ISO88591'P'
    AND K.CONSTRAINT_UID         = TC.CONSTRAINT_UID
    AND C.COLUMN_NUMBER          = K.COLUMN_NUMBER
    AND C.OBJECT_UID             = TC.TABLE_UID
    AND APC.ACCESS_PATH_UID      = C.OBJECT_UID
    AND APC.COLUMN_NUMBER        = C.COLUMN_NUMBER
ORDER BY
    K.ORDINAL_POSITION
FOR READ UNCOMMITTED ACCESS
            ]]>
         </SQL>
      </Command>

      <Command id="neoview.getTableHashKey">
         <SQL>
            <![CDATA[
SELECT
    TRIM(C.COLUMN_NAME)              AS COLUMN_NAME,
    CASE 
       TRIM(APC.ORDERING)
          WHEN _ISO88591'A' THEN 'ASCENDING'
          WHEN _ISO88591'D' THEN 'DESCENDING'
          ELSE 'UNKNOWN'
    END                              AS SORT_ORDER,
    CASE 
       TRIM(APC.SYSTEM_ADDED_COLUMN)
          WHEN _ISO88591'Y' THEN 'SYSTEM'
          WHEN _ISO88591'N' THEN 'USER'
          ELSE 'UNKNOWN'
    END                              AS ADDED_BY    
FROM
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.COLS C,
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.ACCESS_PATH_COLS APC
WHERE
    APC.ACCESS_PATH_UID       = ${table_uid}
    AND APC.PART_KEY_SEQ_NUM != 0
    AND C.OBJECT_UID          = APC.ACCESS_PATH_UID
    AND C.COLUMN_NUMBER       = APC.COLUMN_NUMBER  
ORDER BY
    APC.PART_KEY_SEQ_NUM
FOR READ UNCOMMITTED ACCESS
            ]]>
         </SQL>
      </Command>

      <Command id="neoview.getTableIndexes">
         <SQL>
            <![CDATA[
SELECT
    TRIM(C.CAT_NAME)    AS CAT_NAME,
    TRIM(S.SCHEMA_NAME) AS SCHEMA_NAME,
    TRIM(O.OBJECT_NAME) AS INDEX_NAME,
    O.OBJECT_UID        AS INDEX_UID
FROM
    ${METACAT}.SYSTEM_SCHEMA.CATSYS C,
    ${METACAT}.SYSTEM_SCHEMA.SCHEMATA S,    
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.OBJECTS O,
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.ACCESS_PATHS AP    
WHERE   
    AP.TABLE_UID            = ${table_uid}
    AND AP.ACCESS_PATH_TYPE = _ISO88591'IX'
    AND O.OBJECT_NAME_SPACE = _ISO88591'IX'
    AND O.OBJECT_UID        = AP.ACCESS_PATH_UID
    AND S.SCHEMA_UID        = O.SCHEMA_UID
    AND S.CAT_UID           = C.CAT_UID
    AND C.CAT_NAME          = _ISO88591'${catalog}'     
ORDER BY
    INDEX_NAME
FOR READ UNCOMMITTED ACCESS
            ]]>
         </SQL>
      </Command>

      <Command id="neoview.getTableTriggers">
         <SQL>
            <![CDATA[
SELECT DISTINCT
    TRIM(C.CAT_NAME)    AS CAT_NAME,
    TRIM(S.SCHEMA_NAME) AS SCHEMA_NAME,
    TRIM(O.OBJECT_NAME) AS TRIGGER_NAME,
    O.OBJECT_UID	AS TRIGGER_UID
FROM
    ${METACAT}.SYSTEM_SCHEMA.CATSYS C,
    ${METACAT}.SYSTEM_SCHEMA.SCHEMATA S,
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.OBJECTS O,
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.TRIGGER_USED TU    
WHERE   
    TU.USED_OBJECT_UID            = ${table_uid}
    AND TRIM(TU.IS_SUBJECT_TABLE) = _ISO88591'Y'
    AND O.OBJECT_NAME_SPACE       = _ISO88591'TR'
    AND O.OBJECT_UID              = TU.TRIGGER_UID
    AND O.SCHEMA_UID              = TU.TRIGGER_SCHEMA_UID
    AND S.SCHEMA_UID              = O.SCHEMA_UID
    AND S.CAT_UID                 = C.CAT_UID
    AND C.CAT_NAME                = _ISO88591'${catalog}'
ORDER BY
    TRIGGER_NAME
FOR READ UNCOMMITTED ACCESS
            ]]>
         </SQL>
      </Command>

      <Command id="neoview.getMaterializedViewGroupMembers">
         <SQL>
            <![CDATA[
SELECT
    TRIM(S.SCHEMA_NAME) || _ISO88591'.' || TRIM(O.OBJECT_NAME) AS MATERIALIZED_VIEW
FROM
    ${METACAT}.SYSTEM_SCHEMA.CATSYS C,
    ${METACAT}.SYSTEM_SCHEMA.SCHEMATA S,
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.OBJECTS O,
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.MVGROUPS MVG
WHERE
    MVG.MVRGROUP_UID        = ${materialized_view_group_uid}
    AND O.OBJECT_NAME_SPACE = _ISO88591'TA'
    AND O.OBJECT_UID        = MVG.MV_UID
    AND O.SCHEMA_UID        = MVG.MV_SCHEMA_UID
    AND S.SCHEMA_UID        = O.SCHEMA_UID
    AND S.CAT_UID           = C.CAT_UID
    AND C.CAT_NAME          = _ISO88591'${catalog}'    
ORDER BY
    MATERIALIZED_VIEW
FOR READ UNCOMMITTED ACCESS
            ]]>
         </SQL>
      </Command>

      <Command id="neoview.getTableDDL">
         <SQL>
            <![CDATA[
showddl "${catalog}"."${schema}"."${objectname}",external,privileges
            ]]>
         </SQL>
      </Command>

      <Command id="neoview.getViewDDL">
         <SQL>
            <![CDATA[
SELECT
    REPLACE(TEXT, _ISO88591'${catalog}.', _ISO88591'') AS TEXT
FROM
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.TEXT
WHERE
    OBJECT_UID        = ${view_uid}
    AND OBJECT_SUB_ID = -1
ORDER BY
    SEQUENCE_NUM    
FOR READ UNCOMMITTED ACCESS            
            ]]>
         </SQL>
      </Command>

      <Command id="neoview.getMVDDL">
         <SQL>
            <![CDATA[
showddl "${catalog}"."${schema}"."${objectname}",external,privileges
            ]]>
         </SQL>
      </Command>

      <Command id="neoview.getTriggerDDL">
         <SQL>
            <![CDATA[
SELECT
    REPLACE(TEXT, _ISO88591'${catalog}.', _ISO88591'') AS TEXT
FROM
    "${catalog}".DEFINITION_SCHEMA_VERSION_${schema_version}.TEXT
WHERE
    OBJECT_UID        = ${trigger_uid}
    AND OBJECT_SUB_ID = -1
ORDER BY
    SEQUENCE_NUM    
FOR READ UNCOMMITTED ACCESS            
            ]]>
         </SQL>
      </Command>

   </Commands>

   <!-- =================================================================== -->
   <!-- Definition of the object actions that are used by the tree and views -->
   <!-- =================================================================== -->

   <ObjectsActionDef extends="false">

      <ActionGroup type="Schemas">
         <Action id="neoview-schema-create" label="Create Schema" icon="add" mode="execute" reload="true">
            <Input label="Catalog" style="text" editable="false">
               <Default>${catalog}</Default>
            </Input>
            <Input label="Schema Name" name="schemaName" style="text"/>
            <Command>
               <SQL>
                  <![CDATA[create schema "${catalog}"."${schemaName}"]]></SQL>
            </Command>
            <Confirm>
               <![CDATA[Do you really want to create schema <b>${catalog}.${schemaName}</b>?]]>
            </Confirm>
            <Result>
               <![CDATA[Schema <b>${catalog}.${schemaName}</b> created.]]>
            </Result>
         </Action>
      </ActionGroup>

      <ActionGroup type="Schema">
         <Action id="neoview-schema-drop" label="Drop Schema" reload="true" icon="remove">
            <Input label="Database" style="text" editable="false">
               <Default>${catalog}</Default>
            </Input>
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Cascade" name="cascade" style="check">
               <Values>cascade</Values>
            </Input>
            <Command>
               <SQL>
                  <![CDATA[drop schema "${catalog}"."${schema}" ${cascade} ]]>
               </SQL>
            </Command>
            <Confirm>
               <![CDATA[Do you really want to drop schema ${schema}?]]>
            </Confirm>
            <Result>
               <![CDATA[Schema <b>${schema}</b> dropped.]]>
            </Result>
         </Action>
      </ActionGroup>

      <ActionGroup type="Tables">
         <Action id="neoview-tables-create" label="Create Table" icon="add" reload="true"
                 class="tableCreateOrAlter"
                 classargs="create"
                 doclink="http://confluence.dbvis.com/display/UG/Creating+a+Table"/>
         <Action id="neoview-tables-reorg-multi-tables" label="Reorganize Multiple Tables">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Qualified Table Names (separated with comma)" style="separator"/>
            <Input name="tableNames" style="text-editor"/>
            <Command>
               <SQL>
                  <![CDATA[maintain tables (${tableNames}), REORG]]></SQL>
            </Command>
            <Confirm>
               <![CDATA[Do you really want to Reorganize the specified tables?<br>
               (This operation may take some time to complete)]]>
            </Confirm>
         </Action>
      </ActionGroup>

      <ActionGroup type="Table">
         <Action id="neoview-table-rename" label="Rename Table" reload="true" icon="rename">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Table" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="New Name" style="text" name="newName"/>
            <Input label="Cascade" name="cascade" style="check">
               <Values>cascade</Values>
            </Input>
            <Command>
               <SQL>
                  <![CDATA[alter table "${schema}"."${objectname}" rename to "${newName}" ${cascade}]]></SQL>
            </Command>
            <Confirm>
               <![CDATA[Do you really want to rename table <b>${schema}.${objectname}</b> to <b>${schema}.${newName}</b>?]]>
            </Confirm>
            <Result>
               <![CDATA[Table <b>${schema}.${objectname}</b> renamed to <b>${schema}.${newName}</b>.]]>
            </Result>
         </Action>

         <Action id="neoview-table-purge-data" label="Empty Table" reload="true">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Table" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="Ignore Triggers" name="ignoreTrigger" style="check">
               <Values>IGNORE_TRIGGER</Values>
            </Input>
            <Input label="No Log" name="noLog" style="check">
               <Values>NOLOG</Values>
            </Input>
            <Command>
               <SQL>
                  <![CDATA[purgedata "${schema}"."${objectname}" ${ignoreTrigger} ${noLog}]]></SQL>
            </Command>
            <Confirm>
               <![CDATA[Do you really want to delete all rows in table <b>${schema}.${objectname}</b>?<br>
               WARNING: This operation may take a long time to complete.]]>
            </Confirm>
            <Result>
               <![CDATA[All rows in table <b>${schema}.${objectname}</b> deleted.]]>
            </Result>
         </Action>

         <Action id="neoview-table-drop" label="Drop Table" reload="true" icon="remove">
            <Input label="Database" style="text" editable="false">
               <Default>${catalog}</Default>
            </Input>
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Cascade Referencing Objects" name="cascade" style="check">
               <Values>cascade</Values>
            </Input>
            <Command>
               <SQL>
                  <![CDATA[drop table "${catalog}"."${schema}"."${objectname}" ${cascade}]]>
               </SQL>
            </Command>
            <Confirm>
               <![CDATA[Do you really want to drop table <b>${schema}.${objectname}</b>?]]>
            </Confirm>
            <Result>
               <![CDATA[Table <b>${schema}.${objectname}</b> dropped.]]>
            </Result>
         </Action>

         <Action id="neoview-table-import-data" label="Import Table Data" icon="import" class="tableDataImport"
                 doclink="http://confluence.dbvis.com/display/UG/Importing+Table+Data"/>

         <Separator/>

         <Action id="neoview-table-create-index" label="Create Index" reload="true" icon="add">
            <Input label="Database" style="text" editable="false">
               <Default>${catalog}</Default>
            </Input>
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Table" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="Index Name" name="indexName" style="text"/>
            <Input label="Unique" name="unique" style="check">
               <Values>unique</Values>
            </Input>
            <Input label="No Populate (make offline)" name="noPopulate" style="check">
               <Values>no populate</Values>
            </Input>
            <Input label="Columns" style="separator"/>
            <Input name="columns" style="grid">
               <Arg name="output" value='"${columnname}"${_sortorder}'/>
               <Arg name="newline" value=", "/>
               <Input name="columnname" label="Column Name" style="list">
                  <Values column="4">
                     <Command idref="getColumnNamesFor">
                        <Input name="table_catalog" value="${catalog}"/>
                        <Input name="table_schema" value="${schema}"/>
                        <Input name="table_name" value="${objectname}"/>
                     </Command>
                  </Values>
                  <Default>${0}</Default>
               </Input>
               <Input name="sortorder" label="Sort Order" style="radio">
                  <Labels>ASC|DESC|Default</Labels>
                  <Values>ASC|DESC|</Values>
                  <Default>ASC</Default>
               </Input>
               <SetVar name="_sortorder" value='#sortorder.equals("") ? "" : " " + #sortorder'/>
            </Input>
            <SetVar name="_unique" value='#unique.equals("") ? "" : " " + #unique'/>
            <SetVar name="_columns" value='#columns.trim().equals("") ? "" : "(" + #columns + ")"'/>
            <Command>
               <SQL>
                  <![CDATA[create${_unique} index "${indexName}" on "${catalog}"."${schema}"."${objectname}" ${_columns} ${noPopulate}]]>
               </SQL>
            </Command>
            <Confirm>
               <![CDATA[Do you really want to Create Index <b>${indexName}</b>?]]>
            </Confirm>
            <Result>
               <![CDATA[Index <b>${indexName}</b> created.]]>
            </Result>
         </Action>

         <Action id="neoview-table-maintain" label="Maintain Table All Tasks">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Table" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command>
               <SQL>
                  <![CDATA[maintain table "${schema}"."${objectname}",ALL,STOP ON ERROR ]]></SQL>
            </Command>
            <Confirm>
               <![CDATA[Do you really want to maintain table <b>${schema}.${objectname}</b>?<br>
               (This operation may take some time to complete)]]>
            </Confirm>
            <Result>
               <![CDATA[Table <b>${schema}.${objectname}</b> maintained.]]>
            </Result>
         </Action>

         <Separator/>

         <Action id="neoview-table-create-trigger" label="Create Trigger" icon="add" reload="true"
                 doclink="http://confluence.dbvis.com/display/UG/Creating+a+Trigger">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Table" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="Trigger Name" name="triggerName" style="text"/>

            <Input label="Trigger Time" name="triggerTime" style="radio">
               <Values>BEFORE|AFTER</Values>
               <Default>BEFORE</Default>
            </Input>
            <Input label="Trigger Event" name="triggerEvent"
                   style="radio">
               <Values>INSERT|DELETE|UPDATE</Values>
               <Default>INSERT</Default>
            </Input>

            <Input label="For Each" name="triggerFor" style="radio">
               <Values>ROW|STATEMENT</Values>
               <Default>ROW</Default>
            </Input>
            <Input label="Referencing" style="separator"/>
            <Input label="New Row as" name="newas" style="text"/>
            <Input label="Old Row as" name="oldas" style="text"/>
            <Input label="Search Condition" name="when" style="text"/>
            <Input label="Action" style="separator"/>
            <Input name="action" style="text-editor">
               <Default>
                  <![CDATA[
insert into anotherTable (col1, col2) values(val1, val2)]]>
               </Default>
            </Input>

            <SetVar name="_newas" value='#newas.equals("") ? "" : " NEW AS " + #newas'/>
            <SetVar name="_oldas" value='#oldas.equals("") ? "" : " OLD AS " + #oldas'/>
            <SetVar name="_when" value='#when.equals("") ? "" : "WHEN (" + #when + ")"'/>

            <SetVar name="_referencing" value='#_newas.equals("") and #_oldas.equals("") ? "" : "REFERENCING" + #_oldas + #_newas'/>

            <Command>
               <SQL>
                  <![CDATA[create trigger "${schema}"."${triggerName}" ${triggerTime} ${triggerEvent} on "${schema}"."${objectname}" ${_referencing} for each ${triggerFor} ${_when} ${action}]]></SQL>
            </Command>
            <Confirm>
               <![CDATA[Do you really want to Create Trigger <b>${schema}.${triggerName}</b>?]]>
            </Confirm>
            <Result>
               <![CDATA[Trigger <b>${schema}.${triggerName}</b> created.]]>
            </Result>
         </Action>

         <Action id="neoview-table-enable-alltriggers" label="Enable All Triggers" icon="enable">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Trigger" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command>
               <SQL>
                  <![CDATA[alter trigger enable all of "${schema}"."${objectname}"]]></SQL>
            </Command>
            <Confirm>
               <![CDATA[Do you really want to enable all triggers for table <b>${schema}.${objectname}</b>?]]>
            </Confirm>
            <Result>
               <![CDATA[All triggers for table <b>${schema}.${objectname}</b> enabled.]]>
            </Result>
         </Action>

         <Action id="neoview-table-disable-alltriggers" label="Disable All Triggers" icon="disable">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Trigger" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command>
               <SQL>
                  <![CDATA[alter trigger disable all of "${schema}"."${objectname}"]]></SQL>
            </Command>
            <Confirm>
               <![CDATA[Do you really disable all triggers for table <b>${schema}.${objectname}</b>?]]>
            </Confirm>
            <Result>
               <![CDATA[All triggers for table <b>${schema}.${objectname}</b> disabled.]]>
            </Result>
         </Action>

         <Separator/>

         <Action id="neoview-table-script" label="Script Table" icon="scriptObject"
                 class="sqlBuilder"
                 classargs="script-dialog,SELECT,SELECT *,INSERT,UPDATE,DELETE,CREATE,DROP"/>

      </ActionGroup>

      <ActionGroup type="Views">
         <Action id="neoview-view-create" label="Create View" icon="add" mode="execute" reload="true">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="View Name" name="viewName" style="text"/>
            <Input label="SQL" style="separator"/>
            <Input name="sql" style="text-editor"/>
            <Command>
               <SQL>
                  <![CDATA[create view "${schema}"."${viewName}" as ${sql}]]></SQL>
            </Command>
            <Confirm>
               <![CDATA[Do you really want to create the view <b>${schema}.${viewName}</b>?]]>
            </Confirm>
            <Result>
               <![CDATA[View <b>${schema}.${viewName}</b> created.]]>
            </Result>
         </Action>
      </ActionGroup>

      <ActionGroup type="View">
         <Action id="neoview-view-rename" label="Rename View" reload="true" icon="rename">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="View" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="New Name" style="text" name="newName"/>
            <Command>
               <SQL>
                  <![CDATA[alter view "${schema}"."${objectname}" rename to "${newName}"]]></SQL>
            </Command>
            <Confirm>
               <![CDATA[Do you really want to rename view <b>${schema}.${objectname}</b> to <b>${newName}</b>?]]>
            </Confirm>
            <Result>
               <![CDATA[View <b>${schema}.${objectname}</b> renamed to <b>${newName}</b>.]]>
            </Result>
         </Action>

         <Action id="neoview-view-drop" label="Drop View" icon="remove" reload="true">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="View" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command>
               <SQL>
                  <![CDATA[drop view "${schema}"."${objectname}" ]]></SQL>
            </Command>
            <Confirm>
               <![CDATA[Do you really want to drop the view <b>${schema}.${objectname}</b>?]]>
            </Confirm>
            <Result>
               <![CDATA[View <b>${schema}.${objectname}</b> dropped.]]>
            </Result>
         </Action>

         <Separator/>

         <Action id="neoview-view-script" label="Script View" icon="scriptObject"
                 class="sqlBuilder"
                 classargs="script-dialog,SELECT,SELECT *,INSERT,UPDATE,DELETE"/>

      </ActionGroup>

      <ActionGroup type="Synonyms">
         <Action id="neoview-synonym-create" label="Create Synonym" icon="add" reload="true">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Synonym Name" name="synonymName" style="text"/>
            <Input label="Target Object Name" name="targetName" style="text"/>
            <Command>
               <SQL>
                  <![CDATA[create synonym "${schema}"."${synonymName}" for "${schema}"."${targetName}"]]></SQL>
            </Command>
            <Confirm>
               <![CDATA[Do you really want to create the synonym <b>${schema}.${synonymName}</b> for <b>${schema}.${targetName}</b>?]]>
            </Confirm>
            <Result>
               <![CDATA[Synonym <b>${schema}.${synonymName}</b> created.]]>
            </Result>
         </Action>
      </ActionGroup>

      <ActionGroup type="Synonym">
         <Action id="neoview-synonym-alter" label="Alter Synonym" reload="true" icon="rename">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Synonym" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="Alter To SQL Object Name" style="text" name="newName"/>
            <Command>
               <SQL>
                  <![CDATA[alter synonym "${schema}"."${objectname}" to "${schema}"."${newName}"]]></SQL>
            </Command>
            <Confirm>
               <![CDATA[Do you really want to alter synonym <b>"${schema}.${objectname}"</b> to <b>${newName}</b>?]]>
            </Confirm>
            <Result>
               <![CDATA[Synonym <b>${schema}.${objectname}</b> renamed to <b>${newName}</b>.]]>
            </Result>
         </Action>

         <Action id="neoview-synonym-drop" label="Drop Synonym" icon="remove" reload="true">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Synonym" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command>
               <SQL>
                  <![CDATA[drop synonym "${schema}"."${objectname}"]]></SQL>
            </Command>
            <Confirm>
               <![CDATA[Do you really want to drop synonym <b>${schema}.${objectname}</b>?]]>
            </Confirm>
            <Result>
               <![CDATA[Synonym <b>${schema}.${objectname}</b> dropped.]]>
            </Result>
         </Action>
      </ActionGroup>

      <ActionGroup type="MaterializedViews">
         <Action id="neoview-materializedviews-create" label="Create Materialized View" icon="add" reload="true">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Table Name" name="tableName" style="text"/>
            <Input label="Materialized View Name" name="mviewname" style="text"/>
            <Input label="Column List" name="columnList" style="text"/>
            <Input label="Where Clause" name="where" style="text"/>
            <Input label="Partition By" name="partitionBy" style="text"/>
            <Input label="Initialization Type" name="initializeOnRefreshType"
                   style="radio">
               <Values>ON CREATE|ON REFRESH</Values>
               <Default>ON REFRESH</Default>
            </Input>
            <Input label="Refresh Type" name="refrehOnRequestType" style="radio">
               <Values>REFRESH ON REQUEST|RECOMPUTE</Values>
               <Default>REFRESH ON REQUEST</Default>
            </Input>

            <SetVar name="_where" value='#where.trim().equals("") ? "" : " where " + #where'/>
            <SetVar name="_partitionBy" value='#partitionBy.trim().equals("") ? "" : " hash partition by (" + #partitionBy + ")"'/>

            <Command>
               <SQL>
                  <![CDATA[create materialized view "${schema}"."${mviewname}" ${refrehOnRequestType} INITIALIZE  ${initializeOnRefreshType} ${_partitionBy} AS SELECT ${columnList} FROM "${schema}"."${tableName}" ${_where} GROUP BY ${columnList}]]>
               </SQL>
            </Command>
            <Confirm>
               <![CDATA[Do you really want to create materialized view <b>${schema}.${mviewname}</b>?<br>
               WARNING: This operation may take a long time to complete.]]>
            </Confirm>
            <Result>
               <![CDATA[Materialized View <b>${schema}.${mviewname}</b> created.]]>
            </Result>
         </Action>
      </ActionGroup>

      <ActionGroup type="MaterializedView">
         <Action id="neoview-materializedview-rename" label="Rename Materialized View" reload="true" icon="rename">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Materialized View Name" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="New Name" style="text" name="newName"/>
            <Input label="Cascade" name="cascade" style="check">
               <Values>cascade</Values>
            </Input>
            <Command>
               <SQL>
                  <![CDATA[alter materialized view "${schema}"."${objectname}" rename to "${newName}" ${cascade}]]></SQL>
            </Command>
            <Confirm>
               <![CDATA[Do you really want to rename materialized view <b>${schema}.${objectname}</b> to <b>${schema}.${newName}</b>?]]>
            </Confirm>
            <Result>
               <![CDATA[Materialized view <b>${schema}.${objectname}</b> renamed to <b>${schema}.${newName}</b>.]]>
            </Result>
         </Action>

         <Action id="neoview-materializedview-drop" label="Drop Materialized View" icon="remove" reload="true">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Materialized View Name" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command>
               <SQL>
                  <![CDATA[drop materialized view "${schema}"."${objectname}"]]></SQL>
            </Command>
            <Confirm>
               <![CDATA[Do you really want to drop the materialized view <b>${schema}.${objectname}</b>?<br>
               WARNING: This operation may take a long time to complete.]]>
            </Confirm>
            <Result>
               <![CDATA[Materialized biew <b>${schema}.${objectname}</b> dropped.]]>
            </Result>
         </Action>

         <Action id="neoview-materializedview-maintain" label="Maintain Materialized View All Tasks">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Materialized View Name" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>

            <Command>
               <SQL>
                  <![CDATA[maintain MV "${schema}"."${objectname}", ALL,STOP ON ERROR ]]></SQL>
            </Command>
            <Confirm>
               <![CDATA[Do you really want to maintain materialized view <b>${schema}.${objectname}</b>?<br>
               (This operation may take some time to complete)]]>
            </Confirm>
            <Result>
               <![CDATA[Materialized view <b>${schema}.${objectname}</b> maintained.]]>
            </Result>
         </Action>

         <Action id="neoview-materializedview-create-index" label="Create Materialized View Index" reload="true" icon="add">
            <Input label="Database" style="text" editable="false">
               <Default>${catalog}</Default>
            </Input>
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Materialized View Name" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="Index Name" name="indexname" style="text"/>
            <Input label="Columns" style="separator"/>
            <Input name="columns" style="grid">
               <Arg name="output" value='"${columnname}"${_sortorder}'/>
               <Arg name="newline" value=", "/>
               <Input name="columnname" label="Column Name" style="list">
                  <Values column="4">
                     <Command idref="getColumnNamesFor">
                        <Input name="table_catalog" value="${catalog}"/>
                        <Input name="table_schema" value="${schema}"/>
                        <Input name="table_name" value="${objectname}"/>
                     </Command>
                  </Values>
                  <Default>${0}</Default>
               </Input>
               <Input name="sortorder" label="Sort Order" style="radio">
                  <Labels>ASC|DESC|Default</Labels>
                  <Values>ASC|DESC|</Values>
                  <Default>ASC</Default>
               </Input>
               <SetVar name="_sortorder" value='#sortorder.equals("") ? "" : " " + #sortorder'/>

            </Input>
            <SetVar name="_columns" value='#columns.trim().equals("") ? "" : "(" + #columns + ")"'/>

            <Command>
               <SQL>
                  <![CDATA[create index ${indexname} on "${catalog}"."${schema}"."${objectname}" ${_columns}]]>
               </SQL>
            </Command>
            <Confirm>
               <![CDATA[Do you really want to Create materialized view Index <b>${indexname}</b>?]]>
            </Confirm>
            <Result>
               <![CDATA[Materialized view index <b>${indexname}</b> created.]]>
            </Result>
         </Action>

         <Separator/>

         <Action id="neoview-materializedview-script" label="Script Materialized View" icon="scriptObject"
                 class="sqlBuilder"
                 classargs="script-dialog,SELECT,SELECT *,INSERT,UPDATE,DELETE"/>
      </ActionGroup>

      <ActionGroup type="MaterializedViewIndex">
         <Action id="neoview-materializeviewindex-drop" label="Drop Index" reload="true" icon="remove">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Materialized View Index Name" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command>
               <SQL>
                  <![CDATA[drop index "${catalog}"."${schema}"."${objectname}" ]]>
               </SQL>
            </Command>
            <Confirm>
               <![CDATA[Do you really want to drop MV Index <b>${schema}.${objectname}</b>?]]>
            </Confirm>
            <Result>
               <![CDATA[Index <b>${schema}.${objectname}</b> dropped.]]>
            </Result>
         </Action>
      </ActionGroup>

      <ActionGroup type="Index">
         <Action id="neoview-index-populate" label="Populate Index">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Index Name" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="Table Name" name="tableName" style="text">
               <Default>${theTableName}</Default>
            </Input>
            <Command>
               <SQL>
                  <![CDATA[populate index "${objectname}" on "${schema}"."${tableName}"]]></SQL>
            </Command>
            <Confirm>
               <![CDATA[Do you really want to populate index <b>${schema}.${objectname}</b>?]]>
            </Confirm>
            <Result>
               <![CDATA[Index <b>${schema}.${objectname}</b> populated.]]>
            </Result>
         </Action>

         <Action id="neoview-index-drop" label="Drop Index" reload="true" icon="remove">

            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Index Name" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command>
               <SQL>
                  <![CDATA[drop index "${catalog}"."${schema}"."${objectname}"]]>
               </SQL>
            </Command>
            <Confirm>
               <![CDATA[Do you really want to drop index <b>${schema}.${objectname}</b>?]]>
            </Confirm>
            <Result>
               <![CDATA[Index <b>${schema}.${objectname}</b> dropped.]]>
            </Result>
         </Action>
      </ActionGroup>

      <ActionGroup type="Triggers">
         <Action id="neoview-triggers-create" label="Create Trigger" icon="add" reload="true">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Trigger Name" name="triggerName" style="text"/>

            <Input label="Table" name="tableName" style="text"/>
            <Input label="Trigger Time" name="triggerTime" style="radio">
               <Values>BEFORE|AFTER</Values>
               <Default>BEFORE</Default>
            </Input>
            <Input label="Trigger Event" name="triggerEvent"
                   style="radio">
               <Values>INSERT|DELETE|UPDATE</Values>
               <Default>INSERT</Default>
            </Input>

            <Input label="For Each" name="triggerFor" style="radio">
               <Values>ROW|STATEMENT</Values>
               <Default>ROW</Default>
            </Input>
            <Input label="Referencing" style="separator"/>
            <Input label="New Row as" name="newas" style="text"/>
            <Input label="Old Row as" name="oldas" style="text"/>
            <Input label="Search Condition" name="when" style="text"/>
            <Input label="Action" style="separator"/>
            <Input name="action" style="text-editor">
               <Default>
                  <![CDATA[
insert into anotherTable (col1, col2) values(val1, val2)]]>
               </Default>
            </Input>

            <SetVar name="_newas" value='#newas.equals("") ? "" : " NEW AS " + #newas'/>
            <SetVar name="_oldas" value='#oldas.equals("") ? "" : " OLD AS " + #oldas'/>
            <SetVar name="_when" value='#when.equals("") ? "" : "WHEN (" + #when + ")"'/>

            <SetVar name="_referencing" value='#_newas.equals("") and #_oldas.equals("") ? "" : "REFERENCING" + #_oldas + #_newas'/>

            <Command>
               <SQL>
                  <![CDATA[create trigger "${schema}"."${triggerName}" ${triggerTime} ${triggerEvent} on "${schema}"."${tableName}" ${_referencing} for each ${triggerFor} ${_when} ${action}]]></SQL>
            </Command>
            <Confirm>
               <![CDATA[Do you really want to Create a Trigger <b>${schema}.${triggerName}</b>?]]>
            </Confirm>
            <Result>
               <![CDATA[Trigger <b>${schema}.${triggerName}</b> created.]]>
            </Result>
         </Action>
      </ActionGroup>

      <ActionGroup type="Trigger">
         <Action id="neoview-trigger-drop" label="Drop Trigger" icon="remove" reload="true">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Trigger Name" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command>
               <SQL>
                  <![CDATA[drop trigger "${schema}"."${objectname}"]]></SQL>
            </Command>
            <Confirm>
               <![CDATA[Do you really want to drop trigger <b>${schema}.${objectname}</b>?]]>
            </Confirm>
            <Result>
               <![CDATA[Trigger <b>${schema}.${objectname}</b> dropped.]]>
            </Result>
         </Action>

         <Action id="neoview-trigger-enable" label="Enable Trigger" icon="enable">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Trigger Name" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command>
               <SQL>
                  <![CDATA[alter trigger enable "${schema}"."${objectname}"]]></SQL>
            </Command>
            <Confirm>
               <![CDATA[Do you really want to enable trigger <b>${schema}.${objectname}</b>?]]>
            </Confirm>
            <Result>
               <![CDATA[Trigger <b>${schema}.${objectname}</b> enabled.]]>
            </Result>
         </Action>

         <Action id="neoview-trigger-diable" label="Disable Trigger" icon="disable">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Trigger" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command>
               <SQL>
                  <![CDATA[alter trigger disable "${schema}"."${objectname}"]]></SQL>
            </Command>
            <Confirm>
               <![CDATA[Do you really want to disable trigger <b>${schema}.${objectname}</b>?]]>
            </Confirm>
            <Result>
               <![CDATA[Trigger <b>${schema}.${objectname}</b> disabled.]]>
            </Result>
         </Action>
      </ActionGroup>

   </ObjectsActionDef>

   <!-- =================================================================== -->
   <!-- Definition of the database objects tree structure -->
   <!-- =================================================================== -->

   <ObjectsTreeDef extends="false">

      <GroupNode type="Databases" label="Databases">
         <DataNode type="Catalog" label="${neoview.getCatalogs.CATALOG_NAME}" isLeaf="false">
            <SetVar name="catalog" value="${neoview.getCatalogs.CATALOG_NAME}"/>
            <Command idref="neoview.getCatalogs">
               <Filter type="Catalog" name="Database">
                  <Column index="CATALOG_NAME" name="Name"/>
               </Filter>
            </Command>

            <GroupNode type="Schemas" label="Schemas">
               <DataNode type="Schema" label="${neoview.getSchemas.SCHEMA_NAME}" isLeaf="false">
                  <SetVar name="schema" value="${neoview.getSchemas.SCHEMA_NAME}"/>
                  <SetVar name="schema_version" value="${neoview.getSchemas.SCHEMA_VERSION}"/>
                  <Command idref="neoview.getSchemas">
                     <Input name="catalog" value="${catalog}"/>
                     <Filter type="Schema" name="Schema">
                        <Column index="SCHEMA_NAME" name="Name"/>
                     </Filter>
                  </Command>

                  <!-- Need to keep the objectname for the current table in
                       a new variable so that the viewers/actions will be
                       able to pick up the correct input to display -->
                  <SetVar name="theTableName" value=""/>

                  <GroupNode type="Tables" label="Tables">
                     <DataNode type="Table" label="${neoview.getTables.TABLE_NAME}" isLeaf="false">
                        <SetVar name="objectname" value="${neoview.getTables.TABLE_NAME}"/>
                        <SetVar name="object_uid" value="${neoview.getTables.TABLE_UID}"/>
                        <SetVar name="rowcount" value="true"/>
                        <SetVar name="acceptInQB" value="true"/>
                        <Command idref="neoview.getTables">
                           <Input name="catalog" value="${catalog}"/>
                           <Input name="schema" value="${schema}"/>
                           <Input name="schema_version" value="${schema_version}"/>
                           <Filter type="Table" name="Table">
                              <Column index="TABLE_NAME" name="Name"/>
                           </Filter>
                        </Command>

                        <!-- Need to keep the objectname for the current table in
                             a new variable so that the viewers/actions will be
                             able to pick up the correct input to display -->
                        <SetVar name="theTableName" value="${objectname}"/>

                        <GroupNode type="Columns" label="Columns">
                           <DataNode type="Column" label="${neoview.getTableColumns.COLUMN_NAME} [${neoview.getTableColumns.SQL_DATA_TYPE} (${neoview.getTableColumns.COLUMN_SIZE})] " isLeaf="true">
                              <SetVar name="objectname" value="${neoview.getTableColumns.COLUMN_NAME}"/>
                              <Command idref="neoview.getTableColumns">
                                 <Input name="catalog" value="${catalog}"/>
                                 <Input name="schema" value="${schema}"/>
                                 <Input name="schema_version" value="${schema_version}"/>
                                 <Input name="table_uid" value="${object_uid}"/>
                              </Command>
                           </DataNode>
                        </GroupNode>

                        <GroupNode type="Indexes" label="Indexes">
                           <DataNode type="Index" label="${neoview.getTableIndexes.INDEX_NAME}" isLeaf="true">
                              <SetVar name="objectname" value="${neoview.getTableIndexes.INDEX_NAME}"/>
                              <SetVar name="object_uid" value="${neoview.getTableIndexes.INDEX_UID}"/>
                              <Command idref="neoview.getTableIndexes">
                                 <Input name="catalog" value="${catalog}"/>
                                 <Input name="schema" value="${schema}"/>
                                 <Input name="schema_version" value="${schema_version}"/>
                                 <Input name="table_uid" value="${object_uid}"/>
                                 <Filter type="Index" name="Index">
                                    <Column index="INDEX_NAME" name="Name"/>
                                 </Filter>
                              </Command>
                           </DataNode>
                        </GroupNode>

                        <GroupNode type="Triggers" label="Triggers">
                           <DataNode type="Trigger" label="${neoview.getTableTriggers.TRIGGER_NAME}" isLeaf="true">
                              <SetVar name="objectname" value="${neoview.getTableTriggers.TRIGGER_NAME}"/>
                              <SetVar name="object_uid" value="${neoview.getTableTriggers.TRIGGER_UID}"/>
                              <Command idref="neoview.getTableTriggers">
                                 <Input name="catalog" value="${catalog}"/>
                                 <Input name="schema" value="${schema}"/>
                                 <Input name="schema_version" value="${schema_version}"/>
                                 <Input name="table_uid" value="${object_uid}"/>
                                 <Filter type="Trigger" name="Trigger">
                                    <Column index="TRIGGER_NAME" name="Name"/>
                                 </Filter>
                              </Command>
                           </DataNode>
                        </GroupNode>
                     </DataNode>
                  </GroupNode>

                  <GroupNode type="Views" label="Views">
                     <DataNode type="View" label="${neoview.getViews.VIEW_NAME}" isLeaf="true">
                        <SetVar name="objectname" value="${neoview.getViews.VIEW_NAME}"/>
                        <SetVar name="object_uid" value="${neoview.getViews.VIEW_UID}"/>
                        <SetVar name="rowcount" value="true"/>
                        <SetVar name="acceptInQB" value="true"/>
                        <Command idref="neoview.getViews">
                           <Input name="catalog" value="${catalog}"/>
                           <Input name="schema" value="${schema}"/>
                           <Input name="schema_version" value="${schema_version}"/>
                           <Filter type="View" name="View">
                              <Column index="VIEW_NAME" name="Name"/>
                           </Filter>
                        </Command>
                     </DataNode>
                  </GroupNode>

                  <GroupNode type="MaterializedViews" label="Materialized Views">
                     <DataNode type="MaterializedView" label="${neoview.getMaterializedViews.MATERIALIZED_VIEW_NAME}" isLeaf="false">
                        <SetVar name="objectname" value="${neoview.getMaterializedViews.MATERIALIZED_VIEW_NAME}"/>
                        <SetVar name="object_uid" value="${neoview.getMaterializedViews.MATERIALIZED_VIEW_UID}"/>
                        <SetVar name="rowcount" value="true"/>
                        <Command idref="neoview.getMaterializedViews">
                           <Input name="catalog" value="${catalog}"/>
                           <Input name="schema" value="${schema}"/>
                           <Input name="schema_version" value="${schema_version}"/>
                           <Filter type="MaterializedView" name="Materialized View">
                              <Column index="MATERIALIZED_VIEW_NAME" name="Name"/>
                           </Filter>
                        </Command>

                        <DataNode type="MaterializedViewIndex" label="${neoview.getTableIndexes.INDEX_NAME}" isLeaf="true">
                           <SetVar name="objectname" value="${neoview.getTableIndexes.INDEX_NAME}"/>
                           <SetVar name="object_uid" value="${neoview.getTableIndexes.INDEX_UID}"/>
                           <Command idref="neoview.getTableIndexes">
                              <Input name="catalog" value="${catalog}"/>
                              <Input name="schema" value="${schema}"/>
                              <Input name="schema_version" value="${schema_version}"/>
                              <Input name="table_uid" value="${object_uid}"/>
                              <Filter type="MaterializedViewIndex" name="MaterializedViewIndex">
                                 <Column index="INDEX_NAME" name="Name"/>
                              </Filter>
                           </Command>
                        </DataNode>
                     </DataNode>
                  </GroupNode>

                  <GroupNode type="MaterializedViewGroups" label="Materialized View Groups">
                     <DataNode type="MaterializedViewGroup" label="${neoview.getMaterializedViewGroups.MATERIALIZED_VIEW_GROUP_NAME}" isLeaf="true">
                        <SetVar name="objectname" value="${neoview.getMaterializedViewGroups.MATERIALIZED_VIEW_GROUP_NAME}"/>
                        <SetVar name="object_uid" value="${neoview.getMaterializedViewGroups.MATERIALIZED_VIEW_GROUP_UID}"/>
                        <SetVar name="rowcount" value="true"/>
                        <Command idref="neoview.getMaterializedViewGroups">
                           <Input name="catalog" value="${catalog}"/>
                           <Input name="schema" value="${schema}"/>
                           <Input name="schema_version" value="${schema_version}"/>
                           <Filter type="MaterializedViewGroup" name="Materialized View Group">
                              <Column index="MATERIALIZED_VIEW_GROUP_NAME" name="Name"/>
                           </Filter>
                        </Command>
                     </DataNode>
                  </GroupNode>

                  <GroupNode type="Indexes" label="Indexes">
                     <DataNode type="Index" label="${neoview.getIndexes.INDEX_NAME}" isLeaf="true">
                        <SetVar name="objectname" value="${neoview.getIndexes.INDEX_NAME}"/>
                        <SetVar name="object_uid" value="${neoview.getIndexes.INDEX_UID}"/>
                        <Command idref="neoview.getIndexes">
                           <Input name="catalog" value="${catalog}"/>
                           <Input name="schema" value="${schema}"/>
                           <Input name="schema_version" value="${schema_version}"/>
                           <Input name="table_uid" value="${object_uid}"/>
                           <Filter type="Index" name="Index">
                              <Column index="INDEX_NAME" name="Name"/>
                           </Filter>
                        </Command>
                     </DataNode>
                  </GroupNode>

                  <GroupNode type="Triggers" label="Triggers">
                     <DataNode type="Trigger" label="${neoview.getTriggers.TRIGGER_NAME}" isLeaf="true">
                        <SetVar name="objectname" value="${neoview.getTriggers.TRIGGER_NAME}"/>
                        <SetVar name="object_uid" value="${neoview.getTriggers.TRIGGER_UID}"/>
                        <Command idref="neoview.getTriggers">
                           <Input name="catalog" value="${catalog}"/>
                           <Input name="schema" value="${schema}"/>
                           <Input name="schema_version" value="${schema_version}"/>
                           <Input name="table_uid" value="${object_uid}"/>
                           <Filter type="Trigger" name="Trigger">
                              <Column index="TRIGGER_NAME" name="Name"/>
                           </Filter>
                        </Command>
                     </DataNode>
                  </GroupNode>

                  <GroupNode type="Synonyms" label="Synonyms">
                     <DataNode type="Synonym" label="${neoview.getSynonyms.SYNONYM_NAME}" isLeaf="true">
                        <SetVar name="objectname" value="${neoview.getSynonyms.SYNONYM_NAME}"/>
                        <SetVar name="object_uid" value="${neoview.getSynonyms.SYNONYM_UID}"/>
                        <Command idref="neoview.getSynonyms">
                           <Input name="catalog" value="${catalog}"/>
                           <Input name="schema" value="${schema}"/>
                           <Input name="schema_version" value="${schema_version}"/>
                           <Filter type="Synonym" name="Synonym">
                              <Column index="SYNONYM_NAME" name="Name"/>
                           </Filter>
                        </Command>
                     </DataNode>
                  </GroupNode>
               </DataNode>
            </GroupNode>
         </DataNode>
      </GroupNode>

   </ObjectsTreeDef>

   <!-- =================================================================== -->
   <!-- Definition of the database objects views -->
   <!-- =================================================================== -->

   <ObjectsViewDef extends="true">

      <ObjectView type="Catalog"/>

      <ObjectView type="Schemas">
         <DataView id="neoview-schemas-schemas" icon="Schemas" label="Schemas" viewer="grid">
            <Command idref="neoview.getSchemas">
               <!-- Drop unnecessary display columns -->
               <Output modelaction="drop" index="SCHEMA_VERSION"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Schema">
         <DataView id="generic-schema-tables" action="drop"/>
         <DataView id="generic-schema-references" action="drop"/>
      </ObjectView>

      <ObjectView type="Tables">
         <DataView id="generic-tables-tables" action="drop"/>

         <DataView id="neoview-tables-tables" icon="Tables" label="Tables" viewer="grid">
            <Command idref="neoview.getTables">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="schema_version" value="${schema_version}"/>
               <!-- Drop unnecessary display columns -->
               <Output modelaction="drop" index="CAT_NAME"/>
               <Output modelaction="drop" index="SCHEMA_NAME"/>
               <Output modelaction="drop" index="TABLE_UID"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Table">
         <DataView id="generic-table-info" action="drop"/>
         <DataView id="generic-table-columns" action="drop"/>
         <DataView id="generic-table-data" action="drop"/>
         <DataView id="generic-table-primarykey" action="drop"/>
         <DataView id="generic-table-grants" action="drop"/>

         <DataView id="neoview-table-info" icon="Info" label="Info" viewer="form" order-before="0">
            <Command idref="neoview.getTableInfo">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="schema_version" value="${schema_version}"/>
               <Input name="table_name" value="${objectname}"/>
            </Command>
         </DataView>
         <DataView id="neoview-table-columns" icon="Columns" label="Columns" viewer="grid" order-after="neoview-table-info">
            <Command idref="neoview.getTableColumns">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="schema_version" value="${schema_version}"/>
               <Input name="table_uid" value="${object_uid}"/>
            </Command>
         </DataView>
         <DataView id="neoview-table-ddl" icon="Source" label="DDL" viewer="text">
            <Input name="formatSQL" value="true"/>
            <Command idref="neoview.getTableDDL">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="schema_version" value="${schema_version}"/>
               <Input name="table_uid" value="${object_uid}"/>
            </Command>
         </DataView>
         <DataView id="neoview-table-primarykey" icon="PrimaryKey" label="Primary Key" viewer="grid">
            <Command idref="neoview.getTablePrimaryKey">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="schema_version" value="${schema_version}"/>
               <Input name="table_uid" value="${object_uid}"/>
            </Command>
         </DataView>
         <DataView id="neoview-table-hashkey" icon="RowId" label="Hash Key" viewer="grid">
            <Command idref="neoview.getTableHashKey">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="schema_version" value="${schema_version}"/>
               <Input name="table_uid" value="${object_uid}"/>
            </Command>
         </DataView>
         <DataView id="neoview-table-space" icon="Chunks" label="Space" viewer="form">
            <Command idref="neoview.getPartitionInfo">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="schema_version" value="${schema_version}"/>
               <Input name="object_uid" value="${object_uid}"/>
            </Command>
            <Message>
               <![CDATA[
NOTE: The TOTAL CURRENT EOF is based on EOF values recorded at the time of the most recent UPDATE STATISTICS operation.
               ]]>
            </Message>
         </DataView>
         <DataView id="neoview-table-grants" icon="TablePrivileges" label="Privileges" viewer="grid">
            <Command idref="getPrivileges">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="objectname" value="${objectname}"/>
               <!-- Drop unnecessary display columns -->
               <Output modelaction="drop" index="TABLE_CAT"/>
               <Output modelaction="drop" index="TABLE_SCHEM"/>
               <Output modelaction="drop" index="TABLE_NAME"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Views">
         <DataView id="neoview-views-views" icon="Views" label="Views" viewer="grid">
            <Command idref="neoview.getViews">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="schema_version" value="${schema_version}"/>
               <!-- Drop unnecessary display columns -->
               <Output modelaction="drop" index="CAT_NAME"/>
               <Output modelaction="drop" index="SCHEMA_NAME"/>
               <Output modelaction="drop" index="VIEW_UID"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="View">
         <DataView id="neoview-view-info" icon="Info" label="Info" viewer="form">
            <Command idref="neoview.getViewInfo">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="schema_version" value="${schema_version}"/>
               <Input name="view_name" value="${objectname}"/>
            </Command>
         </DataView>
         <DataView id="neoview-view-columns" icon="Columns" label="Columns" viewer="grid">
            <Command idref="neoview.getViewColumns">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="schema_version" value="${schema_version}"/>
               <Input name="view_uid" value="${object_uid}"/>
            </Command>
         </DataView>
         <DataView id="neoview-view-ddl" icon="Source" label="DDL" viewer="text">
            <Input name="dataColumn" value="TEXT"/>
            <Input name="formatSQL" value="true"/>
            <Command idref="neoview.getViewDDL">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="schema_version" value="${schema_version}"/>
               <Input name="view_uid" value="${object_uid}"/>
            </Command>
         </DataView>
         <DataView id="neoview-view-data" icon="Data" label="Data" viewer="table-data"/>
         <DataView id="neoview-view-rowcount" icon="RowCount" label="Row Count" viewer="table-rowcount"/>
         <DataView id="neoview-view-privileges" icon="TablePrivileges" label="Privileges" viewer="grid">
            <Command idref="getPrivileges">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="objectname" value="${objectname}"/>
               <!-- Drop unnecessary display columns -->
               <Output modelaction="drop" index="TABLE_CAT"/>
               <Output modelaction="drop" index="TABLE_SCHEM"/>
               <Output modelaction="drop" index="TABLE_NAME"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="MaterializedViews">
         <DataView id="neoview-materializedviews-materializedviews" icon="MaterializedViews" label="Materialized Views" viewer="grid">
            <Command idref="neoview.getMaterializedViews">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="schema_version" value="${schema_version}"/>
               <!-- Drop unnecessary display columns -->
               <Output modelaction="drop" index="CAT_NAME"/>
               <Output modelaction="drop" index="SCHEMA_NAME"/>
               <Output modelaction="drop" index="MATERIALIZED_VIEW_UID"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="MaterializedView">
         <DataView id="neoview-materializedview-info" icon="Info" label="Info" viewer="form">
            <Command idref="neoview.getMaterializedViewInfo">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="schema_version" value="${schema_version}"/>
               <Input name="materialized_view_name" value="${objectname}"/>
            </Command>
         </DataView>
         <DataView id="neoview-materializedview-columns" icon="Columns" label="Columns" viewer="grid">
            <Command idref="neoview.getMaterializedViewColumns">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="schema_version" value="${schema_version}"/>
               <Input name="materialized_view_uid" value="${object_uid}"/>
            </Command>
         </DataView>

         <DataView id="neoview-materializedview-ddl" icon="Source" label="DDL" viewer="text">
            <Input name="formatSQL" value="true"/>
            <Command idref="neoview.getMVDDL">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="schema_version" value="${schema_version}"/>
               <Input name="view_uid" value="${object_uid}"/>
            </Command>
         </DataView>
         <DataView id="neoview-materializedview-space" icon="Chunks" label="Space" viewer="form">
            <Command idref="neoview.getPartitionInfoWithoutEOF">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="schema_version" value="${schema_version}"/>
               <Input name="object_uid" value="${object_uid}"/>
            </Command>
         </DataView>
         <DataView id="neoview-materializedview-data" icon="Data" label="Data" viewer="table-data">
            <Input name="editDisabled" value="true"/>
         </DataView>
         <DataView id="neoview-materializedview-rowcount" icon="RowCount" label="Row Count" viewer="table-rowcount"/>
         <DataView id="neoview-materializedview-privileges" icon="TablePrivileges" label="Privileges" viewer="grid">
            <Command idref="getPrivileges">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="objectname" value="${objectname}"/>
               <!-- Drop unnecessary display columns -->
               <Output modelaction="drop" index="TABLE_CAT"/>
               <Output modelaction="drop" index="TABLE_SCHEM"/>
               <Output modelaction="drop" index="TABLE_NAME"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="MaterializedViewGroups">
         <DataView id="neoview-materializedviewgroups-materializedviewgroups" icon="MaterializedViewGroups" label="Materialized View Groups" viewer="grid">
            <Command idref="neoview.getMaterializedViewGroups">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="schema_version" value="${schema_version}"/>
               <!-- Drop unnecessary display columns -->
               <Output modelaction="drop" index="CAT_NAME"/>
               <Output modelaction="drop" index="SCHEMA_NAME"/>
               <Output modelaction="drop" index="MATERIALIZED_VIEW_GROUP_UID"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="MaterializedViewGroup">
         <DataView id="neoview-materializedviewgroup-info" icon="Info" label="Info" viewer="form">
            <Command idref="neoview.getMaterializedViewGroupInfo">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="schema_version" value="${schema_version}"/>
               <Input name="materialized_view_group_name" value="${objectname}"/>
            </Command>
         </DataView>
         <DataView id="neoview-materializedviewgroup-members" icon="MaterializedViews" label="Members" viewer="grid">
            <Command idref="neoview.getMaterializedViewGroupMembers">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="schema_version" value="${schema_version}"/>
               <Input name="materialized_view_group_uid" value="${object_uid}"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Indexes">
         <DataView id="generic-indexes-indexes" action="drop"/>

         <DataView id="neoview-indexes-indexes" icon="Indexes" label="Indexes" viewer="grid">
            <Command idref="neoview.getIndexes">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="schema_version" value="${schema_version}"/>
               <!-- Drop unnecessary display columns -->
               <Output modelaction="drop" index="CAT_NAME"/>
               <Output modelaction="drop" index="SCHEMA_NAME"/>
               <Output modelaction="drop" index="INDEX_UID"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Index">
         <DataView id="neoview-index-info" icon="Info" label="Info" viewer="form">
            <Command idref="neoview.getIndexInfo">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="schema_version" value="${schema_version}"/>
               <Input name="index_name" value="${objectname}"/>
            </Command>
         </DataView>
         <DataView id="neoview-index-columns" icon="Columns" label="Columns" viewer="grid">
            <Command idref="neoview.getIndexColumns">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="schema_version" value="${schema_version}"/>
               <Input name="index_uid" value="${object_uid}"/>
            </Command>
         </DataView>
         <DataView id="neoview-index-space" icon="Chunks" label="Space" viewer="form">
            <Command idref="neoview.getPartitionInfo">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="schema_version" value="${schema_version}"/>
               <Input name="object_uid" value="${object_uid}"/>
            </Command>
            <Message>
               <![CDATA[
NOTE: The TOTAL_CURRENT_EOF is based on EOF values recorded at the time of the most recent UPDATE STATISTICS operation.
               ]]>
            </Message>
         </DataView>
      </ObjectView>

      <ObjectView type="Triggers">
         <DataView id="neoview-triggers-triggers" icon="Triggers" label="Triggers" viewer="grid">
            <Command idref="neoview.getTriggers">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="schema_version" value="${schema_version}"/>
               <!-- Drop unnecessary display columns -->
               <Output modelaction="drop" index="CAT_NAME"/>
               <Output modelaction="drop" index="SCHEMA_NAME"/>
               <Output modelaction="drop" index="TRIGGER_UID"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Trigger">
         <DataView id="neoview-trigger-info" icon="Info" label="Info" viewer="form">
            <Command idref="neoview.getTriggerInfo">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="schema_version" value="${schema_version}"/>
               <Input name="trigger_name" value="${objectname}"/>
               <Input name="trigger_uid" value="${object_uid}"/>
            </Command>
         </DataView>
         <DataView id="neoview-trigger-ddl" icon="Source" label="DDL" viewer="text">
            <Input name="dataColumn" value="TEXT"/>
            <Input name="formatSQL" value="true"/>
            <Command idref="neoview.getTriggerDDL">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="schema_version" value="${schema_version}"/>
               <Input name="trigger_uid" value="${object_uid}"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Synonyms">
         <DataView id="neoview-synonyms-synonyms" icon="Synonyms" label="Synonyms" viewer="grid">
            <Command idref="neoview.getSynonyms">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="schema_version" value="${schema_version}"/>
               <!-- Drop unnecessary display columns -->
               <Output modelaction="drop" index="CAT_NAME"/>
               <Output modelaction="drop" index="SCHEMA_NAME"/>
               <Output modelaction="drop" index="SYNONYM_UID"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Synonym">
         <DataView id="neoview-synonym-info" icon="Info" label="Info" viewer="form">
            <Command idref="neoview.getSynonymInfo">
               <Input name="catalog" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="schema_version" value="${schema_version}"/>
               <Input name="synonym_name" value="${objectname}"/>
               <Input name="synonym_uid" value="${object_uid}"/>
            </Command>
         </DataView>
      </ObjectView>

   </ObjectsViewDef>

</DatabaseProfile>