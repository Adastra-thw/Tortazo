<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE DatabaseProfile SYSTEM "dbvis-defs.dtd">

<!--
   Created by NuoDB, Inc. exclusively for DbVisualizer.
-->

<DatabaseProfile
        desc="Profile for NuoDB"
        version="$Revision: 17676 $"
        date="$Date: 2014-06-03 19:41:57 +0200 (Tue, 03 Jun 2014) $"
        minver="9.1"
        extends="generic">


   <Commands extends="true">

      <Command id="nuodb.getSchemas">
         <SQL>
            <![CDATA[
          SELECT
            SCHEMA
          FROM
            SYSTEM.SCHEMAS
          ORDER BY
            SCHEMA
            ]]>
         </SQL>
      </Command>

      <Command id="nuodb.getIndexes">
         <SQL>
            <![CDATA[
          SELECT *
          FROM
            SYSTEM.INDEXES
          WHERE
            INDEXTYPE IN (1, 2) AND SCHEMA = '${schema}' AND TABLENAME LIKE '${objectname}'
          ORDER BY INDEXNAME
            ]]>
         </SQL>
      </Command>

      <Command id="nuodb.getProcedures">
         <SQL>
            <![CDATA[
select * from system.procedures where SCHEMA = '${schema}' order by SCHEMA, PROCEDURENAME
            ]]>
         </SQL>
      </Command>

      <Command id="nuodb.getSequences">
         <SQL>
            <![CDATA[
          SELECT *
          FROM
            SYSTEM.SEQUENCES
          WHERE
            SCHEMA = '${schema}' AND SEQUENCENAME LIKE '${objectname}'
          ORDER BY
            SCHEMA, SEQUENCENAME
            ]]>
         </SQL>
      </Command>

      <Command id="nuodb.getDomains">
         <SQL>
            <![CDATA[
          SELECT
            d.DOMAINNAME,
            d.SCHEMA,
            d.COLLATIONSEQUENCE,
            d.DATATYPE,
            t.NAME AS "TYPENAME",
            d.LENGTH,
            d.SCALE,
            d.PRECISION,
            d.FLAGS,
            d.DEFAULTVALUE,
            d.REMARKS
          FROM
            SYSTEM.DOMAINS d, SYSTEM.DATATYPES t
          WHERE
            d.SCHEMA = '${schema}' AND d.DOMAINNAME LIKE '${objectname}'
            AND d.DATATYPE = t.ID
          ORDER BY
            SCHEMA, DOMAINNAME
            ]]>
         </SQL>
      </Command>

      <Command id="nuodb.getTriggers">
         <SQL>
            <![CDATA[
SELECT
    SCHEMA,
    TABLENAME,
    TRIGGERNAME,
    TRIGGER_TYPE,
    CASE TRIGGER_TYPE
        WHEN 0 THEN 'Java'
        ELSE 'SQL'
    END AS TRIGGER_TYPE ,
    CASE TYPE_MASK
        WHEN 1 THEN 'BEFORE INSERT'
        WHEN 2 THEN 'AFTER INSERT'
        WHEN 4 THEN 'BEFORE UPDATE'
        WHEN 8 THEN 'AFTER UPDATE'
        WHEN 16 THEN 'BEFORE DELETE'
        WHEN 32 THEN 'AFTER DELETE'
        WHEN 64 THEN 'BEFORE COMMIT'
        WHEN 128 THEN 'AFTER COMMIT'
    END AS TRIGGER_EVENT,
    POSITION,
    ACTIVE,
    CLASSNAME,
    METHODNAME,
    TRIGGER_TEXT
FROM
    SYSTEM.TRIGGERS
WHERE
    SCHEMA = '${schema}' AND TABLENAME LIKE '${objectname}'
ORDER BY
    SCHEMA, TABLENAME, TRIGGERNAME
            ]]>
         </SQL>
      </Command>

      <Command id="nuodb.getUsers">
         <SQL>
            <![CDATA[
          SELECT
            USERNAME
          FROM
            SYSTEM.PASSWORDS
            ]]>
         </SQL>
      </Command>

      <Command id="nuodb.getRoles">
         <SQL>
            <![CDATA[
          SELECT
            *
          FROM
            SYSTEM.ROLES
          ORDER BY
            SCHEMA,
            ROLENAME
            ]]>
         </SQL>
      </Command>

      <Command id="nuodb.getSystemProperties">
         <SQL>
            <![CDATA[
          SELECT
            *
          FROM
            SYSTEM.PROPERTIES
            ]]>
         </SQL>
      </Command>

      <Command id="nuodb.getSessions">
         <SQL>
            <![CDATA[
          SELECT
            C.CONNID, N.GEOREGION, N.ADDRESS, N.PORT, C.USER, C.OPEN, C.EXECID, C.SQLSTRING
          FROM
            SYSTEM.CONNECTIONS C, SYSTEM.NODES N
          WHERE
            C.NODEID = N.ID;
            ]]>
         </SQL>
      </Command>

      <Command id="nuodb.getProcesses">
         <SQL>
            <![CDATA[
          SELECT
            ID, GEOREGION, ADDRESS, PORT, TYPE, STATE, CONNSTATE, MSGQSIZE
          FROM
            SYSTEM.NODES
            ]]>
         </SQL>
      </Command>

      <Command id="nuodb.getQueryStatistics">
         <SQL>
            <![CDATA[
          SELECT
            S.SCHEMA, S.USER, S.NODEID, S.TIMESTAMP, S.COUNT, S.RUNTIME, S.NROWS, S.NUMPARAM, S.PARAMS, S.SQLSTRING
          FROM
            SYSTEM.QUERYSTATS S
            ]]>
         </SQL>
      </Command>

      <Command id="nuodb.getIndexStatistics">
         <SQL>
            <![CDATA[
          SELECT
            *
          FROM
            SYSTEM.INDEXSTATISTICS
            ]]>
         </SQL>
      </Command>

   </Commands>

   <!-- =================================================================== -->
   <!-- Definition of the object actions that are used by the tree and views -->
   <!-- =================================================================== -->

   <ObjectsActionDef extends="false">

      <ActionGroup type="Schemas">
         <Action id="nuodb-schemas-create" label="Create Schema" reload="true"
                 resetcatalogs="true" icon="add">
            <Input label="Schema Name" name="newSchema" style="text" editable="true"/>
            <Command>
               <SQL>
                  <![CDATA[
                  create schema ${newSchema}
                  ]]></SQL>
            </Command>
            <Confirm>Create schema ${newSchema}?</Confirm>
            <Result>Schema ${newSchema} created!</Result>
         </Action>
      </ActionGroup>

      <ActionGroup type="Schema">
         <Action id="nuodb-schema-drop" label="Drop Schema" reload="true"
                 resetcatalogs="true" icon="remove">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Cascade Objects" name="cascade" style="check">
               <Values>cascade</Values>
            </Input>
            <Command>
               <SQL>
                  <![CDATA[
                  drop schema "${schema}" ${cascade}
                  ]]></SQL>
            </Command>
            <Confirm>
               <![CDATA[
                 Really drop schema ${schema}?<br>
                 (All data will be lost!)
               ]]>
            </Confirm>
            <Result>Schema ${schema} dropped!</Result>
         </Action>

         <Action id="nuodb-schema-export" label="Export Schema"
                 icon="export" reload="false"
                 class="schemaExport"
                 doclink="http://www.dbvis.com/doclink/export-schema"/>
      </ActionGroup>

      <ActionGroup type="Tables">
         <Action id="nuodb-tables-create-table" label="Create Table"
                 icon="add" reload="true"
                 class="tableCreateOrAlter"
                 classargs="create"
                 doclink="http://www.dbvis.com/doclink/create-table"/>

         <Action id="nuodb-new-table-import-data" label="Import Table Data" icon="import"
                 class="tableDataImport"
                 doclink="http://www.dbvis.com/doclink/import-table"/>

      </ActionGroup>

      <ActionGroup type="Table">
         <Action id="nuodb-tables-alter-table" label="Alter Table"
                 icon="edit" reload="true"
                 class="tableCreateOrAlter"
                 classargs="alter"
                 doclink="http://www.dbvis.com/doclink/alter-table"/>

         <Action id="nuodb-table-clear" label="Empty Table" reload="true">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Table" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>

            <Command>
               <SQL>
                  <![CDATA[
                  delete from "${schema}"."${objectname}"
                  ]]></SQL>
            </Command>
            <Confirm>Really remove all rows in table ${schema}.${objectname}?</Confirm>
            <Result>All rows in table ${schema}.${objectname} has been removed!</Result>
         </Action>

         <Action id="nuodb-table-drop" label="Drop Table" reload="true" icon="remove">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Table" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command>
               <SQL>
                  <![CDATA[
                  drop table "${schema}"."${objectname}"
                  ]]>
               </SQL>
            </Command>
            <Confirm>Really drop table ${schema}.${objectname}?</Confirm>
            <Result>Table ${schema}.${objectname} has been dropped!</Result>
         </Action>

         <Action id="nuodb-table-import-data" label="Import Table Data" icon="import"
                 class="tableDataImport"
                 doclink="../exportImport/exportImport.html#mozTocId708449"/>

         <Action id="nuodb-table-export" label="Export Table" icon="export"
                 class="tableExport"
                 doclink="http://www.dbvis.com/doclink/export-table"/>

         <Separator/>

         <Action id="nuodb-create-index" label="Create Index" reload="true">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Table" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="Index Name" name="indexname" style="text"/>
            <Input name="type" label="Type" style="radio">
               <Labels>Non-unique|Unique</Labels>
               <Values>|UNIQUE</Values>
               <Default>UNIQUE</Default>
            </Input>

            <Input label="Columns" style="separator"/>

            <Input name="columns" style="grid">
               <Arg name="output" value='"${columnname}"'/>
               <Arg name="newline" value=", "/>

               <Input name="columnname" label="Column Name" style="list">
                  <Values column="4">
                     <Command idref="getColumnNamesFor">
                        <Input name="table_name" value="${objectname}"/>
                     </Command>
                  </Values>
                  <Default>${0}</Default>
               </Input>
            </Input>

            <SetVar name="_type" value='#type.equals("") ? "" : " " + #type'/>
            <SetVar name="_columns" value='#columns.trim().equals("") ? "" : "(" + #columns + ")"'/>
            <SetVar name="_indexname" value='#indexname.trim().equals("") ? "" : " \"" + #indexname + "\""'/>

            <Command>
               <SQL>
                  <![CDATA[
                  create${_type} index${_indexname} on "${schema}"."${objectname}" ${_columns}
                  ]]>
               </SQL>
            </Command>
            <Confirm>
               Create index "${schema}"."${indexname}"?
            </Confirm>
            <Result>
               Index "${schema}"."${indexname}" created!
            </Result>
         </Action>

         <Action id="nuodb-tabletrigger-create" label="Create Trigger" icon="add" reload="true"
                 doclink="http://www.dbvis.com/doclink/create-trigger">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Trigger" name="triggerName" style="text"/>
            <Input label="Trigger Time" name="triggerTime" style="radio">
               <Values>BEFORE|AFTER</Values>
               <Default>AFTER</Default>
            </Input>
            <Input label="Trigger Event" name="triggerEvent" style="radio">
               <Values>DELETE|INSERT|UPDATE</Values>
               <Labels>DELETE</Labels>
            </Input>
            <Input label="Table" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="Source" style="separator"/>
            <Input name="source" style="text-editor">
               <Default><![CDATA[
--
--  Insert your own trigger code here
--
    THROW 'Not implemented yet';]]>
               </Default>
            </Input>

            <Command parsesql="false">
               <SQL><![CDATA[
create trigger "${triggerName}"
  FOR "${schema}"."${objectname}"
  ${triggerTime} ${triggerEvent}
as
${source}
end_trigger;]]>
               </SQL>
            </Command>
            <Result>
               <![CDATA[Trigger <b>${schema}.${triggerName}</b> created.]]>
            </Result>
         </Action>

         <Separator/>

         <Action id="nuodb-table-script" label="Script Table" icon="scriptObject"
                 class="sqlBuilder"
                 classargs="script-dialog,SELECT,SELECT *,INSERT,UPDATE,DELETE,CREATE,DROP"/>

      </ActionGroup>

      <ActionGroup type="Views">
         <Action id="nuodb-views-create" label="Create View" reload="true" icon="add">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="View Name" name="viewName" style="text"/>
            <Input label="Source" style="separator"/>
            <Input name="source" style="text-editor"/>
            <Command>
               <SQL>
                  <![CDATA[
                  create view ${viewName} as ${source}
                  ]]>
               </SQL>
            </Command>
            <Confirm>Really create view ${schema}.${viewName}?</Confirm>
            <Result>View ${schema}.${viewName} created!</Result>
         </Action>
      </ActionGroup>

      <ActionGroup type="View">
         <Action id="nuodb-view-drop" label="Drop View" reload="true" icon="remove">
            <Input label="View" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command>
               <SQL>
                  <![CDATA[
                  drop view "${objectname}"
                  ]]>
               </SQL>
            </Command>
            <Confirm>Really drop view ${objectname}?</Confirm>
            <Result>View ${objectname} has been dropped!</Result>
         </Action>

         <Action id="nuodb-view-export" label="Export View" icon="export"
                 class="viewExport"
                 doclink="../exportImport/exportImport.html#mozTocId584466"/>

         <Separator/>

         <Action id="nuodb-view-script" label="Script View" icon="scriptObject"
                 class="sqlBuilder"
                 classargs="script-dialog,SELECT,SELECT *,INSERT,UPDATE,DELETE,CREATE,DROP"/>

      </ActionGroup>

      <ActionGroup type="Index">
         <Action id="nuodb-index-drop" label="Drop Index" reload="true" icon="remove">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Index" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command>
               <SQL>
                  <![CDATA[
                  drop index "${schema}"."${objectname}"
                  ]]>
               </SQL>
            </Command>
            <Confirm>Really drop index ${schema}.${objectname}?</Confirm>
            <Result>Index ${schema}.${objectname} dropped!</Result>
         </Action>
      </ActionGroup>

      <ActionGroup type="Procedures">
         <Action id="nuodb-procedures-create" label="Create Procedure" reload="true" icon="add"
                 doclink="http://www.dbvis.com/doclink/create-procedure">
            <Input label="Procedure Owner" name="procedureOwner" style="list">
               <Values>
                  <Command idref="nuodb.getSchemas"/>
               </Values>
               <Default>${schema}</Default>
            </Input>
            <Input label="Procedure Name" name="procedureName" style="text"/>
            <Input label="Security" name="security" style="radio">
               <Values>INVOKER|DEFINER</Values>
               <Default>INVOKER</Default>
            </Input>

            <Input label="Parameters" style="separator"/>
            <Input name="parameters" style="grid">
               <Arg name="output" value="${direction} ${name} ${type}"/>
               <Arg name="newline" value=", "/>

               <Input name="name" label="Name" style="text"/>
               <Input name="direction" label="Direction" style="list">
                  <Values>IN|INOUT|OUT</Values>
                  <Default>IN</Default>
               </Input>
               <Input name="type" label="Type" style="text">
                  <Default>STRING</Default>
               </Input>
            </Input>
            <!--
                        <Input label="Source" style="separator"/>
                        <Input name="source" style="text-editor">
                           <Default>
                              <![CDATA[
            BEGIN
              DBMS_OUTPUT.PUT_LINE('Sample output');
            END;
                              ]]>
                           </Default>
                        </Input>
            -->
            <SetVar name="_security" value='" SECURITY " + #security'/>
            <SetVar name="_parameters" value='#parameters.trim().equals("") ? "" : "(" + #parameters + ")"'/>

            <Command parsesql="false">
               <SQL>
                  <![CDATA[
CREATE PROCEDURE "${procedureOwner}".${procedureName}
${_parameters}
${_security}
AS
  THROW 'Not implemented yet!';
END_PROCEDURE;
                  ]]>
               </SQL>
            </Command>
            <Confirm>
               Create procedure ${procedureOwner}.${procedureName}?
            </Confirm>
            <Result>
               Procedure ${procedureOwner}.${procedureName} created!
            </Result>
         </Action>
      </ActionGroup>

      <ActionGroup type="Procedure">
         <Action id="nuodb-procedure-export" label="Export Procedure" icon="export"
                 class="procedureExport"
                 doclink="http://www.dbvis.com/doclink/export-code-object"/>
      </ActionGroup>

      <ActionGroup type="Trigger">
         <Action id="nuodb-trigger-drop" label="Drop Trigger" reload="true" icon="remove">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Trigger" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command>
               <SQL>
                  <![CDATA[
                  drop trigger "${schema}"."${objectname}"
                  ]]>
               </SQL>
            </Command>
            <Confirm>Really drop trigger ${schema}.${objectname}?</Confirm>
            <Result>Trigger ${schema}.${objectname} has been dropped!</Result>
         </Action>

         <Action id="nuodb-trigger-export" label="Export Trigger" icon="export"
                 class="triggerExport"
                 doclink="http://www.dbvis.com/doclink/export-code-object"/>
      </ActionGroup>

      <ActionGroup type="Sequences">
         <Action id="nuodb-sequences-create" label="Create Sequence" reload="true" icon="add">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Sequence Name" name="sequenceName" style="text"/>
            <Input label="Start with" name="startWith" style="number">
               <Default/>
            </Input>
            <SetVar name="_startWith" value='#startWith.trim().equals("") ? "" : " start with " + #startWith'/>
            <Command>
               <SQL>
                  <![CDATA[
                  create sequence "${schema}"."${sequenceName}"${_startWith}
                  ]]>
               </SQL>
            </Command>
            <Confirm>Really create sequence ${schema}.${sequenceName}?</Confirm>
            <Result>Sequence ${schema}.${sequenceName} created!</Result>
         </Action>
      </ActionGroup>

      <ActionGroup type="Sequence">
         <Action id="nuodb-sequence-drop" label="Drop Sequence" reload="true" icon="remove">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Sequence Name" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command>
               <SQL>
                  <![CDATA[
                  drop sequence "${schema}"."${objectName}"
                  ]]>
               </SQL>
            </Command>
            <Confirm>Really drop sequence ${schema}.${objectName}?</Confirm>
            <Result>Sequence ${schema}.${objectName} dropped!</Result>
         </Action>

         <Action id="nuodb-sequence-alter" label="Alter Sequence" reload="true">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Sequence Name" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="Start with" name="startWith" style="number">
               <Default/>
            </Input>
            <SetVar name="_startWith" value='#startWith.trim().equals("") ? "" : " start with " + #startWith'/>
            <Command>
               <SQL>
                  <![CDATA[
                  alter sequence "${schema}"."${objectName}"${_startWith}
                  ]]>
               </SQL>
            </Command>
            <Confirm>Really alter sequence ${schema}.${objectName}?</Confirm>
            <Result>Sequence ${schema}.${objectName} altered!</Result>
         </Action>
      </ActionGroup>

      <ActionGroup type="Domains">
         <Action id="nuodb-domains-create" label="Create Domain" reload="true" icon="add">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Domain Name" name="domainName" style="text"/>
            <Input label="Data Type" name="dataType" style="list">
               <Values column="1">
                  <Command idref="getDataTypes"/>
               </Values>
               <Default>varchar</Default>
            </Input>
            <Input label="Data Type Arguments" name="dataTypeArgs" style="text"/>
            <Input label="Not Null" name="notNull" style="check">
               <Values>NOT NULL</Values>
            </Input>
            <Input label="Default Value" name="defaultValue">
               <Default>null</Default>
            </Input>
            <SetVar name="_notNull" value='#notNull.trim().equals("") ? " NULL" : " " + #notNull'/>
            <SetVar name="_defaultValue" value='#defaultValue.trim().equals("null") ? "" : " DEFAULT " + #defaultValue'/>
            <Command>
               <SQL>
                  <![CDATA[
                  create domain "${schema}"."${domainName}" AS ${dataType}${dataTypeArgs}${_notNull}${_defaultValue}
                  ]]>
               </SQL>
            </Command>
            <Confirm>Really create domain ${schema}.${domainName}?</Confirm>
            <Result>Domain ${schema}.${domainName} created!</Result>
         </Action>
      </ActionGroup>

      <ActionGroup type="Domain">
         <Action id="nuodb-domain-drop" label="Drop Domain" reload="true" icon="remove">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Domain Name" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command>
               <SQL>
                  <![CDATA[
                  drop domain "${schema}"."${objectName}"
                  ]]>
               </SQL>
            </Command>
            <Confirm>Really drop domain ${schema}.${objectName}?</Confirm>
            <Result>Domain ${schema}.${objectName} dropped!</Result>
         </Action>
      </ActionGroup>

      <ActionGroup type="Users">
         <Action id="nuodb-users-create" label="Create User" reload="true" icon="add">
            <Input label="User Name" name="userid" style="text"/>
            <Input label="Password" name="password" style="password"/>

            <Command>
               <SQL>
                  <![CDATA[
                  create user ${userid} password '${password}'
                  ]]>
               </SQL>
            </Command>
            <Result>User ${userid} created!</Result>
         </Action>
      </ActionGroup>

      <ActionGroup type="User">
         <Action id="nuodb-user-drop" label="Drop User" reload="true" icon="remove">
            <Input label="User Name" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command>
               <SQL>
                  <![CDATA[
                  drop user "${objectname}"
                  ]]>
               </SQL>
            </Command>
            <Confirm>Really drop user ${objectname}?</Confirm>
            <Result>User ${objectname} dropped!</Result>
         </Action>

         <Action id="nuodb-user-changepassword" label="Change Password" reload="false">
            <Input label="User Name" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="Password" name="password" style="password"/>
            <Command>
               <SQL>
                  <![CDATA[
                  alter user "${objectname}" password '${password}'
                  ]]>
               </SQL>
            </Command>
            <Confirm>Change password for user ${objectname}?</Confirm>
            <Result>Password for ${objectname} changed!</Result>
         </Action>
      </ActionGroup>

      <ActionGroup type="Roles">
         <Action id="nuodb-roles-create" label="Create Role" reload="true" icon="add">
            <Input label="Role Schema" name="schema" style="list">
               <Values column="1">
                  <Command idref="nuodb.getSchemas"/>
               </Values>
               <Default>${0}</Default>
            </Input>
            <Input label="Role Name" name="rolename" style="text"/>
            <Command>
               <SQL>
                  <![CDATA[
                  create role ${schema}.${rolename}
                  ]]>
               </SQL>
            </Command>
            <Result>Role ${schema}.${rolename} created!</Result>
         </Action>
      </ActionGroup>

      <ActionGroup type="Role">
         <Action id="nuodb-role-drop" label="Drop Role" reload="true" icon="remove">
            <Input label="Role Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Role Name" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command>
               <SQL>
                  <![CDATA[
                     drop role ${schema}.${objectname}
                  ]]>
               </SQL>
            </Command>
            <Confirm>Really drop role ${schema}.${objectname}?</Confirm>
            <Result>Role ${schema}.${objectname} dropped!</Result>
         </Action>
      </ActionGroup>

      <ActionGroup type="Session">
         <Action id="nuodb-session-kill" label="Kill Statement" reload="true" icon="remove">
            <Input label="Execid" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command>
               <SQL>
                  <![CDATA[kill statement ${objectname}]]>
               </SQL>
            </Command>
            <Confirm>
               Do you really want to kill statement ${objectname} for user ${nuodb.getSessions.USER}?
            </Confirm>
         </Action>
      </ActionGroup>

      <ActionGroup type="SystemProperties">
         <Action id="nuodb-systemproperties-modify" label="Modify System Properties" reload="false">
            <Input name="maxQueryCount" label="Max Query Count" style="number" editable="true">
               <Default>
                  <Command>
                     <SQL>
                        select value from system.properties where property = 'MAX_QUERY_COUNT'
                     </SQL>
                  </Command>
               </Default>
            </Input>
            <Input name="minQueryTime" label="Min Query Time (sec)" style="number" editable="true">
               <Default>
                  <Command>
                     <SQL>
                        select value from system.properties where property = 'MIN_QUERY_TIME'
                     </SQL>
                  </Command>
               </Default>
            </Input>
            <Command parsesql="true">
               <SQL>
                  <![CDATA[
                     SET SYSTEM PROPERTY MAX_QUERY_COUNT = ${maxQueryCount};
                     SET SYSTEM PROPERTY MIN_QUERY_TIME = ${minQueryTime};
                  ]]>
               </SQL>
            </Command>
            <Confirm>Really update system properties?</Confirm>
            <Result>System properties updated!</Result>
         </Action>
      </ActionGroup>


   </ObjectsActionDef>

   <!-- =================================================================== -->
   <!-- Definition of the database objects tree structure -->
   <!-- =================================================================== -->

   <ObjectsTreeDef extends="false">

      <GroupNode type="Schemas" label="Schemas">
         <DataNode type="Schema" label="${getSchemas.TABLE_SCHEM}" is-empty-output="stop">
            <SetVar name="schema" value="${getSchemas.TABLE_SCHEM}"/>
            <Command idref="nuodb.getSchemas">
               <Output id="getSchemas.TABLE_SCHEM" index="1"/>
               <Filter type="Schema" name="Schema">
                  <Column index="SCHEMA" name="Name"/>
               </Filter>
            </Command>

            <GroupNode type="Tables" label="Tables">
               <DataNode type="Table" label="${getTables.TABLE_NAME}" sort="getTables.TABLE_NAME">
                  <SetVar name="objectname" value="${getTables.TABLE_NAME}"/>
                  <SetVar name="rowcount" value="true"/>
                  <SetVar name="acceptInQB" value="true"/>
                  <Command idref="getTables">
                     <Input name="tableType" value="SYSTEM PSEUDO TABLE, SYSTEM TABLE, TABLE"/>
                     <Filter type="Table" name="Table">
                        <Column index="TABLE_NAME" name="Name"/>
                     </Filter>
                  </Command>

                  <!-- Need to keep the objectname for the current table in
                       a new variable so that the viewers will be able to pick up
                       the correct input to display -->
                  <SetVar name="theTableName" value="${objectname}"/>

                  <GroupNode type="Columns" label="Columns">
                     <DataNode type="Column" label="${getColumns.COLUMN_NAME}   (${getColumns.TYPE_NAME})" isLeaf="true">
                        <SetVar name="objectname" value="${getColumns.COLUMN_NAME}"/>
                        <Command idref="getColumns">
                           <Input name="objectname" value="${theTableName}"/>
                        </Command>
                     </DataNode>
                  </GroupNode>

                  <GroupNode type="Indexes" label="Indexes">
                     <DataNode type="Index" label="${getIndexes.INDEX_NAME} ${theTableName}  (${getIndexes.TYPE})"
                               isLeaf="true">
                        <SetVar name="objectname" value="${getIndexes.INDEX_NAME}"/>
                        <Command idref="nuodb.getIndexes">
                           <Input name="schema" value="${schema}"/>
                           <Input name="objectname" value="${theTableName}"/>
                           <Output id="getIndexes.INDEX_NAME" index="1"/>
                           <Output id="getIndexes.TABLE_NAME" index="2"/>
                           <Output id="getIndexes.TABLE_SCHEM" index="3"/>
                           <Output id="getIndexes.TYPE" index="4"/>
                        </Command>
                     </DataNode>
                  </GroupNode>

                  <GroupNode type="Triggers" label="Triggers">
                     <DataNode type="Trigger"
                               label="${getTriggers.TRIGGER_NAME}   (${getTriggers.TABLE_SCHEM}.${getTriggers.TABLE_NAME})"
                               isLeaf="true">
                        <SetVar name="getDDLName" value="${getTriggers.TABLE_NAME}/${getTriggers.TRIGGER_NAME}"/>
                        <Command idref="nuodb.getTriggers">
                           <Input name="schema" value="${schema}"/>
                           <Input name="objectname" value="${theTableName}"/>
                           <Output id="getTriggers.TABLE_SCHEM" index="1"/>
                           <Output id="getTriggers.TABLE_NAME" index="2"/>
                           <Output id="getTriggers.TRIGGER_NAME" index="3"/>
                        </Command>
                     </DataNode>
                  </GroupNode>

               </DataNode>
            </GroupNode>

            <GroupNode type="Views" label="Views">
               <DataNode type="View" label="${getTables.TABLE_NAME}" isLeaf="true">
                  <SetVar name="objectname" value="${getTables.TABLE_NAME}"/>
                  <SetVar name="rowcount" value="true"/>
                  <SetVar name="acceptInQB" value="true"/>
                  <Command idref="getTables">
                     <Input name="tableType" value="SYSTEM VIEW, VIEW"/>
                     <Filter type="View" name="View">
                        <Column index="TABLE_NAME" name="Name"/>
                     </Filter>
                  </Command>
                  <SetVar name="theTableName" value="${objectname}"/>
               </DataNode>
            </GroupNode>

            <SetVar name="theTableName" value="%"/>

            <GroupNode type="Indexes" label="Indexes">
               <DataNode type="Index" label="${getIndexes.INDEX_NAME}   (${getIndexes.TABLE_NAME})" isLeaf="true">
                  <SetVar name="objectname" value="${getIndexes.INDEX_NAME}"/>
                  <Command idref="nuodb.getIndexes">
                     <Input name="schema" value="${schema}"/>
                     <Input name="objectname" value="${theTableName}"/>
                     <Output id="getIndexes.INDEX_NAME" index="1"/>
                     <Output id="getIndexes.TABLE_NAME" index="2"/>
                     <Output id="getIndexes.TABLE_SCHEM" index="3"/>
                     <Output id="getIndexes.TYPE" index="4"/>
                  </Command>
               </DataNode>
            </GroupNode>

            <GroupNode type="Procedures" label="Procedures">
               <DataNode type="Procedure" label="${getProcedures.PROCEDURE_NAME}" isLeaf="true">
                  <SetVar name="objectname" value="${getProcedures.PROCEDURE_NAME}"/>
                  <Command idref="nuodb.getProcedures">
                     <Input name="schema" value="${schema}"/>
                     <Input name="objectname" value="%"/>
                     <Output id="getProcedures.PROCEDURE_NAME" index="2"/>
                     <Filter type="Procedure" name="Procedure">
                        <Column index="PROCEDURE_NAME" name="Name"/>
                     </Filter>
                  </Command>
               </DataNode>
            </GroupNode>

            <GroupNode type="Triggers" label="Triggers">
               <DataNode type="Trigger" label="${getTriggers.TRIGGER_NAME}   (${getTriggers.TABLE_SCHEM}.${getTriggers.TABLE_NAME})" isLeaf="true">
                  <SetVar name="objectname" value="${getTriggers.TRIGGER_NAME}"/>
                  <SetVar name="getDDLName" value="${getTriggers.TABLE_NAME}/${getTriggers.TRIGGER_NAME}"/>
                  <Command idref="nuodb.getTriggers">
                     <Input name="schema" value="${schema}"/>
                     <Input name="objectname" value="%"/>
                     <Output id="getTriggers.TABLE_SCHEM" index="1"/>
                     <Output id="getTriggers.TABLE_NAME" index="2"/>
                     <Output id="getTriggers.TRIGGER_NAME" index="3"/>
                     <Filter type="Trigger" name="Trigger">
                        <Column index="TRIGGERNAME" name="Name"/>
                     </Filter>
                  </Command>
               </DataNode>
            </GroupNode>

            <GroupNode type="Sequences" label="Sequences">
               <DataNode type="Sequence" label="${getSequences.SEQUENCE_NAME}" isLeaf="true">
                  <SetVar name="objectname" value="${getSequences.SEQUENCE_NAME}"/>
                  <Command idref="nuodb.getSequences">
                     <Input name="schema" value="${schema}"/>
                     <Input name="objectname" value="%"/>
                     <Output id="getSequences.SEQUENCE_SCHEMA" index="1"/>
                     <Output id="getSequences.SEQUENCE_NAME" index="2"/>
                     <Filter type="Sequence" name="Sequence">
                        <Column index="SEQUENCENAME" name="Name"/>
                     </Filter>
                  </Command>
               </DataNode>
            </GroupNode>

            <GroupNode type="Domains" label="Domains">
               <DataNode type="Domain" label="${getDomains.DOMAINNAME} (${getDomains.TYPENAME})" isLeaf="true">
                  <SetVar name="objectname" value="${getDomains.DOMAINNAME}"/>
                  <Command idref="nuodb.getDomains">
                     <Input name="schema" value="${schema}"/>
                     <Input name="objectname" value="%"/>
                     <Output id="getDomains.DOMAINNAME" index="1"/>
                     <Output id="getDomains.SCHEMA" index="2"/>
                     <Output id="getDomains.TYPENAME" index="TYPENAME"/>
                     <Filter type="Domain" name="Domain">
                        <Column index="DOMAINNAME" name="Name"/>
                     </Filter>
                  </Command>
               </DataNode>
            </GroupNode>

            <GroupNode type="Types" label="Types">
               <DataNode type="Type" label="${getDataTypes.TYPE_NAME}" isLeaf="true">
                  <Command idref="getDataTypes">
                     <Output id="getDataTypes.TYPE_NAME" index="1"/>
                  </Command>
               </DataNode>
            </GroupNode>

         </DataNode>
      </GroupNode>

      <GroupNode type="DBA" label="DBA Views">

         <GroupNode type="Users" label="Users">
            <DataNode type="User" label="${getUsers.USERNAME}" isLeaf="true">
               <SetVar name="objectname" value="${getUsers.USERNAME}"/>
               <Command idref="nuodb.getUsers">
                  <Output id="getUsers.USERNAME" index="1"/>
                  <Filter type="User" name="User">
                     <Column index="USERNAME" name="Name"/>
                  </Filter>
               </Command>
            </DataNode>
         </GroupNode>

         <GroupNode type="Roles" label="Roles">
            <DataNode type="Role" label="${getRoles.ROLENAME}" isLeaf="true">
               <SetVar name="schema" value="${getRoles.SCHEMA}"/>
               <SetVar name="objectname" value="${getRoles.ROLENAME}"/>
               <Command idref="nuodb.getRoles">
                  <Output id="getRoles.SCHEMA" index="1"/>
                  <Output id="getRoles.ROLENAME" index="2"/>
                  <Filter type="Role" name="Role">
                     <Column index="ROLENAME" name="Name"/>
                  </Filter>
               </Command>
            </DataNode>
         </GroupNode>

         <GroupNode type="Processes" label="Processes" isLeaf="false">
            <DataNode type="Process"
                      label="${getProcesses.ADDRESS}:${getProcesses.PORT} (${getProcesses.TYPE}, ${getProcesses.STATE})"
                      isLeaf="true">
               <SetVar name="objectname" value="${getProcesses.ID}"/>
               <Command idref="nuodb.getProcesses">
                  <Output id="getProcesses.ID" index="1"/>
                  <Output id="getProcesses.ADDRESS" index="2"/>
                  <Output id="getProcesses.PORT" index="3"/>
                  <Output id="getProcesses.TYPE" index="4"/>
                  <Output id="getProcesses.STATE" index="5"/>
                  <Output id="getProcesses.CONNSTATE" index="6"/>
               </Command>
            </DataNode>
         </GroupNode>

         <GroupNode type="Sessions" label="Sessions" isLeaf="false">
            <DataNode type="Session" label="${nuodb.getSessions.USER}  (${nuodb.getSessions.EXECID})" isLeaf="true">
               <SetVar name="objectname" value="${nuodb.getSessions.EXECID}"/>
               <Command idref="nuodb.getSessions"/>
            </DataNode>
         </GroupNode>

         <GroupNode type="SystemProperties" label="System Properties" isLeaf="true"/>

         <GroupNode type="Statistics" label="Statistics" isLeaf="true"/>

      </GroupNode>

   </ObjectsTreeDef>

   <!-- =================================================================== -->
   <!-- Definition of the database objects views -->
   <!-- =================================================================== -->

   <ObjectsViewDef extends="true">

      <ObjectView type="Schemas">
         <DataView id="nuodb-schemas-schemas" icon="Schemas" label="Schemas" viewer="grid">
            <Command idref="nuodb.getSchemas">
               <Output modelaction="rename" index="TABLE_SCHEM" name="Schema"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Schema">
         <DataView id="generic-schema-tables" icon="Tables" action="drop"/>
         <DataView id="generic-schema-references" icon="References" action="drop"/>
      </ObjectView>

      <ObjectView type="Tables">
         <DataView id="generic-tables-tables" action="drop"/>

         <DataView id="nuodb-tables-tables" icon="Tables" label="Tables" viewer="grid">
            <Input name="menuItem" value="Open in New Tab...">
               <Input name="action" value="open-object-in-new-tab-command ${schema||TABLE_SCHEM}${object||TABLE_NAME}"/>
            </Input>
            <Input name="menuItem" value="Open in Floating Tab...">
               <Input name="action"
                      value="open-object-in-floating-tab-command ${schema||TABLE_SCHEM}${object||TABLE_NAME}"/>
            </Input>
            <Input name="menuItem" value="Script: SELECT ALL">
               <Input name="command" value="select * from ${schema||TABLE_SCHEM}${object||TABLE_NAME}"/>
            </Input>
            <Input name="menuItem" value="Script: DROP TABLE">
               <Input name="command" value="drop table ${schema||TABLE_SCHEM}${object||TABLE_NAME}"/>
            </Input>

            <Command idref="getTables">
               <Input name="tableType" value="SYSTEM PSEUDO TABLE, SYSTEM TABLE, TABLE"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Table">
         <DataView id="generic-table-grants" action="drop"/>
         <DataView id="nuodb-table-source" icon="Source" label="DDL" viewer="ddl">
            <Input name="formatSQL" value="true"/>
         </DataView>
         <DataView id="nuodb-table-index" icon="Index" label="Indexes" viewer="grid">
            <Command idref="nuodb.getIndexes">
               <Input name="schema" value="${schema}"/>
               <Input name="objectname" value="${objectname}"/>
            </Command>
         </DataView>
         <DataView id="nuodb-table-trigger" icon="Trigger" label="Triggers" viewer="form">
            <Command idref="nuodb.getTriggers">
               <Input name="database" value="${catalog}"/>
               <Input name="schema" value="${schema}"/>
               <Input name="objectname" value="${theTableName}"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Triggers">
         <DataView id="nuodb-triggers-triggers" icon="Triggers" label="Triggers" viewer="grid">
            <Command idref="nuodb.getTriggers">
               <Input name="schema" value="${schema}"/>
               <Input name="objectname" value="${theTableName}"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Trigger">
         <DataView id="nuodb-trigger-sourceeditor" icon="SourceEditor" label="Trigger Editor"
                   viewer="ProcedureViewer"
                   classargs="TRIGGER"
                   doclink="http://www.dbvis.com/doclink/edit-code-object"/>
         <DataView id="nuodb-trigger-info" icon="Info" label="Info" viewer="node-form"/>
      </ObjectView>

      <ObjectView type="Views">
         <DataView id="nuodb-views-views" icon="Views" label="Views" viewer="grid">
            <Input name="menuItem" value="Open in New Tab...">
               <Input name="action" value="open-object-in-new-tab-command ${schema||TABLE_SCHEM}${object||TABLE_NAME}"/>
            </Input>
            <Input name="menuItem" value="Open in Floating Tab...">
               <Input name="action"
                      value="open-object-in-floating-tab-command ${schema||TABLE_SCHEM}${object||TABLE_NAME}"/>
            </Input>
            <Input name="menuItem" value="Script: SELECT ALL">
               <Input name="command" value="select * from ${schema||TABLE_SCHEM}${object||TABLE_NAME}"/>
            </Input>
            <Input name="menuItem" value="Script: DROP VIEW">
               <Input name="command" value="drop view ${schema||TABLE_SCHEM}${object||TABLE_NAME}"/>
            </Input>

            <Command idref="getTables">
               <Input name="tableType" value="SYSTEM VIEW, VIEW"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="View">
         <DataView id="nuodb-view-info" icon="Info" label="Info" viewer="node-form"/>
         <DataView id="nuodb-view-data" icon="Data" label="Data" viewer="table-data"/>
         <DataView id="nuodb-view-rowcount" icon="RowCount" label="Row Count" viewer="table-rowcount"/>
         <DataView id="nuodb-view-source" icon="Source" label="DDL" viewer="ddl">
            <Input name="objectType" value="View"/>
            <Input name="formatSQL" value="true"/>
         </DataView>
      </ObjectView>

      <ObjectView type="Procedure">
         <DataView id="nuodb-procedure-sourceeditor" icon="SourceEditor" label="Procedure Editor"
                   viewer="ProcedureViewer"
                   classargs="PROCEDURE"
                   doclink="http://www.dbvis.com/doclink/edit-code-object"/>
      </ObjectView>

      <ObjectView type="Processes">
         <DataView id="nuodb-processes-processes" icon="Processes" label="Processes" viewer="grid">
            <Command idref="nuodb.getProcesses"/>
         </DataView>
      </ObjectView>

      <ObjectView type="Process">
         <DataView id="nuodb-process-process" icon="Process" label="Process" viewer="node-form"/>
      </ObjectView>

      <ObjectView type="Sequences">
         <DataView id="nuodb-sequences-sequences" icon="Sequences" label="Sequences" viewer="grid">
            <Command idref="nuodb.getSequences">
               <Input name="schema" value="${schema}"/>
               <Input name="objectname" value="%"/>
               <Output id="getSequences.SEQUENCE_SCHEMA" index="1"/>
               <Output id="getSequences.SEQUENCE_NAME" index="2"/>
            </Command>
            <Input name="menuItem" value="Script: DROP SEQUENCE">
               <Input name="command" value="drop sequence ${schema||SCHEMA}${object||SEQUENCENAME}"/>
            </Input>
         </DataView>
      </ObjectView>

      <ObjectView type="Sequence">
         <DataView id="nuodb-sequence-info" icon="Info" label="Info" viewer="node-form">
            <Command idref="nuodb.getSequences">
               <Input name="schema" value="${schema}"/>
               <Input name="objectname" value="${objectname}"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Domains">
         <DataView id="nuodb-domains-domains" icon="Domains" label="Domains" viewer="grid">
            <Command idref="nuodb.getDomains">
               <Input name="schema" value="${schema}"/>
               <Input name="objectname" value="%"/>
               <Output id="getDomains.SCHEMA" index="1"/>
               <Output id="getDomains.DOMAINNAME" index="2"/>
            </Command>
            <Input name="menuItem" value="Script: DROP DOMAIN">
               <Input name="command" value="drop domain ${schema||SCHEMA}${object||DOMAINNAME}"/>
            </Input>
         </DataView>
      </ObjectView>

      <ObjectView type="Domain">
         <DataView id="nuodb-domain-info" icon="Info" label="Info" viewer="node-form">
            <Command idref="nuodb.getDomains">
               <Input name="schema" value="${schema}"/>
               <Input name="objectname" value="${objectname}"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Indexes">
         <DataView id="generic-indexes-indexes" action="drop"/>
         <DataView id="nuodb-indexes-indexes" icon="Indexes" label="Indexes" viewer="grid">
            <Command idref="nuodb.getIndexes">
               <Input name="schema" value="${schema}"/>
               <Input name="objectname" value="${theTableName}"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Index">
         <DataView id="generic-index-index" action="drop"/>
         <DataView id="nuodb-index-index" icon="Index" label="Index" viewer="node-form"/>
         <DataView id="nuodb-index-source" icon="Source" label="DDL" viewer="ddl">
            <Input name="objectType" value="Index"/>
            <Input name="formatSQL" value="true"/>
         </DataView>
      </ObjectView>

      <ObjectView type="Users">
         <DataView id="nuodb-users-users" icon="Users" label="Users" viewer="grid">
            <Command idref="nuodb.getUsers"/>
         </DataView>
      </ObjectView>

      <ObjectView type="User">
         <DataView id="nuodb-user-info" icon="Info" label="Info" viewer="node-form"/>
      </ObjectView>

      <ObjectView type="Roles">
         <DataView id="nuodb-roles-roles" icon="Roles" label="Roles" viewer="grid">
            <Command idref="nuodb.getRoles"/>
         </DataView>
      </ObjectView>

      <ObjectView type="Sessions">
         <DataView id="nuodb-sessions-sessions" icon="Sessions" label="Sessions" viewer="grid">
            <Command idref="nuodb.getSessions"/>
         </DataView>
      </ObjectView>

      <ObjectView type="Session">
         <DataView id="nuodb-session-session" icon="Session" label="Session" viewer="node-form"/>
      </ObjectView>

      <ObjectView type="SystemProperties">
         <DataView id="nuodb-systemproperties-systemproperties" icon="SystemProperties" label="System Properties" viewer="grid">
            <Command idref="nuodb.getSystemProperties"/>
         </DataView>
      </ObjectView>

      <ObjectView type="Types">
         <DataView id="nuodb-types-types" icon="Types" label="Types" viewer="grid">
            <Command idref="getDataTypes"/>
         </DataView>
      </ObjectView>

      <ObjectView type="Type">
         <DataView id="nuodb-type-info" icon="Info" label="Info" viewer="node-form"/>
      </ObjectView>

      <ObjectView type="Statistics">
         <DataView id="nuodb-statistics-querystatistics" icon="QueryStatistics" label="Query" viewer="grid">
            <Command idref="nuodb.getQueryStatistics"/>
            <Message>
               <![CDATA[
<html>
Statistics of executed queries exceeding thresholds defined in System Properties.
</html>
               ]]>
            </Message>
         </DataView>
         <DataView id="nuodb-statistics-indexstatistics" icon="IndexStatistics" label="Index" viewer="grid">
            <Command idref="nuodb.getIndexStatistics"/>
            <Message>
               <![CDATA[
<html>
Statistics of indexes.
</html>
               ]]>
            </Message>
         </DataView>
      </ObjectView>

   </ObjectsViewDef>
</DatabaseProfile>