# coding=utf-8
'''
Created on 22/01/2014

#Author: Adastra.
#twitter: @jdaanial

Tortazo.py

Tortazo is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation version 2 of the License.

Tortazo is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Tortazo; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
'''

import os.path
import sys
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), ".")))


from core.tortazo.Discovery import Discovery
from core.tortazo.BotNet import BotNet
from core.tortazo.Reporting import Reporting
from core.tortazo.databaseManagement.TortazoServerDB import  TortazoSQLiteDB, TortazoPostgreSQL, TortazoMySQL
from core.tortazo.OnionRepository import  RepositoryGenerator
from core.tortazo.utils.ServiceConnector import ServiceConnector
from config import config as tortazoConfiguration
from stem.util import term
import stem.process
import logging as log
from plumbum import cli
from time import gmtime, strftime
from distutils.util import strtobool
import string
import random
from pyfiglet import Figlet
import time
from core.tortazo.exceptions.PluginException import PluginException
from core.tortazo.TortazoExecutor import TortazoSwitch, TortazoExecutor

#
#  ████████╗ ██████╗ ██████╗ ████████╗ █████╗ ███████╗ ██████╗ 
#  ╚══██╔══╝██╔═══██╗██╔══██╗╚══██╔══╝██╔══██╗╚══███╔╝██╔═══██╗
#     ██║   ██║   ██║██████╔╝   ██║   ███████║  ███╔╝ ██║   ██║
#     ██║   ██║   ██║██╔══██╗   ██║   ██╔══██║ ███╔╝  ██║   ██║
#     ██║   ╚██████╔╝██║  ██║   ██║   ██║  ██║███████╗╚██████╔╝
#     ╚═╝    ╚═════╝ ╚═╝  ╚═╝   ╚═╝   ╚═╝  ╚═╝╚══════╝ ╚═════╝ 
#                                                              

#
#	Attack exit nodes of the TOR Network.
#	Author: Adastra.
#	http://thehackerway.com
#
#   TODO IN V1.1:
#   - Report issues to the administrator of the exitnode.
#   - Upload and execute files to the compromised machines using SFTP and FTP.
#   - Check subterfuge: http://code.google.com/p/subterfuge/
#   - Check what do bannergrab:  http://sourceforge.net/projects/bannergrab/
#   - GeoLocation, for example using: http://www.melissadata.com/lookups/iplocation.asp?ipaddress=46.17.138.212
#   - Use PyInstaller to generate an executable for Linux and Windows.
#   - Plugin Arguments. Socks Settings, Start TOR Instance, etc.
#   - Develop unit tests using Python unittest.
#   - Plugin for Metasploit Framework.
#   - Plugin for Nikto.
#   - Plugin for NeXpose.


#    TODO FIXES:
#    - Report generated by Jinja2, align the column of ports in Nmap report.
#    - More tests about the W3AF and Nessus plugins.


class Cli(cli.Application):
    '''
    Command-Line options received.
    '''
    PROGNAME = "TORTAZO"
    AUTHOR = "Adastra"
    VERSION = "1.2"
    DESCRIPTION = "Tortazo is used to audit and attack hidden services and relays in TOR"

    verbose = cli.Flag(["-v", '--verbose'], help="Verbose Mode.")
    useMirror = cli.Flag(["-d", '--use-mirrors'], help="Use the mirror directories of TOR. This will help to not overwhelm the official directories")
    useShodan = cli.Flag(["-s", '--use-shodan'], help="Use ShodanHQ Service. (Specify -k/--shodan-key to set up the file where's stored your shodan key.)")
    useCircuitExitNodes = cli.Flag(["-c", "--use-circuit-nodes"], help="Use the exit nodes selected for a local instance of TOR.")
    openShell = cli.Flag(["-o", "--open-shell"], excludes=["--mode"], requires=["--zombie-mode"],  help="Open a shell on the specified host.")
    useDatabase = cli.Flag(["-D", '--use-database'], help="Tortazo will store the last results from the scanning process in a database. If you use this flag, Tortazo will omit the scan and just will try use the data stored from the last execution.")
    cleanDatabase = cli.Flag(["-C", '--clean-database'], help="Tortazo will delete all records stored in database when finished executing. This option will delete every record stored, included the data from previous scans.")
    listPlugins = cli.Flag(["-L", '--list-plugins'], help="List of plugins loaded.")
    useLocalTorInstance = cli.Flag(["-U", '--use-localinstance'], help="Use a local TOR instance started with the option -T/--tor-localinstance (Socks Proxy included) to execute requests from the plugins loaded. By default, if you don't start a TOR local instance and don't specify this option, the settings defined in 'config.py' will be used to perform requests to hidden services.")
    generateSimpleReport = cli.Flag(["-g", '--generate-simplereport'], help="Generate a report for each exit relay analized with Nmap and Shodan (if you use the switches for shodan). The reports will be generated in your home directory.")



    exitNodesToAttack = 10 #Number of default exit-nodes to filter from the Server Descriptor file.
    shodanKey = None #ShodanKey file.
    scanPorts = "21,22,23,53,69,80,88,110,139,143,161,162,389,443,445,1079,1080,1433,3306,5432,8080,9050,9051,5800" #Default ports used to scan with nmap.
    scanArguments = None #Scan Arguments passed to nmap.
    exitNodeFingerprint = None #Fingerprint of the exit-node to attack.
    excludeFingerprints = None #Fingerprints to exclude from the scan.
    controllerPort = '9151'
    zombieMode = None
    mode = None
    runCommand = None
    pluginManagement = None
    pluginArguments =  None
    torLocalInstance = None
    scanIdentifier = None
    activateOnionRepositoryMode = None
    workerThreads = 10
    onionRepositoryMode = ""
    validchars ='234567' + string.lowercase

    socksHost = None
    socksPort = None

    @cli.switch(["-n", "--servers-to-attack"], int, help="Number of TOR exit-nodes to attack. If this switch is used with --use-database, will recover information stored from the last 'n' scans. Default = 10")
    def servers_to_attack(self, exitNodesToAttack):
        '''
        Number of "exit-nodes" to attack received from command-line
        '''
        self.exitNodesToAttack = exitNodesToAttack

    @cli.switch(["-m", "--mode"], cli.Set("windows", "linux", "darwin", "freebsd", "openbsd", "bitrig","netbsd", case_sensitive=False),  excludes=["--zombie-mode"] , help="Filter the platform of exit-nodes to attack.")
    def server_mode(self, mode):
        '''
        Server Mode: Search for Windows or Linux machines.
        '''
        self.mode = mode

    @cli.switch(["-k", "--shodan-key"], str, help="Development Key to use Shodan API.", requires=["--use-shodan"])
    def shodan_key(self, shodanKey):
        '''
        This option is used to specify the file where the shodan development key is stored
        '''
        self.shodanKey = shodanKey

    @cli.switch(["-l", "--list-ports"], str, help="Comma-separated List of ports to scan with Nmap. Don't use spaces")
    def list_ports(self, scanPorts):
        '''
        List of ports used to perform the nmap scan.
        '''
        self.scanPorts = scanPorts

    @cli.switch(["-X", "--exclude-fingerprints"], str, help="Comma-separated List of fingerprints to exclude from the Tortazo scan. Don't use spaces")
    def exclude_fingerprints(self, excludeFingerprints):
        '''
        List of fingerprints used to exclude.
        '''
        self.excludeFingerprints = excludeFingerprints        

    @cli.switch(["-a", "--scan-arguments"], str, help='Arguments to Nmap. Use "" to specify the arguments. For example: "-sSV -A -Pn"')
    def scan_arguments(self, scanArguments):
        '''
        Arguments used to perform the nmap scan.
        '''
        self.scanArguments = scanArguments

    @cli.switch(["-e", "--exit-node-fingerprint"], str, help="ExitNode's Fingerprint to attack.")
    def exitNode_Fingerprint(self, exitNodeFingerprint):
        '''
        If we want to perform a single attack against an known "exit-node", We can specify the fingerprint of the exit-node to perform the attack.
        '''
        self.exitNodeFingerprint = exitNodeFingerprint

    @cli.switch(["-i", "--controller-port"], str, help="Controller's port of the local instance of TOR. (Default=9151)", requires=["--use-circuit-nodes"])
    def controller_port(self, controllerPort):
        '''
        Controller's Port. Default=9151
        '''
        self.controllerPort = controllerPort

    @cli.switch(["-z", "--zombie-mode"], str, help="This option reads the tortazo_botnet.bot file generated from previous successful attacks. With this option you can select the Nicknames that will be excluded. (Nicknames included in the tortazo_botnet.bot). For instance, '-z Nickname1,Nickname2' or '-z all' to include all nicknames.")
    def zombie_mode(self, zombieMode):
        '''
        Zombie mode to execute commands across the compromised hosts.
        '''
        if zombieMode == None:
            self.zombieMode = ""
        self.zombieMode = zombieMode

    @cli.switch(["-r", "--run-command"], str, excludes=["--mode"], requires=["--zombie-mode"],  help='Execute a command across the hosts of the botnet. Requieres the -z/--zombie-mode. example: --run-command "uname -a; uptime" ')
    def run_command(self, runCommand):
        '''
        Command to execute across the compromised hosts.
        '''
        self.runCommand = runCommand

    @cli.switch(["-P", "--use-plugin"], str, help='Execute a plugin. To see the available plugins, execute Tortazo with switch -L / --list-plugins')
    def plugin_management(self, pluginManagement):
        '''
        Plugin Management.
        '''
        self.pluginManagement = pluginManagement

    @cli.switch(["-A", "--plugin-arguments"], str, requires=["--use-plugin"],  help='Args to execute the specified plugin with the switch -P / --use-plugin. List of key/value pairs separated by colon. Example= nessusHost=127.0.0.1,nessusPort=8843,nessusUser=adastra,nessusPassword=adastra')
    def plugin_arguments(self, pluginArguments):
        '''
        Plugin Arguments.
        '''
        self.pluginArguments = pluginArguments



    @cli.switch(["-T", "--tor-localinstance"], str, help='Start a new local TOR instance with the "torrc" file specified. DO NOT RUN TORTAZO WITH THIS OPTION AS ROOT!')
    def tor_localinstance(self, torLocalInstance):
        '''
        TOR Local Instance.
        '''
        self.torLocalInstance = torLocalInstance

    @cli.switch(["-S", "--scan-identifier"], int, requires=["--use-database"],  help="scan identifier in the Scan table. Tortazo will use the relays related with the scan identifier specified with this option.")
    def scan_identifier(self, scanIdentifier):
        '''
        Scan Identifier. Tortazo will use the relays associated with this scan. (Relation between the Scan and TorNodeData tables.)
        '''
        self.scanIdentifier = scanIdentifier

    @cli.switch(["-O", "--onionpartial-address"], str, help="Partial address of a hidden service. Used in Onion repository mode.")
    def onionRepository_mode(self, onionRepositoryMode):
        '''
        Generator Threads. Number of threads used by the generator of onion addresses.
        '''
        self.onionRepositoryMode = onionRepositoryMode

    @cli.switch(["-R", "--onion-repository"], cli.Set("ssh", "ftp", "http", "onionup", case_sensitive=False), help="Activate the Onion Repository mode and try to find hidden services in the TOR deep web.")
    def activateOnionRepository_Mode(self, activateOnionRepositoryMode):
        '''
        Onion repository mode.
        '''
        self.activateOnionRepositoryMode = activateOnionRepositoryMode

    @cli.switch(["-W", "--workers-repository"], int, requires=["--onion-repository"], help="Number of threads used to process the ONION addresses generated.")
    def workers_repository(self, workers_repository):
        '''
        Worker Threads for processing the ONION addresses generated.
        '''
        self.workerThreads = workers_repository




    @cli.switch(["-V", "--validchars-repository"], str, help="Valid characters to use in the generation process of onion addresses. Default: All characters between a-z and digits between 2-7")
    def validchars_repository(self, validchars_repository):
        '''
        Valid characters to use in the generation process of onion addresses.
        '''
        self.validchars = validchars_repository


    def main(self):
        '''
        Initialization of logger system and banner ascii.
        http://www.figlet.org/examples.html
        
        fonts = ['slant','doom','avatar', 'barbwire', 'big', 'bigchief', 'binary', 'calgphy2', 'chunky', 'colossal', 'computer','cosmic','cosmike','cyberlarge','digital','doh','dotmatrix',
                 'drpepper', 'eftitalic','eftiwater','epic','gothic','isometric1','invita', 'isometric2','isometric3', 'isometric4','larry3d', 'lean','linux','madrid','mini','ntgreek', 'ogre',
                 'poison','puffy','rounded','runyc','script','shadow','slscript','small','speed','standard','starwars','straight','twopoint','','weird']
        '''
        fonts = ['doom']
        bannerTortazo = Figlet(font=random.choice(fonts))
        print bannerTortazo.renderText('Tortazo v %s.%s' %(tortazoConfiguration.tortazo_majorversion,tortazoConfiguration.tortazo_minorversion) )

        bannerAuthor = Figlet(font='digital')
        print bannerAuthor.renderText('Developed by: Adastra ' )
        print bannerAuthor.renderText('@jdaanial \n' )

        
        self.logger = log
        self.exitNodes = []

        #Configure the Executor to use the "command" pattern. Check: https://en.wikipedia.org/wiki/Command_pattern
        self.tortazoExecutor = TortazoExecutor(log)

        self.tortazoExecutor.controllerPort.setValue(self.controllerPort)
        self.tortazoExecutor.singleSwitches.append(self.tortazoExecutor.controllerPort)
        
        self.tortazoExecutor.scanArguments.setValue(self.scanArguments)
        self.tortazoExecutor.singleSwitches.append(self.tortazoExecutor.scanArguments)
            
        self.tortazoExecutor.listScanPorts.setValue(self.scanPorts)
        self.tortazoExecutor.singleSwitches.append(self.tortazoExecutor.listScanPorts)

        if self.verbose:
            #Enabling the switch "-v/--verbose"
            self.tortazoExecutor.activatedSwitches.append(self.tortazoExecutor.verbose)

        if self.useMirror:
            #Trying to connect to the mirrors of the authorities.
            self.tortazoExecutor.useMirrors.setValue(True)
            self.tortazoExecutor.singleSwitches.append(self.tortazoExecutor.useMirrors)


        if self.cleanDatabase:
            #Enabling the switch "-C/--clean-database"
            self.tortazoExecutor.cleanDatabase.setValue(True)
            self.tortazoExecutor.activatedSwitches.append(self.tortazoExecutor.cleanDatabase)

        if self.listPlugins:
            #Listing the available plugins in the system.
            self.tortazoExecutor.activatedSwitches.append(self.tortazoExecutor.listPlugins)

        if self.torLocalInstance:
            #Sets the value
            self.tortazoExecutor.torLocalInstance.setValue(self.torLocalInstance)
            self.tortazoExecutor.activatedSwitches.append(self.tortazoExecutor.torLocalInstance)

        if self.activateOnionRepositoryMode != None:
            
            self.tortazoExecutor.workerThreadsRepository.setValue(self.workerThreads)
            self.tortazoExecutor.singleSwitches.append(self.tortazoExecutor.workerThreadsRepository)
                
            self.tortazoExecutor.validCharsRepository.setValue(self.validchars)  
            self.tortazoExecutor.singleSwitches.append(self.tortazoExecutor.validCharsRepository)
            
            #Sets the partial address or RANDOM keyword
            self.tortazoExecutor.onionPartialAddress.setValue(self.onionRepositoryMode)
            self.tortazoExecutor.singleSwitches.append(self.tortazoExecutor.onionPartialAddress)
                
                
            #Sets the service type to attack.
            self.tortazoExecutor.onionRepositoryMode.setValue(self.activateOnionRepositoryMode)
            
            #Appends the onion repository mode to the execution plan.
            self.tortazoExecutor.activatedSwitches.append(self.tortazoExecutor.onionRepositoryMode)
            
        if self.zombieMode:
            '''
            In zombie mode, The program should read the file named "tortazo_botnet.bot".
            In that file, every line have this format: host:user:password:nickname
            Extract every host and then, create a list of bots.
            '''
            #Create a botnet object and pass it to the executor.
            self.tortazoExecutor.zombieMode.setValue( BotNet(self) )
            self.tortazoExecutor.activatedSwitches.append(self.tortazoExecutor.zombieMode)


        else:
            #Sets the number of relays to analize entered by the user.
            if self.excludeFingerprints != None:
                self.tortazoExecutor.excludeFingerprints.setValue(self.excludeFingerprints)
                self.tortazoExecutor.singleSwitches.append(self.tortazoExecutor.excludeFingerprints)
            
            if self.exitNodeFingerprint != None:
                self.tortazoExecutor.exitNodeFingerprint.setValue(self.exitNodeFingerprint) 
                self.tortazoExecutor.singleSwitches.append(self.tortazoExecutor.exitNodeFingerprint)

            self.tortazoExecutor.serversToAttack.setValue(self.exitNodesToAttack)
            self.tortazoExecutor.singleSwitches.append(self.tortazoExecutor.serversToAttack)

            if self.useDatabase:
                self.tortazoExecutor.scanIdentifier.setValue(self.scanIdentifier)
                self.tortazoExecutor.activatedSwitches.append(self.tortazoExecutor.useDatabase)

            else:
                if self.useCircuitExitNodes:
                    self.tortazoExecutor.activatedSwitches.append(self.tortazoExecutor.useCircuitExitNodes)                    
                elif self.mode:
                    #Try to connect with the TOR directories to get information about the relays in the server descriptors.
                    self.tortazoExecutor.mode.setValue(self.mode)
                    self.tortazoExecutor.activatedSwitches.append(self.tortazoExecutor.mode)

            if self.generateSimpleReport:
                self.tortazoExecutor.activatedSwitches.append(self.tortazoExecutor.generateSimpleReport)

            if self.useShodan:
                 #Using Shodan to search information about this machine in shodan database.
                 self.tortazoExecutor.shodanKey.setValue(self.shodanKey)
                 self.tortazoExecutor.activatedSwitches.append(self.tortazoExecutor.useShodan)

            #Check if there's any plugin to execute!
            if self.pluginManagement != None:
                self.tortazoExecutor.usePlugin.setValue(self.pluginManagement)
                self.tortazoExecutor.activatedSwitches.append(self.tortazoExecutor.usePlugin)  
                self.tortazoExecutor.pluginArguments.setValue(self.pluginArguments)
        self.tortazoExecutor.run()

if __name__ == "__main__":
    '''
    Start the main program.
    '''
    try:
        Cli.run()
    except AttributeError:
        print "[-] Invalid usage. Please, type the switch '--help'"
        import sys
        print sys.exc_info()